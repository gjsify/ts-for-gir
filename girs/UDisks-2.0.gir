<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="udisks2"/>
  <c:include name="udisks/udisks.h"/>
  <namespace name="UDisks"
             version="2.0"
             shared-library="libudisks2.so.0"
             c:identifier-prefixes="UDisks"
             c:symbol-prefixes="udisks">
    <function-macro name="BLOCK"
                    c:identifier="UDISKS_BLOCK"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2447"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_GET_IFACE"
                    c:identifier="UDISKS_BLOCK_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2449"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2"
                    c:identifier="UDISKS_BLOCK_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7367"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_GET_IFACE"
                    c:identifier="UDISKS_BLOCK_LVM2_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7369"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7402"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7403"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7472"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7473"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7474"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY"
                    c:identifier="UDISKS_BLOCK_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2953"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY_CLASS"
                    c:identifier="UDISKS_BLOCK_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2954"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2955"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON"
                    c:identifier="UDISKS_BLOCK_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3023"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON_CLASS"
                    c:identifier="UDISKS_BLOCK_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3024"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3025"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Block"
               c:symbol-prefix="block"
               c:type="UDisksBlock"
               glib:type-name="UDisksBlock"
               glib:get-type="udisks_block_get_type"
               glib:type-struct="BlockIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24730">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2570"/>
      <function name="interface_info"
                c:identifier="udisks_block_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24544">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2578"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24549">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_block_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24557">Overrides all #GObject properties in the #UDisksBlock interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2579"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24565">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24559">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24560">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_configuration"
                      invoker="get_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25990">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2513"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26000">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25992">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_crypto_backing_device"
                      invoker="get_crypto_backing_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26043">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_crypto_backing_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2515"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26053">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26045">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device"
                      invoker="get_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25255">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2517"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25265">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25257">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device_number"
                      invoker="get_device_number"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25422">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25416">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_drive" invoker="get_drive" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25566">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_drive() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2521"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25576">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25568">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_auto"
                      invoker="get_hint_auto"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26195">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2523"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26203">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26197">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_icon_name"
                      invoker="get_hint_icon_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26281">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2525"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26291">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26283">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_ignore"
                      invoker="get_hint_ignore"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26162">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2527"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26170">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26164">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_name"
                      invoker="get_hint_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26228">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2529"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26238">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26230">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_partitionable"
                      invoker="get_hint_partitionable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26096">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2531"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26104">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26098">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_symbolic_icon_name"
                      invoker="get_hint_symbolic_icon_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26334">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_symbolic_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2533"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26344">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26336">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_system"
                      invoker="get_hint_system"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26129">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2535"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26137">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26131">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25447">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2537"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25457">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25449">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_label"
                      invoker="get_id_label"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25884">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2539"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25894">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25886">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_type"
                      invoker="get_id_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25778">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2541"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25788">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25780">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_usage"
                      invoker="get_id_usage"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25725">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_usage() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2543"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25735">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25727">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_uuid"
                      invoker="get_id_uuid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25937">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2545"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25947">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25939">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_version"
                      invoker="get_id_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25831">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2547"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25841">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25833">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mdraid"
                      invoker="get_mdraid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25619">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2549"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25629">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25621">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mdraid_member"
                      invoker="get_mdraid_member"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25672">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid_member() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2551"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25682">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25674">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_preferred_device"
                      invoker="get_preferred_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25308">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_preferred_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2553"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25318">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25310">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_only"
                      invoker="get_read_only"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25533">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2555"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25541">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25535">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25500">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2557"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25508">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25502">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_symlinks"
                      invoker="get_symlinks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25361">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_symlinks() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2559"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25371">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25363">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_userspace_mount_options"
                      invoker="get_userspace_mount_options"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26387">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_userspace_mount_options() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2561"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26397">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26389">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_configuration_item">
        <source-position filename="udisks-generated.h" line="2460"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_format">
        <source-position filename="udisks-generated.h" line="2466"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_secret_configuration">
        <source-position filename="udisks-generated.h" line="2472"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_device">
        <source-position filename="udisks-generated.h" line="2563"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_backup">
        <source-position filename="udisks-generated.h" line="2477"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_benchmark">
        <source-position filename="udisks-generated.h" line="2483"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_restore">
        <source-position filename="udisks-generated.h" line="2489"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_configuration_item">
        <source-position filename="udisks-generated.h" line="2495"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rescan">
        <source-position filename="udisks-generated.h" line="2501"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_update_configuration_item">
        <source-position filename="udisks-generated.h" line="2506"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_configuration_item"
              c:identifier="udisks_block_call_add_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26440">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_add_configuration_item_finish() to get the result of the operation.

See udisks_block_call_add_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2635"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26442">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26443">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26444">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26445">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26446">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26447">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_configuration_item_finish"
              c:identifier="udisks_block_call_add_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26476">Finishes an operation started with udisks_block_call_add_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="2643"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26484">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26478">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26479">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_add_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_configuration_item_sync"
              c:identifier="udisks_block_call_add_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26503">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_add_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2648"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26515">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26505">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26506">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26507">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26508">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format" c:identifier="udisks_block_call_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26862">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_format_finish() to get the result of the operation.

See udisks_block_call_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2717"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26864">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26865">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26866">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26867">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26868">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26869">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_finish"
              c:identifier="udisks_block_call_format_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26898">Finishes an operation started with udisks_block_call_format().</doc>
        <source-position filename="udisks-generated.h" line="2725"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26906">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26900">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26901">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_sync"
              c:identifier="udisks_block_call_format_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26925">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2730"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26937">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26927">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26928">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26929">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26930">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration"
              c:identifier="udisks_block_call_get_secret_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26758">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_get_secret_configuration_finish() to get the result of the operation.

See udisks_block_call_get_secret_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2697"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26760">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26761">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26762">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26763">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26764">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration_finish"
              c:identifier="udisks_block_call_get_secret_configuration_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26791">Finishes an operation started with udisks_block_call_get_secret_configuration().</doc>
        <source-position filename="udisks-generated.h" line="2704"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26800">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26793">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_configuration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26794">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26795">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_get_secret_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration_sync"
              c:identifier="udisks_block_call_get_secret_configuration_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26821">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_get_secret_configuration() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2710"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26833">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26823">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26824">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_configuration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26825">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26826">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device"
              c:identifier="udisks_block_call_open_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27311">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_device_finish() to get the result of the operation.

See udisks_block_call_open_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2809"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27313">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27314">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27315">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27316">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27317">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27318">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27319">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device_finish"
              c:identifier="udisks_block_call_open_device_finish"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27352">Finishes an operation started with udisks_block_call_open_device().</doc>
        <source-position filename="udisks-generated.h" line="2818"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27362">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27354">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27355">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27356">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27357">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device_sync"
              c:identifier="udisks_block_call_open_device_sync"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27386">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2825"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27401">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27388">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27389">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27390">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27391">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27392">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27393">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27394">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup"
              c:identifier="udisks_block_call_open_for_backup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26966">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_backup_finish() to get the result of the operation.

See udisks_block_call_open_for_backup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2737"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26968">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26969">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26970">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26971">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26972">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26973">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup_finish"
              c:identifier="udisks_block_call_open_for_backup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27002">Finishes an operation started with udisks_block_call_open_for_backup().</doc>
        <source-position filename="udisks-generated.h" line="2745"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27012">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27004">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27005">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27006">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27007">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_backup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup_sync"
              c:identifier="udisks_block_call_open_for_backup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27034">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_backup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2752"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27048">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27036">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27037">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27038">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27039">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27040">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27041">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark"
              c:identifier="udisks_block_call_open_for_benchmark">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27196">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_benchmark_finish() to get the result of the operation.

See udisks_block_call_open_for_benchmark_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2785"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27198">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27199">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27200">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27201">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27202">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27203">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark_finish"
              c:identifier="udisks_block_call_open_for_benchmark_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27232">Finishes an operation started with udisks_block_call_open_for_benchmark().</doc>
        <source-position filename="udisks-generated.h" line="2793"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27242">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27234">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27235">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27236">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27237">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_benchmark().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark_sync"
              c:identifier="udisks_block_call_open_for_benchmark_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27264">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_benchmark() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2800"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27278">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27266">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27267">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27268">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27269">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27270">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27271">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore"
              c:identifier="udisks_block_call_open_for_restore">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27081">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_restore_finish() to get the result of the operation.

See udisks_block_call_open_for_restore_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2761"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27083">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27084">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27085">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27086">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27087">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27088">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore_finish"
              c:identifier="udisks_block_call_open_for_restore_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27117">Finishes an operation started with udisks_block_call_open_for_restore().</doc>
        <source-position filename="udisks-generated.h" line="2769"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27127">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27119">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27120">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27121">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27122">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_restore().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore_sync"
              c:identifier="udisks_block_call_open_for_restore_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27149">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_restore() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2776"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27163">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27151">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27152">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27153">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27154">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27155">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27156">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item"
              c:identifier="udisks_block_call_remove_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26544">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_remove_configuration_item_finish() to get the result of the operation.

See udisks_block_call_remove_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2655"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26546">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26547">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26548">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26549">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26550">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26551">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item_finish"
              c:identifier="udisks_block_call_remove_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26580">Finishes an operation started with udisks_block_call_remove_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="2663"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26588">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26582">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26583">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_remove_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item_sync"
              c:identifier="udisks_block_call_remove_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26607">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_remove_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2668"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26619">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26609">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26610">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26611">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26612">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan" c:identifier="udisks_block_call_rescan">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27438">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_rescan_finish() to get the result of the operation.

See udisks_block_call_rescan_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2835"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27440">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27441">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27442">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27443">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27444">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan_finish"
              c:identifier="udisks_block_call_rescan_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27471">Finishes an operation started with udisks_block_call_rescan().</doc>
        <source-position filename="udisks-generated.h" line="2842"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27479">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27473">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27474">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_rescan().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan_sync"
              c:identifier="udisks_block_call_rescan_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27498">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_rescan() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2847"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27509">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27500">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27501">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27502">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item"
              c:identifier="udisks_block_call_update_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26648">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_update_configuration_item_finish() to get the result of the operation.

See udisks_block_call_update_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2675"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26650">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26651">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26652">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26653">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26654">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26655">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26656">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item_finish"
              c:identifier="udisks_block_call_update_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26687">Finishes an operation started with udisks_block_call_update_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="2684"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26695">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26689">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26690">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_update_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item_sync"
              c:identifier="udisks_block_call_update_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26714">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_update_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2689"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26727">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26716">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26717">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26718">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26719">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26720">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_configuration_item"
              c:identifier="udisks_block_complete_add_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27536">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2583"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27538">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27539">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_format"
              c:identifier="udisks_block_complete_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27611">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2600"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27613">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27614">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_secret_configuration"
              c:identifier="udisks_block_complete_get_secret_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27590">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2595"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27592">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27593">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="configuration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27594">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_device"
              c:identifier="udisks_block_complete_open_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27701">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2622"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27703">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27704">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27705">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27706">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_backup"
              c:identifier="udisks_block_complete_open_for_backup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27629">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2604"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27631">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27632">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27633">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27634">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_benchmark"
              c:identifier="udisks_block_complete_open_for_benchmark">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27677">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2616"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27679">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27680">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27681">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27682">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_restore"
              c:identifier="udisks_block_complete_open_for_restore">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27653">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2610"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27655">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27656">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27657">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27658">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_configuration_item"
              c:identifier="udisks_block_complete_remove_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27554">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2587"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27556">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27557">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rescan"
              c:identifier="udisks_block_complete_rescan">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27727">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27729">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27730">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_update_configuration_item"
              c:identifier="udisks_block_complete_update_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27572">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2591"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27574">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27575">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_configuration"
              c:identifier="udisks_block_dup_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26010">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2914"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26018">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26012">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_crypto_backing_device"
              c:identifier="udisks_block_dup_crypto_backing_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26063">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2918"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26071">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26065">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_device"
              c:identifier="udisks_block_dup_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25275">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2857"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25283">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25277">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_drive"
              c:identifier="udisks_block_dup_drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25586">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2882"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25594">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25588">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_icon_name"
              c:identifier="udisks_block_dup_hint_icon_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26301">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2938"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26309">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26303">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_name"
              c:identifier="udisks_block_dup_hint_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26248">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2934"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26256">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26250">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_symbolic_icon_name"
              c:identifier="udisks_block_dup_hint_symbolic_icon_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26354">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2942"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26362">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26356">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="udisks_block_dup_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25467">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2872"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25475">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25469">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_label"
              c:identifier="udisks_block_dup_id_label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25904">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2906"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25912">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25906">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_type"
              c:identifier="udisks_block_dup_id_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25798">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2898"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25806">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25800">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_usage"
              c:identifier="udisks_block_dup_id_usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25745">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2894"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25753">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25747">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_uuid"
              c:identifier="udisks_block_dup_id_uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25957">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2910"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25965">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25959">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_version"
              c:identifier="udisks_block_dup_id_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25851">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2902"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25859">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25853">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_mdraid"
              c:identifier="udisks_block_dup_mdraid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25639">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2886"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25647">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25641">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_mdraid_member"
              c:identifier="udisks_block_dup_mdraid_member"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25692">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2890"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25700">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25694">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_preferred_device"
              c:identifier="udisks_block_dup_preferred_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25328">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2861"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25336">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25330">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_symlinks"
              c:identifier="udisks_block_dup_symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25381">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2865"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25389">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25383">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_userspace_mount_options"
              c:identifier="udisks_block_dup_userspace_mount_options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26407">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2946"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26415">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26409">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="udisks_block_get_configuration"
              glib:get-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25990">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2913"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26000">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25992">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crypto_backing_device"
              c:identifier="udisks_block_get_crypto_backing_device"
              glib:get-property="crypto-backing-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26043">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_crypto_backing_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2917"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26053">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26045">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device"
              c:identifier="udisks_block_get_device"
              glib:get-property="device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25255">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2856"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25265">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25257">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_number"
              c:identifier="udisks_block_get_device_number"
              glib:get-property="device-number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2868"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25422">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25416">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive"
              c:identifier="udisks_block_get_drive"
              glib:get-property="drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25566">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_drive() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2881"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25576">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25568">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_auto"
              c:identifier="udisks_block_get_hint_auto"
              glib:get-property="hint-auto"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26195">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2930"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26203">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26197">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_icon_name"
              c:identifier="udisks_block_get_hint_icon_name"
              glib:get-property="hint-icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26281">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2937"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26291">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26283">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_ignore"
              c:identifier="udisks_block_get_hint_ignore"
              glib:get-property="hint-ignore"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26162">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2927"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26170">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26164">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_name"
              c:identifier="udisks_block_get_hint_name"
              glib:get-property="hint-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26228">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2933"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26238">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26230">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_partitionable"
              c:identifier="udisks_block_get_hint_partitionable"
              glib:get-property="hint-partitionable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26096">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2921"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26104">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26098">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_symbolic_icon_name"
              c:identifier="udisks_block_get_hint_symbolic_icon_name"
              glib:get-property="hint-symbolic-icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26334">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_symbolic_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2941"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26344">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26336">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_system"
              c:identifier="udisks_block_get_hint_system"
              glib:get-property="hint-system"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26129">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2924"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26137">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26131">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="udisks_block_get_id"
              glib:get-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25447">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2871"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25457">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25449">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_label"
              c:identifier="udisks_block_get_id_label"
              glib:get-property="id-label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25884">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2905"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25894">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25886">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_type"
              c:identifier="udisks_block_get_id_type"
              glib:get-property="id-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25778">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2897"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25788">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25780">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_usage"
              c:identifier="udisks_block_get_id_usage"
              glib:get-property="id-usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25725">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_usage() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2893"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25735">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25727">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_uuid"
              c:identifier="udisks_block_get_id_uuid"
              glib:get-property="id-uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25937">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2909"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25947">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25939">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_version"
              c:identifier="udisks_block_get_id_version"
              glib:get-property="id-version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25831">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2901"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25841">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25833">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid"
              c:identifier="udisks_block_get_mdraid"
              glib:get-property="mdraid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25619">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2885"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25629">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25621">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid_member"
              c:identifier="udisks_block_get_mdraid_member"
              glib:get-property="mdraid-member"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25672">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid_member() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2889"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25682">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25674">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_device"
              c:identifier="udisks_block_get_preferred_device"
              glib:get-property="preferred-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25308">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_preferred_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2860"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25318">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25310">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_only"
              c:identifier="udisks_block_get_read_only"
              glib:get-property="read-only"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25533">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2878"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25541">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25535">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_block_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25500">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2875"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25508">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25502">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symlinks"
              c:identifier="udisks_block_get_symlinks"
              glib:get-property="symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25361">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_symlinks() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2864"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25371">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25363">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_userspace_mount_options"
              c:identifier="udisks_block_get_userspace_mount_options"
              glib:get-property="userspace-mount-options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26387">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_userspace_mount_options() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2945"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26397">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26389">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_configuration"
              c:identifier="udisks_block_set_configuration"
              glib:set-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26028">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2915"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26030">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26031">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_crypto_backing_device"
              c:identifier="udisks_block_set_crypto_backing_device"
              glib:set-property="crypto-backing-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26081">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2919"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26083">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26084">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device"
              c:identifier="udisks_block_set_device"
              glib:set-property="device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25293">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2858"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25295">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25296">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_number"
              c:identifier="udisks_block_set_device_number"
              glib:set-property="device-number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25432">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2869"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25434">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25435">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive"
              c:identifier="udisks_block_set_drive"
              glib:set-property="drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25604">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2883"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25606">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25607">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_auto"
              c:identifier="udisks_block_set_hint_auto"
              glib:set-property="hint-auto"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26213">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2931"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26215">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26216">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_icon_name"
              c:identifier="udisks_block_set_hint_icon_name"
              glib:set-property="hint-icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26319">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2939"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26321">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26322">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_ignore"
              c:identifier="udisks_block_set_hint_ignore"
              glib:set-property="hint-ignore"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26180">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2928"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26182">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26183">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_name"
              c:identifier="udisks_block_set_hint_name"
              glib:set-property="hint-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26266">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2935"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26268">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26269">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_partitionable"
              c:identifier="udisks_block_set_hint_partitionable"
              glib:set-property="hint-partitionable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26114">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2922"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26116">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26117">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_symbolic_icon_name"
              c:identifier="udisks_block_set_hint_symbolic_icon_name"
              glib:set-property="hint-symbolic-icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26372">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2943"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26374">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26375">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_system"
              c:identifier="udisks_block_set_hint_system"
              glib:set-property="hint-system"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26147">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2925"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26149">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26150">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="udisks_block_set_id"
              glib:set-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25485">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2873"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25487">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25488">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_label"
              c:identifier="udisks_block_set_id_label"
              glib:set-property="id-label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25922">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2907"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25924">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25925">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_type"
              c:identifier="udisks_block_set_id_type"
              glib:set-property="id-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25816">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2899"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25818">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25819">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_usage"
              c:identifier="udisks_block_set_id_usage"
              glib:set-property="id-usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25763">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2895"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25765">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25766">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_uuid"
              c:identifier="udisks_block_set_id_uuid"
              glib:set-property="id-uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25975">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2911"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25977">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25978">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_version"
              c:identifier="udisks_block_set_id_version"
              glib:set-property="id-version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25869">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2903"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25871">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25872">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid"
              c:identifier="udisks_block_set_mdraid"
              glib:set-property="mdraid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25657">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2887"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25659">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25660">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid_member"
              c:identifier="udisks_block_set_mdraid_member"
              glib:set-property="mdraid-member"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25710">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2891"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25712">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25713">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preferred_device"
              c:identifier="udisks_block_set_preferred_device"
              glib:set-property="preferred-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25346">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2862"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25348">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25349">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_only"
              c:identifier="udisks_block_set_read_only"
              glib:set-property="read-only"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25551">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2879"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25553">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25554">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_block_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25518">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2876"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25520">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25521">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_symlinks"
              c:identifier="udisks_block_set_symlinks"
              glib:set-property="symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25399">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2866"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25401">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25402">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_userspace_mount_options"
              c:identifier="udisks_block_set_userspace_mount_options"
              glib:set-property="userspace-mount-options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26425">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2947"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26427">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26428">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_configuration"
                getter="get_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25163">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="crypto-backing-device"
                writable="1"
                transfer-ownership="none"
                setter="set_crypto_backing_device"
                getter="get_crypto_backing_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25172">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device"
                writable="1"
                transfer-ownership="none"
                setter="set_device"
                getter="get_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25028">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device-number"
                writable="1"
                transfer-ownership="none"
                setter="set_device_number"
                getter="get_device_number"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25055">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="drive"
                writable="1"
                transfer-ownership="none"
                setter="set_drive"
                getter="get_drive"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25091">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-auto"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_auto"
                getter="get_hint_auto"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25208">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_icon_name"
                getter="get_hint_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25226">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-ignore"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_ignore"
                getter="get_hint_ignore"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25199">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-name"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_name"
                getter="get_hint_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25217">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-partitionable"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_partitionable"
                getter="get_hint_partitionable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25181">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-symbolic-icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_symbolic_icon_name"
                getter="get_hint_symbolic_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25235">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-system"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_system"
                getter="get_hint_system"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25190">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25064">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-label"
                writable="1"
                transfer-ownership="none"
                setter="set_id_label"
                getter="get_id_label"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25145">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-type"
                writable="1"
                transfer-ownership="none"
                setter="set_id_type"
                getter="get_id_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25127">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-usage"
                writable="1"
                transfer-ownership="none"
                setter="set_id_usage"
                getter="get_id_usage"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25118">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-uuid"
                writable="1"
                transfer-ownership="none"
                setter="set_id_uuid"
                getter="get_id_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25154">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-version"
                writable="1"
                transfer-ownership="none"
                setter="set_id_version"
                getter="get_id_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25136">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdraid"
                writable="1"
                transfer-ownership="none"
                setter="set_mdraid"
                getter="get_mdraid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25100">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdraid-member"
                writable="1"
                transfer-ownership="none"
                setter="set_mdraid_member"
                getter="get_mdraid_member"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25109">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="preferred-device"
                writable="1"
                transfer-ownership="none"
                setter="set_preferred_device"
                getter="get_preferred_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25037">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="read-only"
                writable="1"
                transfer-ownership="none"
                setter="set_read_only"
                getter="get_read_only"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25082">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25073">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="symlinks"
                writable="1"
                transfer-ownership="none"
                setter="set_symlinks"
                getter="get_symlinks">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25046">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="userspace-mount-options"
                writable="1"
                transfer-ownership="none"
                setter="set_userspace_mount_options"
                getter="get_userspace_mount_options">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25244">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <glib:signal name="handle-add-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24785">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_add_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24796">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24788">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24789">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24790">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-format" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24881">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24892">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24884">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24885">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24886">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-secret-configuration" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24858">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_get_secret_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24868">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24861">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24862">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-device" when="last" version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24977">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24989">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24980">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24981">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24982">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24983">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-backup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24905">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_backup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24916">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24908">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24909">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24910">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-benchmark" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24953">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_benchmark() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24964">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24956">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24957">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24958">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-restore" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24929">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_restore() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24940">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24932">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24933">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24934">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24809">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_remove_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24820">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24812">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24813">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24814">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rescan" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25004">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_rescan() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25014">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25007">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25008">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-update-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24833">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_update_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24845">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24836">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24837">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24838">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24839">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="BlockIface"
            c:type="UDisksBlockIface"
            glib:is-gtype-struct-for="Block">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24736">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2570"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24738">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_configuration_item">
        <callback name="handle_add_configuration_item">
          <source-position filename="udisks-generated.h" line="2460"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_format">
        <callback name="handle_format">
          <source-position filename="udisks-generated.h" line="2466"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_secret_configuration">
        <callback name="handle_get_secret_configuration">
          <source-position filename="udisks-generated.h" line="2472"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_backup">
        <callback name="handle_open_for_backup">
          <source-position filename="udisks-generated.h" line="2477"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_benchmark">
        <callback name="handle_open_for_benchmark">
          <source-position filename="udisks-generated.h" line="2483"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_restore">
        <callback name="handle_open_for_restore">
          <source-position filename="udisks-generated.h" line="2489"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_configuration_item">
        <callback name="handle_remove_configuration_item">
          <source-position filename="udisks-generated.h" line="2495"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rescan">
        <callback name="handle_rescan">
          <source-position filename="udisks-generated.h" line="2501"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_update_configuration_item">
        <callback name="handle_update_configuration_item">
          <source-position filename="udisks-generated.h" line="2506"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_old_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_new_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <source-position filename="udisks-generated.h" line="2513"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26000">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25992">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_crypto_backing_device">
        <callback name="get_crypto_backing_device">
          <source-position filename="udisks-generated.h" line="2515"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26053">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26045">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device">
        <callback name="get_device">
          <source-position filename="udisks-generated.h" line="2517"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25265">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25257">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device_number">
        <callback name="get_device_number">
          <source-position filename="udisks-generated.h" line="2519"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25422">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25416">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_drive">
        <callback name="get_drive">
          <source-position filename="udisks-generated.h" line="2521"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25576">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25568">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_auto">
        <callback name="get_hint_auto">
          <source-position filename="udisks-generated.h" line="2523"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26203">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26197">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_icon_name">
        <callback name="get_hint_icon_name">
          <source-position filename="udisks-generated.h" line="2525"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26291">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26283">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_ignore">
        <callback name="get_hint_ignore">
          <source-position filename="udisks-generated.h" line="2527"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26170">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26164">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_name">
        <callback name="get_hint_name">
          <source-position filename="udisks-generated.h" line="2529"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26238">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26230">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_partitionable">
        <callback name="get_hint_partitionable">
          <source-position filename="udisks-generated.h" line="2531"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26104">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26098">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_symbolic_icon_name">
        <callback name="get_hint_symbolic_icon_name">
          <source-position filename="udisks-generated.h" line="2533"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26344">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26336">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_system">
        <callback name="get_hint_system">
          <source-position filename="udisks-generated.h" line="2535"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26137">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26131">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <source-position filename="udisks-generated.h" line="2537"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25457">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25449">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_label">
        <callback name="get_id_label">
          <source-position filename="udisks-generated.h" line="2539"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25894">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25886">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_type">
        <callback name="get_id_type">
          <source-position filename="udisks-generated.h" line="2541"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25788">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25780">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_usage">
        <callback name="get_id_usage">
          <source-position filename="udisks-generated.h" line="2543"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25735">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25727">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_uuid">
        <callback name="get_id_uuid">
          <source-position filename="udisks-generated.h" line="2545"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25947">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25939">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_version">
        <callback name="get_id_version">
          <source-position filename="udisks-generated.h" line="2547"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25841">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25833">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mdraid">
        <callback name="get_mdraid">
          <source-position filename="udisks-generated.h" line="2549"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25629">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25621">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mdraid_member">
        <callback name="get_mdraid_member">
          <source-position filename="udisks-generated.h" line="2551"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25682">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25674">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_preferred_device">
        <callback name="get_preferred_device">
          <source-position filename="udisks-generated.h" line="2553"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25318">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25310">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_only">
        <callback name="get_read_only">
          <source-position filename="udisks-generated.h" line="2555"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25541">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25535">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="2557"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25508">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25502">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_symlinks">
        <callback name="get_symlinks">
          <source-position filename="udisks-generated.h" line="2559"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25371">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25363">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_userspace_mount_options">
        <callback name="get_userspace_mount_options">
          <source-position filename="udisks-generated.h" line="2561"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26397">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26389">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_device">
        <callback name="handle_open_device">
          <source-position filename="udisks-generated.h" line="2563"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_mode" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="BlockLVM2"
               c:symbol-prefix="block_lvm2"
               c:type="UDisksBlockLVM2"
               version="2.0.0"
               glib:type-name="UDisksBlockLVM2"
               glib:get-type="udisks_block_lvm2_get_type"
               glib:type-struct="BlockLVM2Iface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62955">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7381"/>
      <function name="interface_info"
                c:identifier="udisks_block_lvm2_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62919">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="7389"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62924">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_block_lvm2_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62934">Overrides all #GObject properties in the #UDisksBlockLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="7390"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62942">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62936">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62937">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_logical_volume"
                      invoker="get_logical_volume"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62993">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_lvm2_dup_logical_volume() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7379"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63003">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62995">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_logical_volume"
              c:identifier="udisks_block_lvm2_dup_logical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63015">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7395"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63023">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63017">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_volume"
              c:identifier="udisks_block_lvm2_get_logical_volume"
              glib:get-property="logical-volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62993">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_lvm2_dup_logical_volume() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7394"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63003">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62995">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_logical_volume"
              c:identifier="udisks_block_lvm2_set_logical_volume"
              glib:set-property="logical-volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63035">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="7396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63037">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63038">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="logical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_logical_volume"
                getter="get_logical_volume"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62980">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="BlockLVM2Iface"
            c:type="UDisksBlockLVM2Iface"
            glib:is-gtype-struct-for="BlockLVM2"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62963">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7381"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62965">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_logical_volume">
        <callback name="get_logical_volume">
          <source-position filename="udisks-generated.h" line="7379"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63003">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="62995">A #UDisksBlockLVM2.</doc>
              <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="BlockLVM2Proxy"
           c:symbol-prefix="block_lvm2_proxy"
           c:type="UDisksBlockLVM2Proxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksBlockLVM2Proxy"
           glib:get-type="udisks_block_lvm2_proxy_get_type"
           glib:type-struct="BlockLVM2ProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63054">The #UDisksBlockLVM2Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7422"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="BlockLVM2"/>
      <constructor name="new_finish"
                   c:identifier="udisks_block_lvm2_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63320">Finishes an operation started with udisks_block_lvm2_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="7438"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63327">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63322">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_lvm2_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_block_lvm2_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63416">Finishes an operation started with udisks_block_lvm2_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="7457"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63423">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63418">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_lvm2_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_block_lvm2_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63443">Like udisks_block_lvm2_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_block_lvm2_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7460"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63458">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63445">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63446">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63447">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63448">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63449">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_block_lvm2_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63347">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_block_lvm2_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7441"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63362">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63349">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63350">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63351">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63352">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63353">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_block_lvm2_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63288">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_lvm2_proxy_new_finish() to get the result of the operation.

See udisks_block_lvm2_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7430"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63290">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63291">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63292">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63293">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63294">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63295">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63296">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_block_lvm2_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63384">Like udisks_block_lvm2_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_lvm2_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_block_lvm2_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63386">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63387">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63388">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63389">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63390">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63391">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63392">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockLVM2ProxyPrivate"
              c:type="UDisksBlockLVM2ProxyPrivate*"/>
      </field>
    </class>
    <record name="BlockLVM2ProxyClass"
            c:type="UDisksBlockLVM2ProxyClass"
            glib:is-gtype-struct-for="BlockLVM2Proxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63062">Class structure for #UDisksBlockLVM2Proxy.</doc>
      <source-position filename="udisks-generated.h" line="7422"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63064">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="BlockLVM2ProxyPrivate"
            c:type="UDisksBlockLVM2ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7410"/>
    </record>
    <class name="BlockLVM2Skeleton"
           c:symbol-prefix="block_lvm2_skeleton"
           c:type="UDisksBlockLVM2Skeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksBlockLVM2Skeleton"
           glib:get-type="udisks_block_lvm2_skeleton_get_type"
           glib:type-struct="BlockLVM2SkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63482">The #UDisksBlockLVM2Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7492"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="BlockLVM2"/>
      <constructor name="new"
                   c:identifier="udisks_block_lvm2_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63939">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="7500"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63944">The skeleton object.</doc>
          <type name="BlockLVM2Skeleton" c:type="UDisksBlockLVM2*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockLVM2SkeletonPrivate"
              c:type="UDisksBlockLVM2SkeletonPrivate*"/>
      </field>
    </class>
    <record name="BlockLVM2SkeletonClass"
            c:type="UDisksBlockLVM2SkeletonClass"
            glib:is-gtype-struct-for="BlockLVM2Skeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63490">Class structure for #UDisksBlockLVM2Skeleton.</doc>
      <source-position filename="udisks-generated.h" line="7492"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63492">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="BlockLVM2SkeletonPrivate"
            c:type="UDisksBlockLVM2SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7480"/>
    </record>
    <class name="BlockProxy"
           c:symbol-prefix="block_proxy"
           c:type="UDisksBlockProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksBlockProxy"
           glib:get-type="udisks_block_proxy_get_type"
           glib:type-struct="BlockProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="27747">The #UDisksBlockProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2973"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Block"/>
      <constructor name="new_finish"
                   c:identifier="udisks_block_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28397">Finishes an operation started with udisks_block_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2989"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28404">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28399">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_block_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28487">Finishes an operation started with udisks_block_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3008"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28494">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28489">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_block_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28512">Like udisks_block_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_block_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3011"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28527">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28514">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28515">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28516">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28517">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28518">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_block_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28422">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_block_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2992"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28437">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28424">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28425">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28426">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28427">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28428">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_block_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28367">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_proxy_new_finish() to get the result of the operation.

See udisks_block_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2981"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28369">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28370">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28371">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28372">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28373">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28374">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28375">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_block_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28457">Like udisks_block_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_block_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28459">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28460">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28461">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28462">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28463">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28464">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28465">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockProxyPrivate" c:type="UDisksBlockProxyPrivate*"/>
      </field>
    </class>
    <record name="BlockProxyClass"
            c:type="UDisksBlockProxyClass"
            glib:is-gtype-struct-for="BlockProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="27753">Class structure for #UDisksBlockProxy.</doc>
      <source-position filename="udisks-generated.h" line="2973"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27755">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="BlockProxyPrivate"
            c:type="UDisksBlockProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2961"/>
    </record>
    <class name="BlockSkeleton"
           c:symbol-prefix="block_skeleton"
           c:type="UDisksBlockSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksBlockSkeleton"
           glib:get-type="udisks_block_skeleton_get_type"
           glib:type-struct="BlockSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28549">The #UDisksBlockSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3043"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Block"/>
      <constructor name="new" c:identifier="udisks_block_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29314">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3051"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29319">The skeleton object.</doc>
          <type name="BlockSkeleton" c:type="UDisksBlock*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockSkeletonPrivate"
              c:type="UDisksBlockSkeletonPrivate*"/>
      </field>
    </class>
    <record name="BlockSkeletonClass"
            c:type="UDisksBlockSkeletonClass"
            glib:is-gtype-struct-for="BlockSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28555">Class structure for #UDisksBlockSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3043"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28557">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="BlockSkeletonPrivate"
            c:type="UDisksBlockSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3031"/>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="UDISKS_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="53">Macro to check against the version of the libudisks2 library that
is being compiled against.</doc>
      <source-position filename="udisksversion.h" line="65"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="55">The major version to check for.</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="56">the minor version to check for.</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="57">The micro version to check for.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT"
                    c:identifier="UDISKS_CLIENT"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_GET_CLASS"
                    c:identifier="UDISKS_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="UDisksClient"
           parent="GObject.Object"
           glib:type-name="UDisksClient"
           glib:get-type="udisks_client_get_type">
      <doc xml:space="preserve"
           filename="udisksclient.c"
           line="30">#UDisksClient is used for accessing the UDisks service from a
client program.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="393">Finishes an operation started with udisks_client_new().</doc>
        <source-position filename="udisksclient.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="400">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="395">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_connection_finish"
                   c:identifier="udisks_client_new_for_connection_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="410">Finishes an operation started with udisks_client_new_for_connection().</doc>
        <source-position filename="udisksclient.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="417">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="412">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="429">Synchronously gets a #UDisksClient for the local system.</doc>
        <source-position filename="udisksclient.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="436">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="431">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_job_description_from_operation"
                c:identifier="udisks_client_get_job_description_from_operation">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2707">Gets a human-readable and localized text string describing a
a job @operation.

For known job operation types, see the documentation for the
&lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;Job:Operation&lt;/link&gt;
D-Bus property.</doc>
        <source-position filename="udisksclient.h" line="159"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2718">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2709">A job operation name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="udisks_client_new">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="321">Asynchronously gets a #UDisksClient. When the operation is
finished, @callback will be invoked in the &lt;link
linkend="g-main-context-push-thread-default"&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from.</doc>
        <source-position filename="udisksclient.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="323">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="324">Function that will be called when the result is ready.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="325">Data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_connection"
                c:identifier="udisks_client_new_for_connection"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="345">Like #udisks_client_new() but takes a #GDBusConnection which will be used
when connecting to the UDisks daemon over D-Bus. This is useful for unit
tests which may want to use #GTestDBus to create a D-Bus daemon on the
session bus.</doc>
        <source-position filename="udisksclient.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="347">a #GDBusConnection. If %NULL, a system bus
  connection will be used.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="349">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="350">Function that will be called when the result is ready.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="351">Data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_all_blocks_for_mdraid"
              c:identifier="udisks_client_get_all_blocks_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1086">Gets all RAID devices (e.g. &lt;filename&gt;/dev/md0&lt;/filename&gt; and &lt;filename&gt;/dev/md1&lt;/filename&gt;) for @raid.

This is usually only useful in &lt;ulink
url="http://en.wikipedia.org/wiki/Split-brain_(computing)"&gt;split-brain
situations&lt;/ulink&gt; — see udisks_client_get_block_for_mdraid() for
an example — and is normally used only to convey the problem in an
user interface.</doc>
        <source-position filename="udisksclient.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1099">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1088">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1089">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_dev"
              c:identifier="udisks_client_get_block_for_dev">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="776">Gets the #UDisksBlock corresponding to @block_device_number, if any.</doc>
        <source-position filename="udisksclient.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="783">A #UDisksBlock or %NULL if not found.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="778">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block_device_number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="779">A #dev_t to get a #UDisksBlock for.</doc>
            <type name="guint64" c:type="dev_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_drive"
              c:identifier="udisks_client_get_block_for_drive">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="869">Gets a block device corresponding to @drive. The returned block
device, if any, is for the whole disk drive, e.g. a partition block
device is never returned.

Set @get_physical to %TRUE if you need a block device that you can
send low-level SCSI commands with (for multipath, this returns one
of the physical paths). Set it to %FALSE if you need a block device
that you can read/write data with (for multipath, this returns the
mapped device).</doc>
        <source-position filename="udisksclient.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="885">A #UDisksBlock or %NULL if the requested
kind of block device is not available - use g_object_unref() to
free the returned object.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="871">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="872">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
          <parameter name="get_physical" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="873">%TRUE to get a physical device, %FALSE to get the logical device.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_label"
              c:identifier="udisks_client_get_block_for_label">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="685">Gets all the #UDisksBlock instances with the given label, if any.</doc>
        <source-position filename="udisksclient.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="692">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="687">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="688">The label.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_mdraid"
              c:identifier="udisks_client_get_block_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1045">Gets the RAID device (e.g. &lt;filename&gt;/dev/md0&lt;/filename&gt;) for @raid.

In the case of a &lt;ulink
url="http://en.wikipedia.org/wiki/Split-brain_(computing)"&gt;split-brain
syndrome&lt;/ulink&gt;, it is undefined which RAID device is
returned. For example this can happen if
&lt;filename&gt;/dev/sda&lt;/filename&gt; and &lt;filename&gt;/dev/sdb&lt;/filename&gt; are
components of a two-disk RAID-1 and &lt;filename&gt;/dev/md0&lt;/filename&gt;
and &lt;filename&gt;/dev/md1&lt;/filename&gt; are two degraded arrays, each one
using exactly one of the two devices. Use
udisks_client_get_all_blocks_for_mdraid() to get all RAID devices.</doc>
        <source-position filename="udisksclient.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1062">A #UDisksBlock or %NULL if no RAID device is running.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1047">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1048">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_uuid"
              c:identifier="udisks_client_get_block_for_uuid">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="729">Gets all the #UDisksBlock instances with the given uuid, if any.</doc>
        <source-position filename="udisksclient.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="736">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="731">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="732">The uuid.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cleartext_block"
              c:identifier="udisks_client_get_cleartext_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1267">If @block is an unlocked encrypted device, gets the cleartext device.</doc>
        <source-position filename="udisksclient.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1274">A #UDisksBlock or %NULL. Free with
g_object_unref() when done with it.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1269">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1270">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_for_block"
              c:identifier="udisks_client_get_drive_for_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="923">Gets the #UDisksDrive that @block belongs to, if any.</doc>
        <source-position filename="udisksclient.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="930">A #UDisksDrive or %NULL if there is no
#UDisksDrive for @block - free the returned object with
g_object_unref().</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="925">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="926">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_info"
              c:identifier="udisks_client_get_drive_info"
              deprecated="1"
              deprecated-version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="979">Gets information about a #UDisksDrive object that is suitable to
present in an user interface. The returned strings are localized.</doc>
        <doc-deprecated xml:space="preserve">Use udisks_client_get_object_info() instead.</doc-deprecated>
        <source-position filename="udisksclient.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="981">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="982">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
          <parameter name="out_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="983">Return location for name or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="984">Return location for description or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_drive_icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="985">Return location for icon representing the drive or %NULL.</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
          <parameter name="out_media_description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="986">Return location for description of the media or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_media_icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="987">Return location for icon representing the media or %NULL.</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_siblings"
              c:identifier="udisks_client_get_drive_siblings"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1316">Gets all siblings for @drive.</doc>
        <source-position filename="udisksclient.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1323">A list of #UDisksDrive instances. The
  returned list should be freed with g_list_free() after each element has been
  freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Drive"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1318">A #UDisksClient</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1319">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id_for_display"
              c:identifier="udisks_client_get_id_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2075">Gets a human readable localized string for @usage, @type and @version.</doc>
        <source-position filename="udisksclient.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2085">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2077">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="usage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2078">Usage id e.g. "filesystem" or "crypto".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2079">Type e.g. "ext4" or "crypto_LUKS"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2080">Version.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="long_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2081">Whether to produce a long string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_job_description"
              c:identifier="udisks_client_get_job_description">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2772">Gets a human-readable and localized text string describing the
operation of @job.

For known job types, see the documentation for the
&lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;Job:Operation&lt;/link&gt;
D-Bus property.</doc>
        <source-position filename="udisksclient.h" line="161"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2784">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2774">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="job" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2775">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_jobs_for_object"
              c:identifier="udisks_client_get_jobs_for_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1507">Gets all the #UDisksJob instances that reference @object, if any.</doc>
        <source-position filename="udisksclient.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1514">A list of #UDisksJob instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Job"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1509">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1510">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loop_for_block"
              c:identifier="udisks_client_get_loop_for_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1449">Gets the corresponding loop interface for @block.

This only works if @block itself is a loop device or a partition of
a loop device.</doc>
        <source-position filename="udisksclient.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1459">A #UDisksLoop or %NULL. Free with g_object_unref().</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1451">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1452">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_manager"
              c:identifier="udisks_client_get_manager"
              glib:get-property="manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="584">Gets the #UDisksManager interface on the well-known
&lt;literal&gt;/org/freedesktop/UDisks2/Manager&lt;/literal&gt; object.</doc>
        <source-position filename="udisksclient.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="591">A #UDisksManager or %NULL if the udisksd
daemon is not currently running. Do not free, the instance is owned
by @client.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="586">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid_for_block"
              c:identifier="udisks_client_get_mdraid_for_block"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="952">Gets the #UDisksMDRaid that @block is the block device for, if any.</doc>
        <source-position filename="udisksclient.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="959">A #UDisksMDRaid or %NULL if there is no
  #UDisksMDRaid for @block or @block is not a MD-RAID block
  device. Free the returned object with g_object_unref().</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="954">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="955">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media_compat_for_display"
              c:identifier="udisks_client_get_media_compat_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1864">Gets a human-readable string of the media described by
@media_compat. The returned information is localized.</doc>
        <source-position filename="udisksclient.h" line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1872">A string that should be freed with g_free() or
%NULL if unknown.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1866">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="media_compat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1867">An array of media types.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_members_for_mdraid"
              c:identifier="udisks_client_get_members_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1116">Gets the physical block devices that are part of @raid.</doc>
        <source-position filename="udisksclient.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1123">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1118">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1119">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="udisks_client_get_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="640">Convenience function for looking up an #UDisksObject for @object_path.</doc>
        <source-position filename="udisksclient.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="647">A #UDisksObject corresponding to
@object_path or %NULL if not found. The returned object must be
freed with g_object_unref().</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="642">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="643">Object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_info"
              c:identifier="udisks_client_get_object_info"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="884">Gets information about a #UDisksObject instance that is suitable to
present in an user interface. Information is returned in the
#UDisksObjectInfo object and is localized.</doc>
        <source-position filename="udisksclient.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="893">A #UDisksObjectInfo instance that should be freed with g_object_unref().</doc>
          <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="886">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="887">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_manager"
              c:identifier="udisks_client_get_object_manager"
              glib:get-property="object-manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="568">Gets the #GDBusObjectManager used by @client.</doc>
        <source-position filename="udisksclient.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="574">A #GDBusObjectManager. Do not free, the
instance is owned by @client.</doc>
          <type name="Gio.DBusObjectManager" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="570">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition_info"
              c:identifier="udisks_client_get_partition_info">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1158">Gets information about @partition that is suitable to present in an
user interface in a single line of text.

The returned string is localized and includes things like the
partition type, flags (if any) and name (if any).</doc>
        <source-position filename="udisksclient.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1169">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1160">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1161"># #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table"
              c:identifier="udisks_client_get_partition_table">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1419">Gets the #UDisksPartitionTable corresponding to @partition.</doc>
        <source-position filename="udisksclient.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1426">A #UDisksPartitionTable. Free with g_object_unref().</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1421">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1422">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_subtype_for_display"
              c:identifier="udisks_client_get_partition_table_subtype_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2256">Gets a human readable localized string for @partition_table_type and @partition_table_subtype.</doc>
        <source-position filename="udisksclient.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2264">A description of @partition_table_type and
@partition_table_subtype or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2258">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2259">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2260">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_subtypes"
              c:identifier="udisks_client_get_partition_table_subtypes">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2289">Gets all known subtypes for @partition_table_type.</doc>
        <source-position filename="udisksclient.h" line="135"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2296">A %NULL-terminated array of
strings. Only the container should be freed with g_free().</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2291">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2292">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_type_for_display"
              c:identifier="udisks_client_get_partition_table_type_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2201">Gets a human readable localized string for @partition_table_type.</doc>
        <source-position filename="udisksclient.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2208">A description of @partition_table_type or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2203">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2204">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_and_subtype_for_display"
              c:identifier="udisks_client_get_partition_type_and_subtype_for_display"
              version="2.1.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2662">Like udisks_client_get_partition_type_for_display() but also takes
the partition table subtype into account, if available. This is
useful in scenarios where different subtypes is using the same
partition type.</doc>
        <source-position filename="udisksclient.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2674">A description of @partition_type or %NULL if
unknown.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2664">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2665">A partitioning type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2666">A partitioning subtype or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2667">A partition type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_for_display"
              c:identifier="udisks_client_get_partition_type_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2629">Gets a human readable localized string for @partiton_table_type and @partition_type.</doc>
        <source-position filename="udisksclient.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2637">A description of @partition_type or %NULL if
unknown.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2631">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2632">A partitioning type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2633">A partition type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_infos"
              c:identifier="udisks_client_get_partition_type_infos">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2591">Gets information about all known partition types for @partition_table_type and @partition_table_subtype.</doc>
        <source-position filename="udisksclient.h" line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2599">A list of
  #UDisksPartitionTypeInfo instances. The returned list should be freed
  with g_list_free() after freeing each element with udisks_partition_type_info_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="PartitionTypeInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2593">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2594">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2595">A partition table subtype or %NULL to get all known types.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partitions"
              c:identifier="udisks_client_get_partitions">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1370">Gets all partitions of @table.</doc>
        <source-position filename="udisksclient.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1377">A list of #UDisksPartition instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Partition"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1372">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1373">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size_for_display"
              c:identifier="udisks_client_get_size_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1802">Utility function to get a human-readable string that represents @size.</doc>
        <source-position filename="udisksclient.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1811">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1804">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1805">Size in bytes</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="use_pow2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1806">Whether power-of-two units should be used instead of power-of-ten units.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="long_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1807">Whether to produce a long string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_object" c:identifier="udisks_client_peek_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="659">Like udisks_client_get_object() but doesn't increase the reference
count on the returned #UDisksObject.

&lt;warning&gt;The returned object is only valid until removed so it is only safe to use this function on the thread where @client was constructed. Use udisks_client_get_object() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="udisksclient.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="669">A #UDisksObject corresponding to
@object_path or %NULL if not found.</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="661">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="662">Object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_changed"
              c:identifier="udisks_client_queue_changed"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1586">Queues up a #UDisksClient::changed signal and rate-limit it. See
the documentation for the #UDisksClient::changed property for more
information.</doc>
        <source-position filename="udisksclient.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1588">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="settle" c:identifier="udisks_client_settle">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="614">Blocks until all pending D-Bus messages have been delivered. Also
emits the (rate-limited) #UDisksClient::changed signal if changes
are currently pending.

This is useful in two situations: 1. when using synchronous method
calls since e.g. D-Bus signals received while waiting for the reply
are queued up and dispatched after the synchronous call ends; and
2. when using asynchronous calls where the return value references
a newly created object (such as the &lt;link
linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;Manager.LoopSetup()&lt;/link&gt; method).</doc>
        <source-position filename="udisksclient.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="616">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bus-connection"
                version="2.9.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="270">The #GDBusConnection used to create the #UDisksClient:object-manager, or
%NULL if one wasn't specified during construction of the #UDisksClient (in
which case a system bus connection is used).</doc>
        <type name="Gio.DBusConnection"/>
      </property>
      <property name="manager" transfer-ownership="none" getter="get_manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="255">The #UDisksManager interface on the well-known
&lt;literal&gt;/org/freedesktop/UDisks2/Manager&lt;/literal&gt; object</doc>
        <type name="Manager"/>
      </property>
      <property name="object-manager"
                transfer-ownership="none"
                getter="get_object_manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="241">The #GDBusObjectManager used by the #UDisksClient instance.</doc>
        <type name="Gio.DBusObjectManager"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="289">This signal is emitted either when an object or interface is
added or removed a when property has changed. Additionally,
multiple received signals are coalesced into a single signal that
is rate-limited to fire at most every 100ms.

Note that calling udisks_client_settle() will cause this signal
to fire if any changes are outstanding.

For greater detail, connect to the
#GDBusObjectManager::object-added,
#GDBusObjectManager::object-removed,
#GDBusObjectManager::interface-added,
#GDBusObjectManager::interface-removed,
#GDBusObjectManagerClient::interface-proxy-properties-changed and
signals on the #UDisksClient:object-manager object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <function-macro name="DRIVE"
                    c:identifier="UDISKS_DRIVE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="759"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA"
                    c:identifier="UDISKS_DRIVE_ATA"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1142"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_ATA_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1144"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1559"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1560"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1561"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1629"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1630"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1631"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="761"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM"
                    c:identifier="UDISKS_DRIVE_LSM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6761"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_LSM_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6763"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6947"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6949"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_PROXY"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7088"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7089"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7090"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_SKELETON"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7158"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7159"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7160"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_PROXY"
                    c:identifier="UDISKS_DRIVE_LSM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6842"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6843"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6844"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_SKELETON"
                    c:identifier="UDISKS_DRIVE_LSM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6912"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6913"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6914"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY"
                    c:identifier="UDISKS_DRIVE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1037"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1038"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1039"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON"
                    c:identifier="UDISKS_DRIVE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1107"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1108"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1109"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Drive"
               c:symbol-prefix="drive"
               c:type="UDisksDrive"
               glib:type-name="UDisksDrive"
               glib:get-type="udisks_drive_get_type"
               glib:type-struct="DriveIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7918">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="846"/>
      <function name="interface_info"
                c:identifier="udisks_drive_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7819">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="854"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7824">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7832">Overrides all #GObject properties in the #UDisksDrive interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="855"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7840">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7834">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7835">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_can_power_off"
                      invoker="get_can_power_off"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9437">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="783"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9445">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9439">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_configuration"
                      invoker="get_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8624">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="785"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8634">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8626">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_connection_bus"
                      invoker="get_connection_bus"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9212">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_connection_bus() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="787"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9222">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9214">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_ejectable"
                      invoker="get_ejectable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9351">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="789"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9359">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9353">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8571">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="791"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8581">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8573">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media" invoker="get_media" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8677">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="793"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8687">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8679">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_available"
                      invoker="get_media_available"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8816">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="795"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8824">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8818">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_change_detected"
                      invoker="get_media_change_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8849">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="797"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8857">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8851">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_compatibility"
                      invoker="get_media_compatibility"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8730">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media_compatibility() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="799"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8740">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8732">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_removable"
                      invoker="get_media_removable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8783">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="801"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8791">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8785">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_model" invoker="get_model" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8359">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_model() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="803"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8369">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8361">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical"
                      invoker="get_optical"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8981">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="805"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8989">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8983">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_blank"
                      invoker="get_optical_blank"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9014">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="807"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9022">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9016">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_audio_tracks"
                      invoker="get_optical_num_audio_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9080">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="809"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9088">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9082">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_data_tracks"
                      invoker="get_optical_num_data_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9113">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="811"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9121">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9115">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_sessions"
                      invoker="get_optical_num_sessions"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9146">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="813"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9154">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9148">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_tracks"
                      invoker="get_optical_num_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9047">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="815"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9055">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9049">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_removable"
                      invoker="get_removable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9318">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="817"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9326">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9320">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_revision"
                      invoker="get_revision"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8412">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="819"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8422">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8414">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rotation_rate"
                      invoker="get_rotation_rate"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9179">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="821"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9187">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9181">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_seat" invoker="get_seat" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9265">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_seat() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="823"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9275">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9267">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_serial"
                      invoker="get_serial"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8465">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_serial() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="825"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8475">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8467">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sibling_id"
                      invoker="get_sibling_id"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9470">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sibling_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="827"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9480">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9472">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8882">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="829"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8890">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8884">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sort_key"
                      invoker="get_sort_key"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9384">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sort_key() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="831"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9394">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9386">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_detected"
                      invoker="get_time_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8915">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="833"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8923">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8917">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_media_detected"
                      invoker="get_time_media_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8948">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="835"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8956">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8950">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vendor"
                      invoker="get_vendor"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8306">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_vendor() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="837"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8316">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8308">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_wwn" invoker="get_wwn" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8518">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="839"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8528">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8520">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_eject">
        <source-position filename="udisks-generated.h" line="772"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_power_off">
        <source-position filename="udisks-generated.h" line="841"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_configuration">
        <source-position filename="udisks-generated.h" line="777"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_eject" c:identifier="udisks_drive_call_eject">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9523">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_eject_finish() to get the result of the operation.

See udisks_drive_call_eject_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="874"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9525">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9526">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9527">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9528">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9529">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_eject_finish"
              c:identifier="udisks_drive_call_eject_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9556">Finishes an operation started with udisks_drive_call_eject().</doc>
        <source-position filename="udisks-generated.h" line="881"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9564">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9558">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9559">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_eject().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_eject_sync"
              c:identifier="udisks_drive_call_eject_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9583">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_eject() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="886"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9594">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9585">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9586">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9587">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off"
              c:identifier="udisks_drive_call_power_off"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9725">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_power_off_finish() to get the result of the operation.

See udisks_drive_call_power_off_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="912"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9727">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9728">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9729">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9730">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9731">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off_finish"
              c:identifier="udisks_drive_call_power_off_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9760">Finishes an operation started with udisks_drive_call_power_off().</doc>
        <source-position filename="udisks-generated.h" line="919"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9768">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9762">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9763">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_power_off().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off_sync"
              c:identifier="udisks_drive_call_power_off_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9789">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_power_off() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="924"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9800">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9791">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9792">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9793">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration"
              c:identifier="udisks_drive_call_set_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9621">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_set_configuration_finish() to get the result of the operation.

See udisks_drive_call_set_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="892"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9623">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9624">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9625">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9626">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9627">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9628">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration_finish"
              c:identifier="udisks_drive_call_set_configuration_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9657">Finishes an operation started with udisks_drive_call_set_configuration().</doc>
        <source-position filename="udisks-generated.h" line="900"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9665">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9659">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9660">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_set_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration_sync"
              c:identifier="udisks_drive_call_set_configuration_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9684">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_set_configuration() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="905"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9696">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9686">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9687">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9688">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9689">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_eject" c:identifier="udisks_drive_complete_eject">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9829">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="859"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9831">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9832">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_power_off"
              c:identifier="udisks_drive_complete_power_off"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9865">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="867"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9867">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9868">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_configuration"
              c:identifier="udisks_drive_complete_set_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9847">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="863"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9849">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9850">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_configuration"
              c:identifier="udisks_drive_dup_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8644">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="958"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8652">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8646">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_connection_bus"
              c:identifier="udisks_drive_dup_connection_bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9232">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1009"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9240">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9234">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="udisks_drive_dup_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8591">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="954"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8599">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8593">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_media"
              c:identifier="udisks_drive_dup_media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8697">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="962"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8705">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8699">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_media_compatibility"
              c:identifier="udisks_drive_dup_media_compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8750">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="966"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8758">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8752">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_model"
              c:identifier="udisks_drive_dup_model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8379">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="938"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8387">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8381">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_revision"
              c:identifier="udisks_drive_dup_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8432">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="942"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8440">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8434">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_seat"
              c:identifier="udisks_drive_dup_seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9285">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1013"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9293">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9287">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_serial"
              c:identifier="udisks_drive_dup_serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8485">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="946"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8493">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8487">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sibling_id"
              c:identifier="udisks_drive_dup_sibling_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9490">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1030"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9498">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9492">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sort_key"
              c:identifier="udisks_drive_dup_sort_key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9404">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1023"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9412">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9406">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_vendor"
              c:identifier="udisks_drive_dup_vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8326">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="934"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8334">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8328">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_wwn"
              c:identifier="udisks_drive_dup_wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8538">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="950"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8546">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8540">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_power_off"
              c:identifier="udisks_drive_get_can_power_off"
              glib:get-property="can-power-off"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9437">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1026"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9445">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9439">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="udisks_drive_get_configuration"
              glib:get-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8624">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="957"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8634">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8626">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_bus"
              c:identifier="udisks_drive_get_connection_bus"
              glib:get-property="connection-bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9212">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_connection_bus() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1008"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9222">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9214">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ejectable"
              c:identifier="udisks_drive_get_ejectable"
              glib:get-property="ejectable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9351">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1019"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9359">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9353">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="udisks_drive_get_id"
              glib:get-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8571">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="953"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8581">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8573">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media"
              c:identifier="udisks_drive_get_media"
              glib:get-property="media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8677">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="961"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8687">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8679">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_available"
              c:identifier="udisks_drive_get_media_available"
              glib:get-property="media-available"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8816">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="972"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8824">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8818">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_change_detected"
              c:identifier="udisks_drive_get_media_change_detected"
              glib:get-property="media-change-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8849">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="975"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8857">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8851">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_compatibility"
              c:identifier="udisks_drive_get_media_compatibility"
              glib:get-property="media-compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8730">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media_compatibility() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="965"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8740">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8732">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_removable"
              c:identifier="udisks_drive_get_media_removable"
              glib:get-property="media-removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8783">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="969"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8791">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8785">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="udisks_drive_get_model"
              glib:get-property="model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8359">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_model() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="937"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8369">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8361">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical"
              c:identifier="udisks_drive_get_optical"
              glib:get-property="optical"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8981">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="987"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8989">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8983">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_blank"
              c:identifier="udisks_drive_get_optical_blank"
              glib:get-property="optical-blank"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9014">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="990"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9022">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9016">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_audio_tracks"
              c:identifier="udisks_drive_get_optical_num_audio_tracks"
              glib:get-property="optical-num-audio-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9080">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="996"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9088">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9082">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_data_tracks"
              c:identifier="udisks_drive_get_optical_num_data_tracks"
              glib:get-property="optical-num-data-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9113">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="999"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9121">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9115">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_sessions"
              c:identifier="udisks_drive_get_optical_num_sessions"
              glib:get-property="optical-num-sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9146">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1002"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9154">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9148">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_tracks"
              c:identifier="udisks_drive_get_optical_num_tracks"
              glib:get-property="optical-num-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9047">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="993"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9055">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9049">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_removable"
              c:identifier="udisks_drive_get_removable"
              glib:get-property="removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9318">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1016"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9326">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9320">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="udisks_drive_get_revision"
              glib:get-property="revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8412">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="941"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8422">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8414">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rotation_rate"
              c:identifier="udisks_drive_get_rotation_rate"
              glib:get-property="rotation-rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9179">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1005"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9187">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9181">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seat"
              c:identifier="udisks_drive_get_seat"
              glib:get-property="seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9265">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_seat() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1012"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9275">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9267">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="udisks_drive_get_serial"
              glib:get-property="serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8465">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_serial() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="945"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8475">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8467">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sibling_id"
              c:identifier="udisks_drive_get_sibling_id"
              glib:get-property="sibling-id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9470">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sibling_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1029"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9480">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9472">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_drive_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8882">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="978"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8890">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8884">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_key"
              c:identifier="udisks_drive_get_sort_key"
              glib:get-property="sort-key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9384">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sort_key() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1022"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9394">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9386">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_detected"
              c:identifier="udisks_drive_get_time_detected"
              glib:get-property="time-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8915">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="981"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8923">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8917">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_media_detected"
              c:identifier="udisks_drive_get_time_media_detected"
              glib:get-property="time-media-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8948">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="984"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8956">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8950">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor"
              c:identifier="udisks_drive_get_vendor"
              glib:get-property="vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8306">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_vendor() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="933"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8316">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8308">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wwn"
              c:identifier="udisks_drive_get_wwn"
              glib:get-property="wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8518">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="949"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8528">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8520">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_power_off"
              c:identifier="udisks_drive_set_can_power_off"
              glib:set-property="can-power-off"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9455">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1027"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9457">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9458">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_configuration"
              c:identifier="udisks_drive_set_configuration"
              glib:set-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8662">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="959"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8664">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8665">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connection_bus"
              c:identifier="udisks_drive_set_connection_bus"
              glib:set-property="connection-bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9250">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1010"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9252">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9253">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ejectable"
              c:identifier="udisks_drive_set_ejectable"
              glib:set-property="ejectable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9369">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1020"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9371">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9372">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="udisks_drive_set_id"
              glib:set-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8609">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="955"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8611">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8612">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media"
              c:identifier="udisks_drive_set_media"
              glib:set-property="media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8715">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="963"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8717">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8718">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_available"
              c:identifier="udisks_drive_set_media_available"
              glib:set-property="media-available"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8834">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="973"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8836">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8837">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_change_detected"
              c:identifier="udisks_drive_set_media_change_detected"
              glib:set-property="media-change-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8867">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="976"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8869">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8870">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_compatibility"
              c:identifier="udisks_drive_set_media_compatibility"
              glib:set-property="media-compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8768">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="967"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8770">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8771">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_removable"
              c:identifier="udisks_drive_set_media_removable"
              glib:set-property="media-removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8801">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="970"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8803">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8804">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="udisks_drive_set_model"
              glib:set-property="model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8397">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="939"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8399">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8400">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical"
              c:identifier="udisks_drive_set_optical"
              glib:set-property="optical"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8999">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="988"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9001">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9002">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_blank"
              c:identifier="udisks_drive_set_optical_blank"
              glib:set-property="optical-blank"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9032">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="991"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9034">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9035">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_audio_tracks"
              c:identifier="udisks_drive_set_optical_num_audio_tracks"
              glib:set-property="optical-num-audio-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9098">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="997"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9100">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9101">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_data_tracks"
              c:identifier="udisks_drive_set_optical_num_data_tracks"
              glib:set-property="optical-num-data-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9131">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9133">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9134">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_sessions"
              c:identifier="udisks_drive_set_optical_num_sessions"
              glib:set-property="optical-num-sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9164">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1003"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9166">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9167">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_tracks"
              c:identifier="udisks_drive_set_optical_num_tracks"
              glib:set-property="optical-num-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9065">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="994"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9067">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9068">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_removable"
              c:identifier="udisks_drive_set_removable"
              glib:set-property="removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9336">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1017"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9338">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9339">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_revision"
              c:identifier="udisks_drive_set_revision"
              glib:set-property="revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8450">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="943"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8452">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8453">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rotation_rate"
              c:identifier="udisks_drive_set_rotation_rate"
              glib:set-property="rotation-rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9197">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1006"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9199">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9200">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_seat"
              c:identifier="udisks_drive_set_seat"
              glib:set-property="seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9303">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1014"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9305">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9306">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_serial"
              c:identifier="udisks_drive_set_serial"
              glib:set-property="serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8503">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="947"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8505">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8506">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sibling_id"
              c:identifier="udisks_drive_set_sibling_id"
              glib:set-property="sibling-id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9508">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1031"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9510">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9511">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_drive_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8900">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="979"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8902">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8903">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_key"
              c:identifier="udisks_drive_set_sort_key"
              glib:set-property="sort-key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9422">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1024"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9424">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9425">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_detected"
              c:identifier="udisks_drive_set_time_detected"
              glib:set-property="time-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8933">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="982"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8935">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8936">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_media_detected"
              c:identifier="udisks_drive_set_time_media_detected"
              glib:set-property="time-media-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8966">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="985"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8968">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8969">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vendor"
              c:identifier="udisks_drive_set_vendor"
              glib:set-property="vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8344">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="935"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8346">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8347">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wwn"
              c:identifier="udisks_drive_set_wwn"
              glib:set-property="wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8556">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="951"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8558">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8559">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-power-off"
                writable="1"
                transfer-ownership="none"
                setter="set_can_power_off"
                getter="get_can_power_off"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8286">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_configuration"
                getter="get_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8097">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="connection-bus"
                writable="1"
                transfer-ownership="none"
                setter="set_connection_bus"
                getter="get_connection_bus"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8241">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ejectable"
                writable="1"
                transfer-ownership="none"
                setter="set_ejectable"
                getter="get_ejectable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8268">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8088">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media"
                writable="1"
                transfer-ownership="none"
                setter="set_media"
                getter="get_media"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8106">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media-available"
                writable="1"
                transfer-ownership="none"
                setter="set_media_available"
                getter="get_media_available"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8133">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-change-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_media_change_detected"
                getter="get_media_change_detected"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8142">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-compatibility"
                writable="1"
                transfer-ownership="none"
                setter="set_media_compatibility"
                getter="get_media_compatibility">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8115">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="media-removable"
                writable="1"
                transfer-ownership="none"
                setter="set_media_removable"
                getter="get_media_removable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8124">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8052">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="optical"
                writable="1"
                transfer-ownership="none"
                setter="set_optical"
                getter="get_optical"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8178">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="optical-blank"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_blank"
                getter="get_optical_blank"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8187">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="optical-num-audio-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_audio_tracks"
                getter="get_optical_num_audio_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8205">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-data-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_data_tracks"
                getter="get_optical_num_data_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8214">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-sessions"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_sessions"
                getter="get_optical_num_sessions"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8223">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_tracks"
                getter="get_optical_num_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8196">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="removable"
                writable="1"
                transfer-ownership="none"
                setter="set_removable"
                getter="get_removable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8259">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="revision"
                writable="1"
                transfer-ownership="none"
                setter="set_revision"
                getter="get_revision"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8061">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="rotation-rate"
                writable="1"
                transfer-ownership="none"
                setter="set_rotation_rate"
                getter="get_rotation_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8232">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="seat"
                writable="1"
                transfer-ownership="none"
                setter="set_seat"
                getter="get_seat"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8250">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="serial"
                writable="1"
                transfer-ownership="none"
                setter="set_serial"
                getter="get_serial"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8070">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sibling-id"
                writable="1"
                transfer-ownership="none"
                setter="set_sibling_id"
                getter="get_sibling_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8295">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8151">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sort-key"
                writable="1"
                transfer-ownership="none"
                setter="set_sort_key"
                getter="get_sort_key"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8277">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="time-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_time_detected"
                getter="get_time_detected"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8160">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="time-media-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_time_media_detected"
                getter="get_time_media_detected"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8169">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vendor"
                writable="1"
                transfer-ownership="none"
                setter="set_vendor"
                getter="get_vendor"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8043">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wwn"
                writable="1"
                transfer-ownership="none"
                setter="set_wwn"
                getter="get_wwn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8079">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-eject" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7970">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_eject() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7980">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7973">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7974">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-power-off" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8017">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_power_off() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8027">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8020">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8021">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-configuration" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7993">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_set_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8004">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7996">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7997">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7998">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="DriveAta"
               c:symbol-prefix="drive_ata"
               c:type="UDisksDriveAta"
               glib:type-name="UDisksDriveAta"
               glib:get-type="udisks_drive_ata_get_type"
               glib:type-struct="DriveAtaIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12503">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1252"/>
      <function name="interface_info"
                c:identifier="udisks_drive_ata_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12330">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="1260"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12335">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_ata_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12343">Overrides all #GObject properties in the #UDisksDriveAta interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="1261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12351">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12345">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12346">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_aam_enabled"
                      invoker="get_aam_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13544">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13552">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13546">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_aam_supported"
                      invoker="get_aam_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13511">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13519">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13513">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_aam_vendor_recommended_value"
                      invoker="get_aam_vendor_recommended_value"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13577">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13585">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13579">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_apm_enabled"
                      invoker="get_apm_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13478">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13486">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13480">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_apm_supported"
                      invoker="get_apm_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13445">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13453">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13447">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pm_enabled"
                      invoker="get_pm_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13412">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13420">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13414">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pm_supported"
                      invoker="get_pm_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13379">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13387">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13381">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_lookahead_enabled"
                      invoker="get_read_lookahead_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13709">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13717">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13711">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_lookahead_supported"
                      invoker="get_read_lookahead_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13676">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13684">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13678">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_enhanced_erase_unit_minutes"
                      invoker="get_security_enhanced_erase_unit_minutes"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13775">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13783">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13777">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_erase_unit_minutes"
                      invoker="get_security_erase_unit_minutes"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13742">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13750">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13744">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_frozen"
                      invoker="get_security_frozen"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13808">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13816">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13810">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_enabled"
                      invoker="get_smart_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13029">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13037">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13031">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_failing"
                      invoker="get_smart_failing"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13095">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13103">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13097">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_attributes_failed_in_the_past"
                      invoker="get_smart_num_attributes_failed_in_the_past"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13227">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13235">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13229">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_attributes_failing"
                      invoker="get_smart_num_attributes_failing"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13194">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13202">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13196">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_bad_sectors"
                      invoker="get_smart_num_bad_sectors"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13260">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13268">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13262">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_power_on_seconds"
                      invoker="get_smart_power_on_seconds"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13128">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13136">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13130">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_percent_remaining"
                      invoker="get_smart_selftest_percent_remaining"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13346">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13354">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13348">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_status"
                      invoker="get_smart_selftest_status"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13293">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_ata_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1234"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13303">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13295">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_supported"
                      invoker="get_smart_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12996">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13004">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12998">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_temperature"
                      invoker="get_smart_temperature"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13161">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13169">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13163">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_updated"
                      invoker="get_smart_updated"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13062">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13070">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13064">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_write_cache_enabled"
                      invoker="get_write_cache_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13643">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13651">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13645">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_write_cache_supported"
                      invoker="get_write_cache_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13610">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13618">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13612">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_get_state">
        <source-position filename="udisks-generated.h" line="1155"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_standby">
        <source-position filename="udisks-generated.h" line="1160"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_wakeup">
        <source-position filename="udisks-generated.h" line="1165"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_security_erase_unit">
        <source-position filename="udisks-generated.h" line="1170"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_get_attributes">
        <source-position filename="udisks-generated.h" line="1175"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_abort">
        <source-position filename="udisks-generated.h" line="1180"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_start">
        <source-position filename="udisks-generated.h" line="1185"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_set_enabled">
        <source-position filename="udisks-generated.h" line="1246"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_update">
        <source-position filename="udisks-generated.h" line="1191"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_pm_get_state"
              c:identifier="udisks_drive_ata_call_pm_get_state">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14355">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_get_state_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_get_state_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14357">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14358">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14359">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14360">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14361">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_get_state_finish"
              c:identifier="udisks_drive_ata_call_pm_get_state_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14388">Finishes an operation started with udisks_drive_ata_call_pm_get_state().</doc>
        <source-position filename="udisks-generated.h" line="1409"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14397">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14390">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="out_state"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14391">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14392">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_get_state().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_get_state_sync"
              c:identifier="udisks_drive_ata_call_pm_get_state_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14418">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_get_state() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1415"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14430">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14420">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14421">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_state"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14422">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14423">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby"
              c:identifier="udisks_drive_ata_call_pm_standby">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14459">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_standby_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_standby_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1422"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14461">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14462">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14463">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14464">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14465">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby_finish"
              c:identifier="udisks_drive_ata_call_pm_standby_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14492">Finishes an operation started with udisks_drive_ata_call_pm_standby().</doc>
        <source-position filename="udisks-generated.h" line="1429"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14500">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14494">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14495">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_standby().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby_sync"
              c:identifier="udisks_drive_ata_call_pm_standby_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14519">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_standby() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1434"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14530">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14521">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14522">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14523">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup"
              c:identifier="udisks_drive_ata_call_pm_wakeup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14557">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_wakeup_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_wakeup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1440"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14559">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14560">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14561">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14562">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14563">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup_finish"
              c:identifier="udisks_drive_ata_call_pm_wakeup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14590">Finishes an operation started with udisks_drive_ata_call_pm_wakeup().</doc>
        <source-position filename="udisks-generated.h" line="1447"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14598">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14592">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14593">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_wakeup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup_sync"
              c:identifier="udisks_drive_ata_call_pm_wakeup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14617">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_wakeup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1452"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14628">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14619">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14620">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14621">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit"
              c:identifier="udisks_drive_ata_call_security_erase_unit">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14655">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_security_erase_unit_finish() to get the result of the operation.

See udisks_drive_ata_call_security_erase_unit_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1458"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14657">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14658">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14659">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14660">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14661">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit_finish"
              c:identifier="udisks_drive_ata_call_security_erase_unit_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14688">Finishes an operation started with udisks_drive_ata_call_security_erase_unit().</doc>
        <source-position filename="udisks-generated.h" line="1465"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14696">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14690">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14691">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_security_erase_unit().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit_sync"
              c:identifier="udisks_drive_ata_call_security_erase_unit_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14715">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_security_erase_unit() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1470"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14726">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14717">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14718">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14719">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes"
              c:identifier="udisks_drive_ata_call_smart_get_attributes">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13939">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_get_attributes_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_get_attributes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1324"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13941">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13942">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13943">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13944">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13945">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_finish"
              c:identifier="udisks_drive_ata_call_smart_get_attributes_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13972">Finishes an operation started with udisks_drive_ata_call_smart_get_attributes().</doc>
        <source-position filename="udisks-generated.h" line="1331"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13981">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13974">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13975">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13976">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_get_attributes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_sync"
              c:identifier="udisks_drive_ata_call_smart_get_attributes_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14002">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_get_attributes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1337"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14014">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14004">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14005">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14006">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14007">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14147">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_selftest_abort_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_selftest_abort_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1364"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14149">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14150">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14151">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14152">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14153">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_finish"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14180">Finishes an operation started with udisks_drive_ata_call_smart_selftest_abort().</doc>
        <source-position filename="udisks-generated.h" line="1371"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14188">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14182">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14183">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_selftest_abort().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_sync"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14207">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_selftest_abort() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1376"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14218">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14209">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14210">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14211">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start"
              c:identifier="udisks_drive_ata_call_smart_selftest_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14043">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_selftest_start_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_selftest_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14045">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14046">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14047">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14048">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14049">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14050">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_finish"
              c:identifier="udisks_drive_ata_call_smart_selftest_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14079">Finishes an operation started with udisks_drive_ata_call_smart_selftest_start().</doc>
        <source-position filename="udisks-generated.h" line="1352"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14087">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14081">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14082">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_selftest_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_sync"
              c:identifier="udisks_drive_ata_call_smart_selftest_start_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14106">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_selftest_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1357"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14118">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14108">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14109">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14110">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14111">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled"
              c:identifier="udisks_drive_ata_call_smart_set_enabled"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14245">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_set_enabled_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_set_enabled_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1382"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14247">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14248">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14249">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14250">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14251">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14252">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled_finish"
              c:identifier="udisks_drive_ata_call_smart_set_enabled_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14283">Finishes an operation started with udisks_drive_ata_call_smart_set_enabled().</doc>
        <source-position filename="udisks-generated.h" line="1390"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14291">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14285">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14286">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_set_enabled().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled_sync"
              c:identifier="udisks_drive_ata_call_smart_set_enabled_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14312">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_set_enabled() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1395"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14324">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14314">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14315">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14316">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14317">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update"
              c:identifier="udisks_drive_ata_call_smart_update">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13841">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_update_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_update_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1306"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13843">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13844">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13845">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13846">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13847">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_finish"
              c:identifier="udisks_drive_ata_call_smart_update_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13874">Finishes an operation started with udisks_drive_ata_call_smart_update().</doc>
        <source-position filename="udisks-generated.h" line="1313"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13882">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13876">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13877">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_update().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_sync"
              c:identifier="udisks_drive_ata_call_smart_update_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13901">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_update() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1318"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13912">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13903">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13904">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13905">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_get_state"
              c:identifier="udisks_drive_ata_complete_pm_get_state">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14848">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14850">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14851">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14852">Parameter to return.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_standby"
              c:identifier="udisks_drive_ata_complete_pm_standby">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14869">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1291"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14871">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14872">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_wakeup"
              c:identifier="udisks_drive_ata_complete_pm_wakeup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14887">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14889">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14890">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_security_erase_unit"
              c:identifier="udisks_drive_ata_complete_security_erase_unit">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14905">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14907">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14908">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_get_attributes"
              c:identifier="udisks_drive_ata_complete_smart_get_attributes">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14771">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14773">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14774">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14775">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_abort"
              c:identifier="udisks_drive_ata_complete_smart_selftest_abort">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14810">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1278"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14812">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14813">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_start"
              c:identifier="udisks_drive_ata_complete_smart_selftest_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14792">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1274"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14794">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14795">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_set_enabled"
              c:identifier="udisks_drive_ata_complete_smart_set_enabled"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14828">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1282"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14830">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14831">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_update"
              c:identifier="udisks_drive_ata_complete_smart_update">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14753">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14755">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14756">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_smart_selftest_status"
              c:identifier="udisks_drive_ata_dup_smart_selftest_status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13313">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1507"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13321">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13315">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_enabled"
              c:identifier="udisks_drive_ata_get_aam_enabled"
              glib:get-property="aam-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13544">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1528"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13552">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13546">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_supported"
              c:identifier="udisks_drive_ata_get_aam_supported"
              glib:get-property="aam-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13511">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1525"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13519">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13513">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_vendor_recommended_value"
              c:identifier="udisks_drive_ata_get_aam_vendor_recommended_value"
              glib:get-property="aam-vendor-recommended-value"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13577">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1531"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13585">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13579">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apm_enabled"
              c:identifier="udisks_drive_ata_get_apm_enabled"
              glib:get-property="apm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13478">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1522"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13486">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13480">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apm_supported"
              c:identifier="udisks_drive_ata_get_apm_supported"
              glib:get-property="apm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13445">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13453">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13447">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pm_enabled"
              c:identifier="udisks_drive_ata_get_pm_enabled"
              glib:get-property="pm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13412">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1516"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13420">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13414">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pm_supported"
              c:identifier="udisks_drive_ata_get_pm_supported"
              glib:get-property="pm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13379">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1513"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13387">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13381">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_lookahead_enabled"
              c:identifier="udisks_drive_ata_get_read_lookahead_enabled"
              glib:get-property="read-lookahead-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13709">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13717">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13711">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_lookahead_supported"
              c:identifier="udisks_drive_ata_get_read_lookahead_supported"
              glib:get-property="read-lookahead-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13676">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1540"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13684">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13678">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_enhanced_erase_unit_minutes"
              c:identifier="udisks_drive_ata_get_security_enhanced_erase_unit_minutes"
              glib:get-property="security-enhanced-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13775">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1549"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13783">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13777">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_erase_unit_minutes"
              c:identifier="udisks_drive_ata_get_security_erase_unit_minutes"
              glib:get-property="security-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13742">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1546"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13750">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13744">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_frozen"
              c:identifier="udisks_drive_ata_get_security_frozen"
              glib:get-property="security-frozen"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13808">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1552"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13816">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13810">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_enabled"
              c:identifier="udisks_drive_ata_get_smart_enabled"
              glib:get-property="smart-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13029">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1482"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13037">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13031">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_failing"
              c:identifier="udisks_drive_ata_get_smart_failing"
              glib:get-property="smart-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13095">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1488"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13103">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13097">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_attributes_failed_in_the_past"
              c:identifier="udisks_drive_ata_get_smart_num_attributes_failed_in_the_past"
              glib:get-property="smart-num-attributes-failed-in-the-past"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13227">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1500"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13235">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13229">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_attributes_failing"
              c:identifier="udisks_drive_ata_get_smart_num_attributes_failing"
              glib:get-property="smart-num-attributes-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13194">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1497"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13202">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13196">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_bad_sectors"
              c:identifier="udisks_drive_ata_get_smart_num_bad_sectors"
              glib:get-property="smart-num-bad-sectors"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13260">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1503"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13268">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13262">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_power_on_seconds"
              c:identifier="udisks_drive_ata_get_smart_power_on_seconds"
              glib:get-property="smart-power-on-seconds"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13128">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1491"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13136">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13130">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_percent_remaining"
              c:identifier="udisks_drive_ata_get_smart_selftest_percent_remaining"
              glib:get-property="smart-selftest-percent-remaining"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13346">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1510"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13354">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13348">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_status"
              c:identifier="udisks_drive_ata_get_smart_selftest_status"
              glib:get-property="smart-selftest-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13293">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_ata_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1506"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13303">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13295">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_supported"
              c:identifier="udisks_drive_ata_get_smart_supported"
              glib:get-property="smart-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12996">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1479"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13004">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12998">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_temperature"
              c:identifier="udisks_drive_ata_get_smart_temperature"
              glib:get-property="smart-temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13161">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1494"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13169">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13163">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_updated"
              c:identifier="udisks_drive_ata_get_smart_updated"
              glib:get-property="smart-updated"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13062">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1485"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13070">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13064">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_write_cache_enabled"
              c:identifier="udisks_drive_ata_get_write_cache_enabled"
              glib:get-property="write-cache-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13643">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1537"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13651">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13645">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_write_cache_supported"
              c:identifier="udisks_drive_ata_get_write_cache_supported"
              glib:get-property="write-cache-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13610">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1534"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13618">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13612">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_aam_enabled"
              c:identifier="udisks_drive_ata_set_aam_enabled"
              glib:set-property="aam-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13562">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1529"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13564">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13565">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aam_supported"
              c:identifier="udisks_drive_ata_set_aam_supported"
              glib:set-property="aam-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13529">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1526"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13531">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13532">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aam_vendor_recommended_value"
              c:identifier="udisks_drive_ata_set_aam_vendor_recommended_value"
              glib:set-property="aam-vendor-recommended-value"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13595">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1532"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13597">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13598">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apm_enabled"
              c:identifier="udisks_drive_ata_set_apm_enabled"
              glib:set-property="apm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13496">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1523"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13498">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13499">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apm_supported"
              c:identifier="udisks_drive_ata_set_apm_supported"
              glib:set-property="apm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13463">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1520"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13465">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13466">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pm_enabled"
              c:identifier="udisks_drive_ata_set_pm_enabled"
              glib:set-property="pm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13430">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1517"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13432">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13433">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pm_supported"
              c:identifier="udisks_drive_ata_set_pm_supported"
              glib:set-property="pm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13397">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1514"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13399">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13400">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_lookahead_enabled"
              c:identifier="udisks_drive_ata_set_read_lookahead_enabled"
              glib:set-property="read-lookahead-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13727">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1544"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13729">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13730">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_lookahead_supported"
              c:identifier="udisks_drive_ata_set_read_lookahead_supported"
              glib:set-property="read-lookahead-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13694">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1541"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13696">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13697">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_enhanced_erase_unit_minutes"
              c:identifier="udisks_drive_ata_set_security_enhanced_erase_unit_minutes"
              glib:set-property="security-enhanced-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13793">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1550"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13795">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13796">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_erase_unit_minutes"
              c:identifier="udisks_drive_ata_set_security_erase_unit_minutes"
              glib:set-property="security-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13760">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1547"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13762">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13763">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_frozen"
              c:identifier="udisks_drive_ata_set_security_frozen"
              glib:set-property="security-frozen"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13826">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1553"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13828">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13829">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_enabled"
              c:identifier="udisks_drive_ata_set_smart_enabled"
              glib:set-property="smart-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13047">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1483"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13049">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13050">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_failing"
              c:identifier="udisks_drive_ata_set_smart_failing"
              glib:set-property="smart-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13113">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13115">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13116">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_attributes_failed_in_the_past"
              c:identifier="udisks_drive_ata_set_smart_num_attributes_failed_in_the_past"
              glib:set-property="smart-num-attributes-failed-in-the-past"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13245">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1501"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13247">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13248">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_attributes_failing"
              c:identifier="udisks_drive_ata_set_smart_num_attributes_failing"
              glib:set-property="smart-num-attributes-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13212">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1498"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13214">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13215">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_bad_sectors"
              c:identifier="udisks_drive_ata_set_smart_num_bad_sectors"
              glib:set-property="smart-num-bad-sectors"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13278">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1504"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13280">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13281">The value to set.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_power_on_seconds"
              c:identifier="udisks_drive_ata_set_smart_power_on_seconds"
              glib:set-property="smart-power-on-seconds"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13146">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1492"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13148">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13149">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_percent_remaining"
              c:identifier="udisks_drive_ata_set_smart_selftest_percent_remaining"
              glib:set-property="smart-selftest-percent-remaining"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13364">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1511"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13366">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13367">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_status"
              c:identifier="udisks_drive_ata_set_smart_selftest_status"
              glib:set-property="smart-selftest-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13331">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1508"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13333">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13334">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_supported"
              c:identifier="udisks_drive_ata_set_smart_supported"
              glib:set-property="smart-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13014">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1480"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13016">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13017">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_temperature"
              c:identifier="udisks_drive_ata_set_smart_temperature"
              glib:set-property="smart-temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13179">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1495"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13181">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13182">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_updated"
              c:identifier="udisks_drive_ata_set_smart_updated"
              glib:set-property="smart-updated"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13080">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1486"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13082">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13083">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_cache_enabled"
              c:identifier="udisks_drive_ata_set_write_cache_enabled"
              glib:set-property="write-cache-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13661">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1538"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13663">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13664">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_cache_supported"
              c:identifier="udisks_drive_ata_set_write_cache_supported"
              glib:set-property="write-cache-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13628">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1535"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13630">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13631">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="aam-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_enabled"
                getter="get_aam_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12913">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aam-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_supported"
                getter="get_aam_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12904">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aam-vendor-recommended-value"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_vendor_recommended_value"
                getter="get_aam_vendor_recommended_value"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12922">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="apm-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_apm_enabled"
                getter="get_apm_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12895">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="apm-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_apm_supported"
                getter="get_apm_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12886">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pm-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_pm_enabled"
                getter="get_pm_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12877">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pm-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_pm_supported"
                getter="get_pm_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12868">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-lookahead-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_read_lookahead_enabled"
                getter="get_read_lookahead_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12958">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-lookahead-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_read_lookahead_supported"
                getter="get_read_lookahead_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12949">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="security-enhanced-erase-unit-minutes"
                writable="1"
                transfer-ownership="none"
                setter="set_security_enhanced_erase_unit_minutes"
                getter="get_security_enhanced_erase_unit_minutes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12976">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="security-erase-unit-minutes"
                writable="1"
                transfer-ownership="none"
                setter="set_security_erase_unit_minutes"
                getter="get_security_erase_unit_minutes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12967">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="security-frozen"
                writable="1"
                transfer-ownership="none"
                setter="set_security_frozen"
                getter="get_security_frozen"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12985">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_enabled"
                getter="get_smart_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12778">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-failing"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_failing"
                getter="get_smart_failing"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12796">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-num-attributes-failed-in-the-past"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_attributes_failed_in_the_past"
                getter="get_smart_num_attributes_failed_in_the_past"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12832">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-num-attributes-failing"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_attributes_failing"
                getter="get_smart_num_attributes_failing"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12823">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-num-bad-sectors"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_bad_sectors"
                getter="get_smart_num_bad_sectors"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12841">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="smart-power-on-seconds"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_power_on_seconds"
                getter="get_smart_power_on_seconds"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12805">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="smart-selftest-percent-remaining"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_percent_remaining"
                getter="get_smart_selftest_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12859">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-selftest-status"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_status"
                getter="get_smart_selftest_status"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12850">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smart-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_supported"
                getter="get_smart_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12769">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-temperature"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_temperature"
                getter="get_smart_temperature"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12814">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="smart-updated"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_updated"
                getter="get_smart_updated"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12787">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="write-cache-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_write_cache_enabled"
                getter="get_write_cache_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12940">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="write-cache-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_write_cache_supported"
                getter="get_write_cache_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12931">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-pm-get-state" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12676">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_get_state() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12686">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12679">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12680">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pm-standby" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12699">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_standby() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12709">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12702">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12703">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pm-wakeup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12722">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_wakeup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12732">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12725">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12726">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-security-erase-unit" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12745">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_security_erase_unit() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12755">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12748">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12749">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-get-attributes" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12580">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_get_attributes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12590">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12583">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12584">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-abort" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12627">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_selftest_abort() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12637">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12630">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12631">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-start" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12603">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_selftest_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12614">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12606">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12607">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12608">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-set-enabled" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12650">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_set_enabled() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12661">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12653">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12654">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12655">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-update" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12557">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_update() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12567">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12560">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12561">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DriveAtaIface"
            c:type="UDisksDriveAtaIface"
            glib:is-gtype-struct-for="DriveAta">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12509">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1252"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12511">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_pm_get_state">
        <callback name="handle_pm_get_state">
          <source-position filename="udisks-generated.h" line="1155"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pm_standby">
        <callback name="handle_pm_standby">
          <source-position filename="udisks-generated.h" line="1160"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pm_wakeup">
        <callback name="handle_pm_wakeup">
          <source-position filename="udisks-generated.h" line="1165"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_security_erase_unit">
        <callback name="handle_security_erase_unit">
          <source-position filename="udisks-generated.h" line="1170"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_get_attributes">
        <callback name="handle_smart_get_attributes">
          <source-position filename="udisks-generated.h" line="1175"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_abort">
        <callback name="handle_smart_selftest_abort">
          <source-position filename="udisks-generated.h" line="1180"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_start">
        <callback name="handle_smart_selftest_start">
          <source-position filename="udisks-generated.h" line="1185"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_update">
        <callback name="handle_smart_update">
          <source-position filename="udisks-generated.h" line="1191"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_enabled">
        <callback name="get_aam_enabled">
          <source-position filename="udisks-generated.h" line="1196"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13552">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13546">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_supported">
        <callback name="get_aam_supported">
          <source-position filename="udisks-generated.h" line="1198"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13519">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13513">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_vendor_recommended_value">
        <callback name="get_aam_vendor_recommended_value">
          <source-position filename="udisks-generated.h" line="1200"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13585">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13579">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apm_enabled">
        <callback name="get_apm_enabled">
          <source-position filename="udisks-generated.h" line="1202"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13486">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13480">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apm_supported">
        <callback name="get_apm_supported">
          <source-position filename="udisks-generated.h" line="1204"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13453">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13447">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pm_enabled">
        <callback name="get_pm_enabled">
          <source-position filename="udisks-generated.h" line="1206"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13420">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13414">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pm_supported">
        <callback name="get_pm_supported">
          <source-position filename="udisks-generated.h" line="1208"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13387">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13381">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_lookahead_enabled">
        <callback name="get_read_lookahead_enabled">
          <source-position filename="udisks-generated.h" line="1210"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13717">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13711">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_lookahead_supported">
        <callback name="get_read_lookahead_supported">
          <source-position filename="udisks-generated.h" line="1212"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13684">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13678">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_enhanced_erase_unit_minutes">
        <callback name="get_security_enhanced_erase_unit_minutes">
          <source-position filename="udisks-generated.h" line="1214"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13783">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13777">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_erase_unit_minutes">
        <callback name="get_security_erase_unit_minutes">
          <source-position filename="udisks-generated.h" line="1216"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13750">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13744">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_frozen">
        <callback name="get_security_frozen">
          <source-position filename="udisks-generated.h" line="1218"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13816">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13810">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_enabled">
        <callback name="get_smart_enabled">
          <source-position filename="udisks-generated.h" line="1220"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13037">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13031">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_failing">
        <callback name="get_smart_failing">
          <source-position filename="udisks-generated.h" line="1222"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13103">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13097">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_attributes_failed_in_the_past">
        <callback name="get_smart_num_attributes_failed_in_the_past">
          <source-position filename="udisks-generated.h" line="1224"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13235">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13229">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_attributes_failing">
        <callback name="get_smart_num_attributes_failing">
          <source-position filename="udisks-generated.h" line="1226"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13202">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13196">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_bad_sectors">
        <callback name="get_smart_num_bad_sectors">
          <source-position filename="udisks-generated.h" line="1228"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13268">The property value.</doc>
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13262">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_power_on_seconds">
        <callback name="get_smart_power_on_seconds">
          <source-position filename="udisks-generated.h" line="1230"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13136">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13130">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_percent_remaining">
        <callback name="get_smart_selftest_percent_remaining">
          <source-position filename="udisks-generated.h" line="1232"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13354">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13348">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_status">
        <callback name="get_smart_selftest_status">
          <source-position filename="udisks-generated.h" line="1234"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13303">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13295">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_supported">
        <callback name="get_smart_supported">
          <source-position filename="udisks-generated.h" line="1236"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13004">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="12998">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_temperature">
        <callback name="get_smart_temperature">
          <source-position filename="udisks-generated.h" line="1238"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13169">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13163">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_updated">
        <callback name="get_smart_updated">
          <source-position filename="udisks-generated.h" line="1240"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13070">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13064">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_write_cache_enabled">
        <callback name="get_write_cache_enabled">
          <source-position filename="udisks-generated.h" line="1242"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13651">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13645">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_write_cache_supported">
        <callback name="get_write_cache_supported">
          <source-position filename="udisks-generated.h" line="1244"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13618">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13612">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_set_enabled">
        <callback name="handle_smart_set_enabled">
          <source-position filename="udisks-generated.h" line="1246"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveAtaProxy"
           c:symbol-prefix="drive_ata_proxy"
           c:type="UDisksDriveAtaProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveAtaProxy"
           glib:get-type="udisks_drive_ata_proxy_get_type"
           glib:type-struct="DriveAtaProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="14925">The #UDisksDriveAtaProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1579"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DriveAta"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_ata_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15569">Finishes an operation started with udisks_drive_ata_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="1595"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15576">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15571">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_ata_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15659">Finishes an operation started with udisks_drive_ata_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="1614"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15666">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15661">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_ata_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15684">Like udisks_drive_ata_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_ata_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1617"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15699">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15686">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15687">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15688">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15689">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15690">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_ata_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15594">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_ata_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1598"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15609">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15596">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15597">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15598">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15599">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15600">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_ata_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15539">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_proxy_new_finish() to get the result of the operation.

See udisks_drive_ata_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1587"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15541">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15542">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15543">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15544">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15545">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15546">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15547">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_ata_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15629">Like udisks_drive_ata_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_ata_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1606"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15631">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15632">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15633">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15634">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15635">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15636">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15637">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveAtaProxyPrivate"
              c:type="UDisksDriveAtaProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveAtaProxyClass"
            c:type="UDisksDriveAtaProxyClass"
            glib:is-gtype-struct-for="DriveAtaProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="14931">Class structure for #UDisksDriveAtaProxy.</doc>
      <source-position filename="udisks-generated.h" line="1579"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14933">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveAtaProxyPrivate"
            c:type="UDisksDriveAtaProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1567"/>
    </record>
    <class name="DriveAtaSkeleton"
           c:symbol-prefix="drive_ata_skeleton"
           c:type="UDisksDriveAtaSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveAtaSkeleton"
           glib:get-type="udisks_drive_ata_skeleton_get_type"
           glib:type-struct="DriveAtaSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="15721">The #UDisksDriveAtaSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1649"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DriveAta"/>
      <constructor name="new" c:identifier="udisks_drive_ata_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16486">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="1657"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16491">The skeleton object.</doc>
          <type name="DriveAtaSkeleton" c:type="UDisksDriveAta*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveAtaSkeletonPrivate"
              c:type="UDisksDriveAtaSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveAtaSkeletonClass"
            c:type="UDisksDriveAtaSkeletonClass"
            glib:is-gtype-struct-for="DriveAtaSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="15727">Class structure for #UDisksDriveAtaSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="1649"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15729">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveAtaSkeletonPrivate"
            c:type="UDisksDriveAtaSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1637"/>
    </record>
    <record name="DriveIface"
            c:type="UDisksDriveIface"
            glib:is-gtype-struct-for="Drive">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7924">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="846"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7926">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_eject">
        <callback name="handle_eject">
          <source-position filename="udisks-generated.h" line="772"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_configuration">
        <callback name="handle_set_configuration">
          <source-position filename="udisks-generated.h" line="777"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_power_off">
        <callback name="get_can_power_off">
          <source-position filename="udisks-generated.h" line="783"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9445">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9439">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <source-position filename="udisks-generated.h" line="785"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8634">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8626">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_connection_bus">
        <callback name="get_connection_bus">
          <source-position filename="udisks-generated.h" line="787"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9222">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9214">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ejectable">
        <callback name="get_ejectable">
          <source-position filename="udisks-generated.h" line="789"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9359">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9353">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <source-position filename="udisks-generated.h" line="791"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8581">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8573">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media">
        <callback name="get_media">
          <source-position filename="udisks-generated.h" line="793"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8687">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8679">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_available">
        <callback name="get_media_available">
          <source-position filename="udisks-generated.h" line="795"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8824">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8818">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_change_detected">
        <callback name="get_media_change_detected">
          <source-position filename="udisks-generated.h" line="797"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8857">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8851">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_compatibility">
        <callback name="get_media_compatibility">
          <source-position filename="udisks-generated.h" line="799"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8740">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8732">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_removable">
        <callback name="get_media_removable">
          <source-position filename="udisks-generated.h" line="801"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8791">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8785">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_model">
        <callback name="get_model">
          <source-position filename="udisks-generated.h" line="803"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8369">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8361">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical">
        <callback name="get_optical">
          <source-position filename="udisks-generated.h" line="805"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8989">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8983">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_blank">
        <callback name="get_optical_blank">
          <source-position filename="udisks-generated.h" line="807"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9022">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9016">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_audio_tracks">
        <callback name="get_optical_num_audio_tracks">
          <source-position filename="udisks-generated.h" line="809"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9088">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9082">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_data_tracks">
        <callback name="get_optical_num_data_tracks">
          <source-position filename="udisks-generated.h" line="811"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9121">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9115">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_sessions">
        <callback name="get_optical_num_sessions">
          <source-position filename="udisks-generated.h" line="813"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9154">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9148">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_tracks">
        <callback name="get_optical_num_tracks">
          <source-position filename="udisks-generated.h" line="815"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9055">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9049">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_removable">
        <callback name="get_removable">
          <source-position filename="udisks-generated.h" line="817"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9326">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9320">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_revision">
        <callback name="get_revision">
          <source-position filename="udisks-generated.h" line="819"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8422">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8414">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rotation_rate">
        <callback name="get_rotation_rate">
          <source-position filename="udisks-generated.h" line="821"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9187">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9181">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_seat">
        <callback name="get_seat">
          <source-position filename="udisks-generated.h" line="823"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9275">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9267">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_serial">
        <callback name="get_serial">
          <source-position filename="udisks-generated.h" line="825"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8475">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8467">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sibling_id">
        <callback name="get_sibling_id">
          <source-position filename="udisks-generated.h" line="827"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9480">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9472">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="829"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8890">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8884">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sort_key">
        <callback name="get_sort_key">
          <source-position filename="udisks-generated.h" line="831"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9394">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9386">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_detected">
        <callback name="get_time_detected">
          <source-position filename="udisks-generated.h" line="833"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8923">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8917">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_media_detected">
        <callback name="get_time_media_detected">
          <source-position filename="udisks-generated.h" line="835"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8956">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8950">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vendor">
        <callback name="get_vendor">
          <source-position filename="udisks-generated.h" line="837"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8316">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8308">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_wwn">
        <callback name="get_wwn">
          <source-position filename="udisks-generated.h" line="839"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8528">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8520">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_power_off">
        <callback name="handle_power_off">
          <source-position filename="udisks-generated.h" line="841"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="DriveLSM"
               c:symbol-prefix="drive_lsm"
               c:type="UDisksDriveLSM"
               version="2.3.0"
               glib:type-name="UDisksDriveLSM"
               glib:get-type="udisks_drive_lsm_get_type"
               glib:type-struct="DriveLSMIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58651">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6793"/>
      <function name="interface_info"
                c:identifier="udisks_drive_lsm_interface_info"
                version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58606">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6801"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58611">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_lsm_override_properties"
                version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58621">Overrides all #GObject properties in the #UDisksDriveLSM interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6802"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58629">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58623">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58624">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_is_ok"
                      invoker="get_is_ok"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58797">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsOK"&gt;"IsOK"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6773"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58805">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58799">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_raid_degraded"
                      invoker="get_is_raid_degraded"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58834">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidDegraded"&gt;"IsRaidDegraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6775"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58842">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58836">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_raid_error"
                      invoker="get_is_raid_error"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58871">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidError"&gt;"IsRaidError"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6777"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58879">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58873">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_raid_reconstructing"
                      invoker="get_is_raid_reconstructing"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58945">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidReconstructing"&gt;"IsRaidReconstructing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6779"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58953">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58947">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_raid_verifying"
                      invoker="get_is_raid_verifying"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58908">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidVerifying"&gt;"IsRaidVerifying"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6781"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58916">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58910">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_min_io_size"
                      invoker="get_min_io_size"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59100">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.MinIoSize"&gt;"MinIoSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6783"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59108">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59102">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_opt_io_size"
                      invoker="get_opt_io_size"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59137">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.OptIoSize"&gt;"OptIoSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6785"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59145">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59139">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_raid_disk_count"
                      invoker="get_raid_disk_count"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59174">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidDiskCount"&gt;"RaidDiskCount"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6787"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59182">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59176">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_raid_type"
                      invoker="get_raid_type"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58982">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_lsm_dup_raid_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6789"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58992">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58984">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_status_info"
                      invoker="get_status_info"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59041">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_lsm_dup_status_info() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6791"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59051">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59043">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_raid_type"
              c:identifier="udisks_drive_lsm_dup_raid_type"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59004">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6822"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59012">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59006">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_status_info"
              c:identifier="udisks_drive_lsm_dup_status_info"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59063">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6826"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59071">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59065">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_ok"
              c:identifier="udisks_drive_lsm_get_is_ok"
              glib:get-property="is-ok"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58797">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsOK"&gt;"IsOK"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6806"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58805">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58799">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_raid_degraded"
              c:identifier="udisks_drive_lsm_get_is_raid_degraded"
              glib:get-property="is-raid-degraded"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58834">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidDegraded"&gt;"IsRaidDegraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6809"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58842">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58836">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_raid_error"
              c:identifier="udisks_drive_lsm_get_is_raid_error"
              glib:get-property="is-raid-error"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58871">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidError"&gt;"IsRaidError"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6812"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58879">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58873">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_raid_reconstructing"
              c:identifier="udisks_drive_lsm_get_is_raid_reconstructing"
              glib:get-property="is-raid-reconstructing"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58945">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidReconstructing"&gt;"IsRaidReconstructing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6818"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58953">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58947">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_raid_verifying"
              c:identifier="udisks_drive_lsm_get_is_raid_verifying"
              glib:get-property="is-raid-verifying"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58908">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidVerifying"&gt;"IsRaidVerifying"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6815"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58916">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58910">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_min_io_size"
              c:identifier="udisks_drive_lsm_get_min_io_size"
              glib:get-property="min-io-size"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59100">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.MinIoSize"&gt;"MinIoSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6829"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59108">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59102">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_opt_io_size"
              c:identifier="udisks_drive_lsm_get_opt_io_size"
              glib:get-property="opt-io-size"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59137">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.OptIoSize"&gt;"OptIoSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6832"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59145">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59139">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_raid_disk_count"
              c:identifier="udisks_drive_lsm_get_raid_disk_count"
              glib:get-property="raid-disk-count"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59174">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidDiskCount"&gt;"RaidDiskCount"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6835"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59182">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59176">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_raid_type"
              c:identifier="udisks_drive_lsm_get_raid_type"
              glib:get-property="raid-type"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58982">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_lsm_dup_raid_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6821"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58992">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58984">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status_info"
              c:identifier="udisks_drive_lsm_get_status_info"
              glib:get-property="status-info"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59041">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_lsm_dup_status_info() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6825"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59051">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59043">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_is_ok"
              c:identifier="udisks_drive_lsm_set_is_ok"
              glib:set-property="is-ok"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58817">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsOK"&gt;"IsOK"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6807"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58819">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58820">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_raid_degraded"
              c:identifier="udisks_drive_lsm_set_is_raid_degraded"
              glib:set-property="is-raid-degraded"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58854">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidDegraded"&gt;"IsRaidDegraded"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6810"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58856">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58857">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_raid_error"
              c:identifier="udisks_drive_lsm_set_is_raid_error"
              glib:set-property="is-raid-error"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58891">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidError"&gt;"IsRaidError"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6813"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58893">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58894">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_raid_reconstructing"
              c:identifier="udisks_drive_lsm_set_is_raid_reconstructing"
              glib:set-property="is-raid-reconstructing"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58965">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidReconstructing"&gt;"IsRaidReconstructing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6819"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58967">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58968">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_raid_verifying"
              c:identifier="udisks_drive_lsm_set_is_raid_verifying"
              glib:set-property="is-raid-verifying"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58928">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidVerifying"&gt;"IsRaidVerifying"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6816"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58930">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58931">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_min_io_size"
              c:identifier="udisks_drive_lsm_set_min_io_size"
              glib:set-property="min-io-size"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59120">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.MinIoSize"&gt;"MinIoSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6830"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59122">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59123">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opt_io_size"
              c:identifier="udisks_drive_lsm_set_opt_io_size"
              glib:set-property="opt-io-size"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59157">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.OptIoSize"&gt;"OptIoSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6833"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59159">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59160">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_raid_disk_count"
              c:identifier="udisks_drive_lsm_set_raid_disk_count"
              glib:set-property="raid-disk-count"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59194">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidDiskCount"&gt;"RaidDiskCount"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6836"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59196">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59197">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_raid_type"
              c:identifier="udisks_drive_lsm_set_raid_type"
              glib:set-property="raid-type"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59024">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6823"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59026">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59027">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status_info"
              c:identifier="udisks_drive_lsm_set_status_info"
              glib:set-property="status-info"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59083">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59085">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59086">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="is-ok"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_ok"
                getter="get_is_ok"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58685">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsOK"&gt;"IsOK"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-raid-degraded"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_raid_degraded"
                getter="get_is_raid_degraded"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58696">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidDegraded"&gt;"IsRaidDegraded"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-raid-error"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_raid_error"
                getter="get_is_raid_error"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58707">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidError"&gt;"IsRaidError"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-raid-reconstructing"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_raid_reconstructing"
                getter="get_is_raid_reconstructing"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58729">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidReconstructing"&gt;"IsRaidReconstructing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-raid-verifying"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_raid_verifying"
                getter="get_is_raid_verifying"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58718">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidVerifying"&gt;"IsRaidVerifying"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="min-io-size"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_min_io_size"
                getter="get_min_io_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58762">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.MinIoSize"&gt;"MinIoSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="opt-io-size"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_opt_io_size"
                getter="get_opt_io_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58773">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.OptIoSize"&gt;"OptIoSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="raid-disk-count"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_raid_disk_count"
                getter="get_raid_disk_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58784">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidDiskCount"&gt;"RaidDiskCount"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="raid-type"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_raid_type"
                getter="get_raid_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58740">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="status-info"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_status_info"
                getter="get_status_info"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58751">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="DriveLSMIface"
            c:type="UDisksDriveLSMIface"
            glib:is-gtype-struct-for="DriveLSM"
            version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58659">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6793"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58661">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_is_ok">
        <callback name="get_is_ok">
          <source-position filename="udisks-generated.h" line="6773"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58805">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="58799">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_raid_degraded">
        <callback name="get_is_raid_degraded">
          <source-position filename="udisks-generated.h" line="6775"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58842">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="58836">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_raid_error">
        <callback name="get_is_raid_error">
          <source-position filename="udisks-generated.h" line="6777"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58879">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="58873">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_raid_reconstructing">
        <callback name="get_is_raid_reconstructing">
          <source-position filename="udisks-generated.h" line="6779"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58953">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="58947">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_raid_verifying">
        <callback name="get_is_raid_verifying">
          <source-position filename="udisks-generated.h" line="6781"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58916">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="58910">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_min_io_size">
        <callback name="get_min_io_size">
          <source-position filename="udisks-generated.h" line="6783"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59108">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59102">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_opt_io_size">
        <callback name="get_opt_io_size">
          <source-position filename="udisks-generated.h" line="6785"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59145">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59139">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_raid_disk_count">
        <callback name="get_raid_disk_count">
          <source-position filename="udisks-generated.h" line="6787"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59182">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59176">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_raid_type">
        <callback name="get_raid_type">
          <source-position filename="udisks-generated.h" line="6789"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58992">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="58984">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_status_info">
        <callback name="get_status_info">
          <source-position filename="udisks-generated.h" line="6791"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59051">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59043">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveLSMProxy"
           c:symbol-prefix="drive_lsm_proxy"
           c:type="UDisksDriveLSMProxy"
           version="2.3.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveLSMProxy"
           glib:get-type="udisks_drive_lsm_proxy_get_type"
           glib:type-struct="DriveLSMProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="59213">The #UDisksDriveLSMProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6862"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DriveLSM"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_lsm_proxy_new_finish"
                   version="2.3.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59623">Finishes an operation started with udisks_drive_lsm_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6878"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59630">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLSMProxy" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59625">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_lsm_proxy_new_for_bus_finish"
                   version="2.3.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59719">Finishes an operation started with udisks_drive_lsm_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6897"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59726">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLSMProxy" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59721">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_lsm_proxy_new_for_bus_sync"
                   version="2.3.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59746">Like udisks_drive_lsm_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_lsm_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6900"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59761">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLSMProxy" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59748">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59749">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59750">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59751">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59752">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_lsm_proxy_new_sync"
                   version="2.3.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59650">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_lsm_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6881"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59665">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLSMProxy" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59652">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59653">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59654">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59655">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59656">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_drive_lsm_proxy_new"
                version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59591">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_proxy_new_finish() to get the result of the operation.

See udisks_drive_lsm_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6870"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59593">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59594">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59595">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59596">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59597">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59598">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59599">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_lsm_proxy_new_for_bus"
                version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59687">Like udisks_drive_lsm_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_lsm_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6889"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59689">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59690">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59691">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59692">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59693">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59694">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59695">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveLSMProxyPrivate"
              c:type="UDisksDriveLSMProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveLSMProxyClass"
            c:type="UDisksDriveLSMProxyClass"
            glib:is-gtype-struct-for="DriveLSMProxy"
            version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="59221">Class structure for #UDisksDriveLSMProxy.</doc>
      <source-position filename="udisks-generated.h" line="6862"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59223">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveLSMProxyPrivate"
            c:type="UDisksDriveLSMProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6850"/>
    </record>
    <class name="DriveLSMSkeleton"
           c:symbol-prefix="drive_lsm_skeleton"
           c:type="UDisksDriveLSMSkeleton"
           version="2.3.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveLSMSkeleton"
           glib:get-type="udisks_drive_lsm_skeleton_get_type"
           glib:type-struct="DriveLSMSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="59785">The #UDisksDriveLSMSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6932"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DriveLSM"/>
      <constructor name="new"
                   c:identifier="udisks_drive_lsm_skeleton_new"
                   version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60359">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6940"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60364">The skeleton object.</doc>
          <type name="DriveLSMSkeleton" c:type="UDisksDriveLSM*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveLSMSkeletonPrivate"
              c:type="UDisksDriveLSMSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveLSMSkeletonClass"
            c:type="UDisksDriveLSMSkeletonClass"
            glib:is-gtype-struct-for="DriveLSMSkeleton"
            version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="59793">Class structure for #UDisksDriveLSMSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6932"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59795">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveLSMSkeletonPrivate"
            c:type="UDisksDriveLSMSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6920"/>
    </record>
    <interface name="DriveLsmLocal"
               c:symbol-prefix="drive_lsm_local"
               c:type="UDisksDriveLsmLocal"
               glib:type-name="UDisksDriveLsmLocal"
               glib:get-type="udisks_drive_lsm_local_get_type"
               glib:type-struct="DriveLsmLocalIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60615">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6979"/>
      <function name="interface_info"
                c:identifier="udisks_drive_lsm_local_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60532">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6987"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60537">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_lsm_local_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60545">Overrides all #GObject properties in the #UDisksDriveLsmLocal interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6988"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60553">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60547">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60548">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_turn_fault_ledoff">
        <source-position filename="udisks-generated.h" line="6959"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_turn_fault_ledon">
        <source-position filename="udisks-generated.h" line="6964"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_turn_ident_ledoff">
        <source-position filename="udisks-generated.h" line="6969"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_turn_ident_ledon">
        <source-position filename="udisks-generated.h" line="6974"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_turn_fault_ledoff"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledoff"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61053">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOff"&gt;TurnFaultLEDOff()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_call_turn_fault_ledoff_finish() to get the result of the operation.

See udisks_drive_lsm_local_call_turn_fault_ledoff_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7065"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61055">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61056">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61057">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61058">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61059">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledoff_finish"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledoff_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61088">Finishes an operation started with udisks_drive_lsm_local_call_turn_fault_ledoff().</doc>
        <source-position filename="udisks-generated.h" line="7072"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61096">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61090">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61091">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_call_turn_fault_ledoff().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledoff_sync"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledoff_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61117">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOff"&gt;TurnFaultLEDOff()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_call_turn_fault_ledoff() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7077"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61128">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61119">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61120">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61121">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledon"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledon"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60949">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOn"&gt;TurnFaultLEDOn()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_call_turn_fault_ledon_finish() to get the result of the operation.

See udisks_drive_lsm_local_call_turn_fault_ledon_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7047"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60951">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60952">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60953">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60954">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60955">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledon_finish"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledon_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60984">Finishes an operation started with udisks_drive_lsm_local_call_turn_fault_ledon().</doc>
        <source-position filename="udisks-generated.h" line="7054"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60992">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60986">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60987">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_call_turn_fault_ledon().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledon_sync"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledon_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61013">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOn"&gt;TurnFaultLEDOn()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_call_turn_fault_ledon() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7059"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61024">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61015">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61016">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61017">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledoff"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledoff"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60845">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOff"&gt;TurnIdentLEDOff()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_call_turn_ident_ledoff_finish() to get the result of the operation.

See udisks_drive_lsm_local_call_turn_ident_ledoff_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7029"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60847">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60848">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60849">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60850">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60851">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledoff_finish"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledoff_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60880">Finishes an operation started with udisks_drive_lsm_local_call_turn_ident_ledoff().</doc>
        <source-position filename="udisks-generated.h" line="7036"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60888">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60882">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60883">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_call_turn_ident_ledoff().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledoff_sync"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledoff_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60909">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOff"&gt;TurnIdentLEDOff()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_call_turn_ident_ledoff() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7041"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60920">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60911">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60912">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60913">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledon"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledon"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60741">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOn"&gt;TurnIdentLEDOn()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_call_turn_ident_ledon_finish() to get the result of the operation.

See udisks_drive_lsm_local_call_turn_ident_ledon_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7011"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60743">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60744">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60745">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60746">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60747">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledon_finish"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledon_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60776">Finishes an operation started with udisks_drive_lsm_local_call_turn_ident_ledon().</doc>
        <source-position filename="udisks-generated.h" line="7018"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60784">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60778">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60779">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_call_turn_ident_ledon().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledon_sync"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledon_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60805">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOn"&gt;TurnIdentLEDOn()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_call_turn_ident_ledon() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7023"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60816">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60807">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60808">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60809">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_turn_fault_ledoff"
              c:identifier="udisks_drive_lsm_local_complete_turn_fault_ledoff"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61217">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOff"&gt;TurnFaultLEDOff()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7004"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61219">A #UDisksDriveLsmLocal.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61220">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_turn_fault_ledon"
              c:identifier="udisks_drive_lsm_local_complete_turn_fault_ledon"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61197">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOn"&gt;TurnFaultLEDOn()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61199">A #UDisksDriveLsmLocal.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61200">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_turn_ident_ledoff"
              c:identifier="udisks_drive_lsm_local_complete_turn_ident_ledoff"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61177">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOff"&gt;TurnIdentLEDOff()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6996"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61179">A #UDisksDriveLsmLocal.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61180">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_turn_ident_ledon"
              c:identifier="udisks_drive_lsm_local_complete_turn_ident_ledon"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61157">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOn"&gt;TurnIdentLEDOn()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6992"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61159">A #UDisksDriveLsmLocal.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61160">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-turn-fault-ledoff" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60714">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOff"&gt;TurnFaultLEDOff()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_lsm_local_complete_turn_fault_ledoff() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60724">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60717">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60718">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-turn-fault-ledon" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60689">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOn"&gt;TurnFaultLEDOn()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_lsm_local_complete_turn_fault_ledon() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60699">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60692">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60693">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-turn-ident-ledoff" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60664">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOff"&gt;TurnIdentLEDOff()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_lsm_local_complete_turn_ident_ledoff() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60674">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60667">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60668">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-turn-ident-ledon" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60639">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOn"&gt;TurnIdentLEDOn()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_lsm_local_complete_turn_ident_ledon() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60649">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60642">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60643">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DriveLsmLocalIface"
            c:type="UDisksDriveLsmLocalIface"
            glib:is-gtype-struct-for="DriveLsmLocal">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60621">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6979"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60623">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_turn_fault_ledoff">
        <callback name="handle_turn_fault_ledoff">
          <source-position filename="udisks-generated.h" line="6959"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_turn_fault_ledon">
        <callback name="handle_turn_fault_ledon">
          <source-position filename="udisks-generated.h" line="6964"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_turn_ident_ledoff">
        <callback name="handle_turn_ident_ledoff">
          <source-position filename="udisks-generated.h" line="6969"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_turn_ident_ledon">
        <callback name="handle_turn_ident_ledon">
          <source-position filename="udisks-generated.h" line="6974"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveLsmLocalProxy"
           c:symbol-prefix="drive_lsm_local_proxy"
           c:type="UDisksDriveLsmLocalProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveLsmLocalProxy"
           glib:get-type="udisks_drive_lsm_local_proxy_get_type"
           glib:type-struct="DriveLsmLocalProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61239">The #UDisksDriveLsmLocalProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7108"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DriveLsmLocal"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_lsm_local_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61430">Finishes an operation started with udisks_drive_lsm_local_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="7124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61437">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLsmLocalProxy" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61432">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_lsm_local_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61520">Finishes an operation started with udisks_drive_lsm_local_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="7143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61527">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLsmLocalProxy" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61522">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_lsm_local_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61545">Like udisks_drive_lsm_local_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7146"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61560">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLsmLocalProxy" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61547">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61548">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61549">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61550">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61551">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_lsm_local_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61455">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61470">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLsmLocalProxy" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61457">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61458">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61459">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61460">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61461">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_lsm_local_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61400">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_proxy_new_finish() to get the result of the operation.

See udisks_drive_lsm_local_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61402">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61403">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61404">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61405">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61406">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61407">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61408">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_lsm_local_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61490">Like udisks_drive_lsm_local_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_lsm_local_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61492">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61493">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61494">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61495">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61496">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61497">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61498">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveLsmLocalProxyPrivate"
              c:type="UDisksDriveLsmLocalProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveLsmLocalProxyClass"
            c:type="UDisksDriveLsmLocalProxyClass"
            glib:is-gtype-struct-for="DriveLsmLocalProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61245">Class structure for #UDisksDriveLsmLocalProxy.</doc>
      <source-position filename="udisks-generated.h" line="7108"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61247">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveLsmLocalProxyPrivate"
            c:type="UDisksDriveLsmLocalProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7096"/>
    </record>
    <class name="DriveLsmLocalSkeleton"
           c:symbol-prefix="drive_lsm_local_skeleton"
           c:type="UDisksDriveLsmLocalSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveLsmLocalSkeleton"
           glib:get-type="udisks_drive_lsm_local_skeleton_get_type"
           glib:type-struct="DriveLsmLocalSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61582">The #UDisksDriveLsmLocalSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7178"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DriveLsmLocal"/>
      <constructor name="new"
                   c:identifier="udisks_drive_lsm_local_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61853">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="7186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61858">The skeleton object.</doc>
          <type name="DriveLsmLocalSkeleton" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveLsmLocalSkeletonPrivate"
              c:type="UDisksDriveLsmLocalSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveLsmLocalSkeletonClass"
            c:type="UDisksDriveLsmLocalSkeletonClass"
            glib:is-gtype-struct-for="DriveLsmLocalSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61588">Class structure for #UDisksDriveLsmLocalSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="7178"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61590">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveLsmLocalSkeletonPrivate"
            c:type="UDisksDriveLsmLocalSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7166"/>
    </record>
    <class name="DriveProxy"
           c:symbol-prefix="drive_proxy"
           c:type="UDisksDriveProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveProxy"
           glib:get-type="udisks_drive_proxy_get_type"
           glib:type-struct="DriveProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="9887">The #UDisksDriveProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1057"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Drive"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10597">Finishes an operation started with udisks_drive_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="1073"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10604">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10599">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10687">Finishes an operation started with udisks_drive_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="1092"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10694">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10689">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10712">Like udisks_drive_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1095"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10727">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10714">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10715">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10716">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10717">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10718">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10622">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1076"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10637">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10624">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10625">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10626">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10627">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10628">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10567">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_proxy_new_finish() to get the result of the operation.

See udisks_drive_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1065"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10569">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10570">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10571">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10572">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10573">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10574">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10575">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10657">Like udisks_drive_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1084"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10659">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10660">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10661">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10662">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10663">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10664">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10665">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveProxyPrivate" c:type="UDisksDriveProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveProxyClass"
            c:type="UDisksDriveProxyClass"
            glib:is-gtype-struct-for="DriveProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="9893">Class structure for #UDisksDriveProxy.</doc>
      <source-position filename="udisks-generated.h" line="1057"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9895">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveProxyPrivate"
            c:type="UDisksDriveProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1045"/>
    </record>
    <class name="DriveSkeleton"
           c:symbol-prefix="drive_skeleton"
           c:type="UDisksDriveSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveSkeleton"
           glib:get-type="udisks_drive_skeleton_get_type"
           glib:type-struct="DriveSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="10749">The #UDisksDriveSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1127"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Drive"/>
      <constructor name="new" c:identifier="udisks_drive_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11566">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="1135"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="11571">The skeleton object.</doc>
          <type name="DriveSkeleton" c:type="UDisksDrive*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveSkeletonPrivate"
              c:type="UDisksDriveSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveSkeletonClass"
            c:type="UDisksDriveSkeletonClass"
            glib:is-gtype-struct-for="DriveSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="10755">Class structure for #UDisksDriveSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="1127"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10757">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveSkeletonPrivate"
            c:type="UDisksDriveSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1115"/>
    </record>
    <function-macro name="ENCRYPTED"
                    c:identifier="UDISKS_ENCRYPTED"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4319"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_GET_IFACE"
                    c:identifier="UDISKS_ENCRYPTED_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4321"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY"
                    c:identifier="UDISKS_ENCRYPTED_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4501"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4502"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY_GET_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4503"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4571"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4572"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4573"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ERROR_NUM_ENTRIES"
              value="27"
              c:type="UDISKS_ERROR_NUM_ENTRIES">
      <source-position filename="udisksenums.h" line="84"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Encrypted"
               c:symbol-prefix="encrypted"
               c:type="UDisksEncrypted"
               glib:type-name="UDisksEncrypted"
               glib:get-type="udisks_encrypted_get_type"
               glib:type-struct="EncryptedIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39176">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4364"/>
      <function name="interface_info"
                c:identifier="udisks_encrypted_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39089">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4372"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39094">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_encrypted_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39102">Overrides all #GObject properties in the #UDisksEncrypted interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4373"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39110">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39104">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39105">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39341">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4350"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39351">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39343">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cleartext_device"
                      invoker="get_cleartext_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39480">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_cleartext_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4352"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39490">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39482">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_encryption_type"
                      invoker="get_hint_encryption_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39394">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_hint_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4354"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39404">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39396">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metadata_size"
                      invoker="get_metadata_size"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39447">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39455">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39449">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_change_passphrase">
        <source-position filename="udisks-generated.h" line="4332"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_lock">
        <source-position filename="udisks-generated.h" line="4339"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="4358"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_unlock">
        <source-position filename="udisks-generated.h" line="4344"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_change_passphrase"
              c:identifier="udisks_encrypted_call_change_passphrase">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39741">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_change_passphrase_finish() to get the result of the operation.

See udisks_encrypted_call_change_passphrase_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4437"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39743">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39744">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39745">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39746">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39747">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39748">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39749">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_passphrase_finish"
              c:identifier="udisks_encrypted_call_change_passphrase_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39780">Finishes an operation started with udisks_encrypted_call_change_passphrase().</doc>
        <source-position filename="udisks-generated.h" line="4446"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39788">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39782">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39783">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_change_passphrase().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_passphrase_sync"
              c:identifier="udisks_encrypted_call_change_passphrase_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39807">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_change_passphrase() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4451"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39820">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39809">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39810">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39811">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39812">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39813">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock" c:identifier="udisks_encrypted_call_lock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39643">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_lock_finish() to get the result of the operation.

See udisks_encrypted_call_lock_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4419"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39645">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39646">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39647">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39648">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39649">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_finish"
              c:identifier="udisks_encrypted_call_lock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39676">Finishes an operation started with udisks_encrypted_call_lock().</doc>
        <source-position filename="udisks-generated.h" line="4426"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39684">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39678">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39679">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_lock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_sync"
              c:identifier="udisks_encrypted_call_lock_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39703">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_lock() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4431"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39714">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39705">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39706">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39707">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_encrypted_call_resize"
              version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39851">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_resize_finish() to get the result of the operation.

See udisks_encrypted_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4459"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39853">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39854">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39855">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39856">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39857">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39858">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_encrypted_call_resize_finish"
              version="2.8.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39889">Finishes an operation started with udisks_encrypted_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="4467"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39897">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39891">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39892">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_encrypted_call_resize_sync"
              version="2.8.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39918">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4472"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39930">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39920">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39921">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39922">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39923">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock" c:identifier="udisks_encrypted_call_unlock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39533">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_unlock_finish() to get the result of the operation.

See udisks_encrypted_call_unlock_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39535">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39536">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39537">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39538">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39539">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39540">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock_finish"
              c:identifier="udisks_encrypted_call_unlock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39569">Finishes an operation started with udisks_encrypted_call_unlock().</doc>
        <source-position filename="udisks-generated.h" line="4405"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39578">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39571">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="out_cleartext_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39572">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39573">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_unlock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock_sync"
              c:identifier="udisks_encrypted_call_unlock_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39599">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_unlock() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4411"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39612">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39601">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39602">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39603">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_cleartext_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39604">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39605">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_change_passphrase"
              c:identifier="udisks_encrypted_complete_change_passphrase">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40000">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4386"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40002">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40003">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_lock"
              c:identifier="udisks_encrypted_complete_lock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39982">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4382"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39984">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39985">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_encrypted_complete_resize"
              version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40018">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4390"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40020">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40021">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_unlock"
              c:identifier="udisks_encrypted_complete_unlock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39961">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4377"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39963">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39964">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="cleartext_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39965">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_encrypted_dup_child_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39361">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4483"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39369">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39363">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_cleartext_device"
              c:identifier="udisks_encrypted_dup_cleartext_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39500">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4494"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39508">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39502">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_encryption_type"
              c:identifier="udisks_encrypted_dup_hint_encryption_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39414">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4487"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39422">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39416">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_encrypted_get_child_configuration"
              glib:get-property="child-configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39341">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4482"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39351">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39343">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cleartext_device"
              c:identifier="udisks_encrypted_get_cleartext_device"
              glib:get-property="cleartext-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39480">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_cleartext_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4493"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39490">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39482">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_encryption_type"
              c:identifier="udisks_encrypted_get_hint_encryption_type"
              glib:get-property="hint-encryption-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39394">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_hint_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4486"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39404">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39396">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_size"
              c:identifier="udisks_encrypted_get_metadata_size"
              glib:get-property="metadata-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39447">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4490"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39455">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39449">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_encrypted_set_child_configuration"
              glib:set-property="child-configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39379">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4484"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39381">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39382">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cleartext_device"
              c:identifier="udisks_encrypted_set_cleartext_device"
              glib:set-property="cleartext-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39518">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4495"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39520">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39521">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_encryption_type"
              c:identifier="udisks_encrypted_set_hint_encryption_type"
              glib:set-property="hint-encryption-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39432">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4488"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39434">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39435">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_size"
              c:identifier="udisks_encrypted_set_metadata_size"
              glib:set-property="metadata-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39465">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4491"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39467">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39468">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39303">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="cleartext-device"
                writable="1"
                transfer-ownership="none"
                setter="set_cleartext_device"
                getter="get_cleartext_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39330">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-encryption-type"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_encryption_type"
                getter="get_hint_encryption_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39312">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metadata-size"
                writable="1"
                transfer-ownership="none"
                setter="set_metadata_size"
                getter="get_metadata_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39321">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="handle-change-passphrase" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39251">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_change_passphrase() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39263">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39254">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39255">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39256">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39257">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-lock" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39228">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_lock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39238">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39231">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39232">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39276">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39287">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39279">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39280">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39281">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-unlock" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39204">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_unlock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39215">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39207">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39208">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39209">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="EncryptedIface"
            c:type="UDisksEncryptedIface"
            glib:is-gtype-struct-for="Encrypted">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39182">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4364"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39184">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_change_passphrase">
        <callback name="handle_change_passphrase">
          <source-position filename="udisks-generated.h" line="4332"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_new_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_lock">
        <callback name="handle_lock">
          <source-position filename="udisks-generated.h" line="4339"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_unlock">
        <callback name="handle_unlock">
          <source-position filename="udisks-generated.h" line="4344"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="4350"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39351">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="39343">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cleartext_device">
        <callback name="get_cleartext_device">
          <source-position filename="udisks-generated.h" line="4352"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39490">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="39482">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_encryption_type">
        <callback name="get_hint_encryption_type">
          <source-position filename="udisks-generated.h" line="4354"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39404">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="39396">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metadata_size">
        <callback name="get_metadata_size">
          <source-position filename="udisks-generated.h" line="4356"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39455">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="39449">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="4358"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EncryptedProxy"
           c:symbol-prefix="encrypted_proxy"
           c:type="UDisksEncryptedProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksEncryptedProxy"
           glib:get-type="udisks_encrypted_proxy_get_type"
           glib:type-struct="EncryptedProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40040">The #UDisksEncryptedProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4521"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Encrypted"/>
      <constructor name="new_finish"
                   c:identifier="udisks_encrypted_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40346">Finishes an operation started with udisks_encrypted_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4537"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40353">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40348">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_encrypted_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40436">Finishes an operation started with udisks_encrypted_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4556"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40443">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40438">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_encrypted_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40461">Like udisks_encrypted_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_encrypted_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4559"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40476">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40463">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40464">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40465">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40466">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40467">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_encrypted_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40371">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_encrypted_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4540"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40386">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40373">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40374">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40375">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40376">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40377">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_encrypted_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40316">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_proxy_new_finish() to get the result of the operation.

See udisks_encrypted_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4529"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40318">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40319">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40320">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40321">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40322">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40323">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40324">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_encrypted_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40406">Like udisks_encrypted_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_encrypted_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4548"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40408">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40409">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40410">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40411">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40412">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40413">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40414">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EncryptedProxyPrivate"
              c:type="UDisksEncryptedProxyPrivate*"/>
      </field>
    </class>
    <record name="EncryptedProxyClass"
            c:type="UDisksEncryptedProxyClass"
            glib:is-gtype-struct-for="EncryptedProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40046">Class structure for #UDisksEncryptedProxy.</doc>
      <source-position filename="udisks-generated.h" line="4521"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40048">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="EncryptedProxyPrivate"
            c:type="UDisksEncryptedProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4509"/>
    </record>
    <class name="EncryptedSkeleton"
           c:symbol-prefix="encrypted_skeleton"
           c:type="UDisksEncryptedSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksEncryptedSkeleton"
           glib:get-type="udisks_encrypted_skeleton_get_type"
           glib:type-struct="EncryptedSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40498">The #UDisksEncryptedSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4591"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Encrypted"/>
      <constructor name="new" c:identifier="udisks_encrypted_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40990">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4599"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40995">The skeleton object.</doc>
          <type name="EncryptedSkeleton" c:type="UDisksEncrypted*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EncryptedSkeletonPrivate"
              c:type="UDisksEncryptedSkeletonPrivate*"/>
      </field>
    </class>
    <record name="EncryptedSkeletonClass"
            c:type="UDisksEncryptedSkeletonClass"
            glib:is-gtype-struct-for="EncryptedSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40504">Class structure for #UDisksEncryptedSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4591"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40506">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="EncryptedSkeletonPrivate"
            c:type="UDisksEncryptedSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4579"/>
    </record>
    <enumeration name="Error"
                 glib:type-name="UDisksError"
                 glib:get-type="udisks_error_get_type"
                 c:type="UDisksError"
                 glib:error-domain="udisks-error-quark">
      <doc xml:space="preserve"
           filename="udisksenums.h"
           line="32">Error codes for the #UDISKS_ERROR error domain and the
corresponding D-Bus error names.</doc>
      <member name="failed"
              value="0"
              c:identifier="UDISKS_ERROR_FAILED"
              glib:nick="failed"
              glib:name="UDISKS_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="34">The operation failed.</doc>
      </member>
      <member name="cancelled"
              value="1"
              c:identifier="UDISKS_ERROR_CANCELLED"
              glib:nick="cancelled"
              glib:name="UDISKS_ERROR_CANCELLED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="35">The operation was cancelled.</doc>
      </member>
      <member name="already_cancelled"
              value="2"
              c:identifier="UDISKS_ERROR_ALREADY_CANCELLED"
              glib:nick="already-cancelled"
              glib:name="UDISKS_ERROR_ALREADY_CANCELLED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="36">The operation has already been cancelled.</doc>
      </member>
      <member name="not_authorized"
              value="3"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED"
              glib:nick="not-authorized"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="37">Not authorized to perform the requested operation.</doc>
      </member>
      <member name="not_authorized_can_obtain"
              value="4"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN"
              glib:nick="not-authorized-can-obtain"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="38">Like %UDISKS_ERROR_NOT_AUTHORIZED but authorization can be obtained through e.g. authentication.</doc>
      </member>
      <member name="not_authorized_dismissed"
              value="5"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED_DISMISSED"
              glib:nick="not-authorized-dismissed"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED_DISMISSED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="39">Like %UDISKS_ERROR_NOT_AUTHORIZED but an authentication was shown and the user dismissed it.</doc>
      </member>
      <member name="already_mounted"
              value="6"
              c:identifier="UDISKS_ERROR_ALREADY_MOUNTED"
              glib:nick="already-mounted"
              glib:name="UDISKS_ERROR_ALREADY_MOUNTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="40">The device is already mounted.</doc>
      </member>
      <member name="not_mounted"
              value="7"
              c:identifier="UDISKS_ERROR_NOT_MOUNTED"
              glib:nick="not-mounted"
              glib:name="UDISKS_ERROR_NOT_MOUNTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="41">The device is not mounted.</doc>
      </member>
      <member name="option_not_permitted"
              value="8"
              c:identifier="UDISKS_ERROR_OPTION_NOT_PERMITTED"
              glib:nick="option-not-permitted"
              glib:name="UDISKS_ERROR_OPTION_NOT_PERMITTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="42">Not permitted to use the requested option.</doc>
      </member>
      <member name="mounted_by_other_user"
              value="9"
              c:identifier="UDISKS_ERROR_MOUNTED_BY_OTHER_USER"
              glib:nick="mounted-by-other-user"
              glib:name="UDISKS_ERROR_MOUNTED_BY_OTHER_USER">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="43">The device is mounted by another user.</doc>
      </member>
      <member name="already_unmounting"
              value="10"
              c:identifier="UDISKS_ERROR_ALREADY_UNMOUNTING"
              glib:nick="already-unmounting"
              glib:name="UDISKS_ERROR_ALREADY_UNMOUNTING">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="44">The device is already unmounting.</doc>
      </member>
      <member name="not_supported"
              value="11"
              c:identifier="UDISKS_ERROR_NOT_SUPPORTED"
              glib:nick="not-supported"
              glib:name="UDISKS_ERROR_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="45">The operation is not supported due to missing driver/tool support.</doc>
      </member>
      <member name="timed_out"
              value="12"
              c:identifier="UDISKS_ERROR_TIMED_OUT"
              glib:nick="timed-out"
              glib:name="UDISKS_ERROR_TIMED_OUT">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="46">The operation timed out.</doc>
      </member>
      <member name="would_wakeup"
              value="13"
              c:identifier="UDISKS_ERROR_WOULD_WAKEUP"
              glib:nick="would-wakeup"
              glib:name="UDISKS_ERROR_WOULD_WAKEUP">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="47">The operation would wake up a disk that is in a deep-sleep state.</doc>
      </member>
      <member name="device_busy"
              value="14"
              c:identifier="UDISKS_ERROR_DEVICE_BUSY"
              glib:nick="device-busy"
              glib:name="UDISKS_ERROR_DEVICE_BUSY">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="48">Attempting to unmount a device that is busy.</doc>
      </member>
      <member name="iscsi_daemon_transport_failed"
              value="15"
              c:identifier="UDISKS_ERROR_ISCSI_DAEMON_TRANSPORT_FAILED"
              glib:nick="iscsi-daemon-transport-failed"
              glib:name="UDISKS_ERROR_ISCSI_DAEMON_TRANSPORT_FAILED">
      </member>
      <member name="iscsi_host_not_found"
              value="16"
              c:identifier="UDISKS_ERROR_ISCSI_HOST_NOT_FOUND"
              glib:nick="iscsi-host-not-found"
              glib:name="UDISKS_ERROR_ISCSI_HOST_NOT_FOUND">
      </member>
      <member name="iscsi_idmb"
              value="17"
              c:identifier="UDISKS_ERROR_ISCSI_IDMB"
              glib:nick="iscsi-idmb"
              glib:name="UDISKS_ERROR_ISCSI_IDMB">
      </member>
      <member name="iscsi_login_failed"
              value="18"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_FAILED"
              glib:nick="iscsi-login-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_FAILED">
      </member>
      <member name="iscsi_login_auth_failed"
              value="19"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_AUTH_FAILED"
              glib:nick="iscsi-login-auth-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_AUTH_FAILED">
      </member>
      <member name="iscsi_login_fatal"
              value="20"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_FATAL"
              glib:nick="iscsi-login-fatal"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_FATAL">
      </member>
      <member name="iscsi_logout_failed"
              value="21"
              c:identifier="UDISKS_ERROR_ISCSI_LOGOUT_FAILED"
              glib:nick="iscsi-logout-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGOUT_FAILED">
      </member>
      <member name="iscsi_no_firmware"
              value="22"
              c:identifier="UDISKS_ERROR_ISCSI_NO_FIRMWARE"
              glib:nick="iscsi-no-firmware"
              glib:name="UDISKS_ERROR_ISCSI_NO_FIRMWARE">
      </member>
      <member name="iscsi_no_objects_found"
              value="23"
              c:identifier="UDISKS_ERROR_ISCSI_NO_OBJECTS_FOUND"
              glib:nick="iscsi-no-objects-found"
              glib:name="UDISKS_ERROR_ISCSI_NO_OBJECTS_FOUND">
      </member>
      <member name="iscsi_not_connected"
              value="24"
              c:identifier="UDISKS_ERROR_ISCSI_NOT_CONNECTED"
              glib:nick="iscsi-not-connected"
              glib:name="UDISKS_ERROR_ISCSI_NOT_CONNECTED">
      </member>
      <member name="iscsi_transport_failed"
              value="25"
              c:identifier="UDISKS_ERROR_ISCSI_TRANSPORT_FAILED"
              glib:nick="iscsi-transport-failed"
              glib:name="UDISKS_ERROR_ISCSI_TRANSPORT_FAILED">
      </member>
      <member name="iscsi_unknown_discovery_type"
              value="26"
              c:identifier="UDISKS_ERROR_ISCSI_UNKNOWN_DISCOVERY_TYPE"
              glib:nick="iscsi-unknown-discovery-type"
              glib:name="UDISKS_ERROR_ISCSI_UNKNOWN_DISCOVERY_TYPE">
      </member>
      <function name="quark" c:identifier="udisks_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function-macro name="FILESYSTEM"
                    c:identifier="UDISKS_FILESYSTEM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3673"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5655"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_GET_IFACE"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5657"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5992"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5993"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5994"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6062"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6063"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6064"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_GET_IFACE"
                    c:identifier="UDISKS_FILESYSTEM_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3675"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY"
                    c:identifier="UDISKS_FILESYSTEM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3954"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3955"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3956"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4024"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4025"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4026"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Filesystem"
               c:symbol-prefix="filesystem"
               c:type="UDisksFilesystem"
               glib:type-name="UDisksFilesystem"
               glib:get-type="udisks_filesystem_get_type"
               glib:type-struct="FilesystemIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34755">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3733"/>
      <function name="interface_info"
                c:identifier="udisks_filesystem_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34618">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3741"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34623">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_filesystem_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34631">Overrides all #GObject properties in the #UDisksFilesystem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3742"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34639">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34633">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34634">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_mount_points"
                      invoker="get_mount_points"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34997">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_dup_mount_points() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3717"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35007">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34999">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35050">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3719"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35058">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35052">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_check">
        <source-position filename="udisks-generated.h" line="3686"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_mount">
        <source-position filename="udisks-generated.h" line="3691"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_repair">
        <source-position filename="udisks-generated.h" line="3696"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="3721"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="3701"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_uuid">
        <source-position filename="udisks-generated.h" line="3727"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_take_ownership">
        <source-position filename="udisks-generated.h" line="3707"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_unmount">
        <source-position filename="udisks-generated.h" line="3712"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_check" c:identifier="udisks_filesystem_call_check">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35609">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_check_finish() to get the result of the operation.

See udisks_filesystem_call_check_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3882"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35611">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35612">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35613">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35614">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35615">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_check_finish"
              c:identifier="udisks_filesystem_call_check_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35642">Finishes an operation started with udisks_filesystem_call_check().</doc>
        <source-position filename="udisks-generated.h" line="3889"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35651">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35644">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_consistent"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35645">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35646">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_check().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_check_sync"
              c:identifier="udisks_filesystem_call_check_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35672">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_check() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3895"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35684">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35674">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35675">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_consistent"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35676">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35677">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount" c:identifier="udisks_filesystem_call_mount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35297">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_mount_finish() to get the result of the operation.

See udisks_filesystem_call_mount_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3824"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35299">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35300">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35301">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35302">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35303">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount_finish"
              c:identifier="udisks_filesystem_call_mount_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35330">Finishes an operation started with udisks_filesystem_call_mount().</doc>
        <source-position filename="udisks-generated.h" line="3831"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35339">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35332">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_mount_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35333">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35334">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_mount().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount_sync"
              c:identifier="udisks_filesystem_call_mount_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35360">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_mount() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3837"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35372">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35362">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35363">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_mount_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35364">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35365">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair" c:identifier="udisks_filesystem_call_repair">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35713">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_repair_finish() to get the result of the operation.

See udisks_filesystem_call_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3902"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35715">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35716">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35717">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35718">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35719">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_finish"
              c:identifier="udisks_filesystem_call_repair_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35746">Finishes an operation started with udisks_filesystem_call_repair().</doc>
        <source-position filename="udisks-generated.h" line="3909"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35755">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35748">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_repaired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35749">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35750">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_sync"
              c:identifier="udisks_filesystem_call_repair_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35776">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3915"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35788">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35778">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35779">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_repaired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35780">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35781">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_filesystem_call_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35499">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_resize_finish() to get the result of the operation.

See udisks_filesystem_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3862"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35501">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35502">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35503">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35504">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35505">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35506">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_filesystem_call_resize_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35537">Finishes an operation started with udisks_filesystem_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="3870"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35545">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35539">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35540">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_filesystem_call_resize_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35566">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3875"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35578">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35568">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35569">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35570">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35571">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label"
              c:identifier="udisks_filesystem_call_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35083">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_set_label_finish() to get the result of the operation.

See udisks_filesystem_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3784"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35085">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35086">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35087">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35088">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35089">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35090">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_filesystem_call_set_label_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35119">Finishes an operation started with udisks_filesystem_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="3792"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35127">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35121">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35122">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_filesystem_call_set_label_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35146">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3797"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35158">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35148">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35149">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35150">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35151">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid"
              c:identifier="udisks_filesystem_call_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35187">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_set_uuid_finish() to get the result of the operation.

See udisks_filesystem_call_set_uuid_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3804"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35189">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35190">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35191">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35192">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35193">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35194">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_finish"
              c:identifier="udisks_filesystem_call_set_uuid_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35225">Finishes an operation started with udisks_filesystem_call_set_uuid().</doc>
        <source-position filename="udisks-generated.h" line="3812"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35233">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35227">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35228">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_set_uuid().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_sync"
              c:identifier="udisks_filesystem_call_set_uuid_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35254">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_set_uuid() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3817"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35266">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35256">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35257">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35258">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35259">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership"
              c:identifier="udisks_filesystem_call_take_ownership">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35817">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_take_ownership_finish() to get the result of the operation.

See udisks_filesystem_call_take_ownership_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3922"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35819">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35820">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35821">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35822">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35823">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership_finish"
              c:identifier="udisks_filesystem_call_take_ownership_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35850">Finishes an operation started with udisks_filesystem_call_take_ownership().</doc>
        <source-position filename="udisks-generated.h" line="3929"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35858">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35852">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35853">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_take_ownership().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership_sync"
              c:identifier="udisks_filesystem_call_take_ownership_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35877">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_take_ownership() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3934"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35888">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35879">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35880">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35881">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount"
              c:identifier="udisks_filesystem_call_unmount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35401">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_unmount_finish() to get the result of the operation.

See udisks_filesystem_call_unmount_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3844"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35403">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35404">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35405">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35406">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35407">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount_finish"
              c:identifier="udisks_filesystem_call_unmount_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35434">Finishes an operation started with udisks_filesystem_call_unmount().</doc>
        <source-position filename="udisks-generated.h" line="3851"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35442">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35436">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35437">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_unmount().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount_sync"
              c:identifier="udisks_filesystem_call_unmount_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35461">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_unmount() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3856"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35472">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35463">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35464">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35465">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_check"
              c:identifier="udisks_filesystem_complete_check">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36012">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3767"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36014">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36015">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="consistent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36016">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_mount"
              c:identifier="udisks_filesystem_complete_mount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35953">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3754"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35955">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35956">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="mount_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35957">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_repair"
              c:identifier="udisks_filesystem_complete_repair">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36033">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3772"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36035">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36036">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="repaired" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36037">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_filesystem_complete_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35992">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3763"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35994">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35995">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_filesystem_complete_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35915">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3746"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35917">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35918">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_uuid"
              c:identifier="udisks_filesystem_complete_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35933">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3750"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35935">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35936">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_take_ownership"
              c:identifier="udisks_filesystem_complete_take_ownership">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36054">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3777"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36056">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36057">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_unmount"
              c:identifier="udisks_filesystem_complete_unmount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35974">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3759"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35976">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35977">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_mount_points"
              c:identifier="udisks_filesystem_dup_mount_points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35017">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3944"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35025">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35019">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mount_points"
              c:identifier="udisks_filesystem_get_mount_points"
              glib:get-property="mount-points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34997">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_dup_mount_points() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3943"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35007">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34999">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_filesystem_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35050">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3947"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35058">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35052">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mount_points"
              c:identifier="udisks_filesystem_set_mount_points"
              glib:set-property="mount-points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35035">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3945"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35037">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35038">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_filesystem_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35068">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3948"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35070">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35071">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="mount-points"
                writable="1"
                transfer-ownership="none"
                setter="set_mount_points"
                getter="get_mount_points">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34977">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34986">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="handle-check" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34907">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_check() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34917">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34910">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34911">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-mount" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34835">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_mount() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34845">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34838">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34839">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-repair" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34930">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34940">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34933">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34934">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34881">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34892">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34884">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34885">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34886">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-label" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34785">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34796">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34788">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34789">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34790">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-uuid" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34809">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_set_uuid() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34820">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34812">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34813">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34814">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-take-ownership" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34953">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_take_ownership() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34963">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34956">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34957">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-unmount" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34858">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_unmount() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34868">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34861">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34862">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="FilesystemBTRFS"
               c:symbol-prefix="filesystem_btrfs"
               c:type="UDisksFilesystemBTRFS"
               version="2.1.3"
               glib:type-name="UDisksFilesystemBTRFS"
               glib:get-type="udisks_filesystem_btrfs_get_type"
               glib:type-struct="FilesystemBTRFSIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50470">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5731"/>
      <function name="interface_info"
                c:identifier="udisks_filesystem_btrfs_interface_info"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50314">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5739"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50319">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_filesystem_btrfs_override_properties"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50329">Overrides all #GObject properties in the #UDisksFilesystemBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5740"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50337">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50331">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50332">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_label"
                      invoker="get_label"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50789">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5700"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50799">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50791">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_devices"
                      invoker="get_num_devices"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50907">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5702"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50915">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50909">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_used"
                      invoker="get_used"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50944">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5704"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50952">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50946">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50848">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5706"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50858">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50850">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="5708"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_snapshot">
        <source-position filename="udisks-generated.h" line="5668"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_subvolume">
        <source-position filename="udisks-generated.h" line="5676"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_subvolumes">
        <source-position filename="udisks-generated.h" line="5682"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="5714"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_subvolume">
        <source-position filename="udisks-generated.h" line="5688"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_repair">
        <source-position filename="udisks-generated.h" line="5720"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="5725"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="5694"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_filesystem_btrfs_call_add_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50981">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_add_device_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5785"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50983">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50984">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50985">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50986">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50987">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50988">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_filesystem_btrfs_call_add_device_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51019">Finishes an operation started with udisks_filesystem_btrfs_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="5793"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51027">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51021">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51022">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_filesystem_btrfs_call_add_device_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51048">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5798"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51060">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51050">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51051">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51052">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51053">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51543">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_create_snapshot_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_create_snapshot_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5889"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51545">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51546">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51547">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51548">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51549">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51550">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51551">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51552">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_finish"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51587">Finishes an operation started with udisks_filesystem_btrfs_call_create_snapshot().</doc>
        <source-position filename="udisks-generated.h" line="5899"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51595">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51589">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51590">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_create_snapshot().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_sync"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51616">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_create_snapshot() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5904"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51630">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51618">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51619">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51620">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51621">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51622">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51623">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51201">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_create_subvolume_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_create_subvolume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5825"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51203">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51204">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51205">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51206">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51207">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51208">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume_finish"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51239">Finishes an operation started with udisks_filesystem_btrfs_call_create_subvolume().</doc>
        <source-position filename="udisks-generated.h" line="5833"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51247">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51241">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51242">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_create_subvolume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume_sync"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51268">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_create_subvolume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5838"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51280">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51270">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51271">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51272">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51273">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51421">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_get_subvolumes_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_get_subvolumes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5865"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51423">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51424">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51425">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51426">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51427">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51428">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes_finish"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51459">Finishes an operation started with udisks_filesystem_btrfs_call_get_subvolumes().</doc>
        <source-position filename="udisks-generated.h" line="5873"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51469">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51461">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="out_subvolumes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51462">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_subvolumes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51463">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51464">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_get_subvolumes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes_sync"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51494">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_get_subvolumes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5880"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51508">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51496">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51497">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51498">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_subvolumes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51499">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_subvolumes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51500">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51501">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_filesystem_btrfs_call_remove_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51091">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_remove_device_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5805"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51093">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51094">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51095">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51096">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51097">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51098">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_filesystem_btrfs_call_remove_device_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51129">Finishes an operation started with udisks_filesystem_btrfs_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="5813"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51137">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51131">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51132">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_filesystem_btrfs_call_remove_device_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51158">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5818"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51170">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51160">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51161">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51162">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51163">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51311">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_remove_subvolume_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_remove_subvolume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5845"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51313">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51314">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51315">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51316">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51317">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51318">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume_finish"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51349">Finishes an operation started with udisks_filesystem_btrfs_call_remove_subvolume().</doc>
        <source-position filename="udisks-generated.h" line="5853"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51357">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51351">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51352">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_remove_subvolume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume_sync"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51378">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_remove_subvolume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5858"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51390">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51380">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51381">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51382">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51383">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair"
              c:identifier="udisks_filesystem_btrfs_call_repair"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51665">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_repair_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5913"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51667">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51668">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51669">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51670">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51671">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_finish"
              c:identifier="udisks_filesystem_btrfs_call_repair_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51700">Finishes an operation started with udisks_filesystem_btrfs_call_repair().</doc>
        <source-position filename="udisks-generated.h" line="5920"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51708">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51702">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51703">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_sync"
              c:identifier="udisks_filesystem_btrfs_call_repair_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51729">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5925"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51740">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51731">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51732">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51733">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_filesystem_btrfs_call_resize"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51769">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_resize_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5931"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51771">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51772">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51773">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51774">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51775">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51776">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_filesystem_btrfs_call_resize_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51807">Finishes an operation started with udisks_filesystem_btrfs_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="5939"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51815">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51809">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51810">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_filesystem_btrfs_call_resize_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51836">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5944"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51848">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51838">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51839">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51840">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51841">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label"
              c:identifier="udisks_filesystem_btrfs_call_set_label"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51879">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_set_label_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5951"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51881">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51882">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51883">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51884">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51885">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51886">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_filesystem_btrfs_call_set_label_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51917">Finishes an operation started with udisks_filesystem_btrfs_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="5959"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51925">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51919">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51920">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_filesystem_btrfs_call_set_label_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51946">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5964"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51958">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51948">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51949">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51950">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51951">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_filesystem_btrfs_complete_add_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51989">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5744"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51991">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51992">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_snapshot"
              c:identifier="udisks_filesystem_btrfs_complete_create_snapshot"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52095">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5766"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52097">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52098">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_subvolume"
              c:identifier="udisks_filesystem_btrfs_complete_create_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52029">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5752"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52031">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52032">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_subvolumes"
              c:identifier="udisks_filesystem_btrfs_complete_get_subvolumes"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52069">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5760"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52071">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52072">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="subvolumes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52073">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="subvolumes_cnt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52074">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_filesystem_btrfs_complete_remove_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52009">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5748"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52011">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52012">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_subvolume"
              c:identifier="udisks_filesystem_btrfs_complete_remove_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52049">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5756"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52051">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52052">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_repair"
              c:identifier="udisks_filesystem_btrfs_complete_repair"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52115">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5770"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52117">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52118">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_filesystem_btrfs_complete_resize"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52135">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5774"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52137">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52138">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_filesystem_btrfs_complete_set_label"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52155">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5778"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52157">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52158">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_label"
              c:identifier="udisks_filesystem_btrfs_dup_label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50811">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5975"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50819">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50813">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_filesystem_btrfs_dup_uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50870">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5979"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50878">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50872">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="udisks_filesystem_btrfs_get_label"
              glib:get-property="label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50789">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5974"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50799">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50791">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_devices"
              c:identifier="udisks_filesystem_btrfs_get_num_devices"
              glib:get-property="num-devices"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50907">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5982"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50915">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50909">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_used"
              c:identifier="udisks_filesystem_btrfs_get_used"
              glib:get-property="used"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50944">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5985"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50952">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50946">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_filesystem_btrfs_get_uuid"
              glib:get-property="uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50848">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5978"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50858">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50850">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="udisks_filesystem_btrfs_set_label"
              glib:set-property="label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50831">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5976"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50833">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50834">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_devices"
              c:identifier="udisks_filesystem_btrfs_set_num_devices"
              glib:set-property="num-devices"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50927">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5983"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50929">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50930">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_used"
              c:identifier="udisks_filesystem_btrfs_set_used"
              glib:set-property="used"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50964">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5986"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50966">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50967">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_filesystem_btrfs_set_uuid"
              glib:set-property="uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50890">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5980"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50892">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50893">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="label"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50743">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="num-devices"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_num_devices"
                getter="get_num_devices"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50765">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="used"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_used"
                getter="get_used"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50776">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50754">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50507">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50518">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50510">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50511">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50512">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-snapshot" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50637">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_create_snapshot() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50650">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50640">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50641">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50642">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50643">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50644">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-subvolume" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50559">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_create_subvolume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50570">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50562">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50563">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50564">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-subvolumes" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50611">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_get_subvolumes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50622">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50614">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50615">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50616">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50533">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50544">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50536">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50537">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50538">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-subvolume" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50585">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_remove_subvolume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50596">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50588">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50589">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50590">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-repair" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50665">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50675">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50668">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50669">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50690">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50701">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50693">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50694">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50695">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-label" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50716">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50727">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50719">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50720">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50721">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="FilesystemBTRFSIface"
            c:type="UDisksFilesystemBTRFSIface"
            glib:is-gtype-struct-for="FilesystemBTRFS"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50478">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5731"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50480">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_snapshot">
        <callback name="handle_create_snapshot">
          <source-position filename="udisks-generated.h" line="5668"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_source" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_dest" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_ro" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_subvolume">
        <callback name="handle_create_subvolume">
          <source-position filename="udisks-generated.h" line="5676"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_subvolumes">
        <callback name="handle_get_subvolumes">
          <source-position filename="udisks-generated.h" line="5682"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_snapshots_only" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_subvolume">
        <callback name="handle_remove_subvolume">
          <source-position filename="udisks-generated.h" line="5688"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="5694"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_label">
        <callback name="get_label">
          <source-position filename="udisks-generated.h" line="5700"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50799">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="50791">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_devices">
        <callback name="get_num_devices">
          <source-position filename="udisks-generated.h" line="5702"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50915">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="50909">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_used">
        <callback name="get_used">
          <source-position filename="udisks-generated.h" line="5704"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50952">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="50946">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="5706"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50858">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="50850">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="5708"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="5714"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_repair">
        <callback name="handle_repair">
          <source-position filename="udisks-generated.h" line="5720"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="5725"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FilesystemBTRFSProxy"
           c:symbol-prefix="filesystem_btrfs_proxy"
           c:type="UDisksFilesystemBTRFSProxy"
           version="2.1.3"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksFilesystemBTRFSProxy"
           glib:get-type="udisks_filesystem_btrfs_proxy_get_type"
           glib:type-struct="FilesystemBTRFSProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52177">The #UDisksFilesystemBTRFSProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6012"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="FilesystemBTRFS"/>
      <constructor name="new_finish"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52491">Finishes an operation started with udisks_filesystem_btrfs_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6028"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52498">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52493">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52587">Finishes an operation started with udisks_filesystem_btrfs_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6047"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52594">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52589">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52614">Like udisks_filesystem_btrfs_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6050"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52629">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52616">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52617">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52618">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52619">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52620">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52518">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6031"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52533">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52520">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52521">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52522">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52523">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52524">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_filesystem_btrfs_proxy_new"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52459">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_proxy_new_finish() to get the result of the operation.

See udisks_filesystem_btrfs_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6020"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52461">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52462">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52463">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52464">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52465">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52466">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52467">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52555">Like udisks_filesystem_btrfs_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_filesystem_btrfs_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6039"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52557">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52558">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52559">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52560">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52561">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52562">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52563">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemBTRFSProxyPrivate"
              c:type="UDisksFilesystemBTRFSProxyPrivate*"/>
      </field>
    </class>
    <record name="FilesystemBTRFSProxyClass"
            c:type="UDisksFilesystemBTRFSProxyClass"
            glib:is-gtype-struct-for="FilesystemBTRFSProxy"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52185">Class structure for #UDisksFilesystemBTRFSProxy.</doc>
      <source-position filename="udisks-generated.h" line="6012"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52187">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="FilesystemBTRFSProxyPrivate"
            c:type="UDisksFilesystemBTRFSProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6000"/>
    </record>
    <class name="FilesystemBTRFSSkeleton"
           c:symbol-prefix="filesystem_btrfs_skeleton"
           c:type="UDisksFilesystemBTRFSSkeleton"
           version="2.1.3"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksFilesystemBTRFSSkeleton"
           glib:get-type="udisks_filesystem_btrfs_skeleton_get_type"
           glib:type-struct="FilesystemBTRFSSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52653">The #UDisksFilesystemBTRFSSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6082"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="FilesystemBTRFS"/>
      <constructor name="new"
                   c:identifier="udisks_filesystem_btrfs_skeleton_new"
                   version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53149">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6090"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53154">The skeleton object.</doc>
          <type name="FilesystemBTRFSSkeleton"
                c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemBTRFSSkeletonPrivate"
              c:type="UDisksFilesystemBTRFSSkeletonPrivate*"/>
      </field>
    </class>
    <record name="FilesystemBTRFSSkeletonClass"
            c:type="UDisksFilesystemBTRFSSkeletonClass"
            glib:is-gtype-struct-for="FilesystemBTRFSSkeleton"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52661">Class structure for #UDisksFilesystemBTRFSSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6082"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52663">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="FilesystemBTRFSSkeletonPrivate"
            c:type="UDisksFilesystemBTRFSSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6070"/>
    </record>
    <record name="FilesystemIface"
            c:type="UDisksFilesystemIface"
            glib:is-gtype-struct-for="Filesystem">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34761">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3733"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34763">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_check">
        <callback name="handle_check">
          <source-position filename="udisks-generated.h" line="3686"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_mount">
        <callback name="handle_mount">
          <source-position filename="udisks-generated.h" line="3691"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_repair">
        <callback name="handle_repair">
          <source-position filename="udisks-generated.h" line="3696"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="3701"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_take_ownership">
        <callback name="handle_take_ownership">
          <source-position filename="udisks-generated.h" line="3707"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_unmount">
        <callback name="handle_unmount">
          <source-position filename="udisks-generated.h" line="3712"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mount_points">
        <callback name="get_mount_points">
          <source-position filename="udisks-generated.h" line="3717"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35007">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="34999">A #UDisksFilesystem.</doc>
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="3719"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35058">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35052">A #UDisksFilesystem.</doc>
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="3721"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_uuid">
        <callback name="handle_set_uuid">
          <source-position filename="udisks-generated.h" line="3727"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_uuid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FilesystemProxy"
           c:symbol-prefix="filesystem_proxy"
           c:type="UDisksFilesystemProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksFilesystemProxy"
           glib:get-type="udisks_filesystem_proxy_get_type"
           glib:type-struct="FilesystemProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36074">The #UDisksFilesystemProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3974"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Filesystem"/>
      <constructor name="new_finish"
                   c:identifier="udisks_filesystem_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36354">Finishes an operation started with udisks_filesystem_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3990"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36361">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36356">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_filesystem_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36444">Finishes an operation started with udisks_filesystem_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4009"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36451">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36446">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_filesystem_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36469">Like udisks_filesystem_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_filesystem_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4012"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36484">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36471">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36472">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36473">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36474">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36475">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_filesystem_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36379">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_filesystem_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3993"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36394">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36381">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36382">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36383">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36384">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36385">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_filesystem_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36324">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_proxy_new_finish() to get the result of the operation.

See udisks_filesystem_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3982"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36326">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36327">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36328">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36329">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36330">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36331">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36332">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_filesystem_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36414">Like udisks_filesystem_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_filesystem_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4001"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36416">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36417">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36418">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36419">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36420">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36421">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36422">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemProxyPrivate"
              c:type="UDisksFilesystemProxyPrivate*"/>
      </field>
    </class>
    <record name="FilesystemProxyClass"
            c:type="UDisksFilesystemProxyClass"
            glib:is-gtype-struct-for="FilesystemProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36080">Class structure for #UDisksFilesystemProxy.</doc>
      <source-position filename="udisks-generated.h" line="3974"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36082">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="FilesystemProxyPrivate"
            c:type="UDisksFilesystemProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3962"/>
    </record>
    <class name="FilesystemSkeleton"
           c:symbol-prefix="filesystem_skeleton"
           c:type="UDisksFilesystemSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksFilesystemSkeleton"
           glib:get-type="udisks_filesystem_skeleton_get_type"
           glib:type-struct="FilesystemSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36506">The #UDisksFilesystemSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4044"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Filesystem"/>
      <constructor name="new" c:identifier="udisks_filesystem_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36972">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4052"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36977">The skeleton object.</doc>
          <type name="FilesystemSkeleton" c:type="UDisksFilesystem*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemSkeletonPrivate"
              c:type="UDisksFilesystemSkeletonPrivate*"/>
      </field>
    </class>
    <record name="FilesystemSkeletonClass"
            c:type="UDisksFilesystemSkeletonClass"
            glib:is-gtype-struct-for="FilesystemSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36512">Class structure for #UDisksFilesystemSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4044"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36514">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="FilesystemSkeletonPrivate"
            c:type="UDisksFilesystemSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4032"/>
    </record>
    <interface name="ISCSISession"
               c:symbol-prefix="iscsi_session"
               c:type="UDisksISCSISession"
               glib:type-name="UDisksISCSISession"
               glib:get-type="udisks_iscsi_session_get_type"
               glib:type-struct="ISCSISessionIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56461">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6554"/>
      <function name="interface_info"
                c:identifier="udisks_iscsi_session_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56394">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6562"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56399">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_iscsi_session_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56407">Overrides all #GObject properties in the #UDisksISCSISession interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6563"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56415">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56409">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56410">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_abort_timeout"
                      invoker="get_abort_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56895">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.abort_timeout"&gt;"abort_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6523"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56903">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56897">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_address"
                      invoker="get_address"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56723">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6525"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56733">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56725">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_lu_reset_timeout"
                      invoker="get_lu_reset_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56928">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.lu_reset_timeout"&gt;"lu_reset_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6527"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56936">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56930">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_persistent_address"
                      invoker="get_persistent_address"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56809">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_persistent_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6529"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56819">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56811">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_persistent_port"
                      invoker="get_persistent_port"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56862">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_port"&gt;"persistent_port"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6531"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56870">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56864">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_port" invoker="get_port" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56776">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.port"&gt;"port"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6533"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56784">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56778">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_recovery_timeout"
                      invoker="get_recovery_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56961">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.recovery_timeout"&gt;"recovery_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6535"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56969">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56963">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_target_name"
                      invoker="get_target_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56637">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_target_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6537"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56647">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56639">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tgt_reset_timeout"
                      invoker="get_tgt_reset_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56994">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tgt_reset_timeout"&gt;"tgt_reset_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6539"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57002">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56996">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tpgt" invoker="get_tpgt" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56690">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tpgt"&gt;"tpgt"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6541"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56698">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56692">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_logout">
        <source-position filename="udisks-generated.h" line="6543"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_logout_interface">
        <source-position filename="udisks-generated.h" line="6548"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_logout"
              c:identifier="udisks_iscsi_session_call_logout"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57027">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_iscsi_session_call_logout_finish() to get the result of the operation.

See udisks_iscsi_session_call_logout_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6578"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57029">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57030">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57031">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57032">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57033">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_finish"
              c:identifier="udisks_iscsi_session_call_logout_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57062">Finishes an operation started with udisks_iscsi_session_call_logout().</doc>
        <source-position filename="udisks-generated.h" line="6585"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57070">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57064">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57065">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_iscsi_session_call_logout().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_interface"
              c:identifier="udisks_iscsi_session_call_logout_interface"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57131">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.LogoutInterface"&gt;LogoutInterface()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_iscsi_session_call_logout_interface_finish() to get the result of the operation.

See udisks_iscsi_session_call_logout_interface_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6596"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57133">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57134">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57135">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57136">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57137">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57138">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_interface_finish"
              c:identifier="udisks_iscsi_session_call_logout_interface_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57169">Finishes an operation started with udisks_iscsi_session_call_logout_interface().</doc>
        <source-position filename="udisks-generated.h" line="6604"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57177">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57171">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57172">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_iscsi_session_call_logout_interface().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_interface_sync"
              c:identifier="udisks_iscsi_session_call_logout_interface_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57198">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.LogoutInterface"&gt;LogoutInterface()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_iscsi_session_call_logout_interface() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6609"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57210">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57200">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57201">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57202">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57203">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_sync"
              c:identifier="udisks_iscsi_session_call_logout_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57091">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_iscsi_session_call_logout() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6590"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57102">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57093">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57094">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57095">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_logout"
              c:identifier="udisks_iscsi_session_complete_logout"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57241">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.Logout"&gt;Logout()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6567"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57243">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57244">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_logout_interface"
              c:identifier="udisks_iscsi_session_complete_logout_interface"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57261">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.LogoutInterface"&gt;LogoutInterface()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6571"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57263">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57264">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_address"
              c:identifier="udisks_iscsi_session_dup_address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56743">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6627"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56751">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56745">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_persistent_address"
              c:identifier="udisks_iscsi_session_dup_persistent_address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56829">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6634"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56837">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56831">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_target_name"
              c:identifier="udisks_iscsi_session_dup_target_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56657">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6620"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56665">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56659">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_abort_timeout"
              c:identifier="udisks_iscsi_session_get_abort_timeout"
              glib:get-property="abort-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56895">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.abort_timeout"&gt;"abort_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6640"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56903">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56897">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_address"
              c:identifier="udisks_iscsi_session_get_address"
              glib:get-property="address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56723">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6626"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56733">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56725">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lu_reset_timeout"
              c:identifier="udisks_iscsi_session_get_lu_reset_timeout"
              glib:get-property="lu-reset-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56928">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.lu_reset_timeout"&gt;"lu_reset_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6643"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56936">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56930">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persistent_address"
              c:identifier="udisks_iscsi_session_get_persistent_address"
              glib:get-property="persistent-address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56809">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_persistent_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6633"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56819">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56811">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persistent_port"
              c:identifier="udisks_iscsi_session_get_persistent_port"
              glib:get-property="persistent-port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56862">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_port"&gt;"persistent_port"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6637"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56870">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56864">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port"
              c:identifier="udisks_iscsi_session_get_port"
              glib:get-property="port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56776">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.port"&gt;"port"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6630"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56784">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56778">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_recovery_timeout"
              c:identifier="udisks_iscsi_session_get_recovery_timeout"
              glib:get-property="recovery-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56961">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.recovery_timeout"&gt;"recovery_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6646"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56969">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56963">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_name"
              c:identifier="udisks_iscsi_session_get_target_name"
              glib:get-property="target-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56637">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_target_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6619"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56647">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56639">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tgt_reset_timeout"
              c:identifier="udisks_iscsi_session_get_tgt_reset_timeout"
              glib:get-property="tgt-reset-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56994">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tgt_reset_timeout"&gt;"tgt_reset_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6649"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57002">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56996">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tpgt"
              c:identifier="udisks_iscsi_session_get_tpgt"
              glib:get-property="tpgt"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56690">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tpgt"&gt;"tpgt"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6623"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56698">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56692">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_abort_timeout"
              c:identifier="udisks_iscsi_session_set_abort_timeout"
              glib:set-property="abort-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56913">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.abort_timeout"&gt;"abort_timeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6641"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56915">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56916">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address"
              c:identifier="udisks_iscsi_session_set_address"
              glib:set-property="address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56761">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56763">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56764">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lu_reset_timeout"
              c:identifier="udisks_iscsi_session_set_lu_reset_timeout"
              glib:set-property="lu-reset-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56946">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.lu_reset_timeout"&gt;"lu_reset_timeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6644"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56948">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56949">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_persistent_address"
              c:identifier="udisks_iscsi_session_set_persistent_address"
              glib:set-property="persistent-address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56847">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6635"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56849">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56850">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_persistent_port"
              c:identifier="udisks_iscsi_session_set_persistent_port"
              glib:set-property="persistent-port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56880">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_port"&gt;"persistent_port"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6638"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56882">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56883">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port"
              c:identifier="udisks_iscsi_session_set_port"
              glib:set-property="port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56794">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.port"&gt;"port"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6631"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56796">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56797">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_recovery_timeout"
              c:identifier="udisks_iscsi_session_set_recovery_timeout"
              glib:set-property="recovery-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56979">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.recovery_timeout"&gt;"recovery_timeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6647"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56981">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56982">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target_name"
              c:identifier="udisks_iscsi_session_set_target_name"
              glib:set-property="target-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56675">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6621"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56677">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56678">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tgt_reset_timeout"
              c:identifier="udisks_iscsi_session_set_tgt_reset_timeout"
              glib:set-property="tgt-reset-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57012">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tgt_reset_timeout"&gt;"tgt_reset_timeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6650"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57014">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57015">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tpgt"
              c:identifier="udisks_iscsi_session_set_tpgt"
              glib:set-property="tpgt"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56708">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tpgt"&gt;"tpgt"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6624"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56710">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56711">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="abort-timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_abort_timeout"
                getter="get_abort_timeout"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56599">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.abort_timeout"&gt;"abort_timeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="address"
                writable="1"
                transfer-ownership="none"
                setter="set_address"
                getter="get_address"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56563">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lu-reset-timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_lu_reset_timeout"
                getter="get_lu_reset_timeout"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56608">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.lu_reset_timeout"&gt;"lu_reset_timeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="persistent-address"
                writable="1"
                transfer-ownership="none"
                setter="set_persistent_address"
                getter="get_persistent_address"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56581">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="persistent-port"
                writable="1"
                transfer-ownership="none"
                setter="set_persistent_port"
                getter="get_persistent_port"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56590">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_port"&gt;"persistent_port"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="port"
                writable="1"
                transfer-ownership="none"
                setter="set_port"
                getter="get_port"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56572">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.port"&gt;"port"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="recovery-timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_recovery_timeout"
                getter="get_recovery_timeout"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56617">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.recovery_timeout"&gt;"recovery_timeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="target-name"
                writable="1"
                transfer-ownership="none"
                setter="set_target_name"
                getter="get_target_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56545">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tgt-reset-timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_tgt_reset_timeout"
                getter="get_tgt_reset_timeout"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56626">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tgt_reset_timeout"&gt;"tgt_reset_timeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tpgt"
                writable="1"
                transfer-ownership="none"
                setter="set_tpgt"
                getter="get_tpgt"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56554">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tpgt"&gt;"tpgt"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <glib:signal name="handle-logout" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56493">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.Logout"&gt;Logout()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_iscsi_session_complete_logout() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56503">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56496">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56497">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-logout-interface" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56518">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.LogoutInterface"&gt;LogoutInterface()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_iscsi_session_complete_logout_interface() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56529">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56521">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56522">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56523">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ISCSISessionIface"
            c:type="UDisksISCSISessionIface"
            glib:is-gtype-struct-for="ISCSISession">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56467">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6554"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56469">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_abort_timeout">
        <callback name="get_abort_timeout">
          <source-position filename="udisks-generated.h" line="6523"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56903">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56897">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_address">
        <callback name="get_address">
          <source-position filename="udisks-generated.h" line="6525"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56733">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56725">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_lu_reset_timeout">
        <callback name="get_lu_reset_timeout">
          <source-position filename="udisks-generated.h" line="6527"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56936">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56930">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_persistent_address">
        <callback name="get_persistent_address">
          <source-position filename="udisks-generated.h" line="6529"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56819">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56811">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_persistent_port">
        <callback name="get_persistent_port">
          <source-position filename="udisks-generated.h" line="6531"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56870">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56864">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_port">
        <callback name="get_port">
          <source-position filename="udisks-generated.h" line="6533"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56784">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56778">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_recovery_timeout">
        <callback name="get_recovery_timeout">
          <source-position filename="udisks-generated.h" line="6535"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56969">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56963">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_target_name">
        <callback name="get_target_name">
          <source-position filename="udisks-generated.h" line="6537"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56647">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56639">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_tgt_reset_timeout">
        <callback name="get_tgt_reset_timeout">
          <source-position filename="udisks-generated.h" line="6539"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57002">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56996">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_tpgt">
        <callback name="get_tpgt">
          <source-position filename="udisks-generated.h" line="6541"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56698">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56692">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_logout">
        <callback name="handle_logout">
          <source-position filename="udisks-generated.h" line="6543"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_logout_interface">
        <callback name="handle_logout_interface">
          <source-position filename="udisks-generated.h" line="6548"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_iface" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ISCSISessionProxy"
           c:symbol-prefix="iscsi_session_proxy"
           c:type="UDisksISCSISessionProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksISCSISessionProxy"
           glib:get-type="udisks_iscsi_session_proxy_get_type"
           glib:type-struct="ISCSISessionProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57283">The #UDisksISCSISessionProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6676"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ISCSISession"/>
      <constructor name="new_finish"
                   c:identifier="udisks_iscsi_session_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57687">Finishes an operation started with udisks_iscsi_session_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6692"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57694">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ISCSISessionProxy" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57689">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_iscsi_session_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_iscsi_session_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57777">Finishes an operation started with udisks_iscsi_session_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6711"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57784">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ISCSISessionProxy" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57779">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_iscsi_session_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_iscsi_session_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57802">Like udisks_iscsi_session_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_iscsi_session_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6714"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57817">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ISCSISessionProxy" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57804">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57805">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57806">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57807">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57808">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_iscsi_session_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57712">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_iscsi_session_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6695"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57727">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ISCSISessionProxy" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57714">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57715">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57716">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57717">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57718">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_iscsi_session_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57657">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_iscsi_session_proxy_new_finish() to get the result of the operation.

See udisks_iscsi_session_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6684"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57659">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57660">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57661">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57662">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57663">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57664">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57665">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_iscsi_session_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57747">Like udisks_iscsi_session_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_iscsi_session_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_iscsi_session_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6703"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57749">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57750">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57751">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57752">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57753">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57754">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57755">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ISCSISessionProxyPrivate"
              c:type="UDisksISCSISessionProxyPrivate*"/>
      </field>
    </class>
    <record name="ISCSISessionProxyClass"
            c:type="UDisksISCSISessionProxyClass"
            glib:is-gtype-struct-for="ISCSISessionProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57289">Class structure for #UDisksISCSISessionProxy.</doc>
      <source-position filename="udisks-generated.h" line="6676"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57291">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ISCSISessionProxyPrivate"
            c:type="UDisksISCSISessionProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6664"/>
    </record>
    <class name="ISCSISessionSkeleton"
           c:symbol-prefix="iscsi_session_skeleton"
           c:type="UDisksISCSISessionSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksISCSISessionSkeleton"
           glib:get-type="udisks_iscsi_session_skeleton_get_type"
           glib:type-struct="ISCSISessionSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57839">The #UDisksISCSISessionSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6746"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ISCSISession"/>
      <constructor name="new" c:identifier="udisks_iscsi_session_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58409">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6754"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58414">The skeleton object.</doc>
          <type name="ISCSISessionSkeleton" c:type="UDisksISCSISession*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ISCSISessionSkeletonPrivate"
              c:type="UDisksISCSISessionSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ISCSISessionSkeletonClass"
            c:type="UDisksISCSISessionSkeletonClass"
            glib:is-gtype-struct-for="ISCSISessionSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57845">Class structure for #UDisksISCSISessionSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6746"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57847">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ISCSISessionSkeletonPrivate"
            c:type="UDisksISCSISessionSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6734"/>
    </record>
    <function-macro name="ISCSI_SESSION"
                    c:identifier="UDISKS_ISCSI_SESSION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6510"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_GET_IFACE"
                    c:identifier="UDISKS_ISCSI_SESSION_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6512"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_PROXY"
                    c:identifier="UDISKS_ISCSI_SESSION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6656"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_PROXY_CLASS"
                    c:identifier="UDISKS_ISCSI_SESSION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6657"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_PROXY_GET_CLASS"
                    c:identifier="UDISKS_ISCSI_SESSION_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6658"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_SKELETON"
                    c:identifier="UDISKS_ISCSI_SESSION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6726"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_SKELETON_CLASS"
                    c:identifier="UDISKS_ISCSI_SESSION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6727"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_ISCSI_SESSION_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6728"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK"
                    c:identifier="UDISKS_IS_BLOCK"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2448"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2"
                    c:identifier="UDISKS_IS_BLOCK_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7368"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_PROXY"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7406"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_SKELETON"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7475"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7476"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_PROXY"
                    c:identifier="UDISKS_IS_BLOCK_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2956"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_PROXY_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2957"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_SKELETON"
                    c:identifier="UDISKS_IS_BLOCK_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3026"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3027"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT"
                    c:identifier="UDISKS_IS_CLIENT"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="35"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE"
                    c:identifier="UDISKS_IS_DRIVE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="760"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA"
                    c:identifier="UDISKS_IS_DRIVE_ATA"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1143"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_ATA_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1562"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_ATA_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1563"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_ATA_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1632"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_ATA_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1633"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM"
                    c:identifier="UDISKS_IS_DRIVE_LSM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6762"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6948"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7091"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7092"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7161"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7162"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_LSM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6845"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_LSM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6846"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_LSM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6915"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_LSM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6916"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1040"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1041"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1110"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1111"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED"
                    c:identifier="UDISKS_IS_ENCRYPTED"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4320"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_PROXY"
                    c:identifier="UDISKS_IS_ENCRYPTED_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4504"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_PROXY_CLASS"
                    c:identifier="UDISKS_IS_ENCRYPTED_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4505"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_SKELETON"
                    c:identifier="UDISKS_IS_ENCRYPTED_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4574"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_ENCRYPTED_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4575"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM"
                    c:identifier="UDISKS_IS_FILESYSTEM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3674"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5656"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_PROXY"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5995"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5996"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_SKELETON"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6065"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6066"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_PROXY"
                    c:identifier="UDISKS_IS_FILESYSTEM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3957"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_PROXY_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3958"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_SKELETON"
                    c:identifier="UDISKS_IS_FILESYSTEM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4027"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4028"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION"
                    c:identifier="UDISKS_IS_ISCSI_SESSION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6511"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION_PROXY"
                    c:identifier="UDISKS_IS_ISCSI_SESSION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6659"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION_PROXY_CLASS"
                    c:identifier="UDISKS_IS_ISCSI_SESSION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6660"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION_SKELETON"
                    c:identifier="UDISKS_IS_ISCSI_SESSION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6729"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_ISCSI_SESSION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6730"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB"
                    c:identifier="UDISKS_IS_JOB"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5245"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_PROXY"
                    c:identifier="UDISKS_IS_JOB_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5376"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_PROXY_CLASS"
                    c:identifier="UDISKS_IS_JOB_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5377"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_SKELETON"
                    c:identifier="UDISKS_IS_JOB_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5446"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_JOB_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5447"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8251"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8671"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8672"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8741"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8742"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP"
                    c:identifier="UDISKS_IS_LOOP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4607"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_PROXY"
                    c:identifier="UDISKS_IS_LOOP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4718"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_PROXY_CLASS"
                    c:identifier="UDISKS_IS_LOOP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4719"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_SKELETON"
                    c:identifier="UDISKS_IS_LOOP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4788"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_LOOP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4789"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER"
                    c:identifier="UDISKS_IS_MANAGER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5479"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5553"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5554"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5623"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5624"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6098"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6408"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6409"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6478"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6479"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2"
                    c:identifier="UDISKS_IS_MANAGER_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7194"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7265"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7266"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7335"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7336"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME"
                    c:identifier="UDISKS_IS_MANAGER_NVME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="508"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_NVME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="657"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_NVME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="658"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_NVME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="727"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_NVME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="728"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="406"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="475"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="476"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID"
                    c:identifier="UDISKS_IS_MDRAID"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4821"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_PROXY"
                    c:identifier="UDISKS_IS_MDRAID_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5142"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MDRAID_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5143"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_SKELETON"
                    c:identifier="UDISKS_IS_MDRAID_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5212"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MDRAID_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5213"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1665"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER_PROXY"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1924"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER_PROXY_CLASS"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1925"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER_SKELETON"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1994"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1995"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS"
                    c:identifier="UDISKS_IS_NVME_FABRICS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2256"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS_PROXY"
                    c:identifier="UDISKS_IS_NVME_FABRICS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2345"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS_PROXY_CLASS"
                    c:identifier="UDISKS_IS_NVME_FABRICS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2346"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS_SKELETON"
                    c:identifier="UDISKS_IS_NVME_FABRICS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2415"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_NVME_FABRICS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2416"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2027"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE_PROXY"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2153"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2154"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE_SKELETON"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2223"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2224"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT"
                    c:identifier="UDISKS_IS_OBJECT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9103"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_INFO"
                    c:identifier="UDISKS_IS_OBJECT_INFO"
                    introspectable="0">
      <source-position filename="udisksobjectinfo.h" line="35"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_MANAGER_CLIENT"
                    c:identifier="UDISKS_IS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9274"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9275"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_PROXY"
                    c:identifier="UDISKS_IS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9182"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_PROXY_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9183"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_SKELETON"
                    c:identifier="UDISKS_IS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9213"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9214"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION"
                    c:identifier="UDISKS_IS_PARTITION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3302"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_PROXY"
                    c:identifier="UDISKS_IS_PARTITION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3571"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3572"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_SKELETON"
                    c:identifier="UDISKS_IS_PARTITION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3641"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3642"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE"
                    c:identifier="UDISKS_IS_PARTITION_TABLE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3059"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_PROXY"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3199"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3200"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_SKELETON"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3269"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3270"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7508"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7555"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7556"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7625"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7626"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE"
                    c:identifier="UDISKS_IS_SWAPSPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4060"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_PROXY"
                    c:identifier="UDISKS_IS_SWAPSPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4217"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_SWAPSPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4218"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_SKELETON"
                    c:identifier="UDISKS_IS_SWAPSPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4287"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_SWAPSPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4288"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME"
                    c:identifier="UDISKS_IS_VDO_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8774"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_VDO_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9001"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_VDO_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9002"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_VDO_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9071"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_VDO_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9072"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP"
                    c:identifier="UDISKS_IS_VOLUME_GROUP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7658"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_PROXY"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8148"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_PROXY_CLASS"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8149"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_SKELETON"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8218"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8219"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB" c:identifier="UDISKS_JOB" introspectable="0">
      <source-position filename="udisks-generated.h" line="5244"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_GET_IFACE"
                    c:identifier="UDISKS_JOB_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5246"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY"
                    c:identifier="UDISKS_JOB_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5373"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY_CLASS"
                    c:identifier="UDISKS_JOB_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5374"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY_GET_CLASS"
                    c:identifier="UDISKS_JOB_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5375"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON"
                    c:identifier="UDISKS_JOB_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5443"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON_CLASS"
                    c:identifier="UDISKS_JOB_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5444"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_JOB_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5445"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Job"
               c:symbol-prefix="job"
               c:type="UDisksJob"
               glib:type-name="UDisksJob"
               glib:get-type="udisks_job_get_type"
               glib:type-struct="JobIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="46926">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5288"/>
      <function name="interface_info" c:identifier="udisks_job_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46859">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5296"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46864">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_job_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46872">Overrides all #GObject properties in the #UDisksJob interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5297"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46880">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46874">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46875">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="completed">
        <source-position filename="udisks-generated.h" line="5283"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_success" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bytes" invoker="get_bytes" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47215">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47223">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47217">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cancelable"
                      invoker="get_cancelable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47433">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47441">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47435">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_expected_end_time"
                      invoker="get_expected_end_time"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47314">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5267"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47322">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47316">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_objects"
                      invoker="get_objects"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47347">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_objects() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5269"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47357">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47349">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operation"
                      invoker="get_operation"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47096">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_operation() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5271"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47106">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47098">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress"
                      invoker="get_progress"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47149">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47157">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47151">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress_valid"
                      invoker="get_progress_valid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47182">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5275"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47190">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47184">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rate" invoker="get_rate" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47248">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5277"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47256">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47250">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_start_time"
                      invoker="get_start_time"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47281">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5279"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47289">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47283">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_started_by_uid"
                      invoker="get_started_by_uid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47400">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47408">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47402">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <source-position filename="udisks-generated.h" line="5258"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_cancel" c:identifier="udisks_job_call_cancel">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47483">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_call_cancel_finish() to get the result of the operation.

See udisks_job_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5316"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47485">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47486">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47487">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47488">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47489">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="udisks_job_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47516">Finishes an operation started with udisks_job_call_cancel().</doc>
        <source-position filename="udisks-generated.h" line="5323"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47524">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47518">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47519">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="udisks_job_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47543">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_job_call_cancel() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5328"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47554">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47545">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47546">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47547">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel" c:identifier="udisks_job_complete_cancel">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47581">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47583">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47584">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_objects"
              c:identifier="udisks_job_dup_objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47367">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5360"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47375">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47369">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operation"
              c:identifier="udisks_job_dup_operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47116">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5338"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47124">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47118">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_completed" c:identifier="udisks_job_emit_completed">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47466">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-UDisks2-Job.Completed"&gt;"Completed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="udisks-generated.h" line="5308"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47468">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47469">Argument to pass with the signal.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47470">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bytes"
              c:identifier="udisks_job_get_bytes"
              glib:get-property="bytes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47215">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47223">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47217">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cancelable"
              c:identifier="udisks_job_get_cancelable"
              glib:get-property="cancelable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47433">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5366"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47441">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47435">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expected_end_time"
              c:identifier="udisks_job_get_expected_end_time"
              glib:get-property="expected-end-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47314">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47322">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47316">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_objects"
              c:identifier="udisks_job_get_objects"
              glib:get-property="objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47347">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_objects() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5359"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47357">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47349">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operation"
              c:identifier="udisks_job_get_operation"
              glib:get-property="operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47096">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_operation() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5337"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47106">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47098">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="udisks_job_get_progress"
              glib:get-property="progress"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47149">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5341"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47157">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47151">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_valid"
              c:identifier="udisks_job_get_progress_valid"
              glib:get-property="progress-valid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47182">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5344"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47190">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47184">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rate"
              c:identifier="udisks_job_get_rate"
              glib:get-property="rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47248">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5350"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47256">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47250">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_time"
              c:identifier="udisks_job_get_start_time"
              glib:get-property="start-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47281">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5353"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47289">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47283">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_started_by_uid"
              c:identifier="udisks_job_get_started_by_uid"
              glib:get-property="started-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47400">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5363"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47408">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47402">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bytes"
              c:identifier="udisks_job_set_bytes"
              glib:set-property="bytes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47233">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5348"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47235">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47236">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cancelable"
              c:identifier="udisks_job_set_cancelable"
              glib:set-property="cancelable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47451">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5367"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47453">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47454">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expected_end_time"
              c:identifier="udisks_job_set_expected_end_time"
              glib:set-property="expected-end-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47332">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5357"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47334">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47335">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_objects"
              c:identifier="udisks_job_set_objects"
              glib:set-property="objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47385">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5361"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47387">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47388">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation"
              c:identifier="udisks_job_set_operation"
              glib:set-property="operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47134">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5339"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47136">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47137">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="udisks_job_set_progress"
              glib:set-property="progress"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47167">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5342"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47169">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47170">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress_valid"
              c:identifier="udisks_job_set_progress_valid"
              glib:set-property="progress-valid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47200">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5345"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47202">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47203">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rate"
              c:identifier="udisks_job_set_rate"
              glib:set-property="rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47266">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5351"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47268">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47269">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_time"
              c:identifier="udisks_job_set_start_time"
              glib:set-property="start-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47299">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47301">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47302">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_started_by_uid"
              c:identifier="udisks_job_set_started_by_uid"
              glib:set-property="started-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47418">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5364"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47420">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47421">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="bytes"
                writable="1"
                transfer-ownership="none"
                setter="set_bytes"
                getter="get_bytes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47031">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="cancelable"
                writable="1"
                transfer-ownership="none"
                setter="set_cancelable"
                getter="get_cancelable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47085">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expected-end-time"
                writable="1"
                transfer-ownership="none"
                setter="set_expected_end_time"
                getter="get_expected_end_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47058">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="objects"
                writable="1"
                transfer-ownership="none"
                setter="set_objects"
                getter="get_objects">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47067">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="operation"
                writable="1"
                transfer-ownership="none"
                setter="set_operation"
                getter="get_operation"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47004">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47013">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="progress-valid"
                writable="1"
                transfer-ownership="none"
                setter="set_progress_valid"
                getter="get_progress_valid"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47022">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rate"
                writable="1"
                transfer-ownership="none"
                setter="set_rate"
                getter="get_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47040">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="start-time"
                writable="1"
                transfer-ownership="none"
                setter="set_start_time"
                getter="get_start_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47049">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="started-by-uid"
                writable="1"
                transfer-ownership="none"
                setter="set_started_by_uid"
                getter="get_started_by_uid"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47076">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="completed" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46982">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-UDisks2-Job.Completed"&gt;"Completed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46985">Argument.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46986">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46958">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_job_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46968">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46961">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46962">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="JobIface"
            c:type="UDisksJobIface"
            glib:is-gtype-struct-for="Job">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="46932">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5288"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46934">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <source-position filename="udisks-generated.h" line="5258"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bytes">
        <callback name="get_bytes">
          <source-position filename="udisks-generated.h" line="5263"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47223">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47217">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cancelable">
        <callback name="get_cancelable">
          <source-position filename="udisks-generated.h" line="5265"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47441">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47435">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_expected_end_time">
        <callback name="get_expected_end_time">
          <source-position filename="udisks-generated.h" line="5267"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47322">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47316">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_objects">
        <callback name="get_objects">
          <source-position filename="udisks-generated.h" line="5269"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47357">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47349">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operation">
        <callback name="get_operation">
          <source-position filename="udisks-generated.h" line="5271"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47106">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47098">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress">
        <callback name="get_progress">
          <source-position filename="udisks-generated.h" line="5273"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47157">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47151">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress_valid">
        <callback name="get_progress_valid">
          <source-position filename="udisks-generated.h" line="5275"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47190">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47184">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rate">
        <callback name="get_rate">
          <source-position filename="udisks-generated.h" line="5277"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47256">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47250">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_start_time">
        <callback name="get_start_time">
          <source-position filename="udisks-generated.h" line="5279"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47289">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47283">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_started_by_uid">
        <callback name="get_started_by_uid">
          <source-position filename="udisks-generated.h" line="5281"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47408">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47402">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="completed">
        <callback name="completed">
          <source-position filename="udisks-generated.h" line="5283"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
            <parameter name="arg_success" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="JobProxy"
           c:symbol-prefix="job_proxy"
           c:type="UDisksJobProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksJobProxy"
           glib:get-type="udisks_job_proxy_get_type"
           glib:type-struct="JobProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47601">The #UDisksJobProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5393"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Job"/>
      <constructor name="new_finish"
                   c:identifier="udisks_job_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48009">Finishes an operation started with udisks_job_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5409"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48016">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48011">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_job_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48099">Finishes an operation started with udisks_job_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5428"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48106">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48101">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_job_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48124">Like udisks_job_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_job_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5431"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48139">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48126">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48127">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48128">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48129">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48130">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_job_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48034">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_job_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5412"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48049">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48036">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48037">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48038">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48039">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48040">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_job_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47979">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_proxy_new_finish() to get the result of the operation.

See udisks_job_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5401"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47981">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47982">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47983">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47984">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47985">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47986">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47987">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus" c:identifier="udisks_job_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48069">Like udisks_job_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_job_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5420"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48071">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48072">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48073">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48074">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48075">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48076">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48077">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="JobProxyPrivate" c:type="UDisksJobProxyPrivate*"/>
      </field>
    </class>
    <record name="JobProxyClass"
            c:type="UDisksJobProxyClass"
            glib:is-gtype-struct-for="JobProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47607">Class structure for #UDisksJobProxy.</doc>
      <source-position filename="udisks-generated.h" line="5393"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47609">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="JobProxyPrivate"
            c:type="UDisksJobProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5381"/>
    </record>
    <class name="JobSkeleton"
           c:symbol-prefix="job_skeleton"
           c:type="UDisksJobSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksJobSkeleton"
           glib:get-type="udisks_job_skeleton_get_type"
           glib:type-struct="JobSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48161">The #UDisksJobSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5463"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Job"/>
      <constructor name="new" c:identifier="udisks_job_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48758">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5471"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48763">The skeleton object.</doc>
          <type name="JobSkeleton" c:type="UDisksJob*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="JobSkeletonPrivate" c:type="UDisksJobSkeletonPrivate*"/>
      </field>
    </class>
    <record name="JobSkeletonClass"
            c:type="UDisksJobSkeletonClass"
            glib:is-gtype-struct-for="JobSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48167">Class structure for #UDisksJobSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="5463"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48169">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="JobSkeletonPrivate"
            c:type="UDisksJobSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5451"/>
    </record>
    <function-macro name="LOGICAL_VOLUME"
                    c:identifier="UDISKS_LOGICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8250"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_LOGICAL_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8252"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8668"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8669"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8670"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8738"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8739"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8740"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP" c:identifier="UDISKS_LOOP" introspectable="0">
      <source-position filename="udisks-generated.h" line="4606"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_GET_IFACE"
                    c:identifier="UDISKS_LOOP_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4608"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY"
                    c:identifier="UDISKS_LOOP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4715"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY_CLASS"
                    c:identifier="UDISKS_LOOP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4716"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY_GET_CLASS"
                    c:identifier="UDISKS_LOOP_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4717"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON"
                    c:identifier="UDISKS_LOOP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4785"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON_CLASS"
                    c:identifier="UDISKS_LOOP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4786"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_LOOP_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4787"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="LogicalVolume"
               c:symbol-prefix="logical_volume"
               c:type="UDisksLogicalVolume"
               version="2.0.0"
               glib:type-name="UDisksLogicalVolume"
               glib:get-type="udisks_logical_volume_get_type"
               glib:type-struct="LogicalVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="70740">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="8349"/>
      <function name="interface_info"
                c:identifier="udisks_logical_volume_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70560">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="8357"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70565">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_logical_volume_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70575">Overrides all #GObject properties in the #UDisksLogicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="8358"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70583">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70577">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70578">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active"
                      invoker="get_active"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71331">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8319"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71339">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71333">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_block_device"
                      invoker="get_block_device"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71929">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_block_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8321"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71931">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71870">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8323"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71880">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71872">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_data_allocated_ratio"
                      invoker="get_data_allocated_ratio"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71464">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8325"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71472">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71466">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_layout"
                      invoker="get_layout"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71597">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_layout() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8327"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71607">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71599">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metadata_allocated_ratio"
                      invoker="get_metadata_allocated_ratio"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71501">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8329"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71509">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71503">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71272">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8331"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71282">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71274">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_origin"
                      invoker="get_origin"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71811">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_origin() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8333"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71821">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71813">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71427">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8335"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71435">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71429">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_structure"
                      invoker="get_structure"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71656">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_structure() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8337"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71666">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71658">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_ratio"
                      invoker="get_sync_ratio"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71715">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.SyncRatio"&gt;"SyncRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8339"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71723">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71717">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_thin_pool"
                      invoker="get_thin_pool"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71752">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_thin_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8341"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71762">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71754">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_"
                      invoker="get_type_"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71538">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8343"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71548">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71540">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71368">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8345"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71378">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71370">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_volume_group"
                      invoker="get_volume_group"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71213">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8347"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71223">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71215">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_activate">
        <source-position filename="udisks-generated.h" line="8263"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_attach">
        <source-position filename="udisks-generated.h" line="8268"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_detach">
        <source-position filename="udisks-generated.h" line="8274"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_split">
        <source-position filename="udisks-generated.h" line="8279"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_snapshot">
        <source-position filename="udisks-generated.h" line="8284"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_deactivate">
        <source-position filename="udisks-generated.h" line="8291"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="8296"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rename">
        <source-position filename="udisks-generated.h" line="8301"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_repair">
        <source-position filename="udisks-generated.h" line="8307"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="8313"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_activate"
              c:identifier="udisks_logical_volume_call_activate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71988">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_activate_finish() to get the result of the operation.

See udisks_logical_volume_call_activate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8408"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71990">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71991">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71992">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71993">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71994">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_finish"
              c:identifier="udisks_logical_volume_call_activate_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72023">Finishes an operation started with udisks_logical_volume_call_activate().</doc>
        <source-position filename="udisks-generated.h" line="8415"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72032">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72025">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72026">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72027">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_activate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_sync"
              c:identifier="udisks_logical_volume_call_activate_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72055">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_activate() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8421"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72067">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72057">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72058">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72059">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72060">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach"
              c:identifier="udisks_logical_volume_call_cache_attach"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72764">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_attach_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_attach_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8550"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72766">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72767">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72768">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72769">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72770">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72771">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach_finish"
              c:identifier="udisks_logical_volume_call_cache_attach_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72802">Finishes an operation started with udisks_logical_volume_call_cache_attach().</doc>
        <source-position filename="udisks-generated.h" line="8558"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72810">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72804">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72805">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_attach().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach_sync"
              c:identifier="udisks_logical_volume_call_cache_attach_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72831">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_attach() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8563"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72843">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72833">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72834">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72835">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72836">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach"
              c:identifier="udisks_logical_volume_call_cache_detach"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72978">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_detach_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_detach_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8588"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72980">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72981">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72982">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72983">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72984">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach_finish"
              c:identifier="udisks_logical_volume_call_cache_detach_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73013">Finishes an operation started with udisks_logical_volume_call_cache_detach().</doc>
        <source-position filename="udisks-generated.h" line="8595"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73021">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73015">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73016">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_detach().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach_sync"
              c:identifier="udisks_logical_volume_call_cache_detach_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73042">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_detach() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8600"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73053">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73044">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73045">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73046">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split"
              c:identifier="udisks_logical_volume_call_cache_split"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72874">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_split_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_split_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8570"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72876">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72877">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72878">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72879">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72880">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split_finish"
              c:identifier="udisks_logical_volume_call_cache_split_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72909">Finishes an operation started with udisks_logical_volume_call_cache_split().</doc>
        <source-position filename="udisks-generated.h" line="8577"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72917">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72911">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72912">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_split().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split_sync"
              c:identifier="udisks_logical_volume_call_cache_split_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72938">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_split() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8582"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72949">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72940">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72941">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72942">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot"
              c:identifier="udisks_logical_volume_call_create_snapshot"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72642">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_create_snapshot_finish() to get the result of the operation.

See udisks_logical_volume_call_create_snapshot_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8526"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72644">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72645">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72646">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72647">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72648">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72649">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72650">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_finish"
              c:identifier="udisks_logical_volume_call_create_snapshot_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72683">Finishes an operation started with udisks_logical_volume_call_create_snapshot().</doc>
        <source-position filename="udisks-generated.h" line="8535"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72692">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72685">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72686">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72687">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_create_snapshot().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_sync"
              c:identifier="udisks_logical_volume_call_create_snapshot_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72715">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_create_snapshot() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8541"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72729">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72717">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72718">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72719">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72720">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72721">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72722">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate"
              c:identifier="udisks_logical_volume_call_deactivate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72098">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_deactivate_finish() to get the result of the operation.

See udisks_logical_volume_call_deactivate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8428"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72100">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72101">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72102">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72103">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72104">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate_finish"
              c:identifier="udisks_logical_volume_call_deactivate_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72133">Finishes an operation started with udisks_logical_volume_call_deactivate().</doc>
        <source-position filename="udisks-generated.h" line="8435"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72141">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72135">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72136">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_deactivate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate_sync"
              c:identifier="udisks_logical_volume_call_deactivate_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72162">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_deactivate() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8440"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72173">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72164">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72165">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72166">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_logical_volume_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72202">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_delete_finish() to get the result of the operation.

See udisks_logical_volume_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8446"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72204">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72205">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72206">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72207">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72208">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_logical_volume_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72237">Finishes an operation started with udisks_logical_volume_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="8453"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72245">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72239">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72240">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_logical_volume_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72266">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8458"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72277">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72268">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72269">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72270">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename"
              c:identifier="udisks_logical_volume_call_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72306">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_rename_finish() to get the result of the operation.

See udisks_logical_volume_call_rename_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8464"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72308">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72309">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72310">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72311">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72312">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72313">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_finish"
              c:identifier="udisks_logical_volume_call_rename_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72344">Finishes an operation started with udisks_logical_volume_call_rename().</doc>
        <source-position filename="udisks-generated.h" line="8472"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72353">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72346">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72347">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72348">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_rename().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_sync"
              c:identifier="udisks_logical_volume_call_rename_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72376">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_rename() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8478"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72389">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72378">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72379">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72380">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72381">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72382">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair"
              c:identifier="udisks_logical_volume_call_repair"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72532">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_repair_finish() to get the result of the operation.

See udisks_logical_volume_call_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8506"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72534">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72535">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72536">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72537">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72538">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72539">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_finish"
              c:identifier="udisks_logical_volume_call_repair_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72570">Finishes an operation started with udisks_logical_volume_call_repair().</doc>
        <source-position filename="udisks-generated.h" line="8514"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72578">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72572">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72573">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_sync"
              c:identifier="udisks_logical_volume_call_repair_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72599">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8519"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72611">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72601">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72602">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72603">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72604">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_logical_volume_call_resize"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72422">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_resize_finish() to get the result of the operation.

See udisks_logical_volume_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8486"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72424">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72425">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72426">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72427">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72428">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72429">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_logical_volume_call_resize_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72460">Finishes an operation started with udisks_logical_volume_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="8494"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72468">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72462">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72463">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_logical_volume_call_resize_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72489">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8499"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72501">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72491">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72492">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72493">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72494">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_activate"
              c:identifier="udisks_logical_volume_complete_activate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73082">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8362"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73084">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73085">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73086">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_attach"
              c:identifier="udisks_logical_volume_complete_cache_attach"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73231">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8393"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73233">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73234">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_detach"
              c:identifier="udisks_logical_volume_complete_cache_detach"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73271">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8401"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73273">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73274">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_split"
              c:identifier="udisks_logical_volume_complete_cache_split"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73251">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73253">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73254">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_snapshot"
              c:identifier="udisks_logical_volume_complete_create_snapshot"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73208">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73210">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73211">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73212">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_deactivate"
              c:identifier="udisks_logical_volume_complete_deactivate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73105">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8367"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73107">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73108">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_logical_volume_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73125">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8371"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73127">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73128">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rename"
              c:identifier="udisks_logical_volume_complete_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73145">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8375"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73147">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73148">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73149">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_repair"
              c:identifier="udisks_logical_volume_complete_repair"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73188">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Repair"&gt;Repair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73190">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73191">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_logical_volume_complete_resize"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73168">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8380"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73170">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73171">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_block_device"
              c:identifier="udisks_logical_volume_dup_block_device"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71951">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8661"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71959">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71953">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_logical_volume_dup_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71892">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8657"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71900">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71894">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_layout"
              c:identifier="udisks_logical_volume_dup_layout"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71619">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8638"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71627">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71621">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_logical_volume_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71294">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8614"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71302">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71296">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_origin"
              c:identifier="udisks_logical_volume_dup_origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71833">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8653"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71841">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71835">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_structure"
              c:identifier="udisks_logical_volume_dup_structure"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71678">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8642"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71686">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71680">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_thin_pool"
              c:identifier="udisks_logical_volume_dup_thin_pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71774">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8649"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71782">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71776">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_logical_volume_dup_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71560">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8634"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71568">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71562">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_logical_volume_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71390">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8621"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71398">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71392">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_volume_group"
              c:identifier="udisks_logical_volume_dup_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71235">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8610"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71243">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71237">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="udisks_logical_volume_get_active"
              glib:get-property="active"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71331">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8617"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71339">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71333">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_block_device"
              c:identifier="udisks_logical_volume_get_block_device"
              glib:get-property="block-device"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71929">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_block_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8660"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71931">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_logical_volume_get_child_configuration"
              glib:get-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71870">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8656"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71880">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71872">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data_allocated_ratio"
              c:identifier="udisks_logical_volume_get_data_allocated_ratio"
              glib:get-property="data-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71464">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8627"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71472">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71466">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout"
              c:identifier="udisks_logical_volume_get_layout"
              glib:get-property="layout"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71597">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_layout() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8637"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71607">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71599">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_allocated_ratio"
              c:identifier="udisks_logical_volume_get_metadata_allocated_ratio"
              glib:get-property="metadata-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71501">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8630"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71509">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71503">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_logical_volume_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71272">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8613"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71282">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71274">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_origin"
              c:identifier="udisks_logical_volume_get_origin"
              glib:get-property="origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71811">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_origin() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8652"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71821">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71813">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_logical_volume_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71427">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8624"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71435">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71429">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_structure"
              c:identifier="udisks_logical_volume_get_structure"
              glib:get-property="structure"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71656">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_structure() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8641"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71666">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71658">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_ratio"
              c:identifier="udisks_logical_volume_get_sync_ratio"
              glib:get-property="sync-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71715">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.SyncRatio"&gt;"SyncRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8645"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71723">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71717">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thin_pool"
              c:identifier="udisks_logical_volume_get_thin_pool"
              glib:get-property="thin-pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71752">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_thin_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8648"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71762">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71754">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_logical_volume_get_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71538">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8633"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71548">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71540">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_logical_volume_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71368">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8620"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71378">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71370">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_logical_volume_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71213">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8609"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71223">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71215">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="udisks_logical_volume_set_active"
              glib:set-property="active"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71351">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8618"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71353">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71354">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_block_device"
              c:identifier="udisks_logical_volume_set_block_device"
              glib:set-property="block-device"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71971">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8662"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71973">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71974">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_logical_volume_set_child_configuration"
              glib:set-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71912">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8658"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71914">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71915">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_allocated_ratio"
              c:identifier="udisks_logical_volume_set_data_allocated_ratio"
              glib:set-property="data-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71484">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71486">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71487">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_layout"
              c:identifier="udisks_logical_volume_set_layout"
              glib:set-property="layout"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71639">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8639"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71641">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71642">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_allocated_ratio"
              c:identifier="udisks_logical_volume_set_metadata_allocated_ratio"
              glib:set-property="metadata-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71521">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8631"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71523">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71524">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_logical_volume_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71314">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8615"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71316">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71317">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_origin"
              c:identifier="udisks_logical_volume_set_origin"
              glib:set-property="origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71853">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8654"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71855">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71856">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_logical_volume_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71447">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8625"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71449">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71450">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_structure"
              c:identifier="udisks_logical_volume_set_structure"
              glib:set-property="structure"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71698">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8643"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71700">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71701">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_ratio"
              c:identifier="udisks_logical_volume_set_sync_ratio"
              glib:set-property="sync-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71735">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.SyncRatio"&gt;"SyncRatio"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8646"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71737">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71738">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thin_pool"
              c:identifier="udisks_logical_volume_set_thin_pool"
              glib:set-property="thin-pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71794">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8650"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71796">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71797">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_logical_volume_set_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71580">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8635"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71582">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71583">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_logical_volume_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71410">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8622"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71412">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71413">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_logical_volume_set_volume_group"
              glib:set-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71255">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8611"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71257">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71258">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71068">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="block-device"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_block_device"
                getter="get_block_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71200">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="child-configuration"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71189">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="data-allocated-ratio"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_data_allocated_ratio"
                getter="get_data_allocated_ratio"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71101">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="layout"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_layout"
                getter="get_layout"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71134">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metadata-allocated-ratio"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_metadata_allocated_ratio"
                getter="get_metadata_allocated_ratio"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71112">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71057">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="origin"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_origin"
                getter="get_origin"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71178">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71090">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="structure"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_structure"
                getter="get_structure">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71145">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="sync-ratio"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_ratio"
                getter="get_sync_ratio"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71156">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.SyncRatio"&gt;"SyncRatio"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="thin-pool"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_thin_pool"
                getter="get_thin_pool"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71167">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71123">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71079">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_volume_group"
                getter="get_volume_group"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71046">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-activate" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70789">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_activate() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70799">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70792">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70793">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-attach" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70969">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_attach() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70980">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70972">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70973">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70974">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-detach" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71020">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_detach() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71030">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71023">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71024">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-split" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70995">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_split() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71005">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70998">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70999">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-snapshot" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70942">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_create_snapshot() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70954">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70945">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70946">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70947">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70948">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-deactivate" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70814">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_deactivate() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70824">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70817">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70818">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70839">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70849">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70842">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70843">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rename" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70864">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_rename() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70875">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70867">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70868">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70869">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-repair" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70916">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Repair"&gt;Repair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70927">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70919">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70920">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70921">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70890">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70901">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70893">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70894">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70895">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="LogicalVolumeIface"
            c:type="UDisksLogicalVolumeIface"
            glib:is-gtype-struct-for="LogicalVolume"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="70748">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="8349"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70750">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_activate">
        <callback name="handle_activate">
          <source-position filename="udisks-generated.h" line="8263"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_attach">
        <callback name="handle_cache_attach">
          <source-position filename="udisks-generated.h" line="8268"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_cache_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_detach">
        <callback name="handle_cache_detach">
          <source-position filename="udisks-generated.h" line="8274"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_split">
        <callback name="handle_cache_split">
          <source-position filename="udisks-generated.h" line="8279"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_snapshot">
        <callback name="handle_create_snapshot">
          <source-position filename="udisks-generated.h" line="8284"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_deactivate">
        <callback name="handle_deactivate">
          <source-position filename="udisks-generated.h" line="8291"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="8296"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rename">
        <callback name="handle_rename">
          <source-position filename="udisks-generated.h" line="8301"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_repair">
        <callback name="handle_repair">
          <source-position filename="udisks-generated.h" line="8307"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_pvs" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="8313"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active">
        <callback name="get_active">
          <source-position filename="udisks-generated.h" line="8319"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71339">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71333">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_block_device">
        <callback name="get_block_device">
          <source-position filename="udisks-generated.h" line="8321"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71931">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="8323"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71880">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71872">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_data_allocated_ratio">
        <callback name="get_data_allocated_ratio">
          <source-position filename="udisks-generated.h" line="8325"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71472">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71466">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_layout">
        <callback name="get_layout">
          <source-position filename="udisks-generated.h" line="8327"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71607">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71599">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metadata_allocated_ratio">
        <callback name="get_metadata_allocated_ratio">
          <source-position filename="udisks-generated.h" line="8329"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71509">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71503">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="8331"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71282">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71274">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_origin">
        <callback name="get_origin">
          <source-position filename="udisks-generated.h" line="8333"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71821">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71813">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="8335"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71435">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71429">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_structure">
        <callback name="get_structure">
          <source-position filename="udisks-generated.h" line="8337"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71666">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71658">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_ratio">
        <callback name="get_sync_ratio">
          <source-position filename="udisks-generated.h" line="8339"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71723">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71717">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_thin_pool">
        <callback name="get_thin_pool">
          <source-position filename="udisks-generated.h" line="8341"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71762">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71754">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="8343"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71548">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71540">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="8345"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71378">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71370">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_volume_group">
        <callback name="get_volume_group">
          <source-position filename="udisks-generated.h" line="8347"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71223">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71215">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LogicalVolumeProxy"
           c:symbol-prefix="logical_volume_proxy"
           c:type="UDisksLogicalVolumeProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksLogicalVolumeProxy"
           glib:get-type="udisks_logical_volume_proxy_get_type"
           glib:type-struct="LogicalVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="73293">The #UDisksLogicalVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="8688"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="LogicalVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_logical_volume_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73779">Finishes an operation started with udisks_logical_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="8704"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73786">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73781">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_logical_volume_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73875">Finishes an operation started with udisks_logical_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="8723"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73882">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73877">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_logical_volume_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73902">Like udisks_logical_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_logical_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8726"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73917">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73904">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73905">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73906">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73907">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73908">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_logical_volume_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73806">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_logical_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8707"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73821">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73808">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73809">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73810">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73811">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73812">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_logical_volume_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73747">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_proxy_new_finish() to get the result of the operation.

See udisks_logical_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8696"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73749">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73750">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73751">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73752">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73753">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73754">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73755">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_logical_volume_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73843">Like udisks_logical_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_logical_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8715"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73845">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73846">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73847">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73848">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73849">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73850">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73851">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LogicalVolumeProxyPrivate"
              c:type="UDisksLogicalVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="LogicalVolumeProxyClass"
            c:type="UDisksLogicalVolumeProxyClass"
            glib:is-gtype-struct-for="LogicalVolumeProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="73301">Class structure for #UDisksLogicalVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="8688"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73303">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="LogicalVolumeProxyPrivate"
            c:type="UDisksLogicalVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="8676"/>
    </record>
    <class name="LogicalVolumeSkeleton"
           c:symbol-prefix="logical_volume_skeleton"
           c:type="UDisksLogicalVolumeSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksLogicalVolumeSkeleton"
           glib:get-type="udisks_logical_volume_skeleton_get_type"
           glib:type-struct="LogicalVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="73941">The #UDisksLogicalVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="8758"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="LogicalVolume"/>
      <constructor name="new"
                   c:identifier="udisks_logical_volume_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74580">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="8766"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74585">The skeleton object.</doc>
          <type name="LogicalVolumeSkeleton" c:type="UDisksLogicalVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LogicalVolumeSkeletonPrivate"
              c:type="UDisksLogicalVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="LogicalVolumeSkeletonClass"
            c:type="UDisksLogicalVolumeSkeletonClass"
            glib:is-gtype-struct-for="LogicalVolumeSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="73949">Class structure for #UDisksLogicalVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="8758"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73951">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="LogicalVolumeSkeletonPrivate"
            c:type="UDisksLogicalVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="8746"/>
    </record>
    <interface name="Loop"
               c:symbol-prefix="loop"
               c:type="UDisksLoop"
               glib:type-name="UDisksLoop"
               glib:get-type="udisks_loop_get_type"
               glib:type-struct="LoopIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41221">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4636"/>
      <function name="interface_info"
                c:identifier="udisks_loop_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41161">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4644"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41166">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_loop_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41174">Overrides all #GObject properties in the #UDisksLoop interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4645"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41182">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41176">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41177">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_autoclear"
                      invoker="get_autoclear"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41376">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4630"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41384">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41378">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_backing_file"
                      invoker="get_backing_file"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41323">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_loop_dup_backing_file() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4632"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41333">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41325">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_setup_by_uid"
                      invoker="get_setup_by_uid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41409">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4634"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41417">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41411">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="4619"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_autoclear">
        <source-position filename="udisks-generated.h" line="4624"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_delete" c:identifier="udisks_loop_call_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41442">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_call_delete_finish() to get the result of the operation.

See udisks_loop_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4660"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41444">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41445">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41446">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41447">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41448">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_loop_call_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41475">Finishes an operation started with udisks_loop_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="4667"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41483">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41477">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41478">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_loop_call_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41502">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_loop_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4672"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41513">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41504">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41505">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41506">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear"
              c:identifier="udisks_loop_call_set_autoclear">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41540">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_call_set_autoclear_finish() to get the result of the operation.

See udisks_loop_call_set_autoclear_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4678"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41542">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41543">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41544">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41545">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41546">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41547">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear_finish"
              c:identifier="udisks_loop_call_set_autoclear_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41576">Finishes an operation started with udisks_loop_call_set_autoclear().</doc>
        <source-position filename="udisks-generated.h" line="4686"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41584">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41578">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41579">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_call_set_autoclear().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear_sync"
              c:identifier="udisks_loop_call_set_autoclear_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41603">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_loop_call_set_autoclear() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4691"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41615">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41605">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41606">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41607">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41608">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_loop_complete_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41644">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4649"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41646">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41647">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_autoclear"
              c:identifier="udisks_loop_complete_set_autoclear">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41662">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4653"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41664">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41665">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_backing_file"
              c:identifier="udisks_loop_dup_backing_file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41343">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4702"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41351">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41345">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoclear"
              c:identifier="udisks_loop_get_autoclear"
              glib:get-property="autoclear"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41376">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4705"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41384">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41378">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backing_file"
              c:identifier="udisks_loop_get_backing_file"
              glib:get-property="backing-file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41323">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_loop_dup_backing_file() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4701"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41333">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41325">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setup_by_uid"
              c:identifier="udisks_loop_get_setup_by_uid"
              glib:get-property="setup-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41409">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4708"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41417">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41411">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_autoclear"
              c:identifier="udisks_loop_set_autoclear"
              glib:set-property="autoclear"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41394">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4706"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41396">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41397">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backing_file"
              c:identifier="udisks_loop_set_backing_file"
              glib:set-property="backing-file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41361">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4703"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41363">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41364">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_setup_by_uid"
              c:identifier="udisks_loop_set_setup_by_uid"
              glib:set-property="setup-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41427">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4709"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41429">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41430">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="autoclear"
                writable="1"
                transfer-ownership="none"
                setter="set_autoclear"
                getter="get_autoclear"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41303">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="backing-file"
                writable="1"
                transfer-ownership="none"
                setter="set_backing_file"
                getter="get_backing_file"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41294">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="setup-by-uid"
                writable="1"
                transfer-ownership="none"
                setter="set_setup_by_uid"
                getter="get_setup_by_uid"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41312">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41246">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_loop_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41256">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41249">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41250">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-autoclear" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41269">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_loop_complete_set_autoclear() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41280">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41272">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41273">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41274">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="LoopIface"
            c:type="UDisksLoopIface"
            glib:is-gtype-struct-for="Loop">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41227">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4636"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41229">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="4619"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_autoclear">
        <callback name="handle_set_autoclear">
          <source-position filename="udisks-generated.h" line="4624"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_autoclear">
        <callback name="get_autoclear">
          <source-position filename="udisks-generated.h" line="4630"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41384">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="41378">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_backing_file">
        <callback name="get_backing_file">
          <source-position filename="udisks-generated.h" line="4632"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41333">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="41325">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_setup_by_uid">
        <callback name="get_setup_by_uid">
          <source-position filename="udisks-generated.h" line="4634"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41417">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="41411">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LoopProxy"
           c:symbol-prefix="loop_proxy"
           c:type="UDisksLoopProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksLoopProxy"
           glib:get-type="udisks_loop_proxy_get_type"
           glib:type-struct="LoopProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41682">The #UDisksLoopProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4735"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Loop"/>
      <constructor name="new_finish"
                   c:identifier="udisks_loop_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41974">Finishes an operation started with udisks_loop_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4751"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41981">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41976">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_loop_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42064">Finishes an operation started with udisks_loop_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4770"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42071">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42066">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_loop_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42089">Like udisks_loop_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_loop_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4773"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42104">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42091">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42092">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42093">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42094">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42095">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_loop_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41999">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_loop_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4754"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42014">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42001">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42002">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42003">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42004">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42005">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_loop_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41944">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_proxy_new_finish() to get the result of the operation.

See udisks_loop_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4743"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41946">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41947">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41948">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41949">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41950">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41951">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41952">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_loop_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42034">Like udisks_loop_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_loop_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4762"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42036">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42037">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42038">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42039">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42040">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42041">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42042">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LoopProxyPrivate" c:type="UDisksLoopProxyPrivate*"/>
      </field>
    </class>
    <record name="LoopProxyClass"
            c:type="UDisksLoopProxyClass"
            glib:is-gtype-struct-for="LoopProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41688">Class structure for #UDisksLoopProxy.</doc>
      <source-position filename="udisks-generated.h" line="4735"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41690">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="LoopProxyPrivate"
            c:type="UDisksLoopProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4723"/>
    </record>
    <class name="LoopSkeleton"
           c:symbol-prefix="loop_skeleton"
           c:type="UDisksLoopSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksLoopSkeleton"
           glib:get-type="udisks_loop_skeleton_get_type"
           glib:type-struct="LoopSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42126">The #UDisksLoopSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4805"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Loop"/>
      <constructor name="new" c:identifier="udisks_loop_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42605">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4813"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42610">The skeleton object.</doc>
          <type name="LoopSkeleton" c:type="UDisksLoop*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LoopSkeletonPrivate" c:type="UDisksLoopSkeletonPrivate*"/>
      </field>
    </class>
    <record name="LoopSkeletonClass"
            c:type="UDisksLoopSkeletonClass"
            glib:is-gtype-struct-for="LoopSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42132">Class structure for #UDisksLoopSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4805"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42134">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="LoopSkeletonPrivate"
            c:type="UDisksLoopSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4793"/>
    </record>
    <constant name="MAJOR_VERSION" value="2" c:type="UDISKS_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="32">The major version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="37"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MANAGER"
                    c:identifier="UDISKS_MANAGER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS"
                    c:identifier="UDISKS_MANAGER_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5478"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_BTRFS_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5480"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5550"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5551"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5552"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5620"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5621"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5622"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6097"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6099"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_PROXY"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6406"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6407"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_SKELETON"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6475"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6476"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6477"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2"
                    c:identifier="UDISKS_MANAGER_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7193"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_LVM2_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7195"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7262"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7263"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7264"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7332"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7333"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7334"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME"
                    c:identifier="UDISKS_MANAGER_NVME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="507"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_NVME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="509"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_PROXY"
                    c:identifier="UDISKS_MANAGER_NVME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="654"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_NVME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="655"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_NVME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="656"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_SKELETON"
                    c:identifier="UDISKS_MANAGER_NVME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="724"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_NVME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="725"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_NVME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="726"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY"
                    c:identifier="UDISKS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="402"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="403"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON"
                    c:identifier="UDISKS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="472"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="473"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="474"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID"
                    c:identifier="UDISKS_MDRAID"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4820"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_GET_IFACE"
                    c:identifier="UDISKS_MDRAID_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4822"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY"
                    c:identifier="UDISKS_MDRAID_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5139"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY_CLASS"
                    c:identifier="UDISKS_MDRAID_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5140"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MDRAID_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5141"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON"
                    c:identifier="UDISKS_MDRAID_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5209"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON_CLASS"
                    c:identifier="UDISKS_MDRAID_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5210"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MDRAID_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5211"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="MDRaid"
               c:symbol-prefix="mdraid"
               c:type="UDisksMDRaid"
               version="2.0.0"
               glib:type-name="UDisksMDRaid"
               glib:get-type="udisks_mdraid_get_type"
               glib:type-struct="MDRaidIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43288">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4902"/>
      <function name="interface_info"
                c:identifier="udisks_mdraid_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43147">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4910"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43152">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_mdraid_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43162">Overrides all #GObject properties in the #UDisksMDRaid interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4911"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43170">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43164">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43165">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active_devices"
                      invoker="get_active_devices"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44235">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_active_devices() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4872"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44245">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44237">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bitmap_location"
                      invoker="get_bitmap_location"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44139">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_bitmap_location() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4874"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44141">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44294">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4876"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44304">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44296">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_chunk_size"
                      invoker="get_chunk_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44198">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4878"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44206">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44200">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_degraded"
                      invoker="get_degraded"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44102">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4880"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44110">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44104">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_level"
                      invoker="get_level"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43799">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_level() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4882"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43809">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43801">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43740">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4884"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43750">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43742">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_devices"
                      invoker="get_num_devices"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43858">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4886"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43866">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43860">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_running"
                      invoker="get_running"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44353">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4888"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44361">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44355">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43895">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4890"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43903">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43897">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_action"
                      invoker="get_sync_action"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43932">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_sync_action() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4892"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43942">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43934">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_completed"
                      invoker="get_sync_completed"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43991">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4894"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43999">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43993">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_rate"
                      invoker="get_sync_rate"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44028">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4896"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44036">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44030">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_remaining_time"
                      invoker="get_sync_remaining_time"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44065">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4898"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44073">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44067">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43681">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4900"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43691">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43683">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="4833"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="4839"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="4844"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_request_sync_action">
        <source-position filename="udisks-generated.h" line="4850"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_bitmap_location">
        <source-position filename="udisks-generated.h" line="4856"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start">
        <source-position filename="udisks-generated.h" line="4862"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop">
        <source-position filename="udisks-generated.h" line="4867"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_mdraid_call_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44708">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_add_device_finish() to get the result of the operation.

See udisks_mdraid_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5002"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44710">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44711">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44712">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44713">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44714">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44715">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_mdraid_call_add_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44746">Finishes an operation started with udisks_mdraid_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="5010"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44754">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44748">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44749">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_mdraid_call_add_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44775">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5015"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44787">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44777">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44778">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44779">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44780">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_mdraid_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45038">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_delete_finish() to get the result of the operation.

See udisks_mdraid_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5062"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45040">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45041">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45042">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45043">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45044">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_mdraid_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45073">Finishes an operation started with udisks_mdraid_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="5069"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45081">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45075">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45076">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_mdraid_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45102">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5074"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45113">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45104">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45105">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45106">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_mdraid_call_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44598">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_remove_device_finish() to get the result of the operation.

See udisks_mdraid_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4982"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44600">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44601">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44602">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44603">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44604">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44605">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_mdraid_call_remove_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44636">Finishes an operation started with udisks_mdraid_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="4990"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44644">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44638">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44639">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_mdraid_call_remove_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44665">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4995"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44677">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44667">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44668">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44669">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44670">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action"
              c:identifier="udisks_mdraid_call_request_sync_action"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44928">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_request_sync_action_finish() to get the result of the operation.

See udisks_mdraid_call_request_sync_action_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5042"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44930">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44931">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44932">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44933">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44934">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44935">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action_finish"
              c:identifier="udisks_mdraid_call_request_sync_action_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44966">Finishes an operation started with udisks_mdraid_call_request_sync_action().</doc>
        <source-position filename="udisks-generated.h" line="5050"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44974">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44968">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44969">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_request_sync_action().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action_sync"
              c:identifier="udisks_mdraid_call_request_sync_action_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44995">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_request_sync_action() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5055"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45007">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44997">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44998">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44999">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45000">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location"
              c:identifier="udisks_mdraid_call_set_bitmap_location"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44818">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_set_bitmap_location_finish() to get the result of the operation.

See udisks_mdraid_call_set_bitmap_location_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5022"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44820">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44821">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44822">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44823">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44824">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44825">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location_finish"
              c:identifier="udisks_mdraid_call_set_bitmap_location_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44856">Finishes an operation started with udisks_mdraid_call_set_bitmap_location().</doc>
        <source-position filename="udisks-generated.h" line="5030"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44864">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44858">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44859">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_set_bitmap_location().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location_sync"
              c:identifier="udisks_mdraid_call_set_bitmap_location_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44885">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_set_bitmap_location() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5035"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44897">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44887">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44888">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44889">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44890">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start"
              c:identifier="udisks_mdraid_call_start"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44390">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_start_finish() to get the result of the operation.

See udisks_mdraid_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4946"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44392">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44393">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44394">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44395">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44396">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_finish"
              c:identifier="udisks_mdraid_call_start_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44425">Finishes an operation started with udisks_mdraid_call_start().</doc>
        <source-position filename="udisks-generated.h" line="4953"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44433">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44427">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44428">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_sync"
              c:identifier="udisks_mdraid_call_start_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44454">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4958"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44465">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44456">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44457">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44458">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop"
              c:identifier="udisks_mdraid_call_stop"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44494">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_stop_finish() to get the result of the operation.

See udisks_mdraid_call_stop_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4964"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44496">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44497">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44498">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44499">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44500">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_finish"
              c:identifier="udisks_mdraid_call_stop_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44529">Finishes an operation started with udisks_mdraid_call_stop().</doc>
        <source-position filename="udisks-generated.h" line="4971"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44537">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44531">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44532">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_stop().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_sync"
              c:identifier="udisks_mdraid_call_stop_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44558">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_stop() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4976"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44569">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44560">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44561">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44562">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_mdraid_complete_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45202">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4927"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45204">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45205">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_mdraid_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45262">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4939"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45264">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45265">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_mdraid_complete_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45182">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4923"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45184">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45185">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_request_sync_action"
              c:identifier="udisks_mdraid_complete_request_sync_action"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45242">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4935"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45244">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45245">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_bitmap_location"
              c:identifier="udisks_mdraid_complete_set_bitmap_location"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45222">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4931"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45224">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45225">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start"
              c:identifier="udisks_mdraid_complete_start"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45142">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4915"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45144">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45145">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop"
              c:identifier="udisks_mdraid_complete_stop"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45162">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4919"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45164">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45165">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_active_devices"
              c:identifier="udisks_mdraid_dup_active_devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44257">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5125"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44265">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44259">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_bitmap_location"
              c:identifier="udisks_mdraid_dup_bitmap_location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44161">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5118"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44169">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44163">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_mdraid_dup_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44316">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5129"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44324">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44318">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_level"
              c:identifier="udisks_mdraid_dup_level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43821">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5092"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43829">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43823">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_mdraid_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43762">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5088"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43770">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43764">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sync_action"
              c:identifier="udisks_mdraid_dup_sync_action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43954">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5102"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43962">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43956">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_mdraid_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43703">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5084"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43711">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43705">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_devices"
              c:identifier="udisks_mdraid_get_active_devices"
              glib:get-property="active-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44235">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_active_devices() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5124"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44245">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44237">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bitmap_location"
              c:identifier="udisks_mdraid_get_bitmap_location"
              glib:get-property="bitmap-location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44139">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_bitmap_location() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5117"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44141">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_mdraid_get_child_configuration"
              glib:get-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44294">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5128"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44304">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44296">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chunk_size"
              c:identifier="udisks_mdraid_get_chunk_size"
              glib:get-property="chunk-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44198">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44206">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44200">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_degraded"
              c:identifier="udisks_mdraid_get_degraded"
              glib:get-property="degraded"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44102">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44110">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44104">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level"
              c:identifier="udisks_mdraid_get_level"
              glib:get-property="level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43799">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_level() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5091"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43809">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43801">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_mdraid_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43740">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5087"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43750">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43742">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_devices"
              c:identifier="udisks_mdraid_get_num_devices"
              glib:get-property="num-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43858">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5095"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43866">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43860">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running"
              c:identifier="udisks_mdraid_get_running"
              glib:get-property="running"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44353">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44361">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44355">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_mdraid_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43895">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5098"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43903">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43897">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_action"
              c:identifier="udisks_mdraid_get_sync_action"
              glib:get-property="sync-action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43932">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_sync_action() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5101"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43942">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43934">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_completed"
              c:identifier="udisks_mdraid_get_sync_completed"
              glib:get-property="sync-completed"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43991">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43999">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43993">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_rate"
              c:identifier="udisks_mdraid_get_sync_rate"
              glib:get-property="sync-rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44028">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44036">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44030">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_remaining_time"
              c:identifier="udisks_mdraid_get_sync_remaining_time"
              glib:get-property="sync-remaining-time"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44065">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44073">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44067">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_mdraid_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43681">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5083"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43691">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43683">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active_devices"
              c:identifier="udisks_mdraid_set_active_devices"
              glib:set-property="active-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44277">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44279">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44280">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bitmap_location"
              c:identifier="udisks_mdraid_set_bitmap_location"
              glib:set-property="bitmap-location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44181">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44183">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44184">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_mdraid_set_child_configuration"
              glib:set-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44336">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44338">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44339">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chunk_size"
              c:identifier="udisks_mdraid_set_chunk_size"
              glib:set-property="chunk-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44218">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44220">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44221">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_degraded"
              c:identifier="udisks_mdraid_set_degraded"
              glib:set-property="degraded"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44122">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44124">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44125">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_level"
              c:identifier="udisks_mdraid_set_level"
              glib:set-property="level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43841">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5093"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43843">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43844">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_mdraid_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43782">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5089"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43784">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43785">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_devices"
              c:identifier="udisks_mdraid_set_num_devices"
              glib:set-property="num-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43878">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5096"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43880">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43881">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_running"
              c:identifier="udisks_mdraid_set_running"
              glib:set-property="running"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44373">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44375">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44376">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_mdraid_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43915">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5099"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43917">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43918">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_action"
              c:identifier="udisks_mdraid_set_sync_action"
              glib:set-property="sync-action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43974">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43976">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43977">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_completed"
              c:identifier="udisks_mdraid_set_sync_completed"
              glib:set-property="sync-completed"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44011">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44013">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44014">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_rate"
              c:identifier="udisks_mdraid_set_sync_rate"
              glib:set-property="sync-rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44048">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44050">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44051">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_remaining_time"
              c:identifier="udisks_mdraid_set_sync_remaining_time"
              glib:set-property="sync-remaining-time"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44085">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44087">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44088">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_mdraid_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43723">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5085"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43725">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43726">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-devices"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_active_devices"
                getter="get_active_devices">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43646">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="bitmap-location"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_bitmap_location"
                getter="get_bitmap_location"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43624">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="child-configuration"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43657">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="chunk-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_chunk_size"
                getter="get_chunk_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43635">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="degraded"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_degraded"
                getter="get_degraded"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43613">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="level"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_level"
                getter="get_level"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43536">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43525">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="num-devices"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_num_devices"
                getter="get_num_devices"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43547">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="running"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_running"
                getter="get_running"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43668">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43558">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sync-action"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_action"
                getter="get_sync_action"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43569">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sync-completed"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_completed"
                getter="get_sync_completed"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43580">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sync-rate"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_rate"
                getter="get_sync_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43591">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sync-remaining-time"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_remaining_time"
                getter="get_sync_remaining_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43602">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43514">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43410">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43421">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43413">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43414">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43415">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43488">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43498">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43491">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43492">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43384">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43395">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43387">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43388">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43389">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-request-sync-action"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43462">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_request_sync_action() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43473">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43465">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43466">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43467">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-bitmap-location"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43436">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_set_bitmap_location() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43447">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43439">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43440">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43441">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43334">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43344">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43337">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43338">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43359">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_stop() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43369">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43362">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43363">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="MDRaidIface"
            c:type="UDisksMDRaidIface"
            glib:is-gtype-struct-for="MDRaid"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43296">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4902"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43298">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="4833"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="4839"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="4844"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_request_sync_action">
        <callback name="handle_request_sync_action">
          <source-position filename="udisks-generated.h" line="4850"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_sync_action" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_bitmap_location">
        <callback name="handle_set_bitmap_location">
          <source-position filename="udisks-generated.h" line="4856"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start">
        <callback name="handle_start">
          <source-position filename="udisks-generated.h" line="4862"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop">
        <callback name="handle_stop">
          <source-position filename="udisks-generated.h" line="4867"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active_devices">
        <callback name="get_active_devices">
          <source-position filename="udisks-generated.h" line="4872"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44245">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44237">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bitmap_location">
        <callback name="get_bitmap_location">
          <source-position filename="udisks-generated.h" line="4874"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44141">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="4876"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44304">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44296">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_chunk_size">
        <callback name="get_chunk_size">
          <source-position filename="udisks-generated.h" line="4878"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44206">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44200">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_degraded">
        <callback name="get_degraded">
          <source-position filename="udisks-generated.h" line="4880"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44110">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44104">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_level">
        <callback name="get_level">
          <source-position filename="udisks-generated.h" line="4882"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43809">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43801">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="4884"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43750">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43742">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_devices">
        <callback name="get_num_devices">
          <source-position filename="udisks-generated.h" line="4886"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43866">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43860">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_running">
        <callback name="get_running">
          <source-position filename="udisks-generated.h" line="4888"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44361">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44355">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="4890"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43903">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43897">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_action">
        <callback name="get_sync_action">
          <source-position filename="udisks-generated.h" line="4892"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43942">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43934">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_completed">
        <callback name="get_sync_completed">
          <source-position filename="udisks-generated.h" line="4894"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43999">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43993">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_rate">
        <callback name="get_sync_rate">
          <source-position filename="udisks-generated.h" line="4896"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44036">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44030">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_remaining_time">
        <callback name="get_sync_remaining_time">
          <source-position filename="udisks-generated.h" line="4898"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44073">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44067">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="4900"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43691">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43683">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MDRaidProxy"
           c:symbol-prefix="mdraid_proxy"
           c:type="UDisksMDRaidProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksMDRaidProxy"
           glib:get-type="udisks_mdraid_proxy_get_type"
           glib:type-struct="MDRaidProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45284">The #UDisksMDRaidProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5159"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="MDRaid"/>
      <constructor name="new_finish"
                   c:identifier="udisks_mdraid_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45770">Finishes an operation started with udisks_mdraid_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45777">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45772">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_mdraid_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45866">Finishes an operation started with udisks_mdraid_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5194"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45873">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45868">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_mdraid_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45893">Like udisks_mdraid_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_mdraid_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5197"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45908">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45895">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45896">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45897">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45898">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45899">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_mdraid_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45797">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_mdraid_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45812">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45799">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45800">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45801">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45802">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45803">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_mdraid_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45738">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_proxy_new_finish() to get the result of the operation.

See udisks_mdraid_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45740">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45741">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45742">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45743">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45744">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45745">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45746">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_mdraid_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45834">Like udisks_mdraid_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_mdraid_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45836">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45837">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45838">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45839">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45840">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45841">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45842">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MDRaidProxyPrivate" c:type="UDisksMDRaidProxyPrivate*"/>
      </field>
    </class>
    <record name="MDRaidProxyClass"
            c:type="UDisksMDRaidProxyClass"
            glib:is-gtype-struct-for="MDRaidProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45292">Class structure for #UDisksMDRaidProxy.</doc>
      <source-position filename="udisks-generated.h" line="5159"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45294">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="MDRaidProxyPrivate"
            c:type="UDisksMDRaidProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5147"/>
    </record>
    <class name="MDRaidSkeleton"
           c:symbol-prefix="mdraid_skeleton"
           c:type="UDisksMDRaidSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksMDRaidSkeleton"
           glib:get-type="udisks_mdraid_skeleton_get_type"
           glib:type-struct="MDRaidSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45932">The #UDisksMDRaidSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5229"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="MDRaid"/>
      <constructor name="new"
                   c:identifier="udisks_mdraid_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46571">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5237"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46576">The skeleton object.</doc>
          <type name="MDRaidSkeleton" c:type="UDisksMDRaid*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MDRaidSkeletonPrivate"
              c:type="UDisksMDRaidSkeletonPrivate*"/>
      </field>
    </class>
    <record name="MDRaidSkeletonClass"
            c:type="UDisksMDRaidSkeletonClass"
            glib:is-gtype-struct-for="MDRaidSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45940">Class structure for #UDisksMDRaidSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="5229"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45942">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="MDRaidSkeletonPrivate"
            c:type="UDisksMDRaidSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5217"/>
    </record>
    <constant name="MICRO_VERSION" value="1" c:type="UDISKS_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="46">The micro version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="51"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="10" c:type="UDISKS_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="39">The minor version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="44"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="UDisksManager"
               glib:type-name="UDisksManager"
               glib:get-type="udisks_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2485">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="100"/>
      <function name="interface_info"
                c:identifier="udisks_manager_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2320">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2325">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2333">Overrides all #GObject properties in the #UDisksManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2341">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2335">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2336">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_default_encryption_type"
                      invoker="get_default_encryption_type"
                      version="2.8.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2983">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_default_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2993">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2985">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_encryption_types"
                      invoker="get_supported_encryption_types"
                      version="2.8.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2924">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_encryption_types() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="92"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2934">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2926">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_filesystems"
                      invoker="get_supported_filesystems"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2871">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_filesystems() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2881">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2873">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2818">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2820">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_check">
        <source-position filename="udisks-generated.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_format">
        <source-position filename="udisks-generated.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_repair">
        <source-position filename="udisks-generated.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_resize">
        <source-position filename="udisks-generated.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_module">
        <source-position filename="udisks-generated.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_modules">
        <source-position filename="udisks-generated.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_block_devices">
        <source-position filename="udisks-generated.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_loop_setup">
        <source-position filename="udisks-generated.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_mdraid_create">
        <source-position filename="udisks-generated.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resolve_device">
        <source-position filename="udisks-generated.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_can_check"
              c:identifier="udisks_manager_call_can_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3262">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_check_finish() to get the result of the operation.

See udisks_manager_call_can_check_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3264">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3265">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3266">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3267">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3268">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_check_finish"
              c:identifier="udisks_manager_call_can_check_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3297">Finishes an operation started with udisks_manager_call_can_check().</doc>
        <source-position filename="udisks-generated.h" line="212"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3306">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3299">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3300">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3301">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_check().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_check_sync"
              c:identifier="udisks_manager_call_can_check_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3329">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_check() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="218"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3341">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3331">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3332">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3333">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3334">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format"
              c:identifier="udisks_manager_call_can_format"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3042">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_format_finish() to get the result of the operation.

See udisks_manager_call_can_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3044">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3045">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3046">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3047">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3048">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format_finish"
              c:identifier="udisks_manager_call_can_format_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3077">Finishes an operation started with udisks_manager_call_can_format().</doc>
        <source-position filename="udisks-generated.h" line="172"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3086">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3079">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3080">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3081">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format_sync"
              c:identifier="udisks_manager_call_can_format_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3109">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="178"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3121">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3111">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3112">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3113">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3114">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair"
              c:identifier="udisks_manager_call_can_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3372">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_repair_finish() to get the result of the operation.

See udisks_manager_call_can_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3374">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3375">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3376">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3377">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3378">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair_finish"
              c:identifier="udisks_manager_call_can_repair_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3407">Finishes an operation started with udisks_manager_call_can_repair().</doc>
        <source-position filename="udisks-generated.h" line="232"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3416">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3409">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3410">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3411">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair_sync"
              c:identifier="udisks_manager_call_can_repair_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3439">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="238"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3451">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3441">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3442">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3443">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3444">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize"
              c:identifier="udisks_manager_call_can_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3152">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_resize_finish() to get the result of the operation.

See udisks_manager_call_can_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3154">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3155">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3156">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3157">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3158">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize_finish"
              c:identifier="udisks_manager_call_can_resize_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3187">Finishes an operation started with udisks_manager_call_can_resize().</doc>
        <source-position filename="udisks-generated.h" line="192"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3196">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3189">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3190">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3191">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize_sync"
              c:identifier="udisks_manager_call_can_resize_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3219">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3231">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3221">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3222">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3223">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3224">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module"
              c:identifier="udisks_manager_call_enable_module"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3841">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_enable_module_finish() to get the result of the operation.

See udisks_manager_call_enable_module_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="317"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3843">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3844">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3845">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3846">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3847">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3848">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module_finish"
              c:identifier="udisks_manager_call_enable_module_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3879">Finishes an operation started with udisks_manager_call_enable_module().</doc>
        <source-position filename="udisks-generated.h" line="325"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3887">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3881">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3882">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_enable_module().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module_sync"
              c:identifier="udisks_manager_call_enable_module_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3908">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_enable_module() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="330"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3920">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3910">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3911">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3912">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3913">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules"
              c:identifier="udisks_manager_call_enable_modules"
              deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3737">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_enable_modules_finish() to get the result of the operation.

See udisks_manager_call_enable_modules_sync() for the synchronous, blocking version of this method.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3739">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3740">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3741">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3742">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3743">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules_finish"
              c:identifier="udisks_manager_call_enable_modules_finish"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3772">Finishes an operation started with udisks_manager_call_enable_modules().</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="306"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3780">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3774">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3775">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_enable_modules().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules_sync"
              c:identifier="udisks_manager_call_enable_modules_sync"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3801">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_enable_modules() for the asynchronous version of this method.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="311"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3812">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3803">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3804">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3805">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices"
              c:identifier="udisks_manager_call_get_block_devices"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3951">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_get_block_devices_finish() to get the result of the operation.

See udisks_manager_call_get_block_devices_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3953">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3954">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3955">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3956">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3957">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices_finish"
              c:identifier="udisks_manager_call_get_block_devices_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3986">Finishes an operation started with udisks_manager_call_get_block_devices().</doc>
        <source-position filename="udisks-generated.h" line="344"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3995">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3988">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_block_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3989">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3990">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_get_block_devices().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices_sync"
              c:identifier="udisks_manager_call_get_block_devices_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4018">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_get_block_devices() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="350"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4030">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4020">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4021">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_block_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4022">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4023">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup"
              c:identifier="udisks_manager_call_loop_setup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3482">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_loop_setup_finish() to get the result of the operation.

See udisks_manager_call_loop_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3484">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3485">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3486">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3487">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3488">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3489">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3490">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup_finish"
              c:identifier="udisks_manager_call_loop_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3521">Finishes an operation started with udisks_manager_call_loop_setup().</doc>
        <source-position filename="udisks-generated.h" line="254"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3531">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3523">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_resulting_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3524">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3525">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3526">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_loop_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup_sync"
              c:identifier="udisks_manager_call_loop_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3553">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_loop_setup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="261"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3568">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3555">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3556">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3557">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3558">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_resulting_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3559">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3560">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3561">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create"
              c:identifier="udisks_manager_call_mdraid_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3603">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_mdraid_create_finish() to get the result of the operation.

See udisks_manager_call_mdraid_create_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3605">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3606">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3607">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3608">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3609">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3610">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3611">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3612">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3613">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create_finish"
              c:identifier="udisks_manager_call_mdraid_create_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3650">Finishes an operation started with udisks_manager_call_mdraid_create().</doc>
        <source-position filename="udisks-generated.h" line="282"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3659">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3652">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_resulting_array"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3653">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3654">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_mdraid_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create_sync"
              c:identifier="udisks_manager_call_mdraid_create_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3682">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_mdraid_create() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="288"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3698">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3684">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3685">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3686">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3687">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3688">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3689">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_resulting_array"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3690">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3691">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device"
              c:identifier="udisks_manager_call_resolve_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4061">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_resolve_device_finish() to get the result of the operation.

See udisks_manager_call_resolve_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="357"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4063">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4064">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4065">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4066">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4067">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4068">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device_finish"
              c:identifier="udisks_manager_call_resolve_device_finish"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4099">Finishes an operation started with udisks_manager_call_resolve_device().</doc>
        <source-position filename="udisks-generated.h" line="365"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4108">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4101">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_devices"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4102">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4103">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_resolve_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device_sync"
              c:identifier="udisks_manager_call_resolve_device_sync"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4131">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_resolve_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="371"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4144">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4133">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4134">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4135">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_devices"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4136">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4137">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_check"
              c:identifier="udisks_manager_complete_can_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4223">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4225">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4226">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4227">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_format"
              c:identifier="udisks_manager_complete_can_format"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4177">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4179">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4180">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4181">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_repair"
              c:identifier="udisks_manager_complete_can_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4246">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4248">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4249">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4250">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_resize"
              c:identifier="udisks_manager_complete_can_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4200">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4202">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4203">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4204">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_module"
              c:identifier="udisks_manager_complete_enable_module"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4336">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4338">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4339">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_modules"
              c:identifier="udisks_manager_complete_enable_modules"
              deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4316">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4318">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4319">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_block_devices"
              c:identifier="udisks_manager_complete_get_block_devices"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4356">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4358">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4359">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="block_objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4360">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_loop_setup"
              c:identifier="udisks_manager_complete_loop_setup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4269">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4271">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4272">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4273">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="resulting_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4274">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_mdraid_create"
              c:identifier="udisks_manager_complete_mdraid_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4293">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4295">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4296">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="resulting_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4297">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resolve_device"
              c:identifier="udisks_manager_complete_resolve_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4379">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4381">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4382">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4383">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_default_encryption_type"
              c:identifier="udisks_manager_dup_default_encryption_type"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3005">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="395"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3013">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3007">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_encryption_types"
              c:identifier="udisks_manager_dup_supported_encryption_types"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2946">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="391"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2954">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2948">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_filesystems"
              c:identifier="udisks_manager_dup_supported_filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2891">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="387"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2899">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2893">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="udisks_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2838">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="383"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2846">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2840">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_encryption_type"
              c:identifier="udisks_manager_get_default_encryption_type"
              glib:get-property="default-encryption-type"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2983">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_default_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="394"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2993">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2985">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_encryption_types"
              c:identifier="udisks_manager_get_supported_encryption_types"
              glib:get-property="supported-encryption-types"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2924">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_encryption_types() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="390"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2934">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2926">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_filesystems"
              c:identifier="udisks_manager_get_supported_filesystems"
              glib:get-property="supported-filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2871">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_filesystems() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="386"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2881">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2873">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="udisks_manager_get_version"
              glib:get-property="version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2818">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="382"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2820">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_encryption_type"
              c:identifier="udisks_manager_set_default_encryption_type"
              glib:set-property="default-encryption-type"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3025">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3027">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3028">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_encryption_types"
              c:identifier="udisks_manager_set_supported_encryption_types"
              glib:set-property="supported-encryption-types"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2966">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2968">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2969">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_filesystems"
              c:identifier="udisks_manager_set_supported_filesystems"
              glib:set-property="supported-filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2909">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2911">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2912">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="udisks_manager_set_version"
              glib:set-property="version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2856">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2858">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2859">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-encryption-type"
                version="2.8.3"
                writable="1"
                transfer-ownership="none"
                setter="set_default_encryption_type"
                getter="get_default_encryption_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2805">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="supported-encryption-types"
                version="2.8.3"
                writable="1"
                transfer-ownership="none"
                setter="set_supported_encryption_types"
                getter="get_supported_encryption_types">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2794">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="supported-filesystems"
                writable="1"
                transfer-ownership="none"
                setter="set_supported_filesystems"
                getter="get_supported_filesystems">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2785">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="version"
                writable="1"
                transfer-ownership="none"
                setter="set_version"
                getter="get_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2776">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-can-check" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2569">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_check() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2579">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2572">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2573">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-format" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2519">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2529">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2522">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2523">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-repair" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2594">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2604">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2597">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2598">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-resize" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2544">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2554">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2547">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2548">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-module" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2698">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_enable_module() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2709">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2701">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2702">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2703">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-modules" when="last" deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2673">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_enable_modules() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2683">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2676">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2677">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-block-devices" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2724">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_get_block_devices() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2734">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2727">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2728">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-loop-setup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2619">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_loop_setup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2631">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2622">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2623">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2624">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2625">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-mdraid-create" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2644">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_mdraid_create() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2658">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2647">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2648">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2649">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2650">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2651">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2652">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resolve-device" when="last" version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2749">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_resolve_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2760">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2752">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2753">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2754">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="ManagerBTRFS"
               c:symbol-prefix="manager_btrfs"
               c:type="UDisksManagerBTRFS"
               version="2.1.3"
               glib:type-name="UDisksManagerBTRFS"
               glib:get-type="udisks_manager_btrfs_get_type"
               glib:type-struct="ManagerBTRFSIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48932">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5499"/>
      <function name="interface_info"
                c:identifier="udisks_manager_btrfs_interface_info"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48884">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5507"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48889">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_btrfs_override_properties"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48899">Overrides all #GObject properties in the #UDisksManagerBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5508"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48907">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48901">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48902">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_create_volume">
        <source-position filename="udisks-generated.h" line="5490"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create_volume"
              c:identifier="udisks_manager_btrfs_call_create_volume"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48988">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_call_create_volume_finish() to get the result of the operation.

See udisks_manager_btrfs_call_create_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5519"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48990">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48991">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48992">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48993">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48994">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48995">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48996">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48997">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48998">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_volume_finish"
              c:identifier="udisks_manager_btrfs_call_create_volume_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49035">Finishes an operation started with udisks_manager_btrfs_call_create_volume().</doc>
        <source-position filename="udisks-generated.h" line="5530"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49043">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49037">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49038">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_call_create_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_volume_sync"
              c:identifier="udisks_manager_btrfs_call_create_volume_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49064">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_call_create_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5535"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49079">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49066">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49067">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49068">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49069">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49070">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49071">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49072">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_volume"
              c:identifier="udisks_manager_btrfs_complete_create_volume"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49116">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5512"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49118">A #UDisksManagerBTRFS.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49119">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-create-volume" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48957">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_btrfs_complete_create_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48971">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48960">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48961">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48962">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48963">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48964">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48965">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerBTRFSIface"
            c:type="UDisksManagerBTRFSIface"
            glib:is-gtype-struct-for="ManagerBTRFS"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48940">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5499"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48942">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_volume">
        <callback name="handle_create_volume">
          <source-position filename="udisks-generated.h" line="5490"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_devices" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_data_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_md_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerBTRFSProxy"
           c:symbol-prefix="manager_btrfs_proxy"
           c:type="UDisksManagerBTRFSProxy"
           version="2.1.3"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerBTRFSProxy"
           glib:get-type="udisks_manager_btrfs_proxy_get_type"
           glib:type-struct="ManagerBTRFSProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49138">The #UDisksManagerBTRFSProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5570"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerBTRFS"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_btrfs_proxy_new_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49335">Finishes an operation started with udisks_manager_btrfs_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5586"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49342">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49337">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_btrfs_proxy_new_for_bus_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49431">Finishes an operation started with udisks_manager_btrfs_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5605"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49438">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49433">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_btrfs_proxy_new_for_bus_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49458">Like udisks_manager_btrfs_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5608"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49473">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49460">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49461">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49462">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49463">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49464">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_btrfs_proxy_new_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49362">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5589"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49377">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49364">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49365">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49366">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49367">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49368">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_manager_btrfs_proxy_new"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49303">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_proxy_new_finish() to get the result of the operation.

See udisks_manager_btrfs_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5578"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49305">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49306">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49307">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49308">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49309">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49310">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49311">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_btrfs_proxy_new_for_bus"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49399">Like udisks_manager_btrfs_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_btrfs_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5597"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49401">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49402">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49403">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49404">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49405">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49406">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49407">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerBTRFSProxyPrivate"
              c:type="UDisksManagerBTRFSProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerBTRFSProxyClass"
            c:type="UDisksManagerBTRFSProxyClass"
            glib:is-gtype-struct-for="ManagerBTRFSProxy"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49146">Class structure for #UDisksManagerBTRFSProxy.</doc>
      <source-position filename="udisks-generated.h" line="5570"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49148">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerBTRFSProxyPrivate"
            c:type="UDisksManagerBTRFSProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5558"/>
    </record>
    <class name="ManagerBTRFSSkeleton"
           c:symbol-prefix="manager_btrfs_skeleton"
           c:type="UDisksManagerBTRFSSkeleton"
           version="2.1.3"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerBTRFSSkeleton"
           glib:get-type="udisks_manager_btrfs_skeleton_get_type"
           glib:type-struct="ManagerBTRFSSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49497">The #UDisksManagerBTRFSSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5640"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerBTRFS"/>
      <constructor name="new"
                   c:identifier="udisks_manager_btrfs_skeleton_new"
                   version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49772">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5648"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49777">The skeleton object.</doc>
          <type name="ManagerBTRFSSkeleton" c:type="UDisksManagerBTRFS*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerBTRFSSkeletonPrivate"
              c:type="UDisksManagerBTRFSSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerBTRFSSkeletonClass"
            c:type="UDisksManagerBTRFSSkeletonClass"
            glib:is-gtype-struct-for="ManagerBTRFSSkeleton"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49505">Class structure for #UDisksManagerBTRFSSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="5640"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49507">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerBTRFSSkeletonPrivate"
            c:type="UDisksManagerBTRFSSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5628"/>
    </record>
    <interface name="ManagerISCSIInitiator"
               c:symbol-prefix="manager_iscsi_initiator"
               c:type="UDisksManagerISCSIInitiator"
               version="2.0.1"
               glib:type-name="UDisksManagerISCSIInitiator"
               glib:get-type="udisks_manager_iscsi_initiator_get_type"
               glib:type-struct="ManagerISCSIInitiatorIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="53820">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6162"/>
      <function name="interface_info"
                c:identifier="udisks_manager_iscsi_initiator_interface_info"
                version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53680">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53685">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_iscsi_initiator_override_properties"
                version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53695">Overrides all #GObject properties in the #UDisksManagerISCSIInitiator interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53703">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53697">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53698">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_sessions_supported"
                      invoker="get_sessions_supported"
                      version="2.0.1"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54077">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SessionsSupported"&gt;"SessionsSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54085">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54079">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_discover_firmware">
        <source-position filename="udisks-generated.h" line="6116"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_discover_send_targets">
        <source-position filename="udisks-generated.h" line="6147"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_firmware_initiator_name">
        <source-position filename="udisks-generated.h" line="6154"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_initiator_name">
        <source-position filename="udisks-generated.h" line="6110"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_initiator_name_raw">
        <source-position filename="udisks-generated.h" line="6158"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_login">
        <source-position filename="udisks-generated.h" line="6121"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_logout">
        <source-position filename="udisks-generated.h" line="6131"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_initiator_name">
        <source-position filename="udisks-generated.h" line="6141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_discover_firmware"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_firmware"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54664">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverFirmware"&gt;DiscoverFirmware()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_discover_firmware_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_discover_firmware_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6317"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54666">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54667">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54668">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54669">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54670">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_firmware_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_firmware_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54699">Finishes an operation started with udisks_manager_iscsi_initiator_call_discover_firmware().</doc>
        <source-position filename="udisks-generated.h" line="6324"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54709">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54701">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_nodes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54702">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_nodes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54703">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54704">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_discover_firmware().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_firmware_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_firmware_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54734">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverFirmware"&gt;DiscoverFirmware()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_discover_firmware() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6331"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54747">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54736">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54737">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_nodes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54738">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_nodes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54739">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54740">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_send_targets"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_send_targets"
              version="2.3.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54536">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverSendTargets"&gt;DiscoverSendTargets()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_discover_send_targets_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_discover_send_targets_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6291"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54538">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54539">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54540">Argument to pass with the method invocation.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54541">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54542">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54543">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54544">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_send_targets_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_send_targets_finish"
              version="2.3.1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54577">Finishes an operation started with udisks_manager_iscsi_initiator_call_discover_send_targets().</doc>
        <source-position filename="udisks-generated.h" line="6300"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54587">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54579">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_nodes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54580">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_nodes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54581">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54582">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_discover_send_targets().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_send_targets_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_send_targets_sync"
              version="2.3.1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54612">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverSendTargets"&gt;DiscoverSendTargets()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_discover_send_targets() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6307"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54627">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54614">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54615">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54616">Argument to pass with the method invocation.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54617">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_nodes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54618">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_nodes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54619">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54620">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_firmware_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_call_get_firmware_initiator_name"
              version="2.4.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54114">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetFirmwareInitiatorName"&gt;GetFirmwareInitiatorName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_get_firmware_initiator_name_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_get_firmware_initiator_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54116">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54117">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54118">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54119">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_firmware_initiator_name_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_get_firmware_initiator_name_finish"
              version="2.4.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54146">Finishes an operation started with udisks_manager_iscsi_initiator_call_get_firmware_initiator_name().</doc>
        <source-position filename="udisks-generated.h" line="6223"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54155">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54148">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54149">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54150">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_get_firmware_initiator_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_firmware_initiator_name_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_get_firmware_initiator_name_sync"
              version="2.4.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54178">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetFirmwareInitiatorName"&gt;GetFirmwareInitiatorName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_get_firmware_initiator_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6229"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54189">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54180">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54181">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54182">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name"
              version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54218">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorName"&gt;GetInitiatorName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_get_initiator_name_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_get_initiator_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54220">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54221">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54222">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54223">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_finish"
              version="2.0.1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54250">Finishes an operation started with udisks_manager_iscsi_initiator_call_get_initiator_name().</doc>
        <source-position filename="udisks-generated.h" line="6241"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54259">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54252">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54253">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54254">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_get_initiator_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_raw"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_raw"
              version="2.8.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54322">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorNameRaw"&gt;GetInitiatorNameRaw()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_get_initiator_name_raw_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_get_initiator_name_raw_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54324">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54325">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54326">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54327">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_raw_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_raw_finish"
              version="2.8.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54354">Finishes an operation started with udisks_manager_iscsi_initiator_call_get_initiator_name_raw().</doc>
        <source-position filename="udisks-generated.h" line="6259"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54363">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54356">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54357">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54358">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_get_initiator_name_raw().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_raw_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_raw_sync"
              version="2.8.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54386">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorNameRaw"&gt;GetInitiatorNameRaw()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_get_initiator_name_raw() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6265"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54397">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54388">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54389">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54390">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_sync"
              version="2.0.1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54282">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorName"&gt;GetInitiatorName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_get_initiator_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6247"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54293">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54284">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54285">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54286">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_login"
              c:identifier="udisks_manager_iscsi_initiator_call_login"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54780">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Login"&gt;Login()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_login_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_login_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6339"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54782">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54783">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54784">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54785">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54786">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54787">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54788">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54789">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54790">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54791">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_login_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_login_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54830">Finishes an operation started with udisks_manager_iscsi_initiator_call_login().</doc>
        <source-position filename="udisks-generated.h" line="6351"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54838">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54832">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54833">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_login().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_login_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_login_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54859">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Login"&gt;Login()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_login() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6356"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54875">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54861">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54862">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54863">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54864">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54865">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54866">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54867">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54868">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout"
              c:identifier="udisks_manager_iscsi_initiator_call_logout"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54914">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_logout_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_logout_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6367"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54916">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54917">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54918">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54919">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54920">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54921">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54922">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54923">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54924">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54925">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_logout_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54964">Finishes an operation started with udisks_manager_iscsi_initiator_call_logout().</doc>
        <source-position filename="udisks-generated.h" line="6379"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54972">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54966">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54967">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_logout().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_logout_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54993">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_logout() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6384"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55009">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54995">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54996">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54997">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54998">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54999">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55000">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55001">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55002">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_call_set_initiator_name"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54426">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SetInitiatorName"&gt;SetInitiatorName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_set_initiator_name_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_set_initiator_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54428">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54429">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54430">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54431">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54432">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54433">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initiator_name_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_set_initiator_name_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54464">Finishes an operation started with udisks_manager_iscsi_initiator_call_set_initiator_name().</doc>
        <source-position filename="udisks-generated.h" line="6279"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54472">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54466">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54467">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_set_initiator_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initiator_name_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_set_initiator_name_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54493">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SetInitiatorName"&gt;SetInitiatorName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_set_initiator_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6284"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54505">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54495">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54496">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54497">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54498">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_discover_firmware"
              c:identifier="udisks_manager_iscsi_initiator_complete_discover_firmware"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55163">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverFirmware"&gt;DiscoverFirmware()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55165">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55166">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55167">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="nodes_cnt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55168">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_discover_send_targets"
              c:identifier="udisks_manager_iscsi_initiator_complete_discover_send_targets"
              version="2.3.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55137">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverSendTargets"&gt;DiscoverSendTargets()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55139">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55140">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55141">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="nodes_cnt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55142">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_firmware_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_complete_get_firmware_initiator_name"
              version="2.4.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55048">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetFirmwareInitiatorName"&gt;GetFirmwareInitiatorName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55050">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55051">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55052">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_complete_get_initiator_name"
              version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55071">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorName"&gt;GetInitiatorName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55073">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55074">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55075">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_initiator_name_raw"
              c:identifier="udisks_manager_iscsi_initiator_complete_get_initiator_name_raw"
              version="2.8.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55094">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorNameRaw"&gt;GetInitiatorNameRaw()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55096">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55097">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55098">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_login"
              c:identifier="udisks_manager_iscsi_initiator_complete_login"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55189">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Login"&gt;Login()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55191">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55192">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_logout"
              c:identifier="udisks_manager_iscsi_initiator_complete_logout"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55209">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Logout"&gt;Logout()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55211">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55212">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_complete_set_initiator_name"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55117">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SetInitiatorName"&gt;SetInitiatorName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55119">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55120">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sessions_supported"
              c:identifier="udisks_manager_iscsi_initiator_get_sessions_supported"
              glib:get-property="sessions-supported"
              version="2.0.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54077">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SessionsSupported"&gt;"SessionsSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6398"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54085">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54079">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_sessions_supported"
              c:identifier="udisks_manager_iscsi_initiator_set_sessions_supported"
              glib:set-property="sessions-supported"
              version="2.0.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54097">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SessionsSupported"&gt;"SessionsSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6399"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54099">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54100">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="sessions-supported"
                version="2.0.1"
                writable="1"
                transfer-ownership="none"
                setter="set_sessions_supported"
                getter="get_sessions_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54064">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SessionsSupported"&gt;"SessionsSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-discover-firmware" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53978">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverFirmware"&gt;DiscoverFirmware()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_discover_firmware() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53988">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53981">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53982">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-discover-send-targets"
                   when="last"
                   version="2.3.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53951">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverSendTargets"&gt;DiscoverSendTargets()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_discover_send_targets() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53963">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53954">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53955">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53956">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53957">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-firmware-initiator-name"
                   when="last"
                   version="2.4.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53853">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetFirmwareInitiatorName"&gt;GetFirmwareInitiatorName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_get_firmware_initiator_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53862">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53856">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-initiator-name"
                   when="last"
                   version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53877">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorName"&gt;GetInitiatorName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_get_initiator_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53886">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53880">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-initiator-name-raw"
                   when="last"
                   version="2.8.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53901">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorNameRaw"&gt;GetInitiatorNameRaw()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_get_initiator_name_raw() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53910">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53904">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-login" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54003">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Login"&gt;Login()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_login() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54018">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54006">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54007">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54008">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54009">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54010">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54011">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54012">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-logout" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54033">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Logout"&gt;Logout()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_logout() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54048">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54036">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54037">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54038">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54039">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54040">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54041">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54042">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-initiator-name"
                   when="last"
                   version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53925">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SetInitiatorName"&gt;SetInitiatorName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_set_initiator_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53936">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53928">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53929">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53930">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerISCSIInitiatorIface"
            c:type="UDisksManagerISCSIInitiatorIface"
            glib:is-gtype-struct-for="ManagerISCSIInitiator"
            version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="53828">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6162"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53830">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_initiator_name">
        <callback name="handle_get_initiator_name">
          <source-position filename="udisks-generated.h" line="6110"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sessions_supported">
        <callback name="get_sessions_supported">
          <source-position filename="udisks-generated.h" line="6114"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54085">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="54079">A #UDisksManagerISCSIInitiator.</doc>
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_discover_firmware">
        <callback name="handle_discover_firmware">
          <source-position filename="udisks-generated.h" line="6116"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_login">
        <callback name="handle_login">
          <source-position filename="udisks-generated.h" line="6121"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_tpgt" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_address" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_port" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_iface" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_logout">
        <callback name="handle_logout">
          <source-position filename="udisks-generated.h" line="6131"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_tpgt" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_address" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_port" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_iface" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_initiator_name">
        <callback name="handle_set_initiator_name">
          <source-position filename="udisks-generated.h" line="6141"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_discover_send_targets">
        <callback name="handle_discover_send_targets">
          <source-position filename="udisks-generated.h" line="6147"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_address" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_port" transfer-ownership="none">
              <type name="guint16" c:type="guint16"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_firmware_initiator_name">
        <callback name="handle_get_firmware_initiator_name">
          <source-position filename="udisks-generated.h" line="6154"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_initiator_name_raw">
        <callback name="handle_get_initiator_name_raw">
          <source-position filename="udisks-generated.h" line="6158"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerISCSIInitiatorProxy"
           c:symbol-prefix="manager_iscsi_initiator_proxy"
           c:type="UDisksManagerISCSIInitiatorProxy"
           version="2.0.1"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerISCSIInitiatorProxy"
           glib:get-type="udisks_manager_iscsi_initiator_proxy_get_type"
           glib:type-struct="ManagerISCSIInitiatorProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55231">The #UDisksManagerISCSIInitiatorProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6425"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerISCSIInitiator"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_iscsi_initiator_proxy_new_finish"
                   version="2.0.1"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55497">Finishes an operation started with udisks_manager_iscsi_initiator_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6441"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55504">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerISCSIInitiatorProxy"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55499">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_iscsi_initiator_proxy_new_for_bus_finish"
                   version="2.0.1"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55593">Finishes an operation started with udisks_manager_iscsi_initiator_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6460"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55600">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerISCSIInitiatorProxy"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55595">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_iscsi_initiator_proxy_new_for_bus_sync"
                   version="2.0.1"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55620">Like udisks_manager_iscsi_initiator_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6463"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55635">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerISCSIInitiatorProxy"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55622">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55623">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55624">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55625">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55626">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_iscsi_initiator_proxy_new_sync"
                   version="2.0.1"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55524">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6444"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55539">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerISCSIInitiatorProxy"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55526">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55527">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55528">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55529">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55530">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_manager_iscsi_initiator_proxy_new"
                version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55465">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_proxy_new_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6433"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55467">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55468">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55469">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55470">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55471">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55472">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55473">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_iscsi_initiator_proxy_new_for_bus"
                version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55561">Like udisks_manager_iscsi_initiator_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6452"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55563">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55564">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55565">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55566">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55567">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55568">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55569">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerISCSIInitiatorProxyPrivate"
              c:type="UDisksManagerISCSIInitiatorProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerISCSIInitiatorProxyClass"
            c:type="UDisksManagerISCSIInitiatorProxyClass"
            glib:is-gtype-struct-for="ManagerISCSIInitiatorProxy"
            version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55239">Class structure for #UDisksManagerISCSIInitiatorProxy.</doc>
      <source-position filename="udisks-generated.h" line="6425"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55241">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerISCSIInitiatorProxyPrivate"
            c:type="UDisksManagerISCSIInitiatorProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6413"/>
    </record>
    <class name="ManagerISCSIInitiatorSkeleton"
           c:symbol-prefix="manager_iscsi_initiator_skeleton"
           c:type="UDisksManagerISCSIInitiatorSkeleton"
           version="2.0.1"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerISCSIInitiatorSkeleton"
           glib:get-type="udisks_manager_iscsi_initiator_skeleton_get_type"
           glib:type-struct="ManagerISCSIInitiatorSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55659">The #UDisksManagerISCSIInitiatorSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6495"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerISCSIInitiator"/>
      <constructor name="new"
                   c:identifier="udisks_manager_iscsi_initiator_skeleton_new"
                   version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56116">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6503"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56121">The skeleton object.</doc>
          <type name="ManagerISCSIInitiatorSkeleton"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerISCSIInitiatorSkeletonPrivate"
              c:type="UDisksManagerISCSIInitiatorSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerISCSIInitiatorSkeletonClass"
            c:type="UDisksManagerISCSIInitiatorSkeletonClass"
            glib:is-gtype-struct-for="ManagerISCSIInitiatorSkeleton"
            version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55667">Class structure for #UDisksManagerISCSIInitiatorSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6495"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55669">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerISCSIInitiatorSkeletonPrivate"
            c:type="UDisksManagerISCSIInitiatorSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6483"/>
    </record>
    <record name="ManagerIface"
            c:type="UDisksManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2491">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="100"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2493">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_enable_modules">
        <callback name="handle_enable_modules">
          <source-position filename="udisks-generated.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_loop_setup">
        <callback name="handle_loop_setup">
          <source-position filename="udisks-generated.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_fd" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_filesystems">
        <callback name="get_supported_filesystems">
          <source-position filename="udisks-generated.h" line="46"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2881">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="2873">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <source-position filename="udisks-generated.h" line="48"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="2820">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_mdraid_create">
        <callback name="handle_mdraid_create">
          <source-position filename="udisks-generated.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_blocks" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_chunk" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_check">
        <callback name="handle_can_check">
          <source-position filename="udisks-generated.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_format">
        <callback name="handle_can_format">
          <source-position filename="udisks-generated.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_repair">
        <callback name="handle_can_repair">
          <source-position filename="udisks-generated.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_resize">
        <callback name="handle_can_resize">
          <source-position filename="udisks-generated.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_block_devices">
        <callback name="handle_get_block_devices">
          <source-position filename="udisks-generated.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resolve_device">
        <callback name="handle_resolve_device">
          <source-position filename="udisks-generated.h" line="84"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_devspec" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_default_encryption_type">
        <callback name="get_default_encryption_type">
          <source-position filename="udisks-generated.h" line="90"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2993">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="2985">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_encryption_types">
        <callback name="get_supported_encryption_types">
          <source-position filename="udisks-generated.h" line="92"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2934">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="2926">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_module">
        <callback name="handle_enable_module">
          <source-position filename="udisks-generated.h" line="94"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ManagerLVM2"
               c:symbol-prefix="manager_lvm2"
               c:type="UDisksManagerLVM2"
               version="2.0.0"
               glib:type-name="UDisksManagerLVM2"
               glib:get-type="udisks_manager_lvm2_get_type"
               glib:type-struct="ManagerLVM2Iface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62020">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7212"/>
      <function name="interface_info"
                c:identifier="udisks_manager_lvm2_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61972">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="7220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61977">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_lvm2_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61987">Overrides all #GObject properties in the #UDisksManagerLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="7221"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61995">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61989">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61990">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_volume_group_create">
        <source-position filename="udisks-generated.h" line="7205"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_volume_group_create"
              c:identifier="udisks_manager_lvm2_call_volume_group_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62074">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_call_volume_group_create_finish() to get the result of the operation.

See udisks_manager_lvm2_call_volume_group_create_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7233"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62076">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62077">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62078">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62079">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62080">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62081">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62082">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_volume_group_create_finish"
              c:identifier="udisks_manager_lvm2_call_volume_group_create_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62115">Finishes an operation started with udisks_manager_lvm2_call_volume_group_create().</doc>
        <source-position filename="udisks-generated.h" line="7242"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62124">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62117">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62118">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62119">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_call_volume_group_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_volume_group_create_sync"
              c:identifier="udisks_manager_lvm2_call_volume_group_create_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62147">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_call_volume_group_create() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7248"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62161">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62149">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62150">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62151">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62152">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62153">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62154">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_volume_group_create"
              c:identifier="udisks_manager_lvm2_complete_volume_group_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62196">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62198">A #UDisksManagerLVM2.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62199">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62200">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-volume-group-create"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62045">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_lvm2_complete_volume_group_create() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62057">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62048">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62049">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62050">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62051">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerLVM2Iface"
            c:type="UDisksManagerLVM2Iface"
            glib:is-gtype-struct-for="ManagerLVM2"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62028">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7212"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62030">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_volume_group_create">
        <callback name="handle_volume_group_create">
          <source-position filename="udisks-generated.h" line="7205"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_blocks" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerLVM2Proxy"
           c:symbol-prefix="manager_lvm2_proxy"
           c:type="UDisksManagerLVM2Proxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerLVM2Proxy"
           glib:get-type="udisks_manager_lvm2_proxy_get_type"
           glib:type-struct="ManagerLVM2ProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62221">The #UDisksManagerLVM2Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7282"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerLVM2"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_lvm2_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62418">Finishes an operation started with udisks_manager_lvm2_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="7298"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62425">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62420">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_lvm2_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62514">Finishes an operation started with udisks_manager_lvm2_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="7317"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62521">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62516">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_lvm2_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62541">Like udisks_manager_lvm2_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7320"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62556">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62543">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62544">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62545">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62546">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62547">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_lvm2_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62445">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7301"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62460">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62447">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62448">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62449">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62450">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62451">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_manager_lvm2_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62386">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_proxy_new_finish() to get the result of the operation.

See udisks_manager_lvm2_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7290"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62388">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62389">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62390">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62391">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62392">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62393">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62394">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_lvm2_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62482">Like udisks_manager_lvm2_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_lvm2_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62484">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62485">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62486">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62487">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62488">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62489">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62490">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerLVM2ProxyPrivate"
              c:type="UDisksManagerLVM2ProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerLVM2ProxyClass"
            c:type="UDisksManagerLVM2ProxyClass"
            glib:is-gtype-struct-for="ManagerLVM2Proxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62229">Class structure for #UDisksManagerLVM2Proxy.</doc>
      <source-position filename="udisks-generated.h" line="7282"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62231">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerLVM2ProxyPrivate"
            c:type="UDisksManagerLVM2ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7270"/>
    </record>
    <class name="ManagerLVM2Skeleton"
           c:symbol-prefix="manager_lvm2_skeleton"
           c:type="UDisksManagerLVM2Skeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerLVM2Skeleton"
           glib:get-type="udisks_manager_lvm2_skeleton_get_type"
           glib:type-struct="ManagerLVM2SkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62580">The #UDisksManagerLVM2Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7352"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerLVM2"/>
      <constructor name="new"
                   c:identifier="udisks_manager_lvm2_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62855">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="7360"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62860">The skeleton object.</doc>
          <type name="ManagerLVM2Skeleton" c:type="UDisksManagerLVM2*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerLVM2SkeletonPrivate"
              c:type="UDisksManagerLVM2SkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerLVM2SkeletonClass"
            c:type="UDisksManagerLVM2SkeletonClass"
            glib:is-gtype-struct-for="ManagerLVM2Skeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62588">Class structure for #UDisksManagerLVM2Skeleton.</doc>
      <source-position filename="udisks-generated.h" line="7352"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62590">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerLVM2SkeletonPrivate"
            c:type="UDisksManagerLVM2SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7340"/>
    </record>
    <interface name="ManagerNVMe"
               c:symbol-prefix="manager_nvme"
               c:type="UDisksManagerNVMe"
               glib:type-name="UDisksManagerNVMe"
               glib:get-type="udisks_manager_nvme_get_type"
               glib:type-struct="ManagerNVMeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5688">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="544"/>
      <function name="interface_info"
                c:identifier="udisks_manager_nvme_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5616">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="552"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5621">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_nvme_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5629">Overrides all #GObject properties in the #UDisksManagerNVMe interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="553"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5637">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5631">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5632">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_host_id"
                      invoker="get_host_id"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5867">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_nvme_dup_host_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="520"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5877">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5869">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_host_nqn"
                      invoker="get_host_nqn"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5814">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_nvme_dup_host_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="522"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5824">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5816">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_connect">
        <source-position filename="udisks-generated.h" line="524"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_subsysnqn" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport_addr" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_host_id">
        <source-position filename="udisks-generated.h" line="532"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_host_nqn">
        <source-position filename="udisks-generated.h" line="538"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostnqn" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_connect"
              c:identifier="udisks_manager_nvme_call_connect"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6140">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.Connect"&gt;Connect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_call_connect_finish() to get the result of the operation.

See udisks_manager_nvme_call_connect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="613"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6142">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_subsysnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6143">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6144">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport_addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6145">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6146">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6147">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6148">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6149">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_connect_finish"
              c:identifier="udisks_manager_nvme_call_connect_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6184">Finishes an operation started with udisks_manager_nvme_call_connect().</doc>
        <source-position filename="udisks-generated.h" line="623"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6193">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6186">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="out_nvme_ctrl"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6187">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6188">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_call_connect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_connect_sync"
              c:identifier="udisks_manager_nvme_call_connect_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6216">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.Connect"&gt;Connect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_nvme_call_connect() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="629"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6231">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6218">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_subsysnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6219">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6220">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport_addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6221">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6222">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_nvme_ctrl"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6223">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6224">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_id"
              c:identifier="udisks_manager_nvme_call_set_host_id"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6030">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostID"&gt;SetHostID()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_call_set_host_id_finish() to get the result of the operation.

See udisks_manager_nvme_call_set_host_id_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="593"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6032">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_hostid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6033">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6034">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6035">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6036">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6037">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_id_finish"
              c:identifier="udisks_manager_nvme_call_set_host_id_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6068">Finishes an operation started with udisks_manager_nvme_call_set_host_id().</doc>
        <source-position filename="udisks-generated.h" line="601"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6076">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6070">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6071">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_call_set_host_id().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_id_sync"
              c:identifier="udisks_manager_nvme_call_set_host_id_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6097">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostID"&gt;SetHostID()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_nvme_call_set_host_id() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="606"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6109">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6099">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_hostid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6100">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6101">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6102">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_nqn"
              c:identifier="udisks_manager_nvme_call_set_host_nqn"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5920">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostNQN"&gt;SetHostNQN()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_call_set_host_nqn_finish() to get the result of the operation.

See udisks_manager_nvme_call_set_host_nqn_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="573"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5922">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_hostnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5923">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5924">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5925">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5926">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5927">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_nqn_finish"
              c:identifier="udisks_manager_nvme_call_set_host_nqn_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5958">Finishes an operation started with udisks_manager_nvme_call_set_host_nqn().</doc>
        <source-position filename="udisks-generated.h" line="581"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5966">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5960">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5961">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_call_set_host_nqn().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_nqn_sync"
              c:identifier="udisks_manager_nvme_call_set_host_nqn_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5987">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostNQN"&gt;SetHostNQN()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_nvme_call_set_host_nqn() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="586"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5999">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5989">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_hostnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5990">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5991">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5992">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_connect"
              c:identifier="udisks_manager_nvme_complete_connect"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6308">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.Connect"&gt;Connect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="565"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6310">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6311">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="nvme_ctrl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6312">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_host_id"
              c:identifier="udisks_manager_nvme_complete_set_host_id"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6288">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostID"&gt;SetHostID()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="561"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6290">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6291">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_host_nqn"
              c:identifier="udisks_manager_nvme_complete_set_host_nqn"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6268">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostNQN"&gt;SetHostNQN()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="557"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6270">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6271">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_host_id"
              c:identifier="udisks_manager_nvme_dup_host_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5887">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="647"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5895">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5889">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_host_nqn"
              c:identifier="udisks_manager_nvme_dup_host_nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5834">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="643"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5842">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5836">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_id"
              c:identifier="udisks_manager_nvme_get_host_id"
              glib:get-property="host-id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5867">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_nvme_dup_host_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="646"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5877">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5869">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_nqn"
              c:identifier="udisks_manager_nvme_get_host_nqn"
              glib:get-property="host-nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5814">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_nvme_dup_host_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="642"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5824">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5816">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host_id"
              c:identifier="udisks_manager_nvme_set_host_id"
              glib:set-property="host-id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5905">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="648"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5907">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5908">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host_nqn"
              c:identifier="udisks_manager_nvme_set_host_nqn"
              glib:set-property="host-nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5852">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="644"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5854">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5855">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="host-id"
                writable="1"
                transfer-ownership="none"
                setter="set_host_id"
                getter="get_host_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5803">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="host-nqn"
                writable="1"
                transfer-ownership="none"
                setter="set_host_nqn"
                getter="get_host_nqn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5794">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-connect" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5765">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.Connect"&gt;Connect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_nvme_complete_connect() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5778">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5768">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_subsysnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5769">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5770">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_transport_addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5771">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5772">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-host-id" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5739">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostID"&gt;SetHostID()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_nvme_complete_set_host_id() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5750">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5742">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5743">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5744">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-host-nqn" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5713">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostNQN"&gt;SetHostNQN()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_nvme_complete_set_host_nqn() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5724">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5716">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5717">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5718">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerNVMeIface"
            c:type="UDisksManagerNVMeIface"
            glib:is-gtype-struct-for="ManagerNVMe">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5694">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="544"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5696">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_host_id">
        <callback name="get_host_id">
          <source-position filename="udisks-generated.h" line="520"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5877">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5869">A #UDisksManagerNVMe.</doc>
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_host_nqn">
        <callback name="get_host_nqn">
          <source-position filename="udisks-generated.h" line="522"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5824">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5816">A #UDisksManagerNVMe.</doc>
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_connect">
        <callback name="handle_connect">
          <source-position filename="udisks-generated.h" line="524"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_subsysnqn" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_transport" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_transport_addr" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_host_id">
        <callback name="handle_set_host_id">
          <source-position filename="udisks-generated.h" line="532"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_host_nqn">
        <callback name="handle_set_host_nqn">
          <source-position filename="udisks-generated.h" line="538"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostnqn" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerNVMeProxy"
           c:symbol-prefix="manager_nvme_proxy"
           c:type="UDisksManagerNVMeProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerNVMeProxy"
           glib:get-type="udisks_manager_nvme_proxy_get_type"
           glib:type-struct="ManagerNVMeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6333">The #UDisksManagerNVMeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="674"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerNVMe"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_nvme_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6609">Finishes an operation started with udisks_manager_nvme_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="690"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6616">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerNVMeProxy" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6611">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_nvme_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6699">Finishes an operation started with udisks_manager_nvme_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="709"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6706">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerNVMeProxy" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6701">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_nvme_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6724">Like udisks_manager_nvme_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_nvme_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="712"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6739">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerNVMeProxy" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6726">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6727">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6728">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6729">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6730">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_nvme_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6634">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_nvme_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="693"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6649">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerNVMeProxy" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6636">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6637">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6638">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6639">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6640">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_manager_nvme_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6579">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_proxy_new_finish() to get the result of the operation.

See udisks_manager_nvme_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="682"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6581">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6582">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6583">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6584">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6585">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6586">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6587">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_nvme_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6669">Like udisks_manager_nvme_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_nvme_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="701"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6671">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6672">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6673">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6674">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6675">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6676">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6677">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerNVMeProxyPrivate"
              c:type="UDisksManagerNVMeProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerNVMeProxyClass"
            c:type="UDisksManagerNVMeProxyClass"
            glib:is-gtype-struct-for="ManagerNVMeProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6339">Class structure for #UDisksManagerNVMeProxy.</doc>
      <source-position filename="udisks-generated.h" line="674"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6341">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerNVMeProxyPrivate"
            c:type="UDisksManagerNVMeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="662"/>
    </record>
    <class name="ManagerNVMeSkeleton"
           c:symbol-prefix="manager_nvme_skeleton"
           c:type="UDisksManagerNVMeSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerNVMeSkeleton"
           glib:get-type="udisks_manager_nvme_skeleton_get_type"
           glib:type-struct="ManagerNVMeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6761">The #UDisksManagerNVMeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="744"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerNVMe"/>
      <constructor name="new" c:identifier="udisks_manager_nvme_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7227">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="752"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7232">The skeleton object.</doc>
          <type name="ManagerNVMeSkeleton" c:type="UDisksManagerNVMe*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerNVMeSkeletonPrivate"
              c:type="UDisksManagerNVMeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerNVMeSkeletonClass"
            c:type="UDisksManagerNVMeSkeletonClass"
            glib:is-gtype-struct-for="ManagerNVMeSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6767">Class structure for #UDisksManagerNVMeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="744"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6769">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerNVMeSkeletonPrivate"
            c:type="UDisksManagerNVMeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="732"/>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="UDisksManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerProxy"
           glib:get-type="udisks_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4404">The #UDisksManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="422"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Manager"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4720">Finishes an operation started with udisks_manager_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="438"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4727">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4722">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4810">Finishes an operation started with udisks_manager_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="457"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4817">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4812">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4835">Like udisks_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="460"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4850">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4837">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4838">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4839">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4840">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4841">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4745">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="441"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4760">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4747">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4748">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4749">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4750">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4751">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_manager_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4690">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_proxy_new_finish() to get the result of the operation.

See udisks_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="430"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4692">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4693">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4694">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4695">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4696">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4697">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4698">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4780">Like udisks_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4782">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4783">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4784">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4785">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4786">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4787">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4788">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="UDisksManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="UDisksManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4410">Class structure for #UDisksManagerProxy.</doc>
      <source-position filename="udisks-generated.h" line="422"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4412">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="UDisksManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="410"/>
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="UDisksManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerSkeleton"
           glib:get-type="udisks_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4872">The #UDisksManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="492"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Manager"/>
      <constructor name="new" c:identifier="udisks_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5364">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="500"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5369">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="UDisksManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="UDisksManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="UDisksManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4878">Class structure for #UDisksManagerSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="492"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4880">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="UDisksManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="480"/>
    </record>
    <function-macro name="NVME_CONTROLLER"
                    c:identifier="UDISKS_NVME_CONTROLLER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1664"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_GET_IFACE"
                    c:identifier="UDISKS_NVME_CONTROLLER_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1666"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_PROXY"
                    c:identifier="UDISKS_NVME_CONTROLLER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1921"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_PROXY_CLASS"
                    c:identifier="UDISKS_NVME_CONTROLLER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1922"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_PROXY_GET_CLASS"
                    c:identifier="UDISKS_NVME_CONTROLLER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1923"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_SKELETON"
                    c:identifier="UDISKS_NVME_CONTROLLER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1991"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_SKELETON_CLASS"
                    c:identifier="UDISKS_NVME_CONTROLLER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1992"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_NVME_CONTROLLER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1993"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS"
                    c:identifier="UDISKS_NVME_FABRICS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2255"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_GET_IFACE"
                    c:identifier="UDISKS_NVME_FABRICS_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2257"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_PROXY"
                    c:identifier="UDISKS_NVME_FABRICS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2342"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_PROXY_CLASS"
                    c:identifier="UDISKS_NVME_FABRICS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2343"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_PROXY_GET_CLASS"
                    c:identifier="UDISKS_NVME_FABRICS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2344"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_SKELETON"
                    c:identifier="UDISKS_NVME_FABRICS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2412"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_SKELETON_CLASS"
                    c:identifier="UDISKS_NVME_FABRICS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2413"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_NVME_FABRICS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2414"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE"
                    c:identifier="UDISKS_NVME_NAMESPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2026"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_GET_IFACE"
                    c:identifier="UDISKS_NVME_NAMESPACE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2028"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_PROXY"
                    c:identifier="UDISKS_NVME_NAMESPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2150"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_PROXY_CLASS"
                    c:identifier="UDISKS_NVME_NAMESPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2151"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_NVME_NAMESPACE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2152"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_SKELETON"
                    c:identifier="UDISKS_NVME_NAMESPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2220"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_NVME_NAMESPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2221"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_NVME_NAMESPACE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2222"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="NVMeController"
               c:symbol-prefix="nvme_controller"
               c:type="UDisksNVMeController"
               glib:type-name="UDisksNVMeController"
               glib:get-type="udisks_nvme_controller_get_type"
               glib:type-struct="NVMeControllerIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="17054">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1732"/>
      <function name="interface_info"
                c:identifier="udisks_nvme_controller_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16944">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="1740"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16949">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_nvme_controller_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16957">Overrides all #GObject properties in the #UDisksNVMeController interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="1741"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16965">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16959">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16960">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_controller_id"
                      invoker="get_controller_id"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17406">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.ControllerID"&gt;"ControllerID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1677"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17414">The property value.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17408">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_fguid" invoker="get_fguid" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17492">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_fguid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1679"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17502">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17494">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nvme_revision"
                      invoker="get_nvme_revision"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17545">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_nvme_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1681"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17555">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17547">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sanitize_percent_remaining"
                      invoker="get_sanitize_percent_remaining"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17926">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizePercentRemaining"&gt;"SanitizePercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1728"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17934">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17928">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sanitize_status"
                      invoker="get_sanitize_status"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17873">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_sanitize_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1683"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17883">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17875">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_critical_warning"
                      invoker="get_smart_critical_warning"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17664">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_smart_critical_warning() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1685"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17674">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17666">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_power_on_hours"
                      invoker="get_smart_power_on_hours"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17717">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartPowerOnHours"&gt;"SmartPowerOnHours"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1687"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17725">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17719">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_percent_remaining"
                      invoker="get_smart_selftest_percent_remaining"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17836">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1730"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17844">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17838">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_status"
                      invoker="get_smart_selftest_status"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17783">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1689"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17793">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17785">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_temperature"
                      invoker="get_smart_temperature"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17750">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1691"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17758">The property value.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17752">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_updated"
                      invoker="get_smart_updated"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17631">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1693"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17639">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17633">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_state" invoker="get_state" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17353">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1695"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17363">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17355">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_subsystem_nqn"
                      invoker="get_subsystem_nqn"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17439">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_subsystem_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1697"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17449">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17441">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_unallocated_capacity"
                      invoker="get_unallocated_capacity"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17598">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.UnallocatedCapacity"&gt;"UnallocatedCapacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1699"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17606">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17600">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_sanitize_start">
        <source-position filename="udisks-generated.h" line="1701"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_get_attributes">
        <source-position filename="udisks-generated.h" line="1707"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_abort">
        <source-position filename="udisks-generated.h" line="1712"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_start">
        <source-position filename="udisks-generated.h" line="1717"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_update">
        <source-position filename="udisks-generated.h" line="1723"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_sanitize_start"
              c:identifier="udisks_nvme_controller_call_sanitize_start"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18391">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStart"&gt;SanitizeStart()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_sanitize_start_finish() to get the result of the operation.

See udisks_nvme_controller_call_sanitize_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1845"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18393">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18394">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18395">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18396">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18397">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18398">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_sanitize_start_finish"
              c:identifier="udisks_nvme_controller_call_sanitize_start_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18429">Finishes an operation started with udisks_nvme_controller_call_sanitize_start().</doc>
        <source-position filename="udisks-generated.h" line="1853"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18437">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18431">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18432">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_sanitize_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_sanitize_start_sync"
              c:identifier="udisks_nvme_controller_call_sanitize_start_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18458">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStart"&gt;SanitizeStart()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_sanitize_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1858"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18470">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18460">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18461">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18462">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18463">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes"
              c:identifier="udisks_nvme_controller_call_smart_get_attributes"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18067">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_smart_get_attributes_finish() to get the result of the operation.

See udisks_nvme_controller_call_smart_get_attributes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1787"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18069">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18070">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18071">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18072">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18073">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_finish"
              c:identifier="udisks_nvme_controller_call_smart_get_attributes_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18102">Finishes an operation started with udisks_nvme_controller_call_smart_get_attributes().</doc>
        <source-position filename="udisks-generated.h" line="1794"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18111">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18104">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18105">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18106">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_smart_get_attributes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_sync"
              c:identifier="udisks_nvme_controller_call_smart_get_attributes_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18134">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_smart_get_attributes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1800"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18146">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18136">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18137">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18138">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18139">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort"
              c:identifier="udisks_nvme_controller_call_smart_selftest_abort"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18287">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_smart_selftest_abort_finish() to get the result of the operation.

See udisks_nvme_controller_call_smart_selftest_abort_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18289">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18290">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18291">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18292">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18293">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_finish"
              c:identifier="udisks_nvme_controller_call_smart_selftest_abort_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18322">Finishes an operation started with udisks_nvme_controller_call_smart_selftest_abort().</doc>
        <source-position filename="udisks-generated.h" line="1834"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18330">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18324">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18325">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_smart_selftest_abort().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_sync"
              c:identifier="udisks_nvme_controller_call_smart_selftest_abort_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18351">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_smart_selftest_abort() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1839"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18362">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18353">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18354">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18355">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start"
              c:identifier="udisks_nvme_controller_call_smart_selftest_start"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18177">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_smart_selftest_start_finish() to get the result of the operation.

See udisks_nvme_controller_call_smart_selftest_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1807"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18179">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18180">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18181">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18182">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18183">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18184">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_finish"
              c:identifier="udisks_nvme_controller_call_smart_selftest_start_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18215">Finishes an operation started with udisks_nvme_controller_call_smart_selftest_start().</doc>
        <source-position filename="udisks-generated.h" line="1815"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18223">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18217">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18218">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_smart_selftest_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_sync"
              c:identifier="udisks_nvme_controller_call_smart_selftest_start_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18244">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_smart_selftest_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1820"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18256">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18246">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18247">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18248">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18249">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update"
              c:identifier="udisks_nvme_controller_call_smart_update"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17963">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_smart_update_finish() to get the result of the operation.

See udisks_nvme_controller_call_smart_update_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1769"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17965">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17966">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17967">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17968">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17969">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_finish"
              c:identifier="udisks_nvme_controller_call_smart_update_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17998">Finishes an operation started with udisks_nvme_controller_call_smart_update().</doc>
        <source-position filename="udisks-generated.h" line="1776"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18006">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18000">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18001">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_smart_update().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_sync"
              c:identifier="udisks_nvme_controller_call_smart_update_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18027">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_smart_update() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1781"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18038">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18029">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18030">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18031">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_sanitize_start"
              c:identifier="udisks_nvme_controller_complete_sanitize_start"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18584">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStart"&gt;SanitizeStart()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1762"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18586">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18587">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_get_attributes"
              c:identifier="udisks_nvme_controller_complete_smart_get_attributes"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18521">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1749"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18523">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18524">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18525">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_abort"
              c:identifier="udisks_nvme_controller_complete_smart_selftest_abort"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18564">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1758"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18566">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18567">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_start"
              c:identifier="udisks_nvme_controller_complete_smart_selftest_start"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18544">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1754"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18546">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18547">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_update"
              c:identifier="udisks_nvme_controller_complete_smart_update"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18501">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1745"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18503">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18504">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_fguid"
              c:identifier="udisks_nvme_controller_dup_fguid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17512">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1880"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17520">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17514">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_nvme_revision"
              c:identifier="udisks_nvme_controller_dup_nvme_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17565">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1884"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17573">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17567">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sanitize_status"
              c:identifier="udisks_nvme_controller_dup_sanitize_status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17893">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1911"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17901">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17895">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_smart_critical_warning"
              c:identifier="udisks_nvme_controller_dup_smart_critical_warning"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17684">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1894"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17692">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17686">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_smart_selftest_status"
              c:identifier="udisks_nvme_controller_dup_smart_selftest_status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17803">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1904"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17811">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17805">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_state"
              c:identifier="udisks_nvme_controller_dup_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17373">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1869"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17381">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17375">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_subsystem_nqn"
              c:identifier="udisks_nvme_controller_dup_subsystem_nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17459">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1876"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17467">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17461">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_controller_id"
              c:identifier="udisks_nvme_controller_get_controller_id"
              glib:get-property="controller-id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17406">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.ControllerID"&gt;"ControllerID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1872"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17414">The property value.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17408">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fguid"
              c:identifier="udisks_nvme_controller_get_fguid"
              glib:get-property="fguid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17492">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_fguid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1879"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17502">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17494">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvme_revision"
              c:identifier="udisks_nvme_controller_get_nvme_revision"
              glib:get-property="nvme-revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17545">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_nvme_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1883"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17555">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17547">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sanitize_percent_remaining"
              c:identifier="udisks_nvme_controller_get_sanitize_percent_remaining"
              glib:get-property="sanitize-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17926">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizePercentRemaining"&gt;"SanitizePercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1914"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17934">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17928">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sanitize_status"
              c:identifier="udisks_nvme_controller_get_sanitize_status"
              glib:get-property="sanitize-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17873">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_sanitize_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1910"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17883">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17875">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_critical_warning"
              c:identifier="udisks_nvme_controller_get_smart_critical_warning"
              glib:get-property="smart-critical-warning"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17664">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_smart_critical_warning() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1893"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17674">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17666">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_power_on_hours"
              c:identifier="udisks_nvme_controller_get_smart_power_on_hours"
              glib:get-property="smart-power-on-hours"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17717">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartPowerOnHours"&gt;"SmartPowerOnHours"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1897"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17725">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17719">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_percent_remaining"
              c:identifier="udisks_nvme_controller_get_smart_selftest_percent_remaining"
              glib:get-property="smart-selftest-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17836">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1907"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17844">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17838">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_status"
              c:identifier="udisks_nvme_controller_get_smart_selftest_status"
              glib:get-property="smart-selftest-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17783">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1903"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17793">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17785">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_temperature"
              c:identifier="udisks_nvme_controller_get_smart_temperature"
              glib:get-property="smart-temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17750">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1900"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17758">The property value.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17752">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_updated"
              c:identifier="udisks_nvme_controller_get_smart_updated"
              glib:get-property="smart-updated"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17631">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1890"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17639">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17633">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="udisks_nvme_controller_get_state"
              glib:get-property="state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17353">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1868"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17363">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17355">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subsystem_nqn"
              c:identifier="udisks_nvme_controller_get_subsystem_nqn"
              glib:get-property="subsystem-nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17439">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_subsystem_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1875"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17449">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17441">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unallocated_capacity"
              c:identifier="udisks_nvme_controller_get_unallocated_capacity"
              glib:get-property="unallocated-capacity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17598">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.UnallocatedCapacity"&gt;"UnallocatedCapacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1887"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17606">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17600">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_controller_id"
              c:identifier="udisks_nvme_controller_set_controller_id"
              glib:set-property="controller-id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17424">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.ControllerID"&gt;"ControllerID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1873"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17426">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17427">The value to set.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fguid"
              c:identifier="udisks_nvme_controller_set_fguid"
              glib:set-property="fguid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17530">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1881"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17532">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17533">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nvme_revision"
              c:identifier="udisks_nvme_controller_set_nvme_revision"
              glib:set-property="nvme-revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17583">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1885"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17585">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17586">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sanitize_percent_remaining"
              c:identifier="udisks_nvme_controller_set_sanitize_percent_remaining"
              glib:set-property="sanitize-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17946">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizePercentRemaining"&gt;"SanitizePercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1915"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17948">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17949">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sanitize_status"
              c:identifier="udisks_nvme_controller_set_sanitize_status"
              glib:set-property="sanitize-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17911">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1912"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17913">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17914">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_critical_warning"
              c:identifier="udisks_nvme_controller_set_smart_critical_warning"
              glib:set-property="smart-critical-warning"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17702">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1895"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17704">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17705">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_power_on_hours"
              c:identifier="udisks_nvme_controller_set_smart_power_on_hours"
              glib:set-property="smart-power-on-hours"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17735">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartPowerOnHours"&gt;"SmartPowerOnHours"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1898"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17737">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17738">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_percent_remaining"
              c:identifier="udisks_nvme_controller_set_smart_selftest_percent_remaining"
              glib:set-property="smart-selftest-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17856">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1908"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17858">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17859">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_status"
              c:identifier="udisks_nvme_controller_set_smart_selftest_status"
              glib:set-property="smart-selftest-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17821">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1905"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17823">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17824">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_temperature"
              c:identifier="udisks_nvme_controller_set_smart_temperature"
              glib:set-property="smart-temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17768">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1901"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17770">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17771">The value to set.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_updated"
              c:identifier="udisks_nvme_controller_set_smart_updated"
              glib:set-property="smart-updated"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17649">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1891"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17651">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17652">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="udisks_nvme_controller_set_state"
              glib:set-property="state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17391">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1870"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17393">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17394">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subsystem_nqn"
              c:identifier="udisks_nvme_controller_set_subsystem_nqn"
              glib:set-property="subsystem-nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17477">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1877"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17479">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17480">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unallocated_capacity"
              c:identifier="udisks_nvme_controller_set_unallocated_capacity"
              glib:set-property="unallocated-capacity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17616">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.UnallocatedCapacity"&gt;"UnallocatedCapacity"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1888"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17618">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17619">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="controller-id"
                writable="1"
                transfer-ownership="none"
                setter="set_controller_id"
                getter="get_controller_id"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17230">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.ControllerID"&gt;"ControllerID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="fguid"
                writable="1"
                transfer-ownership="none"
                setter="set_fguid"
                getter="get_fguid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17248">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nvme-revision"
                writable="1"
                transfer-ownership="none"
                setter="set_nvme_revision"
                getter="get_nvme_revision"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17257">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sanitize-percent-remaining"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sanitize_percent_remaining"
                getter="get_sanitize_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17340">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizePercentRemaining"&gt;"SanitizePercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="sanitize-status"
                writable="1"
                transfer-ownership="none"
                setter="set_sanitize_status"
                getter="get_sanitize_status"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17331">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smart-critical-warning"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_critical_warning"
                getter="get_smart_critical_warning">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17284">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="smart-power-on-hours"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_power_on_hours"
                getter="get_smart_power_on_hours"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17293">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartPowerOnHours"&gt;"SmartPowerOnHours"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="smart-selftest-percent-remaining"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_percent_remaining"
                getter="get_smart_selftest_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17320">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-selftest-status"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_status"
                getter="get_smart_selftest_status"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17311">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smart-temperature"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_temperature"
                getter="get_smart_temperature"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17302">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="smart-updated"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_updated"
                getter="get_smart_updated"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17275">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="state"
                writable="1"
                transfer-ownership="none"
                setter="set_state"
                getter="get_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17221">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subsystem-nqn"
                writable="1"
                transfer-ownership="none"
                setter="set_subsystem_nqn"
                getter="get_subsystem_nqn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17239">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="unallocated-capacity"
                writable="1"
                transfer-ownership="none"
                setter="set_unallocated_capacity"
                getter="get_unallocated_capacity"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17266">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.UnallocatedCapacity"&gt;"UnallocatedCapacity"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="handle-sanitize-start" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17194">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStart"&gt;SanitizeStart()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_sanitize_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17205">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17197">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17198">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17199">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-get-attributes"
                   when="last"
                   version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17118">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_smart_get_attributes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17128">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17121">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17122">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-abort"
                   when="last"
                   version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17169">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_smart_selftest_abort() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17179">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17172">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17173">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-start"
                   when="last"
                   version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17143">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_smart_selftest_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17154">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17146">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17147">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17148">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-update" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17093">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_smart_update() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17103">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17096">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17097">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="NVMeControllerIface"
            c:type="UDisksNVMeControllerIface"
            glib:is-gtype-struct-for="NVMeController">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="17060">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1732"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17062">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_controller_id">
        <callback name="get_controller_id">
          <source-position filename="udisks-generated.h" line="1677"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17414">The property value.</doc>
            <type name="guint16" c:type="guint16"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17408">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_fguid">
        <callback name="get_fguid">
          <source-position filename="udisks-generated.h" line="1679"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17502">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17494">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nvme_revision">
        <callback name="get_nvme_revision">
          <source-position filename="udisks-generated.h" line="1681"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17555">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17547">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sanitize_status">
        <callback name="get_sanitize_status">
          <source-position filename="udisks-generated.h" line="1683"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17883">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17875">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_critical_warning">
        <callback name="get_smart_critical_warning">
          <source-position filename="udisks-generated.h" line="1685"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17674">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17666">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_power_on_hours">
        <callback name="get_smart_power_on_hours">
          <source-position filename="udisks-generated.h" line="1687"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17725">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17719">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_status">
        <callback name="get_smart_selftest_status">
          <source-position filename="udisks-generated.h" line="1689"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17793">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17785">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_temperature">
        <callback name="get_smart_temperature">
          <source-position filename="udisks-generated.h" line="1691"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17758">The property value.</doc>
            <type name="guint16" c:type="guint16"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17752">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_updated">
        <callback name="get_smart_updated">
          <source-position filename="udisks-generated.h" line="1693"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17639">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17633">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_state">
        <callback name="get_state">
          <source-position filename="udisks-generated.h" line="1695"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17363">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17355">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_subsystem_nqn">
        <callback name="get_subsystem_nqn">
          <source-position filename="udisks-generated.h" line="1697"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17449">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17441">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_unallocated_capacity">
        <callback name="get_unallocated_capacity">
          <source-position filename="udisks-generated.h" line="1699"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17606">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17600">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_sanitize_start">
        <callback name="handle_sanitize_start">
          <source-position filename="udisks-generated.h" line="1701"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_action" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_get_attributes">
        <callback name="handle_smart_get_attributes">
          <source-position filename="udisks-generated.h" line="1707"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_abort">
        <callback name="handle_smart_selftest_abort">
          <source-position filename="udisks-generated.h" line="1712"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_start">
        <callback name="handle_smart_selftest_start">
          <source-position filename="udisks-generated.h" line="1717"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_update">
        <callback name="handle_smart_update">
          <source-position filename="udisks-generated.h" line="1723"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sanitize_percent_remaining">
        <callback name="get_sanitize_percent_remaining">
          <source-position filename="udisks-generated.h" line="1728"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17934">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17928">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_percent_remaining">
        <callback name="get_smart_selftest_percent_remaining">
          <source-position filename="udisks-generated.h" line="1730"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17844">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17838">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="NVMeControllerProxy"
           c:symbol-prefix="nvme_controller_proxy"
           c:type="UDisksNVMeControllerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksNVMeControllerProxy"
           glib:get-type="udisks_nvme_controller_proxy_get_type"
           glib:type-struct="NVMeControllerProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18606">The #UDisksNVMeControllerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1941"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="NVMeController"/>
      <constructor name="new_finish"
                   c:identifier="udisks_nvme_controller_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19078">Finishes an operation started with udisks_nvme_controller_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="1957"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19085">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeControllerProxy" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19080">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_nvme_controller_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19168">Finishes an operation started with udisks_nvme_controller_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="1976"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19175">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeControllerProxy" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19170">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_nvme_controller_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19193">Like udisks_nvme_controller_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_nvme_controller_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1979"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19208">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeControllerProxy" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19195">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19196">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19197">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19198">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19199">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_nvme_controller_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19103">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_nvme_controller_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1960"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19118">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeControllerProxy" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19105">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19106">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19107">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19108">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19109">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_nvme_controller_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19048">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_proxy_new_finish() to get the result of the operation.

See udisks_nvme_controller_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1949"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19050">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19051">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19052">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19053">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19054">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19055">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19056">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_nvme_controller_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19138">Like udisks_nvme_controller_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_nvme_controller_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1968"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19140">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19141">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19142">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19143">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19144">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19145">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19146">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeControllerProxyPrivate"
              c:type="UDisksNVMeControllerProxyPrivate*"/>
      </field>
    </class>
    <record name="NVMeControllerProxyClass"
            c:type="UDisksNVMeControllerProxyClass"
            glib:is-gtype-struct-for="NVMeControllerProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18612">Class structure for #UDisksNVMeControllerProxy.</doc>
      <source-position filename="udisks-generated.h" line="1941"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18614">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="NVMeControllerProxyPrivate"
            c:type="UDisksNVMeControllerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1929"/>
    </record>
    <class name="NVMeControllerSkeleton"
           c:symbol-prefix="nvme_controller_skeleton"
           c:type="UDisksNVMeControllerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksNVMeControllerSkeleton"
           glib:get-type="udisks_nvme_controller_skeleton_get_type"
           glib:type-struct="NVMeControllerSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19230">The #UDisksNVMeControllerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2011"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="NVMeController"/>
      <constructor name="new"
                   c:identifier="udisks_nvme_controller_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19852">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2019"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19857">The skeleton object.</doc>
          <type name="NVMeControllerSkeleton" c:type="UDisksNVMeController*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeControllerSkeletonPrivate"
              c:type="UDisksNVMeControllerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="NVMeControllerSkeletonClass"
            c:type="UDisksNVMeControllerSkeletonClass"
            glib:is-gtype-struct-for="NVMeControllerSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19236">Class structure for #UDisksNVMeControllerSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2011"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19238">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="NVMeControllerSkeletonPrivate"
            c:type="UDisksNVMeControllerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1999"/>
    </record>
    <interface name="NVMeFabrics"
               c:symbol-prefix="nvme_fabrics"
               c:type="UDisksNVMeFabrics"
               glib:type-name="UDisksNVMeFabrics"
               glib:get-type="udisks_nvme_fabrics_get_type"
               glib:type-struct="NVMeFabricsIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22271">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2281"/>
      <function name="interface_info"
                c:identifier="udisks_nvme_fabrics_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22223">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2289"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22228">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_nvme_fabrics_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22236">Overrides all #GObject properties in the #UDisksNVMeFabrics interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22244">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22238">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22239">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_host_id"
                      invoker="get_host_id"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22413">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_host_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2268"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22423">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22415">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_host_nqn"
                      invoker="get_host_nqn"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22360">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_host_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2270"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22370">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22362">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_transport"
                      invoker="get_transport"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22466">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_transport() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2272"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22476">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22468">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_transport_address"
                      invoker="get_transport_address"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22519">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_transport_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2274"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22529">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22521">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_disconnect">
        <source-position filename="udisks-generated.h" line="2276"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="udisks_nvme_fabrics_call_disconnect"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22572">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Fabrics.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_fabrics_call_disconnect_finish() to get the result of the operation.

See udisks_nvme_fabrics_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22574">A #UDisksNVMeFabricsProxy.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22575">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22576">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22577">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22578">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="udisks_nvme_fabrics_call_disconnect_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22607">Finishes an operation started with udisks_nvme_fabrics_call_disconnect().</doc>
        <source-position filename="udisks-generated.h" line="2308"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22615">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22609">A #UDisksNVMeFabricsProxy.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22610">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_fabrics_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="udisks_nvme_fabrics_call_disconnect_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22636">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Fabrics.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_fabrics_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2313"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22647">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22638">A #UDisksNVMeFabricsProxy.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22639">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22640">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="udisks_nvme_fabrics_complete_disconnect"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22676">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Fabrics.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2294"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22678">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22679">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_host_id"
              c:identifier="udisks_nvme_fabrics_dup_host_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22433">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2327"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22441">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22435">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_host_nqn"
              c:identifier="udisks_nvme_fabrics_dup_host_nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22380">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2323"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22388">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22382">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_transport"
              c:identifier="udisks_nvme_fabrics_dup_transport"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22486">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2331"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22494">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22488">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_transport_address"
              c:identifier="udisks_nvme_fabrics_dup_transport_address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22539">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2335"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22547">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22541">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_id"
              c:identifier="udisks_nvme_fabrics_get_host_id"
              glib:get-property="host-id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22413">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_host_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2326"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22423">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22415">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_nqn"
              c:identifier="udisks_nvme_fabrics_get_host_nqn"
              glib:get-property="host-nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22360">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_host_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2322"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22370">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22362">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transport"
              c:identifier="udisks_nvme_fabrics_get_transport"
              glib:get-property="transport"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22466">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_transport() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2330"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22476">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22468">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transport_address"
              c:identifier="udisks_nvme_fabrics_get_transport_address"
              glib:get-property="transport-address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22519">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_transport_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2334"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22529">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22521">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host_id"
              c:identifier="udisks_nvme_fabrics_set_host_id"
              glib:set-property="host-id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22451">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2328"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22453">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22454">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host_nqn"
              c:identifier="udisks_nvme_fabrics_set_host_nqn"
              glib:set-property="host-nqn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22398">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2324"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22400">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22401">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transport"
              c:identifier="udisks_nvme_fabrics_set_transport"
              glib:set-property="transport"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22504">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2332"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22506">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22507">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transport_address"
              c:identifier="udisks_nvme_fabrics_set_transport_address"
              glib:set-property="transport-address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22557">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2336"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22559">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22560">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="host-id"
                writable="1"
                transfer-ownership="none"
                setter="set_host_id"
                getter="get_host_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22331">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="host-nqn"
                writable="1"
                transfer-ownership="none"
                setter="set_host_nqn"
                getter="get_host_nqn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22322">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transport"
                writable="1"
                transfer-ownership="none"
                setter="set_transport"
                getter="get_transport"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22340">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transport-address"
                writable="1"
                transfer-ownership="none"
                setter="set_transport_address"
                getter="get_transport_address"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22349">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-disconnect" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22296">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Fabrics.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_fabrics_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22306">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22299">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22300">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="NVMeFabricsIface"
            c:type="UDisksNVMeFabricsIface"
            glib:is-gtype-struct-for="NVMeFabrics">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22277">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2281"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22279">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_host_id">
        <callback name="get_host_id">
          <source-position filename="udisks-generated.h" line="2268"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22423">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="22415">A #UDisksNVMeFabrics.</doc>
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_host_nqn">
        <callback name="get_host_nqn">
          <source-position filename="udisks-generated.h" line="2270"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22370">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="22362">A #UDisksNVMeFabrics.</doc>
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_transport">
        <callback name="get_transport">
          <source-position filename="udisks-generated.h" line="2272"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22476">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="22468">A #UDisksNVMeFabrics.</doc>
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_transport_address">
        <callback name="get_transport_address">
          <source-position filename="udisks-generated.h" line="2274"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22529">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="22521">A #UDisksNVMeFabrics.</doc>
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="udisks-generated.h" line="2276"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="NVMeFabricsProxy"
           c:symbol-prefix="nvme_fabrics_proxy"
           c:type="UDisksNVMeFabricsProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksNVMeFabricsProxy"
           glib:get-type="udisks_nvme_fabrics_proxy_get_type"
           glib:type-struct="NVMeFabricsProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22698">The #UDisksNVMeFabricsProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2362"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="NVMeFabrics"/>
      <constructor name="new_finish"
                   c:identifier="udisks_nvme_fabrics_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23006">Finishes an operation started with udisks_nvme_fabrics_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2378"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23013">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeFabricsProxy" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23008">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_fabrics_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_nvme_fabrics_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23096">Finishes an operation started with udisks_nvme_fabrics_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="2397"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23103">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeFabricsProxy" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23098">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_fabrics_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_nvme_fabrics_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23121">Like udisks_nvme_fabrics_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_nvme_fabrics_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2400"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23136">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeFabricsProxy" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23123">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23124">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23125">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23126">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23127">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_nvme_fabrics_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23031">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_nvme_fabrics_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2381"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23046">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeFabricsProxy" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23033">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23034">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23035">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23036">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23037">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_nvme_fabrics_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22976">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_fabrics_proxy_new_finish() to get the result of the operation.

See udisks_nvme_fabrics_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2370"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22978">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22979">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22980">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22981">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22982">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22983">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22984">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_nvme_fabrics_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23066">Like udisks_nvme_fabrics_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_fabrics_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_nvme_fabrics_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2389"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23068">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23069">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23070">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23071">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23072">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23073">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23074">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeFabricsProxyPrivate"
              c:type="UDisksNVMeFabricsProxyPrivate*"/>
      </field>
    </class>
    <record name="NVMeFabricsProxyClass"
            c:type="UDisksNVMeFabricsProxyClass"
            glib:is-gtype-struct-for="NVMeFabricsProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22704">Class structure for #UDisksNVMeFabricsProxy.</doc>
      <source-position filename="udisks-generated.h" line="2362"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22706">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="NVMeFabricsProxyPrivate"
            c:type="UDisksNVMeFabricsProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2350"/>
    </record>
    <class name="NVMeFabricsSkeleton"
           c:symbol-prefix="nvme_fabrics_skeleton"
           c:type="UDisksNVMeFabricsSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksNVMeFabricsSkeleton"
           glib:get-type="udisks_nvme_fabrics_skeleton_get_type"
           glib:type-struct="NVMeFabricsSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23158">The #UDisksNVMeFabricsSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2432"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="NVMeFabrics"/>
      <constructor name="new" c:identifier="udisks_nvme_fabrics_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23650">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2440"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23655">The skeleton object.</doc>
          <type name="NVMeFabricsSkeleton" c:type="UDisksNVMeFabrics*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeFabricsSkeletonPrivate"
              c:type="UDisksNVMeFabricsSkeletonPrivate*"/>
      </field>
    </class>
    <record name="NVMeFabricsSkeletonClass"
            c:type="UDisksNVMeFabricsSkeletonClass"
            glib:is-gtype-struct-for="NVMeFabricsSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23164">Class structure for #UDisksNVMeFabricsSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2432"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23166">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="NVMeFabricsSkeletonPrivate"
            c:type="UDisksNVMeFabricsSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2420"/>
    </record>
    <interface name="NVMeNamespace"
               c:symbol-prefix="nvme_namespace"
               c:type="UDisksNVMeNamespace"
               glib:type-name="UDisksNVMeNamespace"
               glib:get-type="udisks_nvme_namespace_get_type"
               glib:type-struct="NVMeNamespaceIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20155">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2066"/>
      <function name="interface_info"
                c:identifier="udisks_nvme_namespace_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20100">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2074"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20105">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_nvme_namespace_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20113">Overrides all #GObject properties in the #UDisksNVMeNamespace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2075"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20121">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20115">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20116">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_eui64" invoker="get_eui64" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20402">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_eui64() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2039"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20412">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20404">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_format_percent_remaining"
                      invoker="get_format_percent_remaining"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20766">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormatPercentRemaining"&gt;"FormatPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2064"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20774">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20768">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_formatted_lbasize"
                      invoker="get_formatted_lbasize"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20614">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_formatted_lbasize() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2041"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20624">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20616">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_lbaformats"
                      invoker="get_lbaformats"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20561">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_lbaformats() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2043"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20571">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20563">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_namespace_capacity"
                      invoker="get_namespace_capacity"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20700">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceCapacity"&gt;"NamespaceCapacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2045"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20708">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20702">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_namespace_size"
                      invoker="get_namespace_size"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20667">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceSize"&gt;"NamespaceSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2047"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20675">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20669">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_namespace_utilization"
                      invoker="get_namespace_utilization"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20733">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceUtilization"&gt;"NamespaceUtilization"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2049"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20741">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20735">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nguid" invoker="get_nguid" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20349">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_nguid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2051"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20359">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20351">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nsid" invoker="get_nsid" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20316">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NSID"&gt;"NSID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2053"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20324">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20318">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid" invoker="get_uuid" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20455">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2055"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20465">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20457">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_wwn" invoker="get_wwn" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20508">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2057"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20518">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20510">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_format_namespace">
        <source-position filename="udisks-generated.h" line="2059"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_format_namespace"
              c:identifier="udisks_nvme_namespace_call_format_namespace"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20803">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Namespace.FormatNamespace"&gt;FormatNamespace()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_namespace_call_format_namespace_finish() to get the result of the operation.

See udisks_nvme_namespace_call_format_namespace_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2086"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20805">A #UDisksNVMeNamespaceProxy.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20806">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20807">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20808">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20809">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_namespace_finish"
              c:identifier="udisks_nvme_namespace_call_format_namespace_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20838">Finishes an operation started with udisks_nvme_namespace_call_format_namespace().</doc>
        <source-position filename="udisks-generated.h" line="2093"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20846">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20840">A #UDisksNVMeNamespaceProxy.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20841">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_namespace_call_format_namespace().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_namespace_sync"
              c:identifier="udisks_nvme_namespace_call_format_namespace_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20867">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Namespace.FormatNamespace"&gt;FormatNamespace()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_namespace_call_format_namespace() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2098"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20878">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20869">A #UDisksNVMeNamespaceProxy.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20870">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20871">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_format_namespace"
              c:identifier="udisks_nvme_namespace_complete_format_namespace"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20907">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Namespace.FormatNamespace"&gt;FormatNamespace()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2079"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20909">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20910">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_eui64"
              c:identifier="udisks_nvme_namespace_dup_eui64"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20422">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2115"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20430">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20424">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_formatted_lbasize"
              c:identifier="udisks_nvme_namespace_dup_formatted_lbasize"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20634">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2131"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20642">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20636">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_lbaformats"
              c:identifier="udisks_nvme_namespace_dup_lbaformats"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20581">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2127"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20589">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20583">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_nguid"
              c:identifier="udisks_nvme_namespace_dup_nguid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20369">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2111"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20377">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20371">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_nvme_namespace_dup_uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20475">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2119"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20483">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20477">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_wwn"
              c:identifier="udisks_nvme_namespace_dup_wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20528">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2123"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20536">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20530">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_eui64"
              c:identifier="udisks_nvme_namespace_get_eui64"
              glib:get-property="eui64"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20402">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_eui64() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2114"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20412">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20404">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format_percent_remaining"
              c:identifier="udisks_nvme_namespace_get_format_percent_remaining"
              glib:get-property="format-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20766">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormatPercentRemaining"&gt;"FormatPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20774">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20768">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_formatted_lbasize"
              c:identifier="udisks_nvme_namespace_get_formatted_lbasize"
              glib:get-property="formatted-lbasize"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20614">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_formatted_lbasize() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2130"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20624">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20616">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lbaformats"
              c:identifier="udisks_nvme_namespace_get_lbaformats"
              glib:get-property="lbaformats"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20561">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_lbaformats() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2126"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20571">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20563">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_namespace_capacity"
              c:identifier="udisks_nvme_namespace_get_namespace_capacity"
              glib:get-property="namespace-capacity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20700">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceCapacity"&gt;"NamespaceCapacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20708">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20702">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_namespace_size"
              c:identifier="udisks_nvme_namespace_get_namespace_size"
              glib:get-property="namespace-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20667">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceSize"&gt;"NamespaceSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20675">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20669">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_namespace_utilization"
              c:identifier="udisks_nvme_namespace_get_namespace_utilization"
              glib:get-property="namespace-utilization"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20733">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceUtilization"&gt;"NamespaceUtilization"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20741">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20735">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nguid"
              c:identifier="udisks_nvme_namespace_get_nguid"
              glib:get-property="nguid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20349">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_nguid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2110"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20359">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20351">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nsid"
              c:identifier="udisks_nvme_namespace_get_nsid"
              glib:get-property="nsid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20316">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NSID"&gt;"NSID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20324">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20318">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_nvme_namespace_get_uuid"
              glib:get-property="uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20455">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2118"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20465">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20457">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wwn"
              c:identifier="udisks_nvme_namespace_get_wwn"
              glib:get-property="wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20508">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2122"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20518">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20510">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_eui64"
              c:identifier="udisks_nvme_namespace_set_eui64"
              glib:set-property="eui64"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20440">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20442">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20443">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_format_percent_remaining"
              c:identifier="udisks_nvme_namespace_set_format_percent_remaining"
              glib:set-property="format-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20786">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormatPercentRemaining"&gt;"FormatPercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20788">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20789">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_formatted_lbasize"
              c:identifier="udisks_nvme_namespace_set_formatted_lbasize"
              glib:set-property="formatted-lbasize"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20652">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20654">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20655">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lbaformats"
              c:identifier="udisks_nvme_namespace_set_lbaformats"
              glib:set-property="lbaformats"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20599">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20601">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20602">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_namespace_capacity"
              c:identifier="udisks_nvme_namespace_set_namespace_capacity"
              glib:set-property="namespace-capacity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20718">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceCapacity"&gt;"NamespaceCapacity"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20720">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20721">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_namespace_size"
              c:identifier="udisks_nvme_namespace_set_namespace_size"
              glib:set-property="namespace-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20685">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceSize"&gt;"NamespaceSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20687">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20688">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_namespace_utilization"
              c:identifier="udisks_nvme_namespace_set_namespace_utilization"
              glib:set-property="namespace-utilization"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20751">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceUtilization"&gt;"NamespaceUtilization"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20753">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20754">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nguid"
              c:identifier="udisks_nvme_namespace_set_nguid"
              glib:set-property="nguid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20387">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20389">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20390">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nsid"
              c:identifier="udisks_nvme_namespace_set_nsid"
              glib:set-property="nsid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20334">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NSID"&gt;"NSID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20336">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20337">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_nvme_namespace_set_uuid"
              glib:set-property="uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20493">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20495">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20496">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wwn"
              c:identifier="udisks_nvme_namespace_set_wwn"
              glib:set-property="wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20546">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20548">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20549">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="eui64"
                writable="1"
                transfer-ownership="none"
                setter="set_eui64"
                getter="get_eui64"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20231">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="format-percent-remaining"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_format_percent_remaining"
                getter="get_format_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20303">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormatPercentRemaining"&gt;"FormatPercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="formatted-lbasize"
                writable="1"
                transfer-ownership="none"
                setter="set_formatted_lbasize"
                getter="get_formatted_lbasize">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20267">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="lbaformats"
                writable="1"
                transfer-ownership="none"
                setter="set_lbaformats"
                getter="get_lbaformats">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20258">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="namespace-capacity"
                writable="1"
                transfer-ownership="none"
                setter="set_namespace_capacity"
                getter="get_namespace_capacity"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20285">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceCapacity"&gt;"NamespaceCapacity"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="namespace-size"
                writable="1"
                transfer-ownership="none"
                setter="set_namespace_size"
                getter="get_namespace_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20276">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceSize"&gt;"NamespaceSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="namespace-utilization"
                writable="1"
                transfer-ownership="none"
                setter="set_namespace_utilization"
                getter="get_namespace_utilization"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20294">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceUtilization"&gt;"NamespaceUtilization"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="nguid"
                writable="1"
                transfer-ownership="none"
                setter="set_nguid"
                getter="get_nguid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20222">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nsid"
                writable="1"
                transfer-ownership="none"
                setter="set_nsid"
                getter="get_nsid"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20213">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NSID"&gt;"NSID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="uuid"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20240">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wwn"
                writable="1"
                transfer-ownership="none"
                setter="set_wwn"
                getter="get_wwn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20249">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-format-namespace" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20187">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Namespace.FormatNamespace"&gt;FormatNamespace()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_namespace_complete_format_namespace() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20197">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20190">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20191">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="NVMeNamespaceIface"
            c:type="UDisksNVMeNamespaceIface"
            glib:is-gtype-struct-for="NVMeNamespace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20161">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2066"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20163">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_eui64">
        <callback name="get_eui64">
          <source-position filename="udisks-generated.h" line="2039"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20412">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20404">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_formatted_lbasize">
        <callback name="get_formatted_lbasize">
          <source-position filename="udisks-generated.h" line="2041"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20624">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20616">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_lbaformats">
        <callback name="get_lbaformats">
          <source-position filename="udisks-generated.h" line="2043"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20571">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20563">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_namespace_capacity">
        <callback name="get_namespace_capacity">
          <source-position filename="udisks-generated.h" line="2045"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20708">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20702">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_namespace_size">
        <callback name="get_namespace_size">
          <source-position filename="udisks-generated.h" line="2047"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20675">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20669">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_namespace_utilization">
        <callback name="get_namespace_utilization">
          <source-position filename="udisks-generated.h" line="2049"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20741">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20735">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nguid">
        <callback name="get_nguid">
          <source-position filename="udisks-generated.h" line="2051"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20359">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20351">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nsid">
        <callback name="get_nsid">
          <source-position filename="udisks-generated.h" line="2053"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20324">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20318">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="2055"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20465">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20457">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_wwn">
        <callback name="get_wwn">
          <source-position filename="udisks-generated.h" line="2057"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20518">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20510">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_format_namespace">
        <callback name="handle_format_namespace">
          <source-position filename="udisks-generated.h" line="2059"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_format_percent_remaining">
        <callback name="get_format_percent_remaining">
          <source-position filename="udisks-generated.h" line="2064"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20774">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20768">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="NVMeNamespaceProxy"
           c:symbol-prefix="nvme_namespace_proxy"
           c:type="UDisksNVMeNamespaceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksNVMeNamespaceProxy"
           glib:get-type="udisks_nvme_namespace_proxy_get_type"
           glib:type-struct="NVMeNamespaceProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20929">The #UDisksNVMeNamespaceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2170"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="NVMeNamespace"/>
      <constructor name="new_finish"
                   c:identifier="udisks_nvme_namespace_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21345">Finishes an operation started with udisks_nvme_namespace_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21352">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeNamespaceProxy" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21347">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_namespace_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_nvme_namespace_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21435">Finishes an operation started with udisks_nvme_namespace_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="2205"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21442">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeNamespaceProxy" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21437">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_namespace_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_nvme_namespace_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21460">Like udisks_nvme_namespace_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_nvme_namespace_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21475">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeNamespaceProxy" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21462">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21463">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21464">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21465">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21466">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_nvme_namespace_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21370">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_nvme_namespace_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2189"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21385">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeNamespaceProxy" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21372">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21373">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21374">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21375">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21376">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_nvme_namespace_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21315">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_namespace_proxy_new_finish() to get the result of the operation.

See udisks_nvme_namespace_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21317">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21318">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21319">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21320">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21321">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21322">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21323">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_nvme_namespace_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21405">Like udisks_nvme_namespace_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_namespace_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_nvme_namespace_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21407">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21408">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21409">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21410">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21411">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21412">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21413">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeNamespaceProxyPrivate"
              c:type="UDisksNVMeNamespaceProxyPrivate*"/>
      </field>
    </class>
    <record name="NVMeNamespaceProxyClass"
            c:type="UDisksNVMeNamespaceProxyClass"
            glib:is-gtype-struct-for="NVMeNamespaceProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20935">Class structure for #UDisksNVMeNamespaceProxy.</doc>
      <source-position filename="udisks-generated.h" line="2170"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20937">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="NVMeNamespaceProxyPrivate"
            c:type="UDisksNVMeNamespaceProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2158"/>
    </record>
    <class name="NVMeNamespaceSkeleton"
           c:symbol-prefix="nvme_namespace_skeleton"
           c:type="UDisksNVMeNamespaceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksNVMeNamespaceSkeleton"
           glib:get-type="udisks_nvme_namespace_skeleton_get_type"
           glib:type-struct="NVMeNamespaceSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="21497">The #UDisksNVMeNamespaceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2240"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="NVMeNamespace"/>
      <constructor name="new"
                   c:identifier="udisks_nvme_namespace_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22080">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2248"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22085">The skeleton object.</doc>
          <type name="NVMeNamespaceSkeleton" c:type="UDisksNVMeNamespace*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeNamespaceSkeletonPrivate"
              c:type="UDisksNVMeNamespaceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="NVMeNamespaceSkeletonClass"
            c:type="UDisksNVMeNamespaceSkeletonClass"
            glib:is-gtype-struct-for="NVMeNamespaceSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="21503">Class structure for #UDisksNVMeNamespaceSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2240"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21505">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="NVMeNamespaceSkeletonPrivate"
            c:type="UDisksNVMeNamespaceSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2228"/>
    </record>
    <function-macro name="OBJECT"
                    c:identifier="UDISKS_OBJECT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9102"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_GET_IFACE"
                    c:identifier="UDISKS_OBJECT_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9104"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_INFO"
                    c:identifier="UDISKS_OBJECT_INFO"
                    introspectable="0">
      <source-position filename="udisksobjectinfo.h" line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9271"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9272"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9273"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY"
                    c:identifier="UDISKS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9179"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY_CLASS"
                    c:identifier="UDISKS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9180"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9181"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON"
                    c:identifier="UDISKS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9210"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON_CLASS"
                    c:identifier="UDISKS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9211"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9212"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Object"
               c:symbol-prefix="object"
               c:type="UDisksObject"
               glib:type-name="UDisksObject"
               glib:get-type="udisks_object_get_type"
               glib:type-struct="ObjectIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="77400">The #UDisksObject type is a specialized container of interfaces.</doc>
      <source-position filename="udisks-generated.h" line="9113"/>
      <prerequisite name="Gio.DBusObject"/>
      <method name="get_block"
              c:identifier="udisks_object_get_block"
              glib:get-property="block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77814">Gets the #UDisksBlock instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9128"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77820">A #UDisksBlock that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77816">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_block_lvm2"
              c:identifier="udisks_object_get_block_lvm2"
              glib:get-property="block-lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78098">Gets the #UDisksBlockLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9144"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78104">A #UDisksBlockLVM2 that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78100">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive"
              c:identifier="udisks_object_get_drive"
              glib:get-property="drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77729">Gets the #UDisksDrive instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9123"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77735">A #UDisksDrive that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77731">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive_ata"
              c:identifier="udisks_object_get_drive_ata"
              glib:get-property="drive-ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77746">Gets the #UDisksDriveAta instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9124"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77752">A #UDisksDriveAta that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="DriveAta" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77748">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive_lsm"
              c:identifier="udisks_object_get_drive_lsm"
              glib:get-property="drive-lsm"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78043">Gets the #UDisksDriveLSM instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9141"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78049">A #UDisksDriveLSM that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78045">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive_lsm_local"
              c:identifier="udisks_object_get_drive_lsm_local"
              glib:get-property="drive-lsm-local">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78062">Gets the #UDisksDriveLsmLocal instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9142"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78068">A #UDisksDriveLsmLocal that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78064">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypted"
              c:identifier="udisks_object_get_encrypted"
              glib:get-property="encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77899">Gets the #UDisksEncrypted instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9133"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77905">A #UDisksEncrypted that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Encrypted" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77901">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filesystem"
              c:identifier="udisks_object_get_filesystem"
              glib:get-property="filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77865">Gets the #UDisksFilesystem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9131"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77871">A #UDisksFilesystem that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Filesystem" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77867">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filesystem_btrfs"
              c:identifier="udisks_object_get_filesystem_btrfs"
              glib:get-property="filesystem-btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77988">Gets the #UDisksFilesystemBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9138"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77994">A #UDisksFilesystemBTRFS that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77990">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iscsi_session"
              c:identifier="udisks_object_get_iscsi_session"
              glib:get-property="iscsi-session">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78026">Gets the #UDisksISCSISession instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9140"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78032">A #UDisksISCSISession that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ISCSISession" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78028">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_job"
              c:identifier="udisks_object_get_job"
              glib:get-property="job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77952">Gets the #UDisksJob instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9136"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77958">A #UDisksJob that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Job" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77954">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_volume"
              c:identifier="udisks_object_get_logical_volume"
              glib:get-property="logical-volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78155">Gets the #UDisksLogicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9147"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78161">A #UDisksLogicalVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78157">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loop"
              c:identifier="udisks_object_get_loop"
              glib:get-property="loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77916">Gets the #UDisksLoop instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9134"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77922">A #UDisksLoop that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77918">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager"
              c:identifier="udisks_object_get_manager"
              glib:get-property="manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77695">Gets the #UDisksManager instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9121"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77701">A #UDisksManager that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77697">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_btrfs"
              c:identifier="udisks_object_get_manager_btrfs"
              glib:get-property="manager-btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77969">Gets the #UDisksManagerBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9137"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77975">A #UDisksManagerBTRFS that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77971">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_iscsi_initiator"
              c:identifier="udisks_object_get_manager_iscsi_initiator"
              glib:get-property="manager-iscsi-initiator"
              version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78007">Gets the #UDisksManagerISCSIInitiator instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9139"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78013">A #UDisksManagerISCSIInitiator that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerISCSIInitiator"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78009">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_lvm2"
              c:identifier="udisks_object_get_manager_lvm2"
              glib:get-property="manager-lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78079">Gets the #UDisksManagerLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9143"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78085">A #UDisksManagerLVM2 that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78081">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_nvme"
              c:identifier="udisks_object_get_manager_nvme"
              glib:get-property="manager-nvme">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77712">Gets the #UDisksManagerNVMe instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9122"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77718">A #UDisksManagerNVMe that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77714">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid"
              c:identifier="udisks_object_get_mdraid"
              glib:get-property="mdraid"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77933">Gets the #UDisksMDRaid instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9135"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77939">A #UDisksMDRaid that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77935">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvme_controller"
              c:identifier="udisks_object_get_nvme_controller"
              glib:get-property="nvme-controller">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77763">Gets the #UDisksNVMeController instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9125"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77769">A #UDisksNVMeController that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="NVMeController" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77765">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvme_fabrics"
              c:identifier="udisks_object_get_nvme_fabrics"
              glib:get-property="nvme-fabrics">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77797">Gets the #UDisksNVMeFabrics instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9127"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77803">A #UDisksNVMeFabrics that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77799">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvme_namespace"
              c:identifier="udisks_object_get_nvme_namespace"
              glib:get-property="nvme-namespace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77780">Gets the #UDisksNVMeNamespace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9126"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77786">A #UDisksNVMeNamespace that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77782">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition"
              c:identifier="udisks_object_get_partition"
              glib:get-property="partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77848">Gets the #UDisksPartition instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9130"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77854">A #UDisksPartition that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Partition" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77850">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition_table"
              c:identifier="udisks_object_get_partition_table"
              glib:get-property="partition-table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77831">Gets the #UDisksPartitionTable instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9129"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77837">A #UDisksPartitionTable that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77833">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_physical_volume"
              c:identifier="udisks_object_get_physical_volume"
              glib:get-property="physical-volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78117">Gets the #UDisksPhysicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9145"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78123">A #UDisksPhysicalVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78119">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swapspace"
              c:identifier="udisks_object_get_swapspace"
              glib:get-property="swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77882">Gets the #UDisksSwapspace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9132"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77888">A #UDisksSwapspace that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Swapspace" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77884">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vdo_volume"
              c:identifier="udisks_object_get_vdo_volume"
              glib:get-property="vdo-volume"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78174">Gets the #UDisksVDOVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9148"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78180">A #UDisksVDOVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78176">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_object_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78136">Gets the #UDisksVolumeGroup instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9146"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78142">A #UDisksVolumeGroup that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78138">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_block"
              c:identifier="udisks_object_peek_block"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78334">Like udisks_object_get_block() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9156"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78342">A #UDisksBlock or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78336">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_block_lvm2"
              c:identifier="udisks_object_peek_block_lvm2"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78666">Like udisks_object_get_block_lvm2() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9172"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78674">A #UDisksBlockLVM2 or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78668">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive"
              c:identifier="udisks_object_peek_drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78234">Like udisks_object_get_drive() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9151"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78242">A #UDisksDrive or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78236">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive_ata"
              c:identifier="udisks_object_peek_drive_ata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78254">Like udisks_object_get_drive_ata() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9152"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78262">A #UDisksDriveAta or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="DriveAta" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78256">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive_lsm"
              c:identifier="udisks_object_peek_drive_lsm"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78602">Like udisks_object_get_drive_lsm() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9169"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78610">A #UDisksDriveLSM or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78604">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive_lsm_local"
              c:identifier="udisks_object_peek_drive_lsm_local"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78624">Like udisks_object_get_drive_lsm_local() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9170"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78632">A #UDisksDriveLsmLocal or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78626">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_encrypted"
              c:identifier="udisks_object_peek_encrypted"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78434">Like udisks_object_get_encrypted() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9161"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78442">A #UDisksEncrypted or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Encrypted" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78436">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_filesystem"
              c:identifier="udisks_object_peek_filesystem"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78394">Like udisks_object_get_filesystem() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9159"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78402">A #UDisksFilesystem or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Filesystem" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78396">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_filesystem_btrfs"
              c:identifier="udisks_object_peek_filesystem_btrfs"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78538">Like udisks_object_get_filesystem_btrfs() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9166"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78546">A #UDisksFilesystemBTRFS or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78540">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_iscsi_session"
              c:identifier="udisks_object_peek_iscsi_session"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78582">Like udisks_object_get_iscsi_session() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9168"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78590">A #UDisksISCSISession or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ISCSISession" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78584">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_job"
              c:identifier="udisks_object_peek_job"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78496">Like udisks_object_get_job() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9164"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78504">A #UDisksJob or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Job" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78498">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_logical_volume"
              c:identifier="udisks_object_peek_logical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78732">Like udisks_object_get_logical_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9175"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78740">A #UDisksLogicalVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78734">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_loop"
              c:identifier="udisks_object_peek_loop"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78454">Like udisks_object_get_loop() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9162"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78462">A #UDisksLoop or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78456">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager"
              c:identifier="udisks_object_peek_manager"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78194">Like udisks_object_get_manager() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9149"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78202">A #UDisksManager or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78196">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_btrfs"
              c:identifier="udisks_object_peek_manager_btrfs"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78516">Like udisks_object_get_manager_btrfs() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9165"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78524">A #UDisksManagerBTRFS or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78518">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_iscsi_initiator"
              c:identifier="udisks_object_peek_manager_iscsi_initiator"
              version="2.0.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78560">Like udisks_object_get_manager_iscsi_initiator() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9167"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78568">A #UDisksManagerISCSIInitiator or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerISCSIInitiator"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78562">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_lvm2"
              c:identifier="udisks_object_peek_manager_lvm2"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78644">Like udisks_object_get_manager_lvm2() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9171"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78652">A #UDisksManagerLVM2 or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78646">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_nvme"
              c:identifier="udisks_object_peek_manager_nvme"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78214">Like udisks_object_get_manager_nvme() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9150"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78222">A #UDisksManagerNVMe or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78216">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_mdraid"
              c:identifier="udisks_object_peek_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78474">Like udisks_object_get_mdraid() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9163"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78482">A #UDisksMDRaid or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78476">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_nvme_controller"
              c:identifier="udisks_object_peek_nvme_controller"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78274">Like udisks_object_get_nvme_controller() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9153"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78282">A #UDisksNVMeController or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="NVMeController" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78276">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_nvme_fabrics"
              c:identifier="udisks_object_peek_nvme_fabrics"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78314">Like udisks_object_get_nvme_fabrics() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9155"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78322">A #UDisksNVMeFabrics or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78316">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_nvme_namespace"
              c:identifier="udisks_object_peek_nvme_namespace"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78294">Like udisks_object_get_nvme_namespace() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9154"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78302">A #UDisksNVMeNamespace or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78296">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_partition"
              c:identifier="udisks_object_peek_partition"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78374">Like udisks_object_get_partition() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9158"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78382">A #UDisksPartition or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Partition" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78376">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_partition_table"
              c:identifier="udisks_object_peek_partition_table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78354">Like udisks_object_get_partition_table() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9157"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78362">A #UDisksPartitionTable or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78356">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_physical_volume"
              c:identifier="udisks_object_peek_physical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78688">Like udisks_object_get_physical_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9173"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78696">A #UDisksPhysicalVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78690">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_swapspace"
              c:identifier="udisks_object_peek_swapspace"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78414">Like udisks_object_get_swapspace() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9160"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78422">A #UDisksSwapspace or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Swapspace" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78416">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_vdo_volume"
              c:identifier="udisks_object_peek_vdo_volume"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78754">Like udisks_object_get_vdo_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9176"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78762">A #UDisksVDOVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78756">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_volume_group"
              c:identifier="udisks_object_peek_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78710">Like udisks_object_get_volume_group() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9174"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78718">A #UDisksVolumeGroup or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78712">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="block"
                writable="1"
                transfer-ownership="none"
                getter="get_block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77482">The #UDisksBlock instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Block"/>
      </property>
      <property name="block-lvm2"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_block_lvm2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77638">The #UDisksBlockLVM2 instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="BlockLVM2"/>
      </property>
      <property name="drive"
                writable="1"
                transfer-ownership="none"
                getter="get_drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77437">The #UDisksDrive instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Drive"/>
      </property>
      <property name="drive-ata"
                writable="1"
                transfer-ownership="none"
                getter="get_drive_ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77446">The #UDisksDriveAta instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="DriveAta"/>
      </property>
      <property name="drive-lsm"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                getter="get_drive_lsm">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77607">The #UDisksDriveLSM instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="DriveLSM"/>
      </property>
      <property name="drive-lsm-local"
                writable="1"
                transfer-ownership="none"
                getter="get_drive_lsm_local">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77618">The #UDisksDriveLsmLocal instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="DriveLsmLocal"/>
      </property>
      <property name="encrypted"
                writable="1"
                transfer-ownership="none"
                getter="get_encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77527">The #UDisksEncrypted instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Encrypted"/>
      </property>
      <property name="filesystem"
                writable="1"
                transfer-ownership="none"
                getter="get_filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77509">The #UDisksFilesystem instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Filesystem"/>
      </property>
      <property name="filesystem-btrfs"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                getter="get_filesystem_btrfs">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77576">The #UDisksFilesystemBTRFS instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="FilesystemBTRFS"/>
      </property>
      <property name="iscsi-session"
                writable="1"
                transfer-ownership="none"
                getter="get_iscsi_session">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77598">The #UDisksISCSISession instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ISCSISession"/>
      </property>
      <property name="job"
                writable="1"
                transfer-ownership="none"
                getter="get_job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77556">The #UDisksJob instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Job"/>
      </property>
      <property name="logical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_logical_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77671">The #UDisksLogicalVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="LogicalVolume"/>
      </property>
      <property name="loop"
                writable="1"
                transfer-ownership="none"
                getter="get_loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77536">The #UDisksLoop instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Loop"/>
      </property>
      <property name="manager"
                writable="1"
                transfer-ownership="none"
                getter="get_manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77419">The #UDisksManager instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Manager"/>
      </property>
      <property name="manager-btrfs"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_btrfs">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77565">The #UDisksManagerBTRFS instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerBTRFS"/>
      </property>
      <property name="manager-iscsi-initiator"
                version="2.0.1"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_iscsi_initiator">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77587">The #UDisksManagerISCSIInitiator instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerISCSIInitiator"/>
      </property>
      <property name="manager-lvm2"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_lvm2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77627">The #UDisksManagerLVM2 instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerLVM2"/>
      </property>
      <property name="manager-nvme"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_nvme">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77428">The #UDisksManagerNVMe instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerNVMe"/>
      </property>
      <property name="mdraid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_mdraid">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77545">The #UDisksMDRaid instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="MDRaid"/>
      </property>
      <property name="nvme-controller"
                writable="1"
                transfer-ownership="none"
                getter="get_nvme_controller">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77455">The #UDisksNVMeController instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="NVMeController"/>
      </property>
      <property name="nvme-fabrics"
                writable="1"
                transfer-ownership="none"
                getter="get_nvme_fabrics">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77473">The #UDisksNVMeFabrics instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="NVMeFabrics"/>
      </property>
      <property name="nvme-namespace"
                writable="1"
                transfer-ownership="none"
                getter="get_nvme_namespace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77464">The #UDisksNVMeNamespace instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="NVMeNamespace"/>
      </property>
      <property name="partition"
                writable="1"
                transfer-ownership="none"
                getter="get_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77500">The #UDisksPartition instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Partition"/>
      </property>
      <property name="partition-table"
                writable="1"
                transfer-ownership="none"
                getter="get_partition_table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77491">The #UDisksPartitionTable instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="PartitionTable"/>
      </property>
      <property name="physical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_physical_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77649">The #UDisksPhysicalVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="PhysicalVolume"/>
      </property>
      <property name="swapspace"
                writable="1"
                transfer-ownership="none"
                getter="get_swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77518">The #UDisksSwapspace instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Swapspace"/>
      </property>
      <property name="vdo-volume"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                getter="get_vdo_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77682">The #UDisksVDOVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="VDOVolume"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_volume_group">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77660">The #UDisksVolumeGroup instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="VolumeGroup"/>
      </property>
    </interface>
    <record name="ObjectIface"
            c:type="UDisksObjectIface"
            glib:is-gtype-struct-for="Object">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="77406">Virtual table for the #UDisksObject interface.</doc>
      <source-position filename="udisks-generated.h" line="9113"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77408">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="ObjectInfo"
           c:symbol-prefix="object_info"
           c:type="UDisksObjectInfo"
           version="2.1"
           parent="GObject.Object"
           glib:type-name="UDisksObjectInfo"
           glib:get-type="udisks_object_info_get_type">
      <doc xml:space="preserve"
           filename="udisksobjectinfo.c"
           line="28">Detailed information about the D-Bus interfaces (such as
#UDisksBlock and #UDisksDrive) on a #UDisksObject that is suitable
to display in an user interface. Use
udisks_client_get_object_info() to get #UDisksObjectInfo objects.
Note that #UDisksObjectInfo is an immutable object; once it has
been created it cannot be modified further.

The &lt;link
linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;HintName&lt;/link&gt;
and/or &lt;link
linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;HintIconName&lt;/link&gt;
propreties on associated #UDisksBlock interfaces (if any) may
influence what udisks_object_info_get_icon() and
udisks_object_info_get_media_icon() returns.

The value return by udisks_object_info_get_one_liner() is designed
to contain enough information such that it is all that needs to be
shown about the object. As a result for e.g.  block devices or
drives it contains the special device file
e.g. &lt;filename&gt;/dev/sda&lt;/filename&gt;.</doc>
      <method name="get_description"
              c:identifier="udisks_object_info_get_description"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1065">Gets the description.</doc>
        <source-position filename="udisksobjectinfo.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1071">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1067">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="udisks_object_info_get_icon"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1082">Gets the icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1088">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1084">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_symbolic"
              c:identifier="udisks_object_info_get_icon_symbolic"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1099">Gets the symbolic icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1105">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1101">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_description"
              c:identifier="udisks_object_info_get_media_description"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1116">Gets the media description.</doc>
        <source-position filename="udisksobjectinfo.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1122">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1118">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_icon"
              c:identifier="udisks_object_info_get_media_icon"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1133">Gets the media icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1139">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1135">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_icon_symbolic"
              c:identifier="udisks_object_info_get_media_icon_symbolic"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1150">Gets the symbolic media icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1156">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1152">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_object_info_get_name"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1048">Gets the name.</doc>
        <source-position filename="udisksobjectinfo.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1054">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1050">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object"
              c:identifier="udisks_object_info_get_object"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1031">Gets the #UDisksObject that @info is for</doc>
        <source-position filename="udisksobjectinfo.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1037">The object - do not free or unref, the reference belongs to @info.</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1033">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_one_liner"
              c:identifier="udisks_object_info_get_one_liner"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1167">Gets a one-line description.</doc>
        <source-position filename="udisksobjectinfo.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1173">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1169">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_key"
              c:identifier="udisks_object_info_get_sort_key"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1184">Gets the sort-key for @info. This can be used with g_strcmp0() to
sort objects.</doc>
        <source-position filename="udisksobjectinfo.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1191">The sort key or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1186">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="ObjectManagerClient"
           c:symbol-prefix="object_manager_client"
           c:type="UDisksObjectManagerClient"
           parent="Gio.DBusObjectManagerClient"
           glib:type-name="UDisksObjectManagerClient"
           glib:get-type="udisks_object_manager_client_get_type"
           glib:type-struct="ObjectManagerClientClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="80043">The #UDisksObjectManagerClient structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9291"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_object_manager_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80157">Finishes an operation started with udisks_object_manager_client_new().</doc>
        <source-position filename="udisks-generated.h" line="9309"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80164">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80159">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_object_manager_client_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_object_manager_client_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80247">Finishes an operation started with udisks_object_manager_client_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="9328"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80254">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80249">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_object_manager_client_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_object_manager_client_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80272">Like udisks_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_object_manager_client_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9331"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80287">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80274">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80275">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80276">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80277">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80278">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_object_manager_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80182">Synchronously creates #GDBusObjectManagerClient using udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_object_manager_client_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9312"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80197">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80184">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80185">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80186">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80187">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80188">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_proxy_type"
                c:identifier="udisks_object_manager_client_get_proxy_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80068">A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy derived and #GDBusProxy derived types.</doc>
        <source-position filename="udisks-generated.h" line="9299"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80077">A #GDBusProxy derived #GType if @interface_name is not %NULL, otherwise the #GType for #UDisksObjectProxy.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80070">A #GDBusObjectManagerClient.</doc>
            <type name="Gio.DBusObjectManagerClient"
                  c:type="GDBusObjectManagerClient*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80071">The object path of the remote object (unused).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80072">Interface name of the remote object or %NULL to get the object proxy #GType.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80073">User data (unused).</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="udisks_object_manager_client_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80127">Asynchronously creates #GDBusObjectManagerClient using udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_object_manager_client_new_finish() to get the result of the operation.

See udisks_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80129">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80130">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80131">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80132">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80133">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80134">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80135">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_object_manager_client_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80217">Like udisks_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_object_manager_client_new_for_bus_finish() to get the result of the operation.

See udisks_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9320"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80219">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80220">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80221">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80222">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80223">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80224">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80225">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectManagerClient"
              c:type="GDBusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectManagerClientPrivate"
              c:type="UDisksObjectManagerClientPrivate*"/>
      </field>
    </class>
    <record name="ObjectManagerClientClass"
            c:type="UDisksObjectManagerClientClass"
            glib:is-gtype-struct-for="ObjectManagerClient">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="80049">Class structure for #UDisksObjectManagerClient.</doc>
      <source-position filename="udisks-generated.h" line="9291"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80051">The parent class.</doc>
        <type name="Gio.DBusObjectManagerClientClass"
              c:type="GDBusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="ObjectManagerClientPrivate"
            c:type="UDisksObjectManagerClientPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9279"/>
    </record>
    <class name="ObjectProxy"
           c:symbol-prefix="object_proxy"
           c:type="UDisksObjectProxy"
           parent="Gio.DBusObjectProxy"
           glib:type-name="UDisksObjectProxy"
           glib:get-type="udisks_object_proxy_get_type"
           glib:type-struct="ObjectProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="78788">The #UDisksObjectProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9199"/>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="udisks_object_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79027">Creates a new proxy object.</doc>
        <source-position filename="udisks-generated.h" line="9207"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79034">The proxy object.</doc>
          <type name="ObjectProxy" c:type="UDisksObjectProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79029">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79030">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectProxy" c:type="GDBusObjectProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectProxyPrivate" c:type="UDisksObjectProxyPrivate*"/>
      </field>
    </class>
    <record name="ObjectProxyClass"
            c:type="UDisksObjectProxyClass"
            glib:is-gtype-struct-for="ObjectProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="78794">Class structure for #UDisksObjectProxy.</doc>
      <source-position filename="udisks-generated.h" line="9199"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78796">The parent class.</doc>
        <type name="Gio.DBusObjectProxyClass" c:type="GDBusObjectProxyClass"/>
      </field>
    </record>
    <record name="ObjectProxyPrivate"
            c:type="UDisksObjectProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9187"/>
    </record>
    <class name="ObjectSkeleton"
           c:symbol-prefix="object_skeleton"
           c:type="UDisksObjectSkeleton"
           parent="Gio.DBusObjectSkeleton"
           glib:type-name="UDisksObjectSkeleton"
           glib:get-type="udisks_object_skeleton_get_type"
           glib:type-struct="ObjectSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="79045">The #UDisksObjectSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9230"/>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="udisks_object_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79656">Creates a new skeleton object.</doc>
        <source-position filename="udisks-generated.h" line="9238"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79662">The skeleton object.</doc>
          <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79658">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_block" c:identifier="udisks_object_skeleton_set_block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79755">Sets the #UDisksBlock instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79757">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79758">A #UDisksBlock or %NULL to clear the interface.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_block_lvm2"
              c:identifier="udisks_object_skeleton_set_block_lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79959">Sets the #UDisksBlockLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79961">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79962">A #UDisksBlockLVM2 or %NULL to clear the interface.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive" c:identifier="udisks_object_skeleton_set_drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79695">Sets the #UDisksDrive instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79697">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79698">A #UDisksDrive or %NULL to clear the interface.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive_ata"
              c:identifier="udisks_object_skeleton_set_drive_ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79707">Sets the #UDisksDriveAta instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79709">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79710">A #UDisksDriveAta or %NULL to clear the interface.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive_lsm"
              c:identifier="udisks_object_skeleton_set_drive_lsm"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79919">Sets the #UDisksDriveLSM instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9259"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79921">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79922">A #UDisksDriveLSM or %NULL to clear the interface.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive_lsm_local"
              c:identifier="udisks_object_skeleton_set_drive_lsm_local">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79933">Sets the #UDisksDriveLsmLocal instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9260"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79935">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79936">A #UDisksDriveLsmLocal or %NULL to clear the interface.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypted"
              c:identifier="udisks_object_skeleton_set_encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79815">Sets the #UDisksEncrypted instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79817">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79818">A #UDisksEncrypted or %NULL to clear the interface.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filesystem"
              c:identifier="udisks_object_skeleton_set_filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79791">Sets the #UDisksFilesystem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79793">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79794">A #UDisksFilesystem or %NULL to clear the interface.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filesystem_btrfs"
              c:identifier="udisks_object_skeleton_set_filesystem_btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79879">Sets the #UDisksFilesystemBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79881">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79882">A #UDisksFilesystemBTRFS or %NULL to clear the interface.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_iscsi_session"
              c:identifier="udisks_object_skeleton_set_iscsi_session">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79907">Sets the #UDisksISCSISession instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79909">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79910">A #UDisksISCSISession or %NULL to clear the interface.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_job" c:identifier="udisks_object_skeleton_set_job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79853">Sets the #UDisksJob instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79855">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79856">A #UDisksJob or %NULL to clear the interface.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logical_volume"
              c:identifier="udisks_object_skeleton_set_logical_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80001">Sets the #UDisksLogicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80003">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80004">A #UDisksLogicalVolume or %NULL to clear the interface.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loop" c:identifier="udisks_object_skeleton_set_loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79827">Sets the #UDisksLoop instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79829">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79830">A #UDisksLoop or %NULL to clear the interface.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager"
              c:identifier="udisks_object_skeleton_set_manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79671">Sets the #UDisksManager instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79673">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79674">A #UDisksManager or %NULL to clear the interface.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_btrfs"
              c:identifier="udisks_object_skeleton_set_manager_btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79865">Sets the #UDisksManagerBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79867">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79868">A #UDisksManagerBTRFS or %NULL to clear the interface.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_iscsi_initiator"
              c:identifier="udisks_object_skeleton_set_manager_iscsi_initiator"
              version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79893">Sets the #UDisksManagerISCSIInitiator instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9257"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79895">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79896">A #UDisksManagerISCSIInitiator or %NULL to clear the interface.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_lvm2"
              c:identifier="udisks_object_skeleton_set_manager_lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79945">Sets the #UDisksManagerLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79947">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79948">A #UDisksManagerLVM2 or %NULL to clear the interface.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_nvme"
              c:identifier="udisks_object_skeleton_set_manager_nvme">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79683">Sets the #UDisksManagerNVMe instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79685">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79686">A #UDisksManagerNVMe or %NULL to clear the interface.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid"
              c:identifier="udisks_object_skeleton_set_mdraid"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79839">Sets the #UDisksMDRaid instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79841">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79842">A #UDisksMDRaid or %NULL to clear the interface.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nvme_controller"
              c:identifier="udisks_object_skeleton_set_nvme_controller">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79719">Sets the #UDisksNVMeController instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79721">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79722">A #UDisksNVMeController or %NULL to clear the interface.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nvme_fabrics"
              c:identifier="udisks_object_skeleton_set_nvme_fabrics">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79743">Sets the #UDisksNVMeFabrics instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79745">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79746">A #UDisksNVMeFabrics or %NULL to clear the interface.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nvme_namespace"
              c:identifier="udisks_object_skeleton_set_nvme_namespace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79731">Sets the #UDisksNVMeNamespace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9244"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79733">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79734">A #UDisksNVMeNamespace or %NULL to clear the interface.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition"
              c:identifier="udisks_object_skeleton_set_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79779">Sets the #UDisksPartition instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79781">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79782">A #UDisksPartition or %NULL to clear the interface.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition_table"
              c:identifier="udisks_object_skeleton_set_partition_table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79767">Sets the #UDisksPartitionTable instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79769">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79770">A #UDisksPartitionTable or %NULL to clear the interface.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_physical_volume"
              c:identifier="udisks_object_skeleton_set_physical_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79973">Sets the #UDisksPhysicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79975">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79976">A #UDisksPhysicalVolume or %NULL to clear the interface.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swapspace"
              c:identifier="udisks_object_skeleton_set_swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79803">Sets the #UDisksSwapspace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9250"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79805">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79806">A #UDisksSwapspace or %NULL to clear the interface.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vdo_volume"
              c:identifier="udisks_object_skeleton_set_vdo_volume"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80015">Sets the #UDisksVDOVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80017">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80018">A #UDisksVDOVolume or %NULL to clear the interface.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_object_skeleton_set_volume_group"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79987">Sets the #UDisksVolumeGroup instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9264"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79989">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79990">A #UDisksVolumeGroup or %NULL to clear the interface.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectSkeleton" c:type="GDBusObjectSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectSkeletonPrivate"
              c:type="UDisksObjectSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ObjectSkeletonClass"
            c:type="UDisksObjectSkeletonClass"
            glib:is-gtype-struct-for="ObjectSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="79051">Class structure for #UDisksObjectSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="9230"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79053">The parent class.</doc>
        <type name="Gio.DBusObjectSkeletonClass"
              c:type="GDBusObjectSkeletonClass"/>
      </field>
    </record>
    <record name="ObjectSkeletonPrivate"
            c:type="UDisksObjectSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9218"/>
    </record>
    <function-macro name="PARTITION"
                    c:identifier="UDISKS_PARTITION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3301"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_GET_IFACE"
                    c:identifier="UDISKS_PARTITION_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3303"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY"
                    c:identifier="UDISKS_PARTITION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3568"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY_CLASS"
                    c:identifier="UDISKS_PARTITION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3569"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3570"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON"
                    c:identifier="UDISKS_PARTITION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3638"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON_CLASS"
                    c:identifier="UDISKS_PARTITION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3639"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3640"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE"
                    c:identifier="UDISKS_PARTITION_TABLE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3058"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_GET_IFACE"
                    c:identifier="UDISKS_PARTITION_TABLE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3060"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3196"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3197"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3198"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3266"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3267"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3268"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME"
                    c:identifier="UDISKS_PHYSICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7507"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7509"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7552"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7553"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7554"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7622"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7623"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7624"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Partition"
               c:symbol-prefix="partition"
               c:type="UDisksPartition"
               glib:type-name="UDisksPartition"
               glib:get-type="udisks_partition_get_type"
               glib:type-struct="PartitionIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31655">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3369"/>
      <function name="interface_info"
                c:identifier="udisks_partition_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31536">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3377"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31541">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_partition_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31549">Overrides all #GObject properties in the #UDisksPartition interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3378"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31557">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31551">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31552">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_flags" invoker="get_flags" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32015">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3343"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32023">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32017">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_contained"
                      invoker="get_is_contained"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32306">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3345"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32314">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32308">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_container"
                      invoker="get_is_container"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32273">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32281">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32275">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32114">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3349"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32124">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32116">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_number"
                      invoker="get_number"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31929">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3351"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31937">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31931">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_offset"
                      invoker="get_offset"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32048">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3353"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32056">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32050">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32081">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3355"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32089">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32083">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_table" invoker="get_table" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32220">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_table() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3357"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32230">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32222">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31962">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3359"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31972">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31964">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid" invoker="get_uuid" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32167">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3361"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32177">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32169">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="3314"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="3319"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_flags">
        <source-position filename="udisks-generated.h" line="3325"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_name">
        <source-position filename="udisks-generated.h" line="3331"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_type">
        <source-position filename="udisks-generated.h" line="3337"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_uuid">
        <source-position filename="udisks-generated.h" line="3363"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_delete" c:identifier="udisks_partition_call_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32865">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_delete_finish() to get the result of the operation.

See udisks_partition_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3509"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32867">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32868">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32869">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32870">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32871">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_partition_call_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32898">Finishes an operation started with udisks_partition_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="3516"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32906">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32900">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32901">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_partition_call_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32925">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3521"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32936">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32927">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32928">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32929">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize" c:identifier="udisks_partition_call_resize">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32761">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_resize_finish() to get the result of the operation.

See udisks_partition_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32763">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32764">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32765">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32766">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32767">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32768">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_partition_call_resize_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32797">Finishes an operation started with udisks_partition_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="3497"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32805">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32799">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32800">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_partition_call_resize_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32824">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3502"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32836">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32826">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32827">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32828">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32829">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags"
              c:identifier="udisks_partition_call_set_flags">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32657">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_flags_finish() to get the result of the operation.

See udisks_partition_call_set_flags_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3469"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32659">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32660">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32661">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32662">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32663">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32664">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags_finish"
              c:identifier="udisks_partition_call_set_flags_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32693">Finishes an operation started with udisks_partition_call_set_flags().</doc>
        <source-position filename="udisks-generated.h" line="3477"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32701">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32695">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32696">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_flags().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags_sync"
              c:identifier="udisks_partition_call_set_flags_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32720">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_flags() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3482"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32732">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32722">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32723">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32724">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32725">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name"
              c:identifier="udisks_partition_call_set_name">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32443">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_name_finish() to get the result of the operation.

See udisks_partition_call_set_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3429"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32445">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32446">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32447">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32448">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32449">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32450">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name_finish"
              c:identifier="udisks_partition_call_set_name_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32479">Finishes an operation started with udisks_partition_call_set_name().</doc>
        <source-position filename="udisks-generated.h" line="3437"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32487">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32481">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32482">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name_sync"
              c:identifier="udisks_partition_call_set_name_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32506">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3442"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32518">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32508">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32509">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32510">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32511">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type"
              c:identifier="udisks_partition_call_set_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32339">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_type_finish() to get the result of the operation.

See udisks_partition_call_set_type_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3409"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32341">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32342">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32343">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32344">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32345">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32346">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type_finish"
              c:identifier="udisks_partition_call_set_type_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32375">Finishes an operation started with udisks_partition_call_set_type().</doc>
        <source-position filename="udisks-generated.h" line="3417"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32383">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32377">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32378">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_type().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type_sync"
              c:identifier="udisks_partition_call_set_type_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32402">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_type() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3422"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32414">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32404">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32405">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32406">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32407">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid"
              c:identifier="udisks_partition_call_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32547">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_uuid_finish() to get the result of the operation.

See udisks_partition_call_set_uuid_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32549">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32550">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32551">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32552">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32553">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32554">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_finish"
              c:identifier="udisks_partition_call_set_uuid_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32585">Finishes an operation started with udisks_partition_call_set_uuid().</doc>
        <source-position filename="udisks-generated.h" line="3457"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32593">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32587">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32588">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_uuid().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_sync"
              c:identifier="udisks_partition_call_set_uuid_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32614">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_uuid() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3462"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32626">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32616">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32617">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32618">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32619">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_partition_complete_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33055">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33057">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33058">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_partition_complete_resize">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33037">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3398"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33039">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33040">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_flags"
              c:identifier="udisks_partition_complete_set_flags">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33019">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3394"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33021">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33022">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_name"
              c:identifier="udisks_partition_complete_set_name">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32981">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3386"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32983">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32984">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_type"
              c:identifier="udisks_partition_complete_set_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32963">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3382"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32965">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32966">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_uuid"
              c:identifier="udisks_partition_complete_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32999">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3390"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33001">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33002">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_partition_dup_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32134">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3547"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32142">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32136">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_table"
              c:identifier="udisks_partition_dup_table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32240">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3555"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32248">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32242">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_partition_dup_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31982">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3534"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31990">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31984">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_partition_dup_uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32187">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3551"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32195">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32189">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="udisks_partition_get_flags"
              glib:get-property="flags"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32015">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3537"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32023">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32017">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_contained"
              c:identifier="udisks_partition_get_is_contained"
              glib:get-property="is-contained"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32306">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3561"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32314">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32308">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_container"
              c:identifier="udisks_partition_get_is_container"
              glib:get-property="is-container"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32273">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3558"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32281">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32275">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_partition_get_name"
              glib:get-property="name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32114">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3546"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32124">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32116">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number"
              c:identifier="udisks_partition_get_number"
              glib:get-property="number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31929">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3530"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31937">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31931">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset"
              c:identifier="udisks_partition_get_offset"
              glib:get-property="offset"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32048">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3540"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32056">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32050">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_partition_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32081">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32089">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32083">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_table"
              c:identifier="udisks_partition_get_table"
              glib:get-property="table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32220">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_table() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3554"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32230">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32222">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_partition_get_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31962">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3533"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31972">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31964">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_partition_get_uuid"
              glib:get-property="uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32167">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3550"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32177">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32169">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="udisks_partition_set_flags"
              glib:set-property="flags"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32033">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3538"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32035">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32036">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_contained"
              c:identifier="udisks_partition_set_is_contained"
              glib:set-property="is-contained"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32324">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3562"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32326">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32327">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_container"
              c:identifier="udisks_partition_set_is_container"
              glib:set-property="is-container"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32291">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3559"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32293">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32294">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_partition_set_name"
              glib:set-property="name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32152">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3548"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32154">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32155">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number"
              c:identifier="udisks_partition_set_number"
              glib:set-property="number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31947">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3531"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31949">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31950">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset"
              c:identifier="udisks_partition_set_offset"
              glib:set-property="offset"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32066">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3541"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32068">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32069">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_partition_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32099">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3544"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32101">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32102">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_table"
              c:identifier="udisks_partition_set_table"
              glib:set-property="table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32258">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3556"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32260">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32261">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_partition_set_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32000">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3535"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32002">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32003">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_partition_set_uuid"
              glib:set-property="uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32205">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3552"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32207">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32208">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags"
                writable="1"
                transfer-ownership="none"
                setter="set_flags"
                getter="get_flags"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31855">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="is-contained"
                writable="1"
                transfer-ownership="none"
                setter="set_is_contained"
                getter="get_is_contained"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31918">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-container"
                writable="1"
                transfer-ownership="none"
                setter="set_is_container"
                getter="get_is_container"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31909">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31882">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="number"
                writable="1"
                transfer-ownership="none"
                setter="set_number"
                getter="get_number"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31837">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="offset"
                writable="1"
                transfer-ownership="none"
                setter="set_offset"
                getter="get_offset"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31864">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31873">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="table"
                writable="1"
                transfer-ownership="none"
                setter="set_table"
                getter="get_table"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31900">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31846">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31891">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31813">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31823">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31816">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31817">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31789">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31800">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31792">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31793">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31794">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-flags" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31765">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_flags() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31776">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31768">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31769">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31770">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-name" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31715">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31726">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31718">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31719">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31720">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-type" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31691">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_type() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31702">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31694">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31695">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31696">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-uuid" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31739">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_uuid() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31750">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31742">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31743">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31744">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PartitionIface"
            c:type="UDisksPartitionIface"
            glib:is-gtype-struct-for="Partition">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31661">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3369"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31663">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="3314"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="3319"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_flags">
        <callback name="handle_set_flags">
          <source-position filename="udisks-generated.h" line="3325"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_flags" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_name">
        <callback name="handle_set_name">
          <source-position filename="udisks-generated.h" line="3331"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_type">
        <callback name="handle_set_type">
          <source-position filename="udisks-generated.h" line="3337"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_flags">
        <callback name="get_flags">
          <source-position filename="udisks-generated.h" line="3343"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32023">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32017">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_contained">
        <callback name="get_is_contained">
          <source-position filename="udisks-generated.h" line="3345"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32314">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32308">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_container">
        <callback name="get_is_container">
          <source-position filename="udisks-generated.h" line="3347"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32281">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32275">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="3349"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32124">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32116">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_number">
        <callback name="get_number">
          <source-position filename="udisks-generated.h" line="3351"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31937">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="31931">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_offset">
        <callback name="get_offset">
          <source-position filename="udisks-generated.h" line="3353"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32056">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32050">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="3355"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32089">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32083">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_table">
        <callback name="get_table">
          <source-position filename="udisks-generated.h" line="3357"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32230">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32222">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="3359"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31972">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="31964">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="3361"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32177">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32169">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_uuid">
        <callback name="handle_set_uuid">
          <source-position filename="udisks-generated.h" line="3363"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_uuid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PartitionProxy"
           c:symbol-prefix="partition_proxy"
           c:type="UDisksPartitionProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPartitionProxy"
           glib:get-type="udisks_partition_proxy_get_type"
           glib:type-struct="PartitionProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33075">The #UDisksPartitionProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3588"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Partition"/>
      <constructor name="new_finish"
                   c:identifier="udisks_partition_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33479">Finishes an operation started with udisks_partition_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3604"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33486">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33481">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_partition_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33569">Finishes an operation started with udisks_partition_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3623"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33576">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33571">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_partition_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33594">Like udisks_partition_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_partition_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3626"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33609">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33596">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33597">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33598">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33599">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33600">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_partition_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33504">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_partition_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3607"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33519">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33506">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33507">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33508">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33509">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33510">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_partition_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33449">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_proxy_new_finish() to get the result of the operation.

See udisks_partition_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3596"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33451">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33452">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33453">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33454">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33455">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33456">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33457">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_partition_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33539">Like udisks_partition_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_partition_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3615"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33541">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33542">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33543">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33544">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33545">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33546">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33547">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionProxyPrivate"
              c:type="UDisksPartitionProxyPrivate*"/>
      </field>
    </class>
    <record name="PartitionProxyClass"
            c:type="UDisksPartitionProxyClass"
            glib:is-gtype-struct-for="PartitionProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33081">Class structure for #UDisksPartitionProxy.</doc>
      <source-position filename="udisks-generated.h" line="3588"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33083">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PartitionProxyPrivate"
            c:type="UDisksPartitionProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3576"/>
    </record>
    <class name="PartitionSkeleton"
           c:symbol-prefix="partition_skeleton"
           c:type="UDisksPartitionSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPartitionSkeleton"
           glib:get-type="udisks_partition_skeleton_get_type"
           glib:type-struct="PartitionSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33631">The #UDisksPartitionSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3658"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Partition"/>
      <constructor name="new" c:identifier="udisks_partition_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34201">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3666"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34206">The skeleton object.</doc>
          <type name="PartitionSkeleton" c:type="UDisksPartition*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionSkeletonPrivate"
              c:type="UDisksPartitionSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PartitionSkeletonClass"
            c:type="UDisksPartitionSkeletonClass"
            glib:is-gtype-struct-for="PartitionSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33637">Class structure for #UDisksPartitionSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3658"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33639">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PartitionSkeletonPrivate"
            c:type="UDisksPartitionSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3646"/>
    </record>
    <interface name="PartitionTable"
               c:symbol-prefix="partition_table"
               c:type="UDisksPartitionTable"
               glib:type-name="UDisksPartitionTable"
               glib:get-type="udisks_partition_table_get_type"
               glib:type-struct="PartitionTableIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29671">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3095"/>
      <function name="interface_info"
                c:identifier="udisks_partition_table_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29612">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29617">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_partition_table_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29625">Overrides all #GObject properties in the #UDisksPartitionTable interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29633">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29627">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29628">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_partitions"
                      invoker="get_partitions"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29772">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_partitions() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3091"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29782">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29774">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29825">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3093"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29835">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29827">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_partition">
        <source-position filename="udisks-generated.h" line="3071"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_partition_and_format">
        <source-position filename="udisks-generated.h" line="3080"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create_partition"
              c:identifier="udisks_partition_table_call_create_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29878">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_call_create_partition_finish() to get the result of the operation.

See udisks_partition_table_call_create_partition_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29880">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29881">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29882">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29883">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29884">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29885">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29886">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29887">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29888">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format"
              c:identifier="udisks_partition_table_call_create_partition_and_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30006">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_call_create_partition_and_format_finish() to get the result of the operation.

See udisks_partition_table_call_create_partition_and_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30008">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30009">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30010">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30011">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30012">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30013">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30014">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30015">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30016">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="9">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30017">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30018">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format_finish"
              c:identifier="udisks_partition_table_call_create_partition_and_format_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30057">Finishes an operation started with udisks_partition_table_call_create_partition_and_format().</doc>
        <source-position filename="udisks-generated.h" line="3162"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30066">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30059">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30060">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30061">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_call_create_partition_and_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format_sync"
              c:identifier="udisks_partition_table_call_create_partition_and_format_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30087">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_table_call_create_partition_and_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3168"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30105">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30089">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30090">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30091">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30092">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30093">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30094">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30095">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30096">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30097">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30098">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_finish"
              c:identifier="udisks_partition_table_call_create_partition_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29923">Finishes an operation started with udisks_partition_table_call_create_partition().</doc>
        <source-position filename="udisks-generated.h" line="3132"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29932">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29925">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29926">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29927">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_call_create_partition().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_sync"
              c:identifier="udisks_partition_table_call_create_partition_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29953">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_table_call_create_partition() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3138"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29969">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29955">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29956">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29957">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29958">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29959">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29960">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29961">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29962">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_partition"
              c:identifier="udisks_partition_table_complete_create_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30146">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30148">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30149">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="created_partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30150">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_partition_and_format"
              c:identifier="udisks_partition_table_complete_create_partition_and_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30167">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30169">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30170">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="created_partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30171">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_partitions"
              c:identifier="udisks_partition_table_dup_partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29792">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3185"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29800">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29794">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_partition_table_dup_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29845">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3189"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29853">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29847">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partitions"
              c:identifier="udisks_partition_table_get_partitions"
              glib:get-property="partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29772">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_partitions() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3184"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29782">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29774">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_partition_table_get_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29825">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3188"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29835">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29827">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_partitions"
              c:identifier="udisks_partition_table_set_partitions"
              glib:set-property="partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29810">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29812">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29813">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_partition_table_set_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29863">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29865">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29866">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="partitions"
                writable="1"
                transfer-ownership="none"
                setter="set_partitions"
                getter="get_partitions">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29752">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="type"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29761">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-create-partition" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29695">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_table_complete_create_partition() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29709">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29698">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29699">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29700">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29701">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29702">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29703">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-partition-and-format" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29722">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_table_complete_create_partition_and_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29738">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29725">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29726">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29727">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29728">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29729">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29730">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29731">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29732">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PartitionTableIface"
            c:type="UDisksPartitionTableIface"
            glib:is-gtype-struct-for="PartitionTable">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29677">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3095"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29679">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_partition">
        <callback name="handle_create_partition">
          <source-position filename="udisks-generated.h" line="3071"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_offset" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_partition_and_format">
        <callback name="handle_create_partition_and_format">
          <source-position filename="udisks-generated.h" line="3080"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_offset" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_format_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_format_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_partitions">
        <callback name="get_partitions">
          <source-position filename="udisks-generated.h" line="3091"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29782">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="29774">A #UDisksPartitionTable.</doc>
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="3093"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29835">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="29827">A #UDisksPartitionTable.</doc>
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PartitionTableProxy"
           c:symbol-prefix="partition_table_proxy"
           c:type="UDisksPartitionTableProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPartitionTableProxy"
           glib:get-type="udisks_partition_table_proxy_get_type"
           glib:type-struct="PartitionTableProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30190">The #UDisksPartitionTableProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3216"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="PartitionTable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_partition_table_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30470">Finishes an operation started with udisks_partition_table_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30477">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30472">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_partition_table_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30560">Finishes an operation started with udisks_partition_table_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3251"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30567">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30562">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_partition_table_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30585">Like udisks_partition_table_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_partition_table_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3254"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30600">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30587">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30588">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30589">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30590">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30591">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_partition_table_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30495">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_partition_table_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3235"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30510">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30497">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30498">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30499">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30500">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30501">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_partition_table_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30440">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_proxy_new_finish() to get the result of the operation.

See udisks_partition_table_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30442">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30443">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30444">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30445">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30446">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30447">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30448">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_partition_table_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30530">Like udisks_partition_table_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_partition_table_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30532">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30533">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30534">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30535">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30536">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30537">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30538">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionTableProxyPrivate"
              c:type="UDisksPartitionTableProxyPrivate*"/>
      </field>
    </class>
    <record name="PartitionTableProxyClass"
            c:type="UDisksPartitionTableProxyClass"
            glib:is-gtype-struct-for="PartitionTableProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30196">Class structure for #UDisksPartitionTableProxy.</doc>
      <source-position filename="udisks-generated.h" line="3216"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30198">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PartitionTableProxyPrivate"
            c:type="UDisksPartitionTableProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3204"/>
    </record>
    <class name="PartitionTableSkeleton"
           c:symbol-prefix="partition_table_skeleton"
           c:type="UDisksPartitionTableSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPartitionTableSkeleton"
           glib:get-type="udisks_partition_table_skeleton_get_type"
           glib:type-struct="PartitionTableSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30622">The #UDisksPartitionTableSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3286"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="PartitionTable"/>
      <constructor name="new"
                   c:identifier="udisks_partition_table_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31088">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3294"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31093">The skeleton object.</doc>
          <type name="PartitionTableSkeleton" c:type="UDisksPartitionTable*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionTableSkeletonPrivate"
              c:type="UDisksPartitionTableSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PartitionTableSkeletonClass"
            c:type="UDisksPartitionTableSkeletonClass"
            glib:is-gtype-struct-for="PartitionTableSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30628">Class structure for #UDisksPartitionTableSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3286"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30630">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PartitionTableSkeletonPrivate"
            c:type="UDisksPartitionTableSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3274"/>
    </record>
    <record name="PartitionTypeInfo"
            c:type="UDisksPartitionTypeInfo"
            glib:type-name="UDisksPartitionTypeInfo"
            glib:get-type="udisks_partition_type_info_get_type"
            c:symbol-prefix="partition_type_info">
      <doc xml:space="preserve"
           filename="udisksclient.h"
           line="166">Detailed information about a partition type.

@table_subtype is used to break the set of partition types for
@table_type into a logical subsets. It is typically only used in
user interfaces where the partition type is selected.

This struct may grow in the future without it being considered an
ABI break.</doc>
      <source-position filename="udisksclient.h" line="189"/>
      <field name="table_type" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="168">A partition table type e.g. 'dos' or 'gpt'</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="table_subtype" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="169">A partition table sub-type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="170">A partition type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="171">Flags from the #UDisksPartitionTypeInfoFlags enumeration.</doc>
        <type name="PartitionTypeInfoFlags"
              c:type="UDisksPartitionTypeInfoFlags"/>
      </field>
      <method name="free" c:identifier="udisks_partition_type_info_free">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2814">Frees @info.</doc>
        <source-position filename="udisksclient.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2816">A #UDisksPartitionTypeInfo.</doc>
            <type name="PartitionTypeInfo" c:type="UDisksPartitionTypeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="PartitionTypeInfoFlags"
              glib:type-name="UDisksPartitionTypeInfoFlags"
              glib:get-type="udisks_partition_type_info_flags_get_type"
              c:type="UDisksPartitionTypeInfoFlags">
      <doc xml:space="preserve"
           filename="udisksenums.h"
           line="86">Flags describing a partition type.</doc>
      <member name="none"
              value="0"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE"
              glib:nick="none"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="88">No flags set.</doc>
      </member>
      <member name="swap"
              value="1"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP"
              glib:nick="swap"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="89">Partition type is used for swap.</doc>
      </member>
      <member name="raid"
              value="2"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID"
              glib:nick="raid"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="90">Partition type is used for RAID/LVM or similar.</doc>
      </member>
      <member name="hidden"
              value="4"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN"
              glib:nick="hidden"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="91">Partition type indicates the partition is hidden (e.g. 'dos' type 0x1b "Hidden W95 FAT32"). Note that this is not the same as user-toggleable attributes/flags for a partition.</doc>
      </member>
      <member name="create_only"
              value="8"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY"
              glib:nick="create-only"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="92">Partition type can only be used when creating a partition and e.g. should not be selectable in a "change partition type" user interface (e.g. 'dos' type 0x05, 0x0f and 0x85 for extended partitions).</doc>
      </member>
      <member name="system"
              value="16"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM"
              glib:nick="system"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="93">Partition type indicates the partition is part of the system / bootloader (e.g. 'dos' types 0xee, 0xff, 'gpt' types for 'EFI System partition' and 'BIOS Boot partition').</doc>
      </member>
    </bitfield>
    <interface name="PhysicalVolume"
               c:symbol-prefix="physical_volume"
               c:type="UDisksPhysicalVolume"
               version="2.0.0"
               glib:type-name="UDisksPhysicalVolume"
               glib:get-type="udisks_physical_volume_get_type"
               glib:type-struct="PhysicalVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64071">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7525"/>
      <function name="interface_info"
                c:identifier="udisks_physical_volume_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64033">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="7533"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64038">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_physical_volume_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64048">Overrides all #GObject properties in the #UDisksPhysicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="7534"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64056">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64050">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64051">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_free_size"
                      invoker="get_free_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64229">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64237">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64231">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64192">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7521"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64200">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64194">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_volume_group"
                      invoker="get_volume_group"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64133">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_physical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7523"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64143">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64135">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_volume_group"
              c:identifier="udisks_physical_volume_dup_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64155">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7539"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64163">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64157">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_free_size"
              c:identifier="udisks_physical_volume_get_free_size"
              glib:get-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64229">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7545"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64237">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64231">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_physical_volume_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64192">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7542"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64200">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64194">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_physical_volume_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64133">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_physical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7538"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64143">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64135">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_free_size"
              c:identifier="udisks_physical_volume_set_free_size"
              glib:set-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64249">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="7546"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64251">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64252">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_physical_volume_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64212">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="7543"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64214">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64215">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_physical_volume_set_volume_group"
              glib:set-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64175">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="7540"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64177">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64178">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="free-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_free_size"
                getter="get_free_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64120">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64109">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_volume_group"
                getter="get_volume_group"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64098">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="PhysicalVolumeIface"
            c:type="UDisksPhysicalVolumeIface"
            glib:is-gtype-struct-for="PhysicalVolume"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64079">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7525"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64081">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_free_size">
        <callback name="get_free_size">
          <source-position filename="udisks-generated.h" line="7519"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64237">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="64231">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="7521"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64200">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="64194">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_volume_group">
        <callback name="get_volume_group">
          <source-position filename="udisks-generated.h" line="7523"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64143">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="64135">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PhysicalVolumeProxy"
           c:symbol-prefix="physical_volume_proxy"
           c:type="UDisksPhysicalVolumeProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPhysicalVolumeProxy"
           glib:get-type="udisks_physical_volume_proxy_get_type"
           glib:type-struct="PhysicalVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64268">The #UDisksPhysicalVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7572"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="PhysicalVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_physical_volume_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64566">Finishes an operation started with udisks_physical_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="7588"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64573">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64568">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_physical_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_physical_volume_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64662">Finishes an operation started with udisks_physical_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="7607"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64669">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64664">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_physical_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_physical_volume_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64689">Like udisks_physical_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_physical_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7610"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64704">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64691">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64692">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64693">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64694">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64695">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_physical_volume_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64593">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_physical_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7591"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64608">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64595">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64596">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64597">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64598">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64599">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_physical_volume_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64534">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_physical_volume_proxy_new_finish() to get the result of the operation.

See udisks_physical_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7580"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64536">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64537">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64538">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64539">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64540">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64541">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64542">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_physical_volume_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64630">Like udisks_physical_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_physical_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_physical_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7599"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64632">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64633">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64634">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64635">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64636">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64637">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64638">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PhysicalVolumeProxyPrivate"
              c:type="UDisksPhysicalVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="PhysicalVolumeProxyClass"
            c:type="UDisksPhysicalVolumeProxyClass"
            glib:is-gtype-struct-for="PhysicalVolumeProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64276">Class structure for #UDisksPhysicalVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="7572"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64278">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PhysicalVolumeProxyPrivate"
            c:type="UDisksPhysicalVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7560"/>
    </record>
    <class name="PhysicalVolumeSkeleton"
           c:symbol-prefix="physical_volume_skeleton"
           c:type="UDisksPhysicalVolumeSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPhysicalVolumeSkeleton"
           glib:get-type="udisks_physical_volume_skeleton_get_type"
           glib:type-struct="PhysicalVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64728">The #UDisksPhysicalVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7642"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="PhysicalVolume"/>
      <constructor name="new"
                   c:identifier="udisks_physical_volume_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="65211">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="7650"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="65216">The skeleton object.</doc>
          <type name="PhysicalVolumeSkeleton" c:type="UDisksPhysicalVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PhysicalVolumeSkeletonPrivate"
              c:type="UDisksPhysicalVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PhysicalVolumeSkeletonClass"
            c:type="UDisksPhysicalVolumeSkeletonClass"
            glib:is-gtype-struct-for="PhysicalVolumeSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64736">Class structure for #UDisksPhysicalVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="7642"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64738">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PhysicalVolumeSkeletonPrivate"
            c:type="UDisksPhysicalVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7630"/>
    </record>
    <function-macro name="SWAPSPACE"
                    c:identifier="UDISKS_SWAPSPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4059"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_GET_IFACE"
                    c:identifier="UDISKS_SWAPSPACE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4061"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY"
                    c:identifier="UDISKS_SWAPSPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4214"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4215"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4216"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4284"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4285"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4286"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Swapspace"
               c:symbol-prefix="swapspace"
               c:type="UDisksSwapspace"
               glib:type-name="UDisksSwapspace"
               glib:get-type="udisks_swapspace_get_type"
               glib:type-struct="SwapspaceIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37271">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4096"/>
      <function name="interface_info"
                c:identifier="udisks_swapspace_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37187">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37192">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_swapspace_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37200">Overrides all #GObject properties in the #UDisksSwapspace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37208">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37202">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37203">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active"
                      invoker="get_active"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37404">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4088"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37412">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37406">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="4072"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_uuid">
        <source-position filename="udisks-generated.h" line="4090"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start">
        <source-position filename="udisks-generated.h" line="4078"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop">
        <source-position filename="udisks-generated.h" line="4083"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_set_label"
              c:identifier="udisks_swapspace_call_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37633">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_set_label_finish() to get the result of the operation.

See udisks_swapspace_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37635">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37636">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37637">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37638">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37639">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37640">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_swapspace_call_set_label_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37669">Finishes an operation started with udisks_swapspace_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="4172"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37677">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37671">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37672">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_swapspace_call_set_label_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37696">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4177"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37708">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37698">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37699">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37700">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37701">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid"
              c:identifier="udisks_swapspace_call_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37737">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_set_uuid_finish() to get the result of the operation.

See udisks_swapspace_call_set_uuid_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37739">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37740">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37741">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37742">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37743">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37744">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_finish"
              c:identifier="udisks_swapspace_call_set_uuid_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37775">Finishes an operation started with udisks_swapspace_call_set_uuid().</doc>
        <source-position filename="udisks-generated.h" line="4192"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37783">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37777">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37778">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_set_uuid().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_sync"
              c:identifier="udisks_swapspace_call_set_uuid_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37804">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_set_uuid() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4197"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37816">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37806">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37807">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37808">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37809">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start" c:identifier="udisks_swapspace_call_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37437">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_start_finish() to get the result of the operation.

See udisks_swapspace_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37439">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37440">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37441">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37442">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37443">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_finish"
              c:identifier="udisks_swapspace_call_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37470">Finishes an operation started with udisks_swapspace_call_start().</doc>
        <source-position filename="udisks-generated.h" line="4135"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37478">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37472">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37473">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_sync"
              c:identifier="udisks_swapspace_call_start_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37497">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4140"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37508">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37499">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37500">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37501">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop" c:identifier="udisks_swapspace_call_stop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37535">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_stop_finish() to get the result of the operation.

See udisks_swapspace_call_stop_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37537">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37538">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37539">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37540">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37541">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_finish"
              c:identifier="udisks_swapspace_call_stop_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37568">Finishes an operation started with udisks_swapspace_call_stop().</doc>
        <source-position filename="udisks-generated.h" line="4153"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37576">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37570">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37571">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_stop().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_sync"
              c:identifier="udisks_swapspace_call_stop_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37595">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_stop() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4158"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37606">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37597">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37598">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37599">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_swapspace_complete_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37883">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37885">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37886">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_uuid"
              c:identifier="udisks_swapspace_complete_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37901">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37903">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37904">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start"
              c:identifier="udisks_swapspace_complete_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37847">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37849">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37850">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop"
              c:identifier="udisks_swapspace_complete_stop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37865">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37867">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37868">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="udisks_swapspace_get_active"
              glib:get-property="active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37404">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37412">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37406">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="udisks_swapspace_set_active"
              glib:set-property="active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37422">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37424">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37425">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37393">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-set-label" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37342">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37353">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37345">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37346">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37347">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-uuid" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37366">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_set_uuid() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37377">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37369">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37370">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37371">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37296">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37306">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37299">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37300">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37319">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_stop() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37329">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37322">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37323">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="SwapspaceIface"
            c:type="UDisksSwapspaceIface"
            glib:is-gtype-struct-for="Swapspace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37277">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4096"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37279">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="4072"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start">
        <callback name="handle_start">
          <source-position filename="udisks-generated.h" line="4078"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop">
        <callback name="handle_stop">
          <source-position filename="udisks-generated.h" line="4083"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active">
        <callback name="get_active">
          <source-position filename="udisks-generated.h" line="4088"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37412">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="37406">A #UDisksSwapspace.</doc>
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_uuid">
        <callback name="handle_set_uuid">
          <source-position filename="udisks-generated.h" line="4090"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_uuid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SwapspaceProxy"
           c:symbol-prefix="swapspace_proxy"
           c:type="UDisksSwapspaceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksSwapspaceProxy"
           glib:get-type="udisks_swapspace_proxy_get_type"
           glib:type-struct="SwapspaceProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37923">The #UDisksSwapspaceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4234"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Swapspace"/>
      <constructor name="new_finish"
                   c:identifier="udisks_swapspace_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38183">Finishes an operation started with udisks_swapspace_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4250"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38190">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38185">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_swapspace_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38273">Finishes an operation started with udisks_swapspace_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4269"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38280">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38275">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_swapspace_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38298">Like udisks_swapspace_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_swapspace_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4272"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38313">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38300">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38301">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38302">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38303">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38304">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_swapspace_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38208">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_swapspace_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4253"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38223">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38210">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38211">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38212">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38213">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38214">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_swapspace_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38153">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_proxy_new_finish() to get the result of the operation.

See udisks_swapspace_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38155">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38156">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38157">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38158">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38159">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38160">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38161">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_swapspace_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38243">Like udisks_swapspace_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_swapspace_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38245">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38246">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38247">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38248">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38249">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38250">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38251">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SwapspaceProxyPrivate"
              c:type="UDisksSwapspaceProxyPrivate*"/>
      </field>
    </class>
    <record name="SwapspaceProxyClass"
            c:type="UDisksSwapspaceProxyClass"
            glib:is-gtype-struct-for="SwapspaceProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37929">Class structure for #UDisksSwapspaceProxy.</doc>
      <source-position filename="udisks-generated.h" line="4234"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37931">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="SwapspaceProxyPrivate"
            c:type="UDisksSwapspaceProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4222"/>
    </record>
    <class name="SwapspaceSkeleton"
           c:symbol-prefix="swapspace_skeleton"
           c:type="UDisksSwapspaceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksSwapspaceSkeleton"
           glib:get-type="udisks_swapspace_skeleton_get_type"
           glib:type-struct="SwapspaceSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38335">The #UDisksSwapspaceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4304"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Swapspace"/>
      <constructor name="new" c:identifier="udisks_swapspace_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38788">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4312"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38793">The skeleton object.</doc>
          <type name="SwapspaceSkeleton" c:type="UDisksSwapspace*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SwapspaceSkeletonPrivate"
              c:type="UDisksSwapspaceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="SwapspaceSkeletonClass"
            c:type="UDisksSwapspaceSkeletonClass"
            glib:is-gtype-struct-for="SwapspaceSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38341">Class structure for #UDisksSwapspaceSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4304"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38343">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="SwapspaceSkeletonPrivate"
            c:type="UDisksSwapspaceSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4292"/>
    </record>
    <docsection name="UDisksBlock">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23668">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksBlockLVM2">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62875">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDrive">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7245">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDriveAta">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="11584">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDriveLSM">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58427">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDriveLsmLocal">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60379">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksEncrypted">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38806">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksFilesystem">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34219">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksFilesystemBTRFS">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49792">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksISCSISession">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56136">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksJob">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="46591">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksLogicalVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="69868">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksLoop">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41008">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksMDRaid">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42623">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManager">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="1682">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerBTRFS">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48776">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerISCSIInitiator">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="53169">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerLVM2">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61871">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerNVMe">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5382">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksNVMeController">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="16504">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksNVMeFabrics">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22098">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksNVMeNamespace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19870">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksObject">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="77392">This section contains the #UDisksObject, #UDisksObjectProxy, and #UDisksObjectSkeleton types which make it easier to work with objects implementing generated types for D-Bus interfaces.</doc>
    </docsection>
    <docsection name="UDisksObjectManagerClient">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="80035">This section contains a #GDBusObjectManagerClient that uses udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc.</doc>
    </docsection>
    <docsection name="UDisksPartition">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31106">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksPartitionTable">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29332">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksPhysicalVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63959">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksSwapspace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36990">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksVDOVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="74600">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksVolumeGroup">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="65231">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <interface name="VDOVolume"
               c:symbol-prefix="vdo_volume"
               c:type="UDisksVDOVolume"
               version="2.9.0"
               glib:type-name="UDisksVDOVolume"
               glib:get-type="udisks_vdo_volume_get_type"
               glib:type-struct="VDOVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="75066">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="8829"/>
      <function name="interface_info"
                c:identifier="udisks_vdo_volume_interface_info"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74959">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="8837"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74964">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_vdo_volume_override_properties"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74974">Overrides all #GObject properties in the #UDisksVDOVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="8838"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74982">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74976">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74977">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_compression"
                      invoker="get_compression"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75584">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8815"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75592">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75586">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_compression_state"
                      invoker="get_compression_state"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75429">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_compression_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8817"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75439">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75431">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_deduplication"
                      invoker="get_deduplication"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75621">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8819"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75629">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75623">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_index_state"
                      invoker="get_index_state"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75488">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_index_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8821"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75498">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75490">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operating_mode"
                      invoker="get_operating_mode"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75370">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_operating_mode() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8823"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75380">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75372">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_used_size"
                      invoker="get_used_size"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75547">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8825"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75555">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75549">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vdo_pool"
                      invoker="get_vdo_pool"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75311">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_vdo_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8827"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75321">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75313">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_compression">
        <source-position filename="udisks-generated.h" line="8786"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_deduplication">
        <source-position filename="udisks-generated.h" line="8792"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_statistics">
        <source-position filename="udisks-generated.h" line="8798"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize_logical">
        <source-position filename="udisks-generated.h" line="8803"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize_physical">
        <source-position filename="udisks-generated.h" line="8809"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_enable_compression"
              c:identifier="udisks_vdo_volume_call_enable_compression"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75658">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_enable_compression_finish() to get the result of the operation.

See udisks_vdo_volume_call_enable_compression_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8866"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75660">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75661">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75662">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75663">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75664">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75665">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_compression_finish"
              c:identifier="udisks_vdo_volume_call_enable_compression_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75696">Finishes an operation started with udisks_vdo_volume_call_enable_compression().</doc>
        <source-position filename="udisks-generated.h" line="8874"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75704">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75698">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75699">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_enable_compression().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_compression_sync"
              c:identifier="udisks_vdo_volume_call_enable_compression_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75725">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_enable_compression() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8879"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75737">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75727">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75728">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75729">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75730">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication"
              c:identifier="udisks_vdo_volume_call_enable_deduplication"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75768">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_enable_deduplication_finish() to get the result of the operation.

See udisks_vdo_volume_call_enable_deduplication_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8886"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75770">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75771">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75772">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75773">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75774">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75775">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication_finish"
              c:identifier="udisks_vdo_volume_call_enable_deduplication_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75806">Finishes an operation started with udisks_vdo_volume_call_enable_deduplication().</doc>
        <source-position filename="udisks-generated.h" line="8894"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75814">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75808">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75809">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_enable_deduplication().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication_sync"
              c:identifier="udisks_vdo_volume_call_enable_deduplication_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75835">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_enable_deduplication() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8899"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75847">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75837">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75838">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75839">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75840">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics"
              c:identifier="udisks_vdo_volume_call_get_statistics"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76098">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_get_statistics_finish() to get the result of the operation.

See udisks_vdo_volume_call_get_statistics_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8946"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76100">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76101">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76102">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76103">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76104">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics_finish"
              c:identifier="udisks_vdo_volume_call_get_statistics_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76133">Finishes an operation started with udisks_vdo_volume_call_get_statistics().</doc>
        <source-position filename="udisks-generated.h" line="8953"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76142">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76135">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="out_stats"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76136">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76137">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_get_statistics().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics_sync"
              c:identifier="udisks_vdo_volume_call_get_statistics_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76165">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_get_statistics() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8959"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76177">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76167">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76168">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_stats"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76169">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76170">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical"
              c:identifier="udisks_vdo_volume_call_resize_logical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75878">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_resize_logical_finish() to get the result of the operation.

See udisks_vdo_volume_call_resize_logical_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8906"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75880">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75881">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75882">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75883">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75884">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75885">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical_finish"
              c:identifier="udisks_vdo_volume_call_resize_logical_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75916">Finishes an operation started with udisks_vdo_volume_call_resize_logical().</doc>
        <source-position filename="udisks-generated.h" line="8914"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75924">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75918">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75919">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_resize_logical().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical_sync"
              c:identifier="udisks_vdo_volume_call_resize_logical_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75945">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_resize_logical() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8919"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75957">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75947">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75948">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75949">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75950">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical"
              c:identifier="udisks_vdo_volume_call_resize_physical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75988">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_resize_physical_finish() to get the result of the operation.

See udisks_vdo_volume_call_resize_physical_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8926"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75990">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75991">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75992">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75993">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75994">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75995">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical_finish"
              c:identifier="udisks_vdo_volume_call_resize_physical_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76026">Finishes an operation started with udisks_vdo_volume_call_resize_physical().</doc>
        <source-position filename="udisks-generated.h" line="8934"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76034">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76028">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76029">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_resize_physical().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical_sync"
              c:identifier="udisks_vdo_volume_call_resize_physical_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76055">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_resize_physical() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8939"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76067">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76057">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76058">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76059">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76060">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_compression"
              c:identifier="udisks_vdo_volume_complete_enable_compression"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76208">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8842"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76210">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76211">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_deduplication"
              c:identifier="udisks_vdo_volume_complete_enable_deduplication"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76228">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8846"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76230">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76231">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_statistics"
              c:identifier="udisks_vdo_volume_complete_get_statistics"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76288">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8858"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76290">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76291">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="stats" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76292">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize_logical"
              c:identifier="udisks_vdo_volume_complete_resize_logical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76248">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8850"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76250">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76251">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize_physical"
              c:identifier="udisks_vdo_volume_complete_resize_physical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76268">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8854"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76270">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76271">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_compression_state"
              c:identifier="udisks_vdo_volume_dup_compression_state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75451">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8978"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75459">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75453">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_index_state"
              c:identifier="udisks_vdo_volume_dup_index_state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75510">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8982"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75518">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75512">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operating_mode"
              c:identifier="udisks_vdo_volume_dup_operating_mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75392">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8974"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75400">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75394">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_vdo_pool"
              c:identifier="udisks_vdo_volume_dup_vdo_pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75333">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8970"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75341">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75335">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compression"
              c:identifier="udisks_vdo_volume_get_compression"
              glib:get-property="compression"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75584">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8988"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75592">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75586">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compression_state"
              c:identifier="udisks_vdo_volume_get_compression_state"
              glib:get-property="compression-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75429">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_compression_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8977"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75439">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75431">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deduplication"
              c:identifier="udisks_vdo_volume_get_deduplication"
              glib:get-property="deduplication"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75621">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8991"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75629">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75623">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_index_state"
              c:identifier="udisks_vdo_volume_get_index_state"
              glib:get-property="index-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75488">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_index_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8981"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75498">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75490">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operating_mode"
              c:identifier="udisks_vdo_volume_get_operating_mode"
              glib:get-property="operating-mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75370">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_operating_mode() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8973"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75380">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75372">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_used_size"
              c:identifier="udisks_vdo_volume_get_used_size"
              glib:get-property="used-size"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75547">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8985"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75555">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75549">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vdo_pool"
              c:identifier="udisks_vdo_volume_get_vdo_pool"
              glib:get-property="vdo-pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75311">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_vdo_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8969"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75321">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75313">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_compression"
              c:identifier="udisks_vdo_volume_set_compression"
              glib:set-property="compression"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75604">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8989"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75606">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75607">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_compression_state"
              c:identifier="udisks_vdo_volume_set_compression_state"
              glib:set-property="compression-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75471">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8979"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75473">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75474">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_deduplication"
              c:identifier="udisks_vdo_volume_set_deduplication"
              glib:set-property="deduplication"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75641">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8992"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75643">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75644">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_index_state"
              c:identifier="udisks_vdo_volume_set_index_state"
              glib:set-property="index-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75530">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8983"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75532">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75533">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operating_mode"
              c:identifier="udisks_vdo_volume_set_operating_mode"
              glib:set-property="operating-mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75412">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8975"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75414">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75415">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_used_size"
              c:identifier="udisks_vdo_volume_set_used_size"
              glib:set-property="used-size"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75567">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8986"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75569">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75570">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vdo_pool"
              c:identifier="udisks_vdo_volume_set_vdo_pool"
              glib:set-property="vdo-pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75353">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8971"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75355">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75356">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="compression"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_compression"
                getter="get_compression"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75287">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="compression-state"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_compression_state"
                getter="get_compression_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75254">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="deduplication"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_deduplication"
                getter="get_deduplication"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75298">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="index-state"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_index_state"
                getter="get_index_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75265">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="operating-mode"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_operating_mode"
                getter="get_operating_mode"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75243">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="used-size"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_used_size"
                getter="get_used_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75276">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vdo-pool"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_vdo_pool"
                getter="get_vdo_pool"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75232">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-enable-compression"
                   when="last"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75102">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_enable_compression() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75113">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75105">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75106">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75107">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-deduplication"
                   when="last"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75128">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_enable_deduplication() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75139">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75131">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75132">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75133">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-statistics" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75206">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_get_statistics() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75216">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75209">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75210">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize-logical" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75154">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_resize_logical() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75165">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75157">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75158">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75159">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize-physical" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75180">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_resize_physical() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75191">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75183">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75184">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75185">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="VDOVolumeIface"
            c:type="UDisksVDOVolumeIface"
            glib:is-gtype-struct-for="VDOVolume"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="75074">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="8829"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75076">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_enable_compression">
        <callback name="handle_enable_compression">
          <source-position filename="udisks-generated.h" line="8786"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_deduplication">
        <callback name="handle_enable_deduplication">
          <source-position filename="udisks-generated.h" line="8792"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_statistics">
        <callback name="handle_get_statistics">
          <source-position filename="udisks-generated.h" line="8798"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize_logical">
        <callback name="handle_resize_logical">
          <source-position filename="udisks-generated.h" line="8803"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize_physical">
        <callback name="handle_resize_physical">
          <source-position filename="udisks-generated.h" line="8809"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_compression">
        <callback name="get_compression">
          <source-position filename="udisks-generated.h" line="8815"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75592">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75586">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_compression_state">
        <callback name="get_compression_state">
          <source-position filename="udisks-generated.h" line="8817"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75439">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75431">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_deduplication">
        <callback name="get_deduplication">
          <source-position filename="udisks-generated.h" line="8819"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75629">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75623">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_index_state">
        <callback name="get_index_state">
          <source-position filename="udisks-generated.h" line="8821"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75498">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75490">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operating_mode">
        <callback name="get_operating_mode">
          <source-position filename="udisks-generated.h" line="8823"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75380">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75372">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_used_size">
        <callback name="get_used_size">
          <source-position filename="udisks-generated.h" line="8825"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75555">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75549">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vdo_pool">
        <callback name="get_vdo_pool">
          <source-position filename="udisks-generated.h" line="8827"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75321">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75313">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="VDOVolumeProxy"
           c:symbol-prefix="vdo_volume_proxy"
           c:type="UDisksVDOVolumeProxy"
           version="2.9.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksVDOVolumeProxy"
           glib:get-type="udisks_vdo_volume_proxy_get_type"
           glib:type-struct="VDOVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="76313">The #UDisksVDOVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9018"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="VDOVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_vdo_volume_proxy_new_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76675">Finishes an operation started with udisks_vdo_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="9034"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76682">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76677">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_vdo_volume_proxy_new_for_bus_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76771">Finishes an operation started with udisks_vdo_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="9053"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76778">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76773">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_vdo_volume_proxy_new_for_bus_sync"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76798">Like udisks_vdo_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_vdo_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9056"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76813">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76800">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76801">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76802">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76803">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76804">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_vdo_volume_proxy_new_sync"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76702">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_vdo_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9037"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76717">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76704">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76705">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76706">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76707">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76708">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_vdo_volume_proxy_new"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76643">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_proxy_new_finish() to get the result of the operation.

See udisks_vdo_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9026"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76645">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76646">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76647">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76648">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76649">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76650">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76651">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_vdo_volume_proxy_new_for_bus"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76739">Like udisks_vdo_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_vdo_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9045"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76741">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76742">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76743">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76744">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76745">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76746">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76747">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VDOVolumeProxyPrivate"
              c:type="UDisksVDOVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="VDOVolumeProxyClass"
            c:type="UDisksVDOVolumeProxyClass"
            glib:is-gtype-struct-for="VDOVolumeProxy"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="76321">Class structure for #UDisksVDOVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="9018"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76323">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="VDOVolumeProxyPrivate"
            c:type="UDisksVDOVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9006"/>
    </record>
    <class name="VDOVolumeSkeleton"
           c:symbol-prefix="vdo_volume_skeleton"
           c:type="UDisksVDOVolumeSkeleton"
           version="2.9.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksVDOVolumeSkeleton"
           glib:get-type="udisks_vdo_volume_skeleton_get_type"
           glib:type-struct="VDOVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="76837">The #UDisksVDOVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9088"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="VDOVolume"/>
      <constructor name="new"
                   c:identifier="udisks_vdo_volume_skeleton_new"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77372">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="9096"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77377">The skeleton object.</doc>
          <type name="VDOVolumeSkeleton" c:type="UDisksVDOVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VDOVolumeSkeletonPrivate"
              c:type="UDisksVDOVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="VDOVolumeSkeletonClass"
            c:type="UDisksVDOVolumeSkeletonClass"
            glib:is-gtype-struct-for="VDOVolumeSkeleton"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="76845">Class structure for #UDisksVDOVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="9088"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76847">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="VDOVolumeSkeletonPrivate"
            c:type="UDisksVDOVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9076"/>
    </record>
    <function-macro name="VDO_VOLUME"
                    c:identifier="UDISKS_VDO_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8773"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_VDO_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8775"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8998"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8999"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9000"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9068"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9069"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9070"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP"
                    c:identifier="UDISKS_VOLUME_GROUP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7657"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_GET_IFACE"
                    c:identifier="UDISKS_VOLUME_GROUP_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7659"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8145"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8146"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY_GET_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8147"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8215"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8216"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8217"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="VolumeGroup"
               c:symbol-prefix="volume_group"
               c:type="UDisksVolumeGroup"
               version="2.0.0"
               glib:type-name="UDisksVolumeGroup"
               glib:get-type="udisks_volume_group_get_type"
               glib:type-struct="VolumeGroupIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="66325">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7768"/>
      <function name="interface_info"
                c:identifier="udisks_volume_group_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66127">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="7776"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66132">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_volume_group_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66142">Overrides all #GObject properties in the #UDisksVolumeGroup interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="7777"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66150">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66144">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66145">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_extent_size"
                      invoker="get_extent_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66964">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7754"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66972">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66966">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_free_size"
                      invoker="get_free_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66927">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7756"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66935">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66929">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_missing_physical_volumes"
                      invoker="get_missing_physical_volumes"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67038">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_missing_physical_volumes() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7758"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67048">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67040">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66772">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7760"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66782">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66774">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_needs_polling"
                      invoker="get_needs_polling"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67001">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7762"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67009">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67003">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66890">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7764"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66898">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66892">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66831">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7766"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66841">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66833">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="7670"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_plain_volume">
        <source-position filename="udisks-generated.h" line="7676"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_plain_volume_with_layout">
        <source-position filename="udisks-generated.h" line="7683"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_layout" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_thin_pool_volume">
        <source-position filename="udisks-generated.h" line="7692"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_thin_volume">
        <source-position filename="udisks-generated.h" line="7699"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_vdo_volume">
        <source-position filename="udisks-generated.h" line="7707"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="7720"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_empty_device">
        <source-position filename="udisks-generated.h" line="7726"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_poll">
        <source-position filename="udisks-generated.h" line="7732"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="7736"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_missing_physical_volumes">
        <source-position filename="udisks-generated.h" line="7743"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rename">
        <source-position filename="udisks-generated.h" line="7748"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_volume_group_call_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67421">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_add_device_finish() to get the result of the operation.

See udisks_volume_group_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7896"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67423">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67424">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67425">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67426">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67427">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67428">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_volume_group_call_add_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67459">Finishes an operation started with udisks_volume_group_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="7904"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67467">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67461">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67462">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_volume_group_call_add_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67488">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7909"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67500">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67490">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67491">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67492">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67493">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume"
              c:identifier="udisks_volume_group_call_create_plain_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67861">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_plain_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_plain_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7976"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67863">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67864">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67865">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67866">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67867">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67868">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67869">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_finish"
              c:identifier="udisks_volume_group_call_create_plain_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67902">Finishes an operation started with udisks_volume_group_call_create_plain_volume().</doc>
        <source-position filename="udisks-generated.h" line="7985"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67911">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67904">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67905">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67906">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_plain_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_sync"
              c:identifier="udisks_volume_group_call_create_plain_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67934">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_plain_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7991"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67948">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67936">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67937">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67938">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67939">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67940">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67941">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_with_layout"
              c:identifier="udisks_volume_group_call_create_plain_volume_with_layout"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67983">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolumeWithLayout"&gt;CreatePlainVolumeWithLayout()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_plain_volume_with_layout_finish() to get the result of the operation.

See udisks_volume_group_call_create_plain_volume_with_layout_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67985">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67986">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67987">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67988">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67989">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67990">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67991">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67992">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67993">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_with_layout_finish"
              c:identifier="udisks_volume_group_call_create_plain_volume_with_layout_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68030">Finishes an operation started with udisks_volume_group_call_create_plain_volume_with_layout().</doc>
        <source-position filename="udisks-generated.h" line="8011"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68039">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68032">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68033">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68034">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_plain_volume_with_layout().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_with_layout_sync"
              c:identifier="udisks_volume_group_call_create_plain_volume_with_layout_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68062">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolumeWithLayout"&gt;CreatePlainVolumeWithLayout()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_plain_volume_with_layout() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8017"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68078">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68064">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68065">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68066">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68067">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68068">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68069">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68070">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68071">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68117">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_thin_pool_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_thin_pool_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8028"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68119">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68120">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68121">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68122">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68123">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68124">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68125">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume_finish"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68158">Finishes an operation started with udisks_volume_group_call_create_thin_pool_volume().</doc>
        <source-position filename="udisks-generated.h" line="8037"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68167">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68160">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68161">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68162">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_thin_pool_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume_sync"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68190">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_thin_pool_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8043"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68204">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68192">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68193">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68194">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68195">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68196">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68197">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume"
              c:identifier="udisks_volume_group_call_create_thin_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68239">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_thin_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_thin_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8052"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68241">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68242">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68243">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68244">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68245">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68246">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68247">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68248">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume_finish"
              c:identifier="udisks_volume_group_call_create_thin_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68283">Finishes an operation started with udisks_volume_group_call_create_thin_volume().</doc>
        <source-position filename="udisks-generated.h" line="8062"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68292">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68285">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68286">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68287">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_thin_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume_sync"
              c:identifier="udisks_volume_group_call_create_thin_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68315">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_thin_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8068"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68330">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68317">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68318">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68319">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68320">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68321">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68322">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68323">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume"
              c:identifier="udisks_volume_group_call_create_vdo_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68367">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_vdo_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_vdo_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8078"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68369">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68370">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68371">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68372">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68373">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68374">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68375">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68376">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68377">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68378">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68379">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="11">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68380">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68381">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume_finish"
              c:identifier="udisks_volume_group_call_create_vdo_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68426">Finishes an operation started with udisks_volume_group_call_create_vdo_volume().</doc>
        <source-position filename="udisks-generated.h" line="8093"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68435">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68428">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68429">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68430">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_vdo_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume_sync"
              c:identifier="udisks_volume_group_call_create_vdo_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68458">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_vdo_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8099"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68478">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68460">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68461">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68462">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68463">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68464">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68465">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68466">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68467">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68468">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68469">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68470">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68471">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_volume_group_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67195">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_delete_finish() to get the result of the operation.

See udisks_volume_group_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7854"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67197">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67198">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67199">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67200">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67201">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67202">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_volume_group_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67233">Finishes an operation started with udisks_volume_group_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="7862"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67241">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67235">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67236">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_volume_group_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67262">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7867"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67274">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67264">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67265">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67266">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67267">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device"
              c:identifier="udisks_volume_group_call_empty_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67531">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_empty_device_finish() to get the result of the operation.

See udisks_volume_group_call_empty_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7916"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67533">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67534">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67535">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67536">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67537">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67538">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device_finish"
              c:identifier="udisks_volume_group_call_empty_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67569">Finishes an operation started with udisks_volume_group_call_empty_device().</doc>
        <source-position filename="udisks-generated.h" line="7924"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67577">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67571">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67572">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_empty_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device_sync"
              c:identifier="udisks_volume_group_call_empty_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67598">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_empty_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7929"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67610">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67600">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67601">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67602">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67603">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll"
              c:identifier="udisks_volume_group_call_poll"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67097">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_poll_finish() to get the result of the operation.

See udisks_volume_group_call_poll_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7838"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67099">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67100">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67101">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67102">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll_finish"
              c:identifier="udisks_volume_group_call_poll_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67129">Finishes an operation started with udisks_volume_group_call_poll().</doc>
        <source-position filename="udisks-generated.h" line="7844"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67137">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67131">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67132">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_poll().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll_sync"
              c:identifier="udisks_volume_group_call_poll_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67158">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_poll() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7849"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67168">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67160">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67161">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_volume_group_call_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67641">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_remove_device_finish() to get the result of the operation.

See udisks_volume_group_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7936"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67643">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67644">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67645">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67646">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67647">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67648">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67649">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_volume_group_call_remove_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67682">Finishes an operation started with udisks_volume_group_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="7945"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67690">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67684">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67685">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_volume_group_call_remove_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67711">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7950"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67724">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67713">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67714">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67715">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67716">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67717">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_missing_physical_volumes"
              c:identifier="udisks_volume_group_call_remove_missing_physical_volumes"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67757">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveMissingPhysicalVolumes"&gt;RemoveMissingPhysicalVolumes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_remove_missing_physical_volumes_finish() to get the result of the operation.

See udisks_volume_group_call_remove_missing_physical_volumes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7958"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67759">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67760">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67761">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67762">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67763">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_missing_physical_volumes_finish"
              c:identifier="udisks_volume_group_call_remove_missing_physical_volumes_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67792">Finishes an operation started with udisks_volume_group_call_remove_missing_physical_volumes().</doc>
        <source-position filename="udisks-generated.h" line="7965"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67800">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67794">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67795">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_remove_missing_physical_volumes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_missing_physical_volumes_sync"
              c:identifier="udisks_volume_group_call_remove_missing_physical_volumes_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67821">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveMissingPhysicalVolumes"&gt;RemoveMissingPhysicalVolumes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_remove_missing_physical_volumes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7970"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67832">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67823">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67824">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67825">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename"
              c:identifier="udisks_volume_group_call_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67305">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_rename_finish() to get the result of the operation.

See udisks_volume_group_call_rename_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7874"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67307">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67308">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67309">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67310">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67311">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67312">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_finish"
              c:identifier="udisks_volume_group_call_rename_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67343">Finishes an operation started with udisks_volume_group_call_rename().</doc>
        <source-position filename="udisks-generated.h" line="7882"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67352">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67345">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67346">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67347">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_rename().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_sync"
              c:identifier="udisks_volume_group_call_rename_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67375">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_rename() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7888"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67388">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67377">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67378">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67379">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67380">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67381">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_volume_group_complete_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68588">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7794"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68590">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68591">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_plain_volume"
              c:identifier="udisks_volume_group_complete_create_plain_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68668">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7810"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68670">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68671">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68672">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_plain_volume_with_layout"
              c:identifier="udisks_volume_group_complete_create_plain_volume_with_layout"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68691">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolumeWithLayout"&gt;CreatePlainVolumeWithLayout()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7815"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68693">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68694">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68695">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_thin_pool_volume"
              c:identifier="udisks_volume_group_complete_create_thin_pool_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68714">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7820"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68716">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68717">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68718">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_thin_volume"
              c:identifier="udisks_volume_group_complete_create_thin_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68737">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7825"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68739">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68740">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68741">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_vdo_volume"
              c:identifier="udisks_volume_group_complete_create_vdo_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68760">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7830"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68762">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68763">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68764">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_volume_group_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68545">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7785"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68547">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68548">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_empty_device"
              c:identifier="udisks_volume_group_complete_empty_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68608">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7798"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68610">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68611">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_poll"
              c:identifier="udisks_volume_group_complete_poll"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68525">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7781"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68527">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68528">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_volume_group_complete_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68628">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7802"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68630">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68631">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_missing_physical_volumes"
              c:identifier="udisks_volume_group_complete_remove_missing_physical_volumes"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68648">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveMissingPhysicalVolumes"&gt;RemoveMissingPhysicalVolumes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7806"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68650">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68651">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rename"
              c:identifier="udisks_volume_group_complete_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68565">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7789"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68567">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68568">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68569">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_missing_physical_volumes"
              c:identifier="udisks_volume_group_dup_missing_physical_volumes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67060">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8138"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67068">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67062">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_volume_group_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66794">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8118"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66802">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66796">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_volume_group_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66853">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8122"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66861">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66855">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extent_size"
              c:identifier="udisks_volume_group_get_extent_size"
              glib:get-property="extent-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66964">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66972">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66966">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_free_size"
              c:identifier="udisks_volume_group_get_free_size"
              glib:get-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66927">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66935">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66929">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_missing_physical_volumes"
              c:identifier="udisks_volume_group_get_missing_physical_volumes"
              glib:get-property="missing-physical-volumes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67038">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_missing_physical_volumes() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8137"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67048">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67040">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_volume_group_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66772">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8117"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66782">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66774">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_polling"
              c:identifier="udisks_volume_group_get_needs_polling"
              glib:get-property="needs-polling"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67001">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67009">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67003">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_volume_group_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66890">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66898">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66892">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_volume_group_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66831">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8121"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66841">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66833">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_extent_size"
              c:identifier="udisks_volume_group_set_extent_size"
              glib:set-property="extent-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66984">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66986">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66987">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_free_size"
              c:identifier="udisks_volume_group_set_free_size"
              glib:set-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66947">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66949">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66950">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_missing_physical_volumes"
              c:identifier="udisks_volume_group_set_missing_physical_volumes"
              glib:set-property="missing-physical-volumes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67080">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67082">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67083">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_volume_group_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66814">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66816">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66817">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_needs_polling"
              c:identifier="udisks_volume_group_set_needs_polling"
              glib:set-property="needs-polling"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67021">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67023">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67024">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_volume_group_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66910">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66912">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66913">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_volume_group_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66873">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66875">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66876">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="extent-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_extent_size"
                getter="get_extent_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66737">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="free-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_free_size"
                getter="get_free_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66726">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="missing-physical-volumes"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_missing_physical_volumes"
                getter="get_missing_physical_volumes">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66759">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66693">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="needs-polling"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_needs_polling"
                getter="get_needs_polling"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66748">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66715">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66704">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66444">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66455">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66447">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66448">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66449">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-plain-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66548">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_plain_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66560">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66551">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66552">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66553">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66554">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-plain-volume-with-layout"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66575">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolumeWithLayout"&gt;CreatePlainVolumeWithLayout()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_plain_volume_with_layout() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66589">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66578">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66579">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66580">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66581">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66582">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66583">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-thin-pool-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66604">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_thin_pool_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66616">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66607">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66608">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66609">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66610">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-thin-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66631">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_thin_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66644">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66634">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66635">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66636">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66637">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66638">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-vdo-volume" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66659">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_vdo_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66677">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66662">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66663">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66664">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66665">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66666">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66667">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66668">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66669">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66670">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66671">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66392">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66403">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66395">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66396">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66397">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-empty-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66470">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_empty_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66481">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66473">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66474">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66475">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-poll" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66368">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_poll() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66377">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66371">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66496">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66508">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66499">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66500">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66501">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66502">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-missing-physical-volumes"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66523">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveMissingPhysicalVolumes"&gt;RemoveMissingPhysicalVolumes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_remove_missing_physical_volumes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66533">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66526">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66527">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rename" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66418">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_rename() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66429">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66421">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66422">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66423">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="VolumeGroupIface"
            c:type="UDisksVolumeGroupIface"
            glib:is-gtype-struct-for="VolumeGroup"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="66333">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7768"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66335">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="7670"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_plain_volume">
        <callback name="handle_create_plain_volume">
          <source-position filename="udisks-generated.h" line="7676"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_plain_volume_with_layout">
        <callback name="handle_create_plain_volume_with_layout">
          <source-position filename="udisks-generated.h" line="7683"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_layout" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_pvs" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_thin_pool_volume">
        <callback name="handle_create_thin_pool_volume">
          <source-position filename="udisks-generated.h" line="7692"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_thin_volume">
        <callback name="handle_create_thin_volume">
          <source-position filename="udisks-generated.h" line="7699"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_pool" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_vdo_volume">
        <callback name="handle_create_vdo_volume">
          <source-position filename="udisks-generated.h" line="7707"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_lv_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_pool_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_data_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_virtual_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_index_memory" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_compression" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_deduplication" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_write_policy" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="7720"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_wipe" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_empty_device">
        <callback name="handle_empty_device">
          <source-position filename="udisks-generated.h" line="7726"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_poll">
        <callback name="handle_poll">
          <source-position filename="udisks-generated.h" line="7732"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="7736"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_wipe" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_missing_physical_volumes">
        <callback name="handle_remove_missing_physical_volumes">
          <source-position filename="udisks-generated.h" line="7743"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rename">
        <callback name="handle_rename">
          <source-position filename="udisks-generated.h" line="7748"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_extent_size">
        <callback name="get_extent_size">
          <source-position filename="udisks-generated.h" line="7754"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66972">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="66966">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_free_size">
        <callback name="get_free_size">
          <source-position filename="udisks-generated.h" line="7756"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66935">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="66929">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_missing_physical_volumes">
        <callback name="get_missing_physical_volumes">
          <source-position filename="udisks-generated.h" line="7758"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67048">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67040">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="7760"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66782">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="66774">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_needs_polling">
        <callback name="get_needs_polling">
          <source-position filename="udisks-generated.h" line="7762"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67009">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67003">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="7764"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66898">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="66892">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="7766"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66841">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="66833">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="VolumeGroupProxy"
           c:symbol-prefix="volume_group_proxy"
           c:type="UDisksVolumeGroupProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksVolumeGroupProxy"
           glib:get-type="udisks_volume_group_proxy_get_type"
           glib:type-struct="VolumeGroupProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="68785">The #UDisksVolumeGroupProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="8165"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="VolumeGroup"/>
      <constructor name="new_finish"
                   c:identifier="udisks_volume_group_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69151">Finishes an operation started with udisks_volume_group_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="8181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69158">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69153">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_volume_group_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69247">Finishes an operation started with udisks_volume_group_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="8200"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69254">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69249">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_volume_group_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69274">Like udisks_volume_group_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_volume_group_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8203"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69289">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69276">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69277">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69278">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69279">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69280">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_volume_group_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69178">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_volume_group_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8184"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69193">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69180">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69181">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69182">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69183">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69184">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_volume_group_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69119">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_proxy_new_finish() to get the result of the operation.

See udisks_volume_group_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69121">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69122">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69123">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69124">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69125">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69126">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69127">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_volume_group_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69215">Like udisks_volume_group_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_volume_group_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69217">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69218">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69219">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69220">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69221">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69222">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69223">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VolumeGroupProxyPrivate"
              c:type="UDisksVolumeGroupProxyPrivate*"/>
      </field>
    </class>
    <record name="VolumeGroupProxyClass"
            c:type="UDisksVolumeGroupProxyClass"
            glib:is-gtype-struct-for="VolumeGroupProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="68793">Class structure for #UDisksVolumeGroupProxy.</doc>
      <source-position filename="udisks-generated.h" line="8165"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68795">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="VolumeGroupProxyPrivate"
            c:type="UDisksVolumeGroupProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="8153"/>
    </record>
    <class name="VolumeGroupSkeleton"
           c:symbol-prefix="volume_group_skeleton"
           c:type="UDisksVolumeGroupSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksVolumeGroupSkeleton"
           glib:get-type="udisks_volume_group_skeleton_get_type"
           glib:type-struct="VolumeGroupSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="69313">The #UDisksVolumeGroupSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="8235"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="VolumeGroup"/>
      <constructor name="new"
                   c:identifier="udisks_volume_group_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69848">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="8243"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69853">The skeleton object.</doc>
          <type name="VolumeGroupSkeleton" c:type="UDisksVolumeGroup*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VolumeGroupSkeletonPrivate"
              c:type="UDisksVolumeGroupSkeletonPrivate*"/>
      </field>
    </class>
    <record name="VolumeGroupSkeletonClass"
            c:type="UDisksVolumeGroupSkeletonClass"
            glib:is-gtype-struct-for="VolumeGroupSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="69321">Class structure for #UDisksVolumeGroupSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="8235"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69323">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="VolumeGroupSkeletonPrivate"
            c:type="UDisksVolumeGroupSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="8223"/>
    </record>
    <function name="block_interface_info"
              c:identifier="udisks_block_interface_info"
              moved-to="Block.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24544">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2578"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24549">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="block_lvm2_interface_info"
              c:identifier="udisks_block_lvm2_interface_info"
              moved-to="BlockLVM2.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62919">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="7389"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62924">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="block_lvm2_override_properties"
              c:identifier="udisks_block_lvm2_override_properties"
              moved-to="BlockLVM2.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62934">Overrides all #GObject properties in the #UDisksBlockLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="7390"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62942">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62936">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62937">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="block_override_properties"
              c:identifier="udisks_block_override_properties"
              moved-to="Block.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24557">Overrides all #GObject properties in the #UDisksBlock interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2579"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24565">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24559">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24560">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_ata_interface_info"
              c:identifier="udisks_drive_ata_interface_info"
              moved-to="DriveAta.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12330">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="1260"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12335">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_ata_override_properties"
              c:identifier="udisks_drive_ata_override_properties"
              moved-to="DriveAta.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12343">Overrides all #GObject properties in the #UDisksDriveAta interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="1261"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12351">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12345">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12346">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_interface_info"
              c:identifier="udisks_drive_interface_info"
              moved-to="Drive.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7819">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="854"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7824">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_lsm_interface_info"
              c:identifier="udisks_drive_lsm_interface_info"
              moved-to="DriveLSM.interface_info"
              version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58606">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6801"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58611">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_lsm_local_interface_info"
              c:identifier="udisks_drive_lsm_local_interface_info"
              moved-to="DriveLsmLocal.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60532">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6987"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60537">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_lsm_local_override_properties"
              c:identifier="udisks_drive_lsm_local_override_properties"
              moved-to="DriveLsmLocal.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60545">Overrides all #GObject properties in the #UDisksDriveLsmLocal interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6988"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60553">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60547">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60548">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_lsm_override_properties"
              c:identifier="udisks_drive_lsm_override_properties"
              moved-to="DriveLSM.override_properties"
              version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58621">Overrides all #GObject properties in the #UDisksDriveLSM interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6802"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58629">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58623">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58624">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_override_properties"
              c:identifier="udisks_drive_override_properties"
              moved-to="Drive.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7832">Overrides all #GObject properties in the #UDisksDrive interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="855"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7840">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7834">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7835">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="encrypted_interface_info"
              c:identifier="udisks_encrypted_interface_info"
              moved-to="Encrypted.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39089">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4372"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39094">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="encrypted_override_properties"
              c:identifier="udisks_encrypted_override_properties"
              moved-to="Encrypted.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39102">Overrides all #GObject properties in the #UDisksEncrypted interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4373"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39110">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39104">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39105">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark"
              c:identifier="udisks_error_quark"
              moved-to="Error.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="filesystem_btrfs_interface_info"
              c:identifier="udisks_filesystem_btrfs_interface_info"
              moved-to="FilesystemBTRFS.interface_info"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50314">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5739"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50319">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="filesystem_btrfs_override_properties"
              c:identifier="udisks_filesystem_btrfs_override_properties"
              moved-to="FilesystemBTRFS.override_properties"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50329">Overrides all #GObject properties in the #UDisksFilesystemBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5740"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50337">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50331">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50332">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="filesystem_interface_info"
              c:identifier="udisks_filesystem_interface_info"
              moved-to="Filesystem.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34618">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3741"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34623">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="filesystem_override_properties"
              c:identifier="udisks_filesystem_override_properties"
              moved-to="Filesystem.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34631">Overrides all #GObject properties in the #UDisksFilesystem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3742"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34639">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34633">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34634">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="iscsi_session_interface_info"
              c:identifier="udisks_iscsi_session_interface_info"
              moved-to="ISCSISession.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56394">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6562"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56399">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="iscsi_session_override_properties"
              c:identifier="udisks_iscsi_session_override_properties"
              moved-to="ISCSISession.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56407">Overrides all #GObject properties in the #UDisksISCSISession interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6563"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56415">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56409">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56410">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="job_interface_info"
              c:identifier="udisks_job_interface_info"
              moved-to="Job.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="46859">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5296"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46864">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="job_override_properties"
              c:identifier="udisks_job_override_properties"
              moved-to="Job.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="46872">Overrides all #GObject properties in the #UDisksJob interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5297"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46880">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46874">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46875">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="logical_volume_interface_info"
              c:identifier="udisks_logical_volume_interface_info"
              moved-to="LogicalVolume.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="70560">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="8357"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70565">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="logical_volume_override_properties"
              c:identifier="udisks_logical_volume_override_properties"
              moved-to="LogicalVolume.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="70575">Overrides all #GObject properties in the #UDisksLogicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="8358"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70583">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70577">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70578">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="loop_interface_info"
              c:identifier="udisks_loop_interface_info"
              moved-to="Loop.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41161">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4644"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41166">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="loop_override_properties"
              c:identifier="udisks_loop_override_properties"
              moved-to="Loop.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41174">Overrides all #GObject properties in the #UDisksLoop interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4645"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41182">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41176">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41177">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_btrfs_interface_info"
              c:identifier="udisks_manager_btrfs_interface_info"
              moved-to="ManagerBTRFS.interface_info"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48884">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5507"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48889">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_btrfs_override_properties"
              c:identifier="udisks_manager_btrfs_override_properties"
              moved-to="ManagerBTRFS.override_properties"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48899">Overrides all #GObject properties in the #UDisksManagerBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5508"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48907">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48901">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48902">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="udisks_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2320">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2325">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_iscsi_initiator_interface_info"
              c:identifier="udisks_manager_iscsi_initiator_interface_info"
              moved-to="ManagerISCSIInitiator.interface_info"
              version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="53680">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6170"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53685">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_iscsi_initiator_override_properties"
              c:identifier="udisks_manager_iscsi_initiator_override_properties"
              moved-to="ManagerISCSIInitiator.override_properties"
              version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="53695">Overrides all #GObject properties in the #UDisksManagerISCSIInitiator interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6171"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53703">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53697">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53698">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_lvm2_interface_info"
              c:identifier="udisks_manager_lvm2_interface_info"
              moved-to="ManagerLVM2.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61972">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="7220"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61977">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_lvm2_override_properties"
              c:identifier="udisks_manager_lvm2_override_properties"
              moved-to="ManagerLVM2.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61987">Overrides all #GObject properties in the #UDisksManagerLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="7221"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61995">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61989">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61990">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_nvme_interface_info"
              c:identifier="udisks_manager_nvme_interface_info"
              moved-to="ManagerNVMe.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5616">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="552"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5621">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_nvme_override_properties"
              c:identifier="udisks_manager_nvme_override_properties"
              moved-to="ManagerNVMe.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5629">Overrides all #GObject properties in the #UDisksManagerNVMe interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="553"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5637">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5631">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5632">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_override_properties"
              c:identifier="udisks_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2333">Overrides all #GObject properties in the #UDisksManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="109"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2341">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2335">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2336">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mdraid_interface_info"
              c:identifier="udisks_mdraid_interface_info"
              moved-to="MDRaid.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43147">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4910"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43152">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="mdraid_override_properties"
              c:identifier="udisks_mdraid_override_properties"
              moved-to="MDRaid.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43162">Overrides all #GObject properties in the #UDisksMDRaid interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4911"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43170">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43164">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43165">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="nvme_controller_interface_info"
              c:identifier="udisks_nvme_controller_interface_info"
              moved-to="NVMeController.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="16944">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="1740"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16949">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="nvme_controller_override_properties"
              c:identifier="udisks_nvme_controller_override_properties"
              moved-to="NVMeController.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="16957">Overrides all #GObject properties in the #UDisksNVMeController interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="1741"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16965">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16959">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16960">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="nvme_fabrics_interface_info"
              c:identifier="udisks_nvme_fabrics_interface_info"
              moved-to="NVMeFabrics.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22223">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2289"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22228">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="nvme_fabrics_override_properties"
              c:identifier="udisks_nvme_fabrics_override_properties"
              moved-to="NVMeFabrics.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22236">Overrides all #GObject properties in the #UDisksNVMeFabrics interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2290"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22244">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22238">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22239">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="nvme_namespace_interface_info"
              c:identifier="udisks_nvme_namespace_interface_info"
              moved-to="NVMeNamespace.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20100">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2074"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20105">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="nvme_namespace_override_properties"
              c:identifier="udisks_nvme_namespace_override_properties"
              moved-to="NVMeNamespace.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20113">Overrides all #GObject properties in the #UDisksNVMeNamespace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2075"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20121">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20115">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20116">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="partition_interface_info"
              c:identifier="udisks_partition_interface_info"
              moved-to="Partition.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31536">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3377"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31541">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="partition_override_properties"
              c:identifier="udisks_partition_override_properties"
              moved-to="Partition.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31549">Overrides all #GObject properties in the #UDisksPartition interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3378"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31557">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31551">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31552">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="partition_table_interface_info"
              c:identifier="udisks_partition_table_interface_info"
              moved-to="PartitionTable.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29612">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3103"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29617">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="partition_table_override_properties"
              c:identifier="udisks_partition_table_override_properties"
              moved-to="PartitionTable.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29625">Overrides all #GObject properties in the #UDisksPartitionTable interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29633">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29627">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29628">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="physical_volume_interface_info"
              c:identifier="udisks_physical_volume_interface_info"
              moved-to="PhysicalVolume.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64033">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="7533"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64038">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="physical_volume_override_properties"
              c:identifier="udisks_physical_volume_override_properties"
              moved-to="PhysicalVolume.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64048">Overrides all #GObject properties in the #UDisksPhysicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="7534"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64056">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64050">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64051">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="swapspace_interface_info"
              c:identifier="udisks_swapspace_interface_info"
              moved-to="Swapspace.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37187">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37192">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="swapspace_override_properties"
              c:identifier="udisks_swapspace_override_properties"
              moved-to="Swapspace.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37200">Overrides all #GObject properties in the #UDisksSwapspace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37208">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37202">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37203">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="udiskserror">
      <doc xml:space="preserve"
           filename="udiskserror.c"
           line="26">Error codes and D-Bus errors.</doc>
    </docsection>
    <function name="vdo_volume_interface_info"
              c:identifier="udisks_vdo_volume_interface_info"
              moved-to="VDOVolume.interface_info"
              version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="74959">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="8837"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74964">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="vdo_volume_override_properties"
              c:identifier="udisks_vdo_volume_override_properties"
              moved-to="VDOVolume.override_properties"
              version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="74974">Overrides all #GObject properties in the #UDisksVDOVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="8838"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74982">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74976">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74977">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="volume_group_interface_info"
              c:identifier="udisks_volume_group_interface_info"
              moved-to="VolumeGroup.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="66127">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="7776"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66132">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="volume_group_override_properties"
              c:identifier="udisks_volume_group_override_properties"
              moved-to="VolumeGroup.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="66142">Overrides all #GObject properties in the #UDisksVolumeGroup interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="7777"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66150">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66144">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66145">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
