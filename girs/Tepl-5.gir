<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Amtk" version="5"/>
  <include name="Gtk" version="3.0"/>
  <include name="GtkSource" version="4"/>
  <package name="tepl-5"/>
  <c:include name="tepl/tepl.h"/>
  <namespace name="Tepl"
             version="5"
             shared-library="libtepl-5.so.0"
             c:identifier-prefixes="Tepl"
             c:symbol-prefixes="tepl">
    <function-macro name="ABSTRACT_FACTORY"
                    c:identifier="TEPL_ABSTRACT_FACTORY"
                    introspectable="0">
      <source-position filename="../tepl/tepl-abstract-factory.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ABSTRACT_FACTORY_CLASS"
                    c:identifier="TEPL_ABSTRACT_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-abstract-factory.h" line="20"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ABSTRACT_FACTORY_GET_CLASS"
                    c:identifier="TEPL_ABSTRACT_FACTORY_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-abstract-factory.h" line="23"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APPLICATION"
                    c:identifier="TEPL_APPLICATION"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APPLICATION_CLASS"
                    c:identifier="TEPL_APPLICATION_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application.h" line="20"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APPLICATION_GET_CLASS"
                    c:identifier="TEPL_APPLICATION_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application.h" line="23"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APPLICATION_WINDOW"
                    c:identifier="TEPL_APPLICATION_WINDOW"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application-window.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APPLICATION_WINDOW_CLASS"
                    c:identifier="TEPL_APPLICATION_WINDOW_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application-window.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APPLICATION_WINDOW_GET_CLASS"
                    c:identifier="TEPL_APPLICATION_WINDOW_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application-window.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="AbstractFactory"
           c:symbol-prefix="abstract_factory"
           c:type="TeplAbstractFactory"
           parent="GObject.Object"
           glib:type-name="TeplAbstractFactory"
           glib:get-type="tepl_abstract_factory_get_type"
           glib:type-struct="AbstractFactoryClass">
      <source-position filename="../tepl/tepl-abstract-factory.h" line="69"/>
      <function name="get_singleton"
                c:identifier="tepl_abstract_factory_get_singleton"
                version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.c"
             line="120">Gets the #TeplAbstractFactory singleton instance.

If tepl_abstract_factory_set_singleton() has not been called, the singleton
is created with a #TeplAbstractFactory instance.</doc>
        <source-position filename="../tepl/tepl-abstract-factory.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="128">the #TeplAbstractFactory singleton instance.</doc>
          <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
        </return-value>
      </function>
      <virtual-method name="create_file" invoker="create_file" version="4.0">
        <source-position filename="../tepl/tepl-abstract-factory.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="223">a new #TeplFile.</doc>
          <type name="File" c:type="TeplFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="221">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_main_window" invoker="create_main_window">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.c"
             line="156">Creates a main #GtkApplicationWindow in the sense of
tepl_application_window_is_main_window().</doc>
        <source-position filename="../tepl/tepl-abstract-factory.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="164">a new main application window, or
%NULL if the vfunc is not implemented.</doc>
          <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="158">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
          <parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="159">a #GtkApplication.</doc>
            <type name="Gtk.Application" c:type="GtkApplication*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_metadata_manager_file"
                      invoker="create_metadata_manager_file"
                      version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.c"
             line="234">Creates a new #GFile that is then intended to be used as an argument to
tepl_metadata_manager_load_from_disk() and
tepl_metadata_manager_save_to_disk(). This function just creates the #GFile
object, it doesn't call any #TeplMetadataManager function.</doc>
        <source-position filename="../tepl/tepl-abstract-factory.h" line="65"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="243">a new #GFile, or %NULL if the vfunc is
not implemented.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="236">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_tab" invoker="create_tab" version="3.0">
        <source-position filename="../tepl/tepl-abstract-factory.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="187">a new #TeplTab.</doc>
          <type name="Tab" c:type="TeplTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="185">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_tab_label"
                      invoker="create_tab_label"
                      version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.c"
             line="198">Creates a new tab label for @tab, suitable for gtk_notebook_set_tab_label().</doc>
        <source-position filename="../tepl/tepl-abstract-factory.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="205">a new #GtkWidget, or %NULL for the
default tab label (“page N” with #GtkNotebook).</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="200">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="201">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_file"
              c:identifier="tepl_abstract_factory_create_file"
              version="4.0">
        <source-position filename="../tepl/tepl-abstract-factory.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="223">a new #TeplFile.</doc>
          <type name="File" c:type="TeplFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="221">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_main_window"
              c:identifier="tepl_abstract_factory_create_main_window">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.c"
             line="156">Creates a main #GtkApplicationWindow in the sense of
tepl_application_window_is_main_window().</doc>
        <source-position filename="../tepl/tepl-abstract-factory.h" line="81"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="164">a new main application window, or
%NULL if the vfunc is not implemented.</doc>
          <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="158">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
          <parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="159">a #GtkApplication.</doc>
            <type name="Gtk.Application" c:type="GtkApplication*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_metadata_manager_file"
              c:identifier="tepl_abstract_factory_create_metadata_manager_file"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.c"
             line="234">Creates a new #GFile that is then intended to be used as an argument to
tepl_metadata_manager_load_from_disk() and
tepl_metadata_manager_save_to_disk(). This function just creates the #GFile
object, it doesn't call any #TeplMetadataManager function.</doc>
        <source-position filename="../tepl/tepl-abstract-factory.h" line="95"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="243">a new #GFile, or %NULL if the vfunc is
not implemented.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="236">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_tab"
              c:identifier="tepl_abstract_factory_create_tab"
              version="3.0">
        <source-position filename="../tepl/tepl-abstract-factory.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="187">a new #TeplTab.</doc>
          <type name="Tab" c:type="TeplTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="185">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_tab_label"
              c:identifier="tepl_abstract_factory_create_tab_label"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.c"
             line="198">Creates a new tab label for @tab, suitable for gtk_notebook_set_tab_label().</doc>
        <source-position filename="../tepl/tepl-abstract-factory.h" line="88"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-abstract-factory.c"
               line="205">a new #GtkWidget, or %NULL for the
default tab label (“page N” with #GtkNotebook).</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="200">the #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="201">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_singleton"
              c:identifier="tepl_abstract_factory_set_singleton"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.c"
             line="91">Sets the #TeplAbstractFactory singleton. This should be called early in
main(), for example just after calling tepl_init().

This function must be called only once, before the first call to
tepl_abstract_factory_get_singleton().

Tepl takes ownership of the @factory reference.</doc>
        <source-position filename="../tepl/tepl-abstract-factory.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="93">a #TeplAbstractFactory.</doc>
            <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="AbstractFactoryClass"
            c:type="TeplAbstractFactoryClass"
            glib:is-gtype-struct-for="AbstractFactory">
      <source-position filename="../tepl/tepl-abstract-factory.h" line="69"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../tepl/tepl-abstract-factory.h"
             line="35">The parent class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="create_main_window">
        <callback name="create_main_window">
          <source-position filename="../tepl/tepl-abstract-factory.h"
                           line="55"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="164">a new main application window, or
%NULL if the vfunc is not implemented.</doc>
            <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-abstract-factory.c"
                   line="158">the #TeplAbstractFactory.</doc>
              <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
            </parameter>
            <parameter name="app" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-abstract-factory.c"
                   line="159">a #GtkApplication.</doc>
              <type name="Gtk.Application" c:type="GtkApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_tab">
        <callback name="create_tab">
          <source-position filename="../tepl/tepl-abstract-factory.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="187">a new #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-abstract-factory.c"
                   line="185">the #TeplAbstractFactory.</doc>
              <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_tab_label">
        <callback name="create_tab_label">
          <source-position filename="../tepl/tepl-abstract-factory.h"
                           line="60"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="205">a new #GtkWidget, or %NULL for the
default tab label (“page N” with #GtkNotebook).</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-abstract-factory.c"
                   line="200">the #TeplAbstractFactory.</doc>
              <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-abstract-factory.c"
                   line="201">a #TeplTab.</doc>
              <type name="Tab" c:type="TeplTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_file">
        <callback name="create_file">
          <source-position filename="../tepl/tepl-abstract-factory.h"
                           line="63"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="223">a new #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-abstract-factory.c"
                   line="221">the #TeplAbstractFactory.</doc>
              <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_metadata_manager_file">
        <callback name="create_metadata_manager_file">
          <source-position filename="../tepl/tepl-abstract-factory.h"
                           line="65"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-abstract-factory.c"
                 line="243">a new #GFile, or %NULL if the vfunc is
not implemented.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-abstract-factory.c"
                   line="236">the #TeplAbstractFactory.</doc>
              <type name="AbstractFactory" c:type="TeplAbstractFactory*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Application"
           c:symbol-prefix="application"
           c:type="TeplApplication"
           parent="GObject.Object"
           glib:type-name="TeplApplication"
           glib:get-type="tepl_application_get_type"
           glib:type-struct="ApplicationClass">
      <source-position filename="../tepl/tepl-application.h" line="41"/>
      <function name="get_default"
                c:identifier="tepl_application_get_default"
                version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="314">Convenience function that calls g_application_get_default() followed by
tepl_application_get_from_gtk_application(). The object returned by
g_application_get_default() must be a #GtkApplication.</doc>
        <source-position filename="../tepl/tepl-application.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application.c"
               line="321">the default #TeplApplication.</doc>
          <type name="Application" c:type="TeplApplication*"/>
        </return-value>
      </function>
      <function name="get_from_gtk_application"
                c:identifier="tepl_application_get_from_gtk_application"
                version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="279">Returns the #TeplApplication of @gtk_app. The returned object is guaranteed
to be the same for the lifetime of @gtk_app.</doc>
        <source-position filename="../tepl/tepl-application.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application.c"
               line="286">the #TeplApplication of @gtk_app.</doc>
          <type name="Application" c:type="TeplApplication*"/>
        </return-value>
        <parameters>
          <parameter name="gtk_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="281">a #GtkApplication.</doc>
            <type name="Gtk.Application" c:type="GtkApplication*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_active_main_window"
              c:identifier="tepl_application_get_active_main_window"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="391">Like gtk_application_get_active_window(), but returns the main window in the
sense of tepl_application_window_is_main_window().</doc>
        <source-position filename="../tepl/tepl-application.h" line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application.c"
               line="398">the active main #GtkApplicationWindow,
or %NULL.</doc>
          <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="393">a #TeplApplication.</doc>
            <type name="Application" c:type="TeplApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_action_info_store"
              c:identifier="tepl_application_get_app_action_info_store"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="350">Returns an initially empty #AmtkActionInfoStore reserved for the
application-specific actions. Libraries should not add #AmtkActionInfo's to
this store. Libraries should provide their own store if they want to share
#AmtkActionInfo's.</doc>
        <source-position filename="../tepl/tepl-application.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application.c"
               line="359">the #AmtkActionInfoStore reserved for the
application.</doc>
          <type name="Amtk.ActionInfoStore" c:type="AmtkActionInfoStore*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="352">a #TeplApplication.</doc>
            <type name="Application" c:type="TeplApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_application"
              c:identifier="tepl_application_get_application"
              version="2.0">
        <source-position filename="../tepl/tepl-application.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application.c"
               line="339">the #GtkApplication of @tepl_app.</doc>
          <type name="Gtk.Application" c:type="GtkApplication*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="337">a #TeplApplication.</doc>
            <type name="Application" c:type="TeplApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tepl_action_info_store"
              c:identifier="tepl_application_get_tepl_action_info_store"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="371">The returned #AmtkActionInfoStore contains #AmtkActionInfo's for all the
#GAction's listed in the [class description of
TeplApplicationWindow][tepl-application-window-gactions] and the [class
description of TeplApplication][tepl-application-gactions].</doc>
        <source-position filename="../tepl/tepl-application.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application.c"
               line="380">the #AmtkActionInfoStore of the Tepl library.</doc>
          <type name="Amtk.ActionInfoStore" c:type="AmtkActionInfoStore*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="373">a #TeplApplication.</doc>
            <type name="Application" c:type="TeplApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_activate"
              c:identifier="tepl_application_handle_activate"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="477">Connects a generic function handler for the #GApplication::activate signal.

If no main windows exist, it creates one with
tepl_abstract_factory_create_main_window(). If a main window already exists,
it calls gtk_window_present() on the most recently focused window of the
application.</doc>
        <source-position filename="../tepl/tepl-application.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="479">a #TeplApplication.</doc>
            <type name="Application" c:type="TeplApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_metadata"
              c:identifier="tepl_application_handle_metadata"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="640">This function:
- Connects to the #GApplication::startup signal to call
  tepl_metadata_manager_load_from_disk().
- Connects to the #GApplication::shutdown signal to call
  tepl_metadata_manager_save_to_disk() with @trim set to %TRUE.

It gets the #GFile by calling
tepl_abstract_factory_create_metadata_manager_file().</doc>
        <source-position filename="../tepl/tepl-application.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="642">a #TeplApplication.</doc>
            <type name="Application" c:type="TeplApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_open"
              c:identifier="tepl_application_handle_open"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="560">Connects a generic function handler for the #GApplication::open signal.

It calls tepl_application_window_open_file() for each #GFile to open, on the
active main window as returned by tepl_application_get_active_main_window().
If the active main window is %NULL, it creates one with
tepl_abstract_factory_create_main_window().</doc>
        <source-position filename="../tepl/tepl-application.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="562">a #TeplApplication.</doc>
            <type name="Application" c:type="TeplApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_simple"
              c:identifier="tepl_application_open_simple"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="426">Calls g_application_open() with a single file and an empty hint.</doc>
        <source-position filename="../tepl/tepl-application.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="428">a #TeplApplication.</doc>
            <type name="Application" c:type="TeplApplication*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application.c"
                 line="429">a #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <property name="application"
                version="2.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application.c"
             line="251">The #GtkApplication.</doc>
        <type name="Gtk.Application"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ApplicationPrivate" c:type="TeplApplicationPrivate*"/>
      </field>
    </class>
    <record name="ApplicationClass"
            c:type="TeplApplicationClass"
            glib:is-gtype-struct-for="Application">
      <source-position filename="../tepl/tepl-application.h" line="41"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ApplicationPrivate"
            c:type="TeplApplicationPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-application.h" line="27"/>
    </record>
    <class name="ApplicationWindow"
           c:symbol-prefix="application_window"
           c:type="TeplApplicationWindow"
           parent="GObject.Object"
           glib:type-name="TeplApplicationWindow"
           glib:get-type="tepl_application_window_get_type"
           glib:type-struct="ApplicationWindowClass">
      <source-position filename="../tepl/tepl-application-window.h" line="40"/>
      <implements name="TabGroup"/>
      <function name="get_from_gtk_application_window"
                c:identifier="tepl_application_window_get_from_gtk_application_window"
                version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application-window.c"
             line="404">Returns the #TeplApplicationWindow of @gtk_window. The returned object is
guaranteed to be the same for the lifetime of @gtk_window.</doc>
        <source-position filename="../tepl/tepl-application-window.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application-window.c"
               line="411">the #TeplApplicationWindow of @gtk_window.</doc>
          <type name="ApplicationWindow" c:type="TeplApplicationWindow*"/>
        </return-value>
        <parameters>
          <parameter name="gtk_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="406">a #GtkApplicationWindow.</doc>
            <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_main_window"
                c:identifier="tepl_application_window_is_main_window"
                version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application-window.c"
             line="614">Returns %TRUE iff @gtk_window has an associated #TeplTabGroup (i.e. if
tepl_application_window_set_tab_group() has been called).

This function takes a #GtkApplicationWindow parameter to avoid creating the
#TeplApplicationWindow object if it hasn't been created.</doc>
        <source-position filename="../tepl/tepl-application-window.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application-window.c"
               line="624">whether @gtk_window is considered a main application window.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="gtk_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="616">a #GtkApplicationWindow.</doc>
            <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_application_window"
              c:identifier="tepl_application_window_get_application_window"
              version="2.0">
        <source-position filename="../tepl/tepl-application-window.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application-window.c"
               line="443">the #GtkApplicationWindow of @tepl_window.</doc>
          <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="441">a #TeplApplicationWindow.</doc>
            <type name="ApplicationWindow" c:type="TeplApplicationWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handle_title"
              c:identifier="tepl_application_window_get_handle_title"
              version="4.0">
        <source-position filename="../tepl/tepl-application-window.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application-window.c"
               line="690">the value of the #TeplApplicationWindow:handle-title property.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="688">a #TeplApplicationWindow.</doc>
            <type name="ApplicationWindow" c:type="TeplApplicationWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_group"
              c:identifier="tepl_application_window_get_window_group"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application-window.c"
             line="643">Gets the #GtkWindowGroup in which @tepl_window resides.

You should call this function only on main windows, to add secondary windows
to the #GtkWindowGroup.</doc>
        <source-position filename="../tepl/tepl-application-window.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-application-window.c"
               line="652">the #GtkWindowGroup.</doc>
          <type name="Gtk.WindowGroup" c:type="GtkWindowGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="645">a #TeplApplicationWindow.</doc>
            <type name="ApplicationWindow" c:type="TeplApplicationWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_file"
              c:identifier="tepl_application_window_open_file"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application-window.c"
             line="726">Opens a file in @tepl_window. If the active tab is untouched (see
tepl_buffer_is_untouched()), then the file is loaded in that tab. Otherwise a
new tab is created.

This function is asynchronous, the file loading is done with the
tepl_tab_load_file() function. There is no way to know when the file loading
is finished.</doc>
        <source-position filename="../tepl/tepl-application-window.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="728">a #TeplApplicationWindow.</doc>
            <type name="ApplicationWindow" c:type="TeplApplicationWindow*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="729">a #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="jump_to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="730">whether to set the tab where the file is loaded as the active tab.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_handle_title"
              c:identifier="tepl_application_window_set_handle_title"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application-window.c"
             line="701">Sets the #TeplApplicationWindow:handle-title property.</doc>
        <source-position filename="../tepl/tepl-application-window.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="703">a #TeplApplicationWindow.</doc>
            <type name="ApplicationWindow" c:type="TeplApplicationWindow*"/>
          </instance-parameter>
          <parameter name="handle_title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="704">the new value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_group"
              c:identifier="tepl_application_window_set_tab_group"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application-window.c"
             line="550">Sets the #TeplTabGroup of @tepl_window. This function can be called only
once, it is not possible to change the #TeplTabGroup afterwards (this
restriction may be lifted in the future if there is a compelling use-case).

#TeplApplicationWindow implements the #TeplTabGroup interface by delegating
the requests to @tab_group.</doc>
        <source-position filename="../tepl/tepl-application-window.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tepl_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="552">a #TeplApplicationWindow.</doc>
            <type name="ApplicationWindow" c:type="TeplApplicationWindow*"/>
          </instance-parameter>
          <parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-application-window.c"
                 line="553">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </parameter>
        </parameters>
      </method>
      <property name="application-window"
                version="2.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application-window.c"
             line="286">The #GtkApplicationWindow.</doc>
        <type name="Gtk.ApplicationWindow"/>
      </property>
      <property name="handle-title"
                version="4.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-application-window.c"
             line="307">Whether to handle the #GtkWindow:title. The title is probably not
appropriate if a #GtkHeaderBar is used, the title is meant to be used
only for applications with a traditional UI.

If %TRUE, the title will contain:
- the #TeplBuffer:tepl-full-title of the active buffer.
- if the active view is not #GtkTextView:editable, the
  `"[Read-Only]"` string.
- the application name as returned by g_get_application_name().

If the active view is %NULL, the title contains only the application
name.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ApplicationWindowPrivate"
              c:type="TeplApplicationWindowPrivate*"/>
      </field>
    </class>
    <record name="ApplicationWindowClass"
            c:type="TeplApplicationWindowClass"
            glib:is-gtype-struct-for="ApplicationWindow">
      <source-position filename="../tepl/tepl-application-window.h" line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ApplicationWindowPrivate"
            c:type="TeplApplicationWindowPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-application-window.h" line="26"/>
    </record>
    <class name="Buffer"
           c:symbol-prefix="buffer"
           c:type="TeplBuffer"
           parent="GtkSource.Buffer"
           glib:type-name="TeplBuffer"
           glib:get-type="tepl_buffer_get_type"
           glib:type-struct="BufferClass">
      <source-position filename="../tepl/tepl-buffer.h" line="32"/>
      <constructor name="new" c:identifier="tepl_buffer_new" version="1.0">
        <source-position filename="../tepl/tepl-buffer.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-buffer.c"
               line="395">a new #TeplBuffer.</doc>
          <type name="Buffer" c:type="TeplBuffer*"/>
        </return-value>
      </constructor>
      <virtual-method name="tepl_cursor_moved">
        <source-position filename="../tepl/tepl-buffer.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_file"
              c:identifier="tepl_buffer_get_file"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="404">Returns the #TeplFile of @buffer. The returned object is guaranteed to be the
same for the lifetime of @buffer.

#TeplBuffer creates the #TeplFile with tepl_abstract_factory_create_file().</doc>
        <source-position filename="../tepl/tepl-buffer.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-buffer.c"
               line="413">the associated #TeplFile.</doc>
          <type name="File" c:type="TeplFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="406">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_title"
              c:identifier="tepl_buffer_get_full_title"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="578">Returns a title suitable for a #GtkWindow title. It contains (in that order):
- the #TeplBuffer:tepl-short-title;
- the directory path in parenthesis if the #TeplFile:location isn't
  %NULL.</doc>
        <source-position filename="../tepl/tepl-buffer.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-buffer.c"
               line="587">the @buffer full title. Free the return value with g_free() when no
longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="580">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="tepl_buffer_get_metadata"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="427">Returns the #TeplMetadata of @buffer. The returned object is guaranteed to be
the same for the lifetime of @buffer.</doc>
        <source-position filename="../tepl/tepl-buffer.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-buffer.c"
               line="434">the associated #TeplMetadata.</doc>
          <type name="Metadata" c:type="TeplMetadata*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="429">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selection_type"
              c:identifier="tepl_buffer_get_selection_type"
              version="1.0">
        <source-position filename="../tepl/tepl-buffer.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-buffer.c"
               line="691">the current #TeplSelectionType.</doc>
          <type name="SelectionType" c:type="TeplSelectionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="689">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_short_title"
              c:identifier="tepl_buffer_get_short_title"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="540">Returns a title suitable for a tab label. It contains (in that order):
- '*' if the buffer is modified;
- the #TeplFile:short-name.</doc>
        <source-position filename="../tepl/tepl-buffer.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-buffer.c"
               line="548">the @buffer short title. Free the return value with g_free() when no
longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="542">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style_scheme_id"
              c:identifier="tepl_buffer_get_style_scheme_id"
              version="2.0">
        <source-position filename="../tepl/tepl-buffer.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-buffer.c"
               line="636">the #TeplBuffer:tepl-style-scheme-id. Free with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="634">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_untouched"
              c:identifier="tepl_buffer_is_untouched"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="508">Returns whether @buffer is untouched.

This function is for example useful to know if we can re-use this buffer to
load a file, instead of opening a new tab or window.

For this function to return %TRUE, the @buffer must be empty, non-modified,
the undo/redo #GtkSourceBuffer history must be empty, and the
#TeplFile:location must be %NULL.</doc>
        <source-position filename="../tepl/tepl-buffer.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-buffer.c"
               line="521">%TRUE if @buffer has not been touched, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="510">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_metadata_from_metadata_manager"
              c:identifier="tepl_buffer_load_metadata_from_metadata_manager"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="448">Calls tepl_metadata_manager_copy_from() for #TeplFile:location (if not %NULL)
to the associated #TeplMetadata of @buffer.</doc>
        <source-position filename="../tepl/tepl-buffer.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="450">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_metadata_into_metadata_manager"
              c:identifier="tepl_buffer_save_metadata_into_metadata_manager"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="478">Calls tepl_metadata_manager_merge_into() for #TeplFile:location (if not
%NULL) from the associated #TeplMetadata of @buffer.</doc>
        <source-position filename="../tepl/tepl-buffer.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="480">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_style_scheme_id"
              c:identifier="tepl_buffer_set_style_scheme_id"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="659">Sets the #TeplBuffer:tepl-style-scheme-id property.

The #GtkSourceStyleScheme is taken from the default
#GtkSourceStyleSchemeManager as returned by
gtk_source_style_scheme_manager_get_default().</doc>
        <source-position filename="../tepl/tepl-buffer.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="661">a #TeplBuffer.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </instance-parameter>
          <parameter name="style_scheme_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-buffer.c"
                 line="662">the new value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="tepl-full-title" version="3.0" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="291">The full title. See tepl_buffer_get_full_title().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tepl-short-title"
                version="3.0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="276">The short title. See tepl_buffer_get_short_title().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tepl-style-scheme-id"
                version="2.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="306">The #GtkSourceBuffer:style-scheme ID, as a string. This property is
useful for binding it to a #GSettings key.

When the #GtkSourceBuffer:style-scheme is %NULL,
#TeplBuffer:tepl-style-scheme-id contains the empty string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GtkSource.Buffer" c:type="GtkSourceBuffer"/>
      </field>
      <glib:signal name="tepl-cursor-moved" when="first" version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.c"
             line="327">The ::tepl-cursor-moved signal is emitted when the insert mark is
moved explicitely or when the buffer changes (insert/delete).

A typical use-case for this signal is to update the cursor position
in a statusbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BufferClass"
            c:type="TeplBufferClass"
            glib:is-gtype-struct-for="Buffer">
      <source-position filename="../tepl/tepl-buffer.h" line="32"/>
      <field name="parent_class">
        <type name="GtkSource.BufferClass" c:type="GtkSourceBufferClass"/>
      </field>
      <field name="tepl_cursor_moved">
        <callback name="tepl_cursor_moved">
          <source-position filename="../tepl/tepl-buffer.h" line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Buffer" c:type="TeplBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="FILE" c:identifier="TEPL_FILE" introspectable="0">
      <source-position filename="../tepl/tepl-file.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_CLASS"
                    c:identifier="TEPL_FILE_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_GET_CLASS"
                    c:identifier="TEPL_FILE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_LOADER"
                    c:identifier="TEPL_FILE_LOADER"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-loader.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_LOADER_CLASS"
                    c:identifier="TEPL_FILE_LOADER_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-loader.h" line="20"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_LOADER_GET_CLASS"
                    c:identifier="TEPL_FILE_LOADER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-loader.h" line="23"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_SAVER"
                    c:identifier="TEPL_FILE_SAVER"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-saver.h" line="21"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_SAVER_CLASS"
                    c:identifier="TEPL_FILE_SAVER_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-saver.h" line="22"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_SAVER_GET_CLASS"
                    c:identifier="TEPL_FILE_SAVER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-saver.h" line="25"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="File"
           c:symbol-prefix="file"
           c:type="TeplFile"
           parent="GObject.Object"
           glib:type-name="TeplFile"
           glib:get-type="tepl_file_get_type"
           glib:type-struct="FileClass">
      <source-position filename="../tepl/tepl-file.h" line="40"/>
      <constructor name="new" c:identifier="tepl_file_new" version="1.0">
        <source-position filename="../tepl/tepl-file.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file.c"
               line="352">a new #TeplFile object.</doc>
          <type name="File" c:type="TeplFile*"/>
        </return-value>
      </constructor>
      <function name="chooser_set_modal"
                c:identifier="tepl_file_chooser_set_modal"
                version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-chooser.c"
             line="16">Calls either gtk_native_dialog_set_modal() or gtk_window_set_modal()
depending on the @chooser type.</doc>
        <source-position filename="../tepl/tepl-file-chooser.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-chooser.c"
                 line="18">a #GtkFileChooser.</doc>
            <type name="Gtk.FileChooser" c:type="GtkFileChooser*"/>
          </parameter>
          <parameter name="modal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-chooser.c"
                 line="19">the new value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="chooser_set_parent"
                c:identifier="tepl_file_chooser_set_parent"
                version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-chooser.c"
             line="44">Sets or unsets a parent #GtkWindow for the @chooser dialog. It calls the
right functions depending on the type of @chooser.</doc>
        <source-position filename="../tepl/tepl-file-chooser.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-chooser.c"
                 line="46">a #GtkFileChooser.</doc>
            <type name="Gtk.FileChooser" c:type="GtkFileChooser*"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-chooser.c"
                 line="47">a #GtkWindow, or %NULL.</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </function>
      <function name="chooser_show"
                c:identifier="tepl_file_chooser_show"
                version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-chooser.c"
             line="79">Calls gtk_native_dialog_show() or gtk_window_present() depending on the type
of @chooser.</doc>
        <source-position filename="../tepl/tepl-file-chooser.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-chooser.c"
                 line="81">a #GtkFileChooser.</doc>
            <type name="Gtk.FileChooser" c:type="GtkFileChooser*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_uri_to_recent_manager"
              c:identifier="tepl_file_add_uri_to_recent_manager"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.c"
             line="558">If the #TeplFile:location isn't %NULL, adds its URI to the default
#GtkRecentManager with gtk_recent_manager_add_item().</doc>
        <source-position filename="../tepl/tepl-file.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="560">a #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="tepl_file_get_location"
              version="1.0">
        <source-position filename="../tepl/tepl-file.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file.c"
               line="395">the #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="393">a #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_newline_type"
              c:identifier="tepl_file_get_newline_type"
              version="1.0">
        <source-position filename="../tepl/tepl-file.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file.c"
               line="454">the newline type.</doc>
          <type name="NewlineType" c:type="TeplNewlineType"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="452">a #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_short_name"
              c:identifier="tepl_file_get_short_name"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.c"
             line="406">Gets the @file short name. If the #TeplFile:location isn't %NULL,
returns its display-name (see #G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME).
Otherwise returns "Untitled File N", with N the Nth untitled file of the
application, starting at 1. When an untitled file is closed or its location
is set, its untitled number is released and can be used by a later file.</doc>
        <source-position filename="../tepl/tepl-file.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file.c"
               line="416">the @file short name. Free with g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="408">a #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_location"
              c:identifier="tepl_file_set_location"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.c"
             line="361">Sets the location.</doc>
        <source-position filename="../tepl/tepl-file.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="363">a #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </instance-parameter>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="364">the new #GFile, or %NULL.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mount_operation_factory"
              c:identifier="tepl_file_set_mount_operation_factory"
              version="1.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.c"
             line="465">Sets a #TeplMountOperationFactory function that will be called when a
#GMountOperation must be created. This is useful for creating a
#GtkMountOperation with the parent #GtkWindow.

If a mount operation factory isn't set, g_mount_operation_new() will be
called.</doc>
        <source-position filename="../tepl/tepl-file.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="467">a #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="468">a #TeplMountOperationFactory to call when a
  #GMountOperation is needed.</doc>
            <type name="MountOperationFactory"
                  c:type="TeplMountOperationFactory"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="470">the data to pass to the @callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file.c"
                 line="471">function to call on @user_data when the @callback is no
  longer needed, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="location"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.c"
             line="202">The location.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="newline-type" version="1.0" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.c"
             line="218">The line ending type.</doc>
        <type name="NewlineType"/>
      </property>
      <property name="short-name" version="1.0" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.c"
             line="234">The file short name. See tepl_file_get_short_name().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FilePrivate" c:type="TeplFilePrivate*"/>
      </field>
    </class>
    <record name="FileClass"
            c:type="TeplFileClass"
            glib:is-gtype-struct-for="File">
      <source-position filename="../tepl/tepl-file.h" line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="FileLoader"
           c:symbol-prefix="file_loader"
           c:type="TeplFileLoader"
           parent="GObject.Object"
           glib:type-name="TeplFileLoader"
           glib:get-type="tepl_file_loader_get_type"
           glib:type-struct="FileLoaderClass">
      <source-position filename="../tepl/tepl-file-loader.h" line="41"/>
      <constructor name="new"
                   c:identifier="tepl_file_loader_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-loader.c"
             line="234">Creates a new #TeplFileLoader object. The content is read from the #TeplFile
location.

If not already done, call tepl_file_set_location() before calling this
constructor. The previous location is anyway not needed, because as soon as
the file loading begins, the @buffer is emptied. Setting the #TeplFile
location directly permits to update the UI, to display the good location when
the file is loading.</doc>
        <source-position filename="../tepl/tepl-file-loader.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-loader.c"
               line="248">a new #TeplFileLoader object.</doc>
          <type name="FileLoader" c:type="TeplFileLoader*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="236">the #TeplBuffer to load the content into.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="237">the #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_buffer"
              c:identifier="tepl_file_loader_get_buffer"
              version="1.0">
        <source-position filename="../tepl/tepl-file-loader.h" line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-loader.c"
               line="268">the #TeplBuffer to load the content
into.</doc>
          <type name="Buffer" c:type="TeplBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="266">a #TeplFileLoader.</doc>
            <type name="FileLoader" c:type="TeplFileLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="tepl_file_loader_get_file"
              version="1.0">
        <source-position filename="../tepl/tepl-file-loader.h" line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-loader.c"
               line="284">the #TeplFile.</doc>
          <type name="File" c:type="TeplFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="282">a #TeplFileLoader.</doc>
            <type name="FileLoader" c:type="TeplFileLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="tepl_file_loader_get_location"
              version="1.0">
        <source-position filename="../tepl/tepl-file-loader.h" line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-loader.c"
               line="299">the #GFile to load.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="297">a #TeplFileLoader.</doc>
            <type name="FileLoader" c:type="TeplFileLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_async"
              c:identifier="tepl_file_loader_load_async"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-loader.c"
             line="389">Loads asynchronously the file content into the #TeplBuffer.

See the #GAsyncResult documentation to know how to use this function.</doc>
        <source-position filename="../tepl/tepl-file-loader.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="391">a #TeplFileLoader.</doc>
            <type name="FileLoader" c:type="TeplFileLoader*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="392">the I/O priority of the request. E.g. %G_PRIORITY_LOW,
  %G_PRIORITY_DEFAULT or %G_PRIORITY_HIGH.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="394">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="395">a #GAsyncReadyCallback to call when the request is
  satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="397">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="tepl_file_loader_load_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-loader.c"
             line="445">Finishes a file loading started with tepl_file_loader_load_async().</doc>
        <source-position filename="../tepl/tepl-file-loader.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-loader.c"
               line="453">whether the content has been loaded successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="447">a #TeplFileLoader.</doc>
            <type name="FileLoader" c:type="TeplFileLoader*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-loader.c"
                 line="448">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-loader.c"
             line="174">The #TeplBuffer to load the content into. The #TeplFileLoader object
has a weak reference to the buffer.</doc>
        <type name="Buffer"/>
      </property>
      <property name="file"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-loader.c"
             line="191">The #TeplFile. The #TeplFileLoader object has a weak
reference to the file.</doc>
        <type name="File"/>
      </property>
      <property name="location"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-loader.c"
             line="208">The #GFile to load. By default the location is taken from the
#TeplFile at construction time.</doc>
        <type name="Gio.File"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FileLoaderPrivate" c:type="TeplFileLoaderPrivate*"/>
      </field>
    </class>
    <record name="FileLoaderClass"
            c:type="TeplFileLoaderClass"
            glib:is-gtype-struct-for="FileLoader">
      <source-position filename="../tepl/tepl-file-loader.h" line="41"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="FileLoaderPrivate"
            c:type="TeplFileLoaderPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-file-loader.h" line="27"/>
    </record>
    <record name="FilePrivate" c:type="TeplFilePrivate" disguised="1">
      <source-position filename="../tepl/tepl-file.h" line="26"/>
    </record>
    <class name="FileSaver"
           c:symbol-prefix="file_saver"
           c:type="TeplFileSaver"
           parent="GObject.Object"
           glib:type-name="TeplFileSaver"
           glib:get-type="tepl_file_saver_get_type"
           glib:type-struct="FileSaverClass">
      <source-position filename="../tepl/tepl-file-saver.h" line="58"/>
      <constructor name="new" c:identifier="tepl_file_saver_new" version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="320">Creates a new #TeplFileSaver object. The @buffer will be saved to the
#TeplFile's location.

This constructor is suitable for a simple "save" operation, when the @file
already contains a non-%NULL #TeplFile:location.</doc>
        <source-position filename="../tepl/tepl-file-saver.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-saver.c"
               line="331">a new #TeplFileSaver object.</doc>
          <type name="FileSaver" c:type="TeplFileSaver*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="322">the #TeplBuffer to save.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="323">the #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_target"
                   c:identifier="tepl_file_saver_new_with_target"
                   version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="347">Creates a new #TeplFileSaver object with a target location. When the
file saving is finished successfully, @target_location is set to the @file's
#TeplFile:location property. If an error occurs, the previous valid
location is still available in #TeplFile.

This constructor is suitable for a "save as" operation, or for saving a new
buffer for the first time.</doc>
        <source-position filename="../tepl/tepl-file-saver.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-saver.c"
               line="361">a new #TeplFileSaver object.</doc>
          <type name="FileSaver" c:type="TeplFileSaver*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="349">the #TeplBuffer to save.</doc>
            <type name="Buffer" c:type="TeplBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="350">the #TeplFile.</doc>
            <type name="File" c:type="TeplFile*"/>
          </parameter>
          <parameter name="target_location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="351">the #GFile where to save the buffer to.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_buffer"
              c:identifier="tepl_file_saver_get_buffer"
              version="1.0">
        <source-position filename="../tepl/tepl-file-saver.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-saver.c"
               line="384">the #TeplBuffer to save.</doc>
          <type name="Buffer" c:type="TeplBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="382">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="tepl_file_saver_get_file"
              version="1.0">
        <source-position filename="../tepl/tepl-file-saver.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-saver.c"
               line="399">the #TeplFile.</doc>
          <type name="File" c:type="TeplFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="397">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="tepl_file_saver_get_flags"
              version="1.0">
        <source-position filename="../tepl/tepl-file-saver.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-saver.c"
               line="489">the flags.</doc>
          <type name="FileSaverFlags" c:type="TeplFileSaverFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="487">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="tepl_file_saver_get_location"
              version="1.0">
        <source-position filename="../tepl/tepl-file-saver.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-saver.c"
               line="414">the #GFile where to save the buffer to.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="412">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_newline_type"
              c:identifier="tepl_file_saver_get_newline_type"
              version="1.0">
        <source-position filename="../tepl/tepl-file-saver.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-saver.c"
               line="453">the newline type.</doc>
          <type name="NewlineType" c:type="TeplNewlineType"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="451">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_async"
              c:identifier="tepl_file_saver_save_async"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="559">Saves asynchronously the buffer into the file. See the #GAsyncResult
documentation to know how to use this function.</doc>
        <source-position filename="../tepl/tepl-file-saver.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="561">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="562">the I/O priority of the request. E.g. %G_PRIORITY_LOW,
  %G_PRIORITY_DEFAULT or %G_PRIORITY_HIGH.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="564">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="565">a #GAsyncReadyCallback to call when the request is
  satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="567">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="tepl_file_saver_save_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="609">Finishes a file saving started with tepl_file_saver_save_async().

If the file has been saved successfully, the following #TeplFile
properties will be updated: the location and the newline type.

gtk_text_buffer_set_modified() is called with %FALSE if the file has been
saved successfully.</doc>
        <source-position filename="../tepl/tepl-file-saver.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file-saver.c"
               line="623">whether the file was saved successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="611">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="612">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="tepl_file_saver_set_flags"
              version="1.0">
        <source-position filename="../tepl/tepl-file-saver.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="466">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="467">the new flags.</doc>
            <type name="FileSaverFlags" c:type="TeplFileSaverFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_newline_type"
              c:identifier="tepl_file_saver_set_newline_type"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="425">Sets the newline type. By default the newline type is taken from the
#TeplFile.</doc>
        <source-position filename="../tepl/tepl-file-saver.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="427">a #TeplFileSaver.</doc>
            <type name="FileSaver" c:type="TeplFileSaver*"/>
          </instance-parameter>
          <parameter name="newline_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-file-saver.c"
                 line="428">the new newline type.</doc>
            <type name="NewlineType" c:type="TeplNewlineType"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="223">The #TeplBuffer to save. The #TeplFileSaver object has a weak
reference to the buffer.</doc>
        <type name="Buffer"/>
      </property>
      <property name="file"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="240">The #TeplFile. The #TeplFileSaver object has a weak reference to the
file.</doc>
        <type name="File"/>
      </property>
      <property name="flags"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="291">File saving flags.</doc>
        <type name="FileSaverFlags"/>
      </property>
      <property name="location"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="257">The #GFile where to save the buffer. By default the location is taken
from the #TeplFile at construction time.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="newline-type"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.c"
             line="274">The newline type.</doc>
        <type name="NewlineType"/>
      </property>
      <field name="object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FileSaverPrivate" c:type="TeplFileSaverPrivate*"/>
      </field>
    </class>
    <record name="FileSaverClass"
            c:type="TeplFileSaverClass"
            glib:is-gtype-struct-for="FileSaver">
      <source-position filename="../tepl/tepl-file-saver.h" line="58"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="FileSaverFlags"
              version="1.0"
              glib:type-name="TeplFileSaverFlags"
              glib:get-type="tepl_file_saver_flags_get_type"
              c:type="TeplFileSaverFlags">
      <doc xml:space="preserve"
           filename="../tepl/tepl-file-saver.h"
           line="31">Flags to define the behavior of a #TeplFileSaver.</doc>
      <member name="none"
              value="0"
              c:identifier="TEPL_FILE_SAVER_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.h"
             line="33">No flags.</doc>
      </member>
      <member name="create_backup"
              value="1"
              c:identifier="TEPL_FILE_SAVER_FLAGS_CREATE_BACKUP"
              glib:nick="create-backup">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file-saver.h"
             line="34">Create a backup before saving the file.</doc>
      </member>
    </bitfield>
    <record name="FileSaverPrivate"
            c:type="TeplFileSaverPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-file-saver.h" line="29"/>
    </record>
    <class name="FoldRegion"
           c:symbol-prefix="fold_region"
           c:type="TeplFoldRegion"
           parent="GObject.Object"
           glib:type-name="TeplFoldRegion"
           glib:get-type="tepl_fold_region_get_type"
           glib:type-struct="FoldRegionClass">
      <source-position filename="../tepl/tepl-fold-region.h" line="28"/>
      <constructor name="new"
                   c:identifier="tepl_fold_region_new"
                   version="1.0">
        <source-position filename="../tepl/tepl-fold-region.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-fold-region.c"
               line="242">a new #TeplFoldRegion.</doc>
          <type name="FoldRegion" c:type="TeplFoldRegion*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="238">a #GtkTextBuffer.</doc>
            <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="239">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="240">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_bounds"
              c:identifier="tepl_fold_region_get_bounds"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-fold-region.c"
             line="352">Obtains iterators pointing to the start and end of the #TeplFoldRegion.</doc>
        <source-position filename="../tepl/tepl-fold-region.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-fold-region.c"
               line="360">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="354">a #TeplFoldRegion.</doc>
            <type name="FoldRegion" c:type="TeplFoldRegion*"/>
          </instance-parameter>
          <parameter name="start"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="355">iterator to initialize.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="356">iterator to initialize.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffer"
              c:identifier="tepl_fold_region_get_buffer"
              version="1.0">
        <source-position filename="../tepl/tepl-fold-region.h" line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-fold-region.c"
               line="269">the #GtkTextBuffer where the fold region
  is applied.</doc>
          <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="267">a #TeplFoldRegion.</doc>
            <type name="FoldRegion" c:type="TeplFoldRegion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folded"
              c:identifier="tepl_fold_region_get_folded"
              version="1.0">
        <source-position filename="../tepl/tepl-fold-region.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-fold-region.c"
               line="289">whether the #TeplFoldRegion is folded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="287">a #TeplFoldRegion.</doc>
            <type name="FoldRegion" c:type="TeplFoldRegion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bounds"
              c:identifier="tepl_fold_region_set_bounds"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-fold-region.c"
             line="396">Sets the start and end of the #TeplFoldRegion.</doc>
        <source-position filename="../tepl/tepl-fold-region.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="398">a #TeplFoldRegion.</doc>
            <type name="FoldRegion" c:type="TeplFoldRegion*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="399">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="400">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_folded"
              c:identifier="tepl_fold_region_set_folded"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-fold-region.c"
             line="304">Folds or unfolds the region.</doc>
        <source-position filename="../tepl/tepl-fold-region.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="306">a #TeplFoldRegion.</doc>
            <type name="FoldRegion" c:type="TeplFoldRegion*"/>
          </instance-parameter>
          <parameter name="folded" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-fold-region.c"
                 line="307">the new value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-fold-region.c"
             line="196">The #GtkTextBuffer where the fold region is applied. The
#TeplFoldRegion object has a weak reference to the buffer.</doc>
        <type name="Gtk.TextBuffer"/>
      </property>
      <property name="folded"
                version="1.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-fold-region.c"
             line="213">Whether the #TeplFoldRegion is folded or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FoldRegionClass"
            c:type="TeplFoldRegionClass"
            glib:is-gtype-struct-for="FoldRegion">
      <source-position filename="../tepl/tepl-fold-region.h" line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="GOTO_LINE_BAR"
                    c:identifier="TEPL_GOTO_LINE_BAR"
                    introspectable="0">
      <source-position filename="../tepl/tepl-goto-line-bar.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GOTO_LINE_BAR_CLASS"
                    c:identifier="TEPL_GOTO_LINE_BAR_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-goto-line-bar.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GOTO_LINE_BAR_GET_CLASS"
                    c:identifier="TEPL_GOTO_LINE_BAR_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-goto-line-bar.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="GotoLineBar"
           c:symbol-prefix="goto_line_bar"
           c:type="TeplGotoLineBar"
           parent="Gtk.Grid"
           glib:type-name="TeplGotoLineBar"
           glib:get-type="tepl_goto_line_bar_get_type"
           glib:type-struct="GotoLineBarClass">
      <source-position filename="../tepl/tepl-goto-line-bar.h" line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="tepl_goto_line_bar_new"
                   version="5.0">
        <source-position filename="../tepl/tepl-goto-line-bar.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-goto-line-bar.c"
               line="262">a new #TeplGotoLineBar widget.</doc>
          <type name="GotoLineBar" c:type="TeplGotoLineBar*"/>
        </return-value>
      </constructor>
      <method name="grab_focus_to_entry"
              c:identifier="tepl_goto_line_bar_grab_focus_to_entry"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-goto-line-bar.c"
             line="297">Calls gtk_widget_grab_focus() to the #GtkSearchEntry of @bar.</doc>
        <source-position filename="../tepl/tepl-goto-line-bar.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-goto-line-bar.c"
                 line="299">a #TeplGotoLineBar.</doc>
            <type name="GotoLineBar" c:type="TeplGotoLineBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_view"
              c:identifier="tepl_goto_line_bar_set_view"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-goto-line-bar.c"
             line="271">Sets the #TeplView. tepl_view_goto_line() will be called on @view when the
user types a line number in the #GtkSearchEntry of @bar.

Only one #TeplView can be associated per #TeplGotoLineBar.</doc>
        <source-position filename="../tepl/tepl-goto-line-bar.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-goto-line-bar.c"
                 line="273">a #TeplGotoLineBar.</doc>
            <type name="GotoLineBar" c:type="TeplGotoLineBar*"/>
          </instance-parameter>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-goto-line-bar.c"
                 line="274">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <field name="priv">
        <type name="GotoLineBarPrivate" c:type="TeplGotoLineBarPrivate*"/>
      </field>
    </class>
    <record name="GotoLineBarClass"
            c:type="TeplGotoLineBarClass"
            glib:is-gtype-struct-for="GotoLineBar">
      <source-position filename="../tepl/tepl-goto-line-bar.h" line="40"/>
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="GotoLineBarPrivate"
            c:type="TeplGotoLineBarPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-goto-line-bar.h" line="26"/>
    </record>
    <class name="GutterRendererFolds"
           c:symbol-prefix="gutter_renderer_folds"
           c:type="TeplGutterRendererFolds"
           parent="GtkSource.GutterRenderer"
           glib:type-name="TeplGutterRendererFolds"
           glib:get-type="tepl_gutter_renderer_folds_get_type"
           glib:type-struct="GutterRendererFoldsClass">
      <source-position filename="../tepl/tepl-gutter-renderer-folds.h"
                       line="29"/>
      <constructor name="new"
                   c:identifier="tepl_gutter_renderer_folds_new"
                   version="1.0">
        <source-position filename="../tepl/tepl-gutter-renderer-folds.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-gutter-renderer-folds.c"
               line="268">a new #TeplGutterRendererFolds.</doc>
          <type name="GtkSource.GutterRenderer"
                c:type="GtkSourceGutterRenderer*"/>
        </return-value>
      </constructor>
      <method name="set_state"
              c:identifier="tepl_gutter_renderer_folds_set_state"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-gutter-renderer-folds.c"
             line="277">Sets the folding state of the next cell to be drawn.

This function is intended to be called from a subclass' draw method before
chaining-up to its parent's draw method.</doc>
        <source-position filename="../tepl/tepl-gutter-renderer-folds.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-gutter-renderer-folds.c"
                 line="279">a #TeplGutterRendererFolds.</doc>
            <type name="GutterRendererFolds"
                  c:type="TeplGutterRendererFolds*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-gutter-renderer-folds.c"
                 line="280">a #TeplGutterRendererFoldsState.</doc>
            <type name="GutterRendererFoldsState"
                  c:type="TeplGutterRendererFoldsState"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GtkSource.GutterRenderer"
              c:type="GtkSourceGutterRenderer"/>
      </field>
    </class>
    <record name="GutterRendererFoldsClass"
            c:type="TeplGutterRendererFoldsClass"
            glib:is-gtype-struct-for="GutterRendererFolds">
      <source-position filename="../tepl/tepl-gutter-renderer-folds.h"
                       line="29"/>
      <field name="parent_class">
        <type name="GtkSource.GutterRendererClass"
              c:type="GtkSourceGutterRendererClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="GutterRendererFoldsState"
              version="1.0"
              glib:type-name="TeplGutterRendererFoldsState"
              glib:get-type="tepl_gutter_renderer_folds_state_get_type"
              c:type="TeplGutterRendererFoldsState">
      <doc xml:space="preserve"
           filename="../tepl/tepl-gutter-renderer-folds.h"
           line="31">The folding state at a certain line in the #GtkTextBuffer.

Since #TeplGutterRendererFolds has a flat view of the folding tree, some
states can be combined; for example, %TEPL_GUTTER_RENDERER_FOLDS_STATE_END
and %TEPL_GUTTER_RENDERER_FOLDS_STATE_CONTINUE.</doc>
      <member name="none"
              value="0"
              c:identifier="TEPL_GUTTER_RENDERER_FOLDS_STATE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-gutter-renderer-folds.h"
             line="33">No code folding here.</doc>
      </member>
      <member name="start_folded"
              value="1"
              c:identifier="TEPL_GUTTER_RENDERER_FOLDS_STATE_START_FOLDED"
              glib:nick="start-folded">
        <doc xml:space="preserve"
             filename="../tepl/tepl-gutter-renderer-folds.h"
             line="34">Start of currently folded
  fold region.</doc>
      </member>
      <member name="start_opened"
              value="2"
              c:identifier="TEPL_GUTTER_RENDERER_FOLDS_STATE_START_OPENED"
              glib:nick="start-opened">
        <doc xml:space="preserve"
             filename="../tepl/tepl-gutter-renderer-folds.h"
             line="36">Start of currently opened
  fold region.</doc>
      </member>
      <member name="continue"
              value="4"
              c:identifier="TEPL_GUTTER_RENDERER_FOLDS_STATE_CONTINUE"
              glib:nick="continue">
        <doc xml:space="preserve"
             filename="../tepl/tepl-gutter-renderer-folds.h"
             line="38">Fold region continues.</doc>
      </member>
      <member name="end"
              value="8"
              c:identifier="TEPL_GUTTER_RENDERER_FOLDS_STATE_END"
              glib:nick="end">
        <doc xml:space="preserve"
             filename="../tepl/tepl-gutter-renderer-folds.h"
             line="39">End of fold region.</doc>
      </member>
    </bitfield>
    <function-macro name="IS_ABSTRACT_FACTORY"
                    c:identifier="TEPL_IS_ABSTRACT_FACTORY"
                    introspectable="0">
      <source-position filename="../tepl/tepl-abstract-factory.h" line="21"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ABSTRACT_FACTORY_CLASS"
                    c:identifier="TEPL_IS_ABSTRACT_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-abstract-factory.h" line="22"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_APPLICATION"
                    c:identifier="TEPL_IS_APPLICATION"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application.h" line="21"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_APPLICATION_CLASS"
                    c:identifier="TEPL_IS_APPLICATION_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application.h" line="22"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_APPLICATION_WINDOW"
                    c:identifier="TEPL_IS_APPLICATION_WINDOW"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application-window.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_APPLICATION_WINDOW_CLASS"
                    c:identifier="TEPL_IS_APPLICATION_WINDOW_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-application-window.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILE"
                    c:identifier="TEPL_IS_FILE"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILE_CLASS"
                    c:identifier="TEPL_IS_FILE_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILE_LOADER"
                    c:identifier="TEPL_IS_FILE_LOADER"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-loader.h" line="21"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILE_LOADER_CLASS"
                    c:identifier="TEPL_IS_FILE_LOADER_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-loader.h" line="22"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILE_SAVER"
                    c:identifier="TEPL_IS_FILE_SAVER"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-saver.h" line="23"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILE_SAVER_CLASS"
                    c:identifier="TEPL_IS_FILE_SAVER_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-file-saver.h" line="24"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GOTO_LINE_BAR"
                    c:identifier="TEPL_IS_GOTO_LINE_BAR"
                    introspectable="0">
      <source-position filename="../tepl/tepl-goto-line-bar.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GOTO_LINE_BAR_CLASS"
                    c:identifier="TEPL_IS_GOTO_LINE_BAR_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-goto-line-bar.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LANGUAGE_CHOOSER"
                    c:identifier="TEPL_IS_LANGUAGE_CHOOSER"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LANGUAGE_CHOOSER_DIALOG"
                    c:identifier="TEPL_IS_LANGUAGE_CHOOSER_DIALOG"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                       line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LANGUAGE_CHOOSER_DIALOG_CLASS"
                    c:identifier="TEPL_IS_LANGUAGE_CHOOSER_DIALOG_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                       line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LANGUAGE_CHOOSER_WIDGET"
                    c:identifier="TEPL_IS_LANGUAGE_CHOOSER_WIDGET"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-widget.h"
                       line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LANGUAGE_CHOOSER_WIDGET_CLASS"
                    c:identifier="TEPL_IS_LANGUAGE_CHOOSER_WIDGET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-widget.h"
                       line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_METADATA"
                    c:identifier="TEPL_IS_METADATA"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_METADATA_CLASS"
                    c:identifier="TEPL_IS_METADATA_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_METADATA_MANAGER"
                    c:identifier="TEPL_IS_METADATA_MANAGER"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata-manager.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_METADATA_MANAGER_CLASS"
                    c:identifier="TEPL_IS_METADATA_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata-manager.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NOTEBOOK"
                    c:identifier="TEPL_IS_NOTEBOOK"
                    introspectable="0">
      <source-position filename="../tepl/tepl-notebook.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NOTEBOOK_CLASS"
                    c:identifier="TEPL_IS_NOTEBOOK_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-notebook.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PANEL"
                    c:identifier="TEPL_IS_PANEL"
                    introspectable="0">
      <source-position filename="../tepl/tepl-panel.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PANEL_CLASS"
                    c:identifier="TEPL_IS_PANEL_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-panel.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SPACE_DRAWER_PREFS"
                    c:identifier="TEPL_IS_SPACE_DRAWER_PREFS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-space-drawer-prefs.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SPACE_DRAWER_PREFS_CLASS"
                    c:identifier="TEPL_IS_SPACE_DRAWER_PREFS_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-space-drawer-prefs.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STATUSBAR"
                    c:identifier="TEPL_IS_STATUSBAR"
                    introspectable="0">
      <source-position filename="../tepl/tepl-statusbar.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STATUSBAR_CLASS"
                    c:identifier="TEPL_IS_STATUSBAR_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-statusbar.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STYLE_SCHEME_CHOOSER_WIDGET"
                    c:identifier="TEPL_IS_STYLE_SCHEME_CHOOSER_WIDGET"
                    introspectable="0">
      <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                       line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STYLE_SCHEME_CHOOSER_WIDGET_CLASS"
                    c:identifier="TEPL_IS_STYLE_SCHEME_CHOOSER_WIDGET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                       line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TAB"
                    c:identifier="TEPL_IS_TAB"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TAB_CLASS"
                    c:identifier="TEPL_IS_TAB_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab.h" line="23"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TAB_GROUP"
                    c:identifier="TEPL_IS_TAB_GROUP"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab-group.h" line="21"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TAB_LABEL"
                    c:identifier="TEPL_IS_TAB_LABEL"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab-label.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TAB_LABEL_CLASS"
                    c:identifier="TEPL_IS_TAB_LABEL_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab-label.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <class name="InfoBar"
           c:symbol-prefix="info_bar"
           c:type="TeplInfoBar"
           parent="Gtk.InfoBar"
           glib:type-name="TeplInfoBar"
           glib:get-type="tepl_info_bar_get_type"
           glib:type-struct="InfoBarClass">
      <source-position filename="../tepl/tepl-info-bar.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="tepl_info_bar_new" version="1.0">
        <source-position filename="../tepl/tepl-info-bar.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-info-bar.c"
               line="98">a new #TeplInfoBar.</doc>
          <type name="InfoBar" c:type="TeplInfoBar*"/>
        </return-value>
      </constructor>
      <constructor name="new_simple"
                   c:identifier="tepl_info_bar_new_simple"
                   version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-info-bar.c"
             line="107">Creates a new #TeplInfoBar with an icon (depending on @msg_type), a primary
message and a secondary message.</doc>
        <source-position filename="../tepl/tepl-info-bar.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-info-bar.c"
               line="116">a new #TeplInfoBar.</doc>
          <type name="InfoBar" c:type="TeplInfoBar*"/>
        </return-value>
        <parameters>
          <parameter name="msg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="109">the message type.</doc>
            <type name="Gtk.MessageType" c:type="GtkMessageType"/>
          </parameter>
          <parameter name="primary_msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="110">the primary message.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="secondary_msg"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="111">the secondary message, or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="create_label"
                c:identifier="tepl_info_bar_create_label"
                version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-info-bar.c"
             line="372">Utility function to create a #GtkLabel suitable for a #GtkInfoBar. The
wrapping and alignment is configured. The label is also set as selectable,
for example to copy an error message and search an explanation on the web.</doc>
        <source-position filename="../tepl/tepl-info-bar.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-info-bar.c"
               line="379">a new #GtkLabel suitable for a #GtkInfoBar.</doc>
          <type name="Gtk.Label" c:type="GtkLabel*"/>
        </return-value>
      </function>
      <method name="add_close_button"
              c:identifier="tepl_info_bar_add_close_button"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-info-bar.c"
             line="310">Calls gtk_info_bar_set_show_close_button(), and additionnally closes the
@info_bar when the #GtkInfoBar::response signal is received with the
@response_id %GTK_RESPONSE_CLOSE.</doc>
        <source-position filename="../tepl/tepl-info-bar.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="312">a #TeplInfoBar.</doc>
            <type name="InfoBar" c:type="TeplInfoBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_content_widget"
              c:identifier="tepl_info_bar_add_content_widget"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-info-bar.c"
             line="281">Adds @content to @info_bar.

#TeplInfoBar has an internal container, to be able to add the icon and add
primary or secondary messages. The internal container is added to the content
area, as returned by gtk_info_bar_get_content_area(). So if you use a
#TeplInfoBar and you need to add a custom #GtkWidget, it is better to use
this function instead of adding the #GtkWidget directly to the content area.</doc>
        <source-position filename="../tepl/tepl-info-bar.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="283">a #TeplInfoBar.</doc>
            <type name="InfoBar" c:type="TeplInfoBar*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="284">a #GtkWidget.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_icon"
              c:identifier="tepl_info_bar_add_icon"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-info-bar.c"
             line="172">Adds an icon on the left, determined by the message type. So before calling
this function, gtk_info_bar_set_message_type() must have been called.

The icon is not updated when the message type changes. Another #TeplInfoBar
must be created in that case.</doc>
        <source-position filename="../tepl/tepl-info-bar.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="174">a #TeplInfoBar.</doc>
            <type name="InfoBar" c:type="TeplInfoBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_primary_message"
              c:identifier="tepl_info_bar_add_primary_message"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-info-bar.c"
             line="213">Adds a primary message.</doc>
        <source-position filename="../tepl/tepl-info-bar.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="215">a #TeplInfoBar.</doc>
            <type name="InfoBar" c:type="TeplInfoBar*"/>
          </instance-parameter>
          <parameter name="primary_msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="216">a primary message.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_secondary_message"
              c:identifier="tepl_info_bar_add_secondary_message"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-info-bar.c"
             line="247">Adds a secondary message.</doc>
        <source-position filename="../tepl/tepl-info-bar.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="249">a #TeplInfoBar.</doc>
            <type name="InfoBar" c:type="TeplInfoBar*"/>
          </instance-parameter>
          <parameter name="secondary_msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="250">a secondary message.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_buttons_orientation"
              c:identifier="tepl_info_bar_set_buttons_orientation"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-info-bar.c"
             line="334">Sets the desired orientation (horizontal or vertical) for the action area as
returned by gtk_info_bar_get_action_area(). The action area is where the
buttons are placed.

The default value for a #TeplInfoBar is %GTK_ORIENTATION_VERTICAL. The reason
is because with a small #GtkWindow, if 3 or more buttons are shown
horizontally, there is not enough space for the text. And it can be worse
when the button labels are translated to another language. When the buttons
are packed vertically, there is usually no problem. A vertical action area
also follows the original design of #GtkInfoBar.</doc>
        <source-position filename="../tepl/tepl-info-bar.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="336">a #TeplInfoBar.</doc>
            <type name="InfoBar" c:type="TeplInfoBar*"/>
          </instance-parameter>
          <parameter name="buttons_orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-info-bar.c"
                 line="337">the desired orientation.</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.InfoBar" c:type="GtkInfoBar"/>
      </field>
    </class>
    <record name="InfoBarClass"
            c:type="TeplInfoBarClass"
            glib:is-gtype-struct-for="InfoBar">
      <source-position filename="../tepl/tepl-info-bar.h" line="28"/>
      <field name="parent_class">
        <type name="Gtk.InfoBarClass" c:type="GtkInfoBarClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="LANGUAGE_CHOOSER"
                    c:identifier="TEPL_LANGUAGE_CHOOSER"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LANGUAGE_CHOOSER_DIALOG"
                    c:identifier="TEPL_LANGUAGE_CHOOSER_DIALOG"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                       line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LANGUAGE_CHOOSER_DIALOG_CLASS"
                    c:identifier="TEPL_LANGUAGE_CHOOSER_DIALOG_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                       line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LANGUAGE_CHOOSER_DIALOG_GET_CLASS"
                    c:identifier="TEPL_LANGUAGE_CHOOSER_DIALOG_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                       line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LANGUAGE_CHOOSER_GET_INTERFACE"
                    c:identifier="TEPL_LANGUAGE_CHOOSER_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LANGUAGE_CHOOSER_WIDGET"
                    c:identifier="TEPL_LANGUAGE_CHOOSER_WIDGET"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-widget.h"
                       line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LANGUAGE_CHOOSER_WIDGET_CLASS"
                    c:identifier="TEPL_LANGUAGE_CHOOSER_WIDGET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-widget.h"
                       line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LANGUAGE_CHOOSER_WIDGET_GET_CLASS"
                    c:identifier="TEPL_LANGUAGE_CHOOSER_WIDGET_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-language-chooser-widget.h"
                       line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="LanguageChooser"
               c:symbol-prefix="language_chooser"
               c:type="TeplLanguageChooser"
               glib:type-name="TeplLanguageChooser"
               glib:get-type="tepl_language_chooser_get_type"
               glib:type-struct="LanguageChooserInterface">
      <source-position filename="../tepl/tepl-language-chooser.h" line="48"/>
      <virtual-method name="language_activated">
        <source-position filename="../tepl/tepl-language-chooser.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <type name="LanguageChooser" c:type="TeplLanguageChooser*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="select_language"
                      invoker="select_language"
                      version="5.2">
        <doc xml:space="preserve"
             filename="../tepl/tepl-language-chooser.c"
             line="79">Selects @language in the list of available languages.</doc>
        <source-position filename="../tepl/tepl-language-chooser.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-language-chooser.c"
                 line="81">a #TeplLanguageChooser.</doc>
            <type name="LanguageChooser" c:type="TeplLanguageChooser*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-language-chooser.c"
                 line="82">a #GtkSourceLanguage, or %NULL for "Plain Text".</doc>
            <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="select_language"
              c:identifier="tepl_language_chooser_select_language"
              version="5.2">
        <doc xml:space="preserve"
             filename="../tepl/tepl-language-chooser.c"
             line="79">Selects @language in the list of available languages.</doc>
        <source-position filename="../tepl/tepl-language-chooser.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-language-chooser.c"
                 line="81">a #TeplLanguageChooser.</doc>
            <type name="LanguageChooser" c:type="TeplLanguageChooser*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-language-chooser.c"
                 line="82">a #GtkSourceLanguage, or %NULL for "Plain Text".</doc>
            <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="language-activated" when="last" version="5.2">
        <doc xml:space="preserve"
             filename="../tepl/tepl-language-chooser.c"
             line="57">This signal is emitted when the user has chosen a language.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-language-chooser.c"
                 line="60">the #GtkSourceLanguage object that has been
  selected, or %NULL if "Plain Text" has been selected.</doc>
            <type name="GtkSource.Language"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <class name="LanguageChooserDialog"
           c:symbol-prefix="language_chooser_dialog"
           c:type="TeplLanguageChooserDialog"
           parent="Gtk.Dialog"
           glib:type-name="TeplLanguageChooserDialog"
           glib:get-type="tepl_language_chooser_dialog_get_type"
           glib:type-struct="LanguageChooserDialogClass">
      <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                       line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="LanguageChooser"/>
      <constructor name="new"
                   c:identifier="tepl_language_chooser_dialog_new"
                   version="5.2">
        <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-language-chooser-dialog.c"
               line="147">a new #TeplLanguageChooserDialog widget.</doc>
          <type name="LanguageChooserDialog"
                c:type="TeplLanguageChooserDialog*"/>
        </return-value>
        <parameters>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-language-chooser-dialog.c"
                 line="145">transient parent of the dialog, or %NULL.</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Gtk.Dialog" c:type="GtkDialog"/>
      </field>
      <field name="priv">
        <type name="LanguageChooserDialogPrivate"
              c:type="TeplLanguageChooserDialogPrivate*"/>
      </field>
    </class>
    <record name="LanguageChooserDialogClass"
            c:type="TeplLanguageChooserDialogClass"
            glib:is-gtype-struct-for="LanguageChooserDialog">
      <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                       line="40"/>
      <field name="parent_class">
        <type name="Gtk.DialogClass" c:type="GtkDialogClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="LanguageChooserDialogPrivate"
            c:type="TeplLanguageChooserDialogPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-language-chooser-dialog.h"
                       line="26"/>
    </record>
    <record name="LanguageChooserInterface"
            c:type="TeplLanguageChooserInterface"
            glib:is-gtype-struct-for="LanguageChooser"
            version="5.2">
      <doc xml:space="preserve"
           filename="../tepl/tepl-language-chooser.h"
           line="25">The virtual function table for #TeplLanguageChooser.</doc>
      <source-position filename="../tepl/tepl-language-chooser.h" line="48"/>
      <field name="parent_interface">
        <doc xml:space="preserve"
             filename="../tepl/tepl-language-chooser.h"
             line="27">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="select_language">
        <callback name="select_language">
          <source-position filename="../tepl/tepl-language-chooser.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-language-chooser.c"
                   line="81">a #TeplLanguageChooser.</doc>
              <type name="LanguageChooser" c:type="TeplLanguageChooser*"/>
            </parameter>
            <parameter name="language"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-language-chooser.c"
                   line="82">a #GtkSourceLanguage, or %NULL for "Plain Text".</doc>
              <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="language_activated">
        <callback name="language_activated">
          <source-position filename="../tepl/tepl-language-chooser.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="LanguageChooser" c:type="TeplLanguageChooser*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LanguageChooserWidget"
           c:symbol-prefix="language_chooser_widget"
           c:type="TeplLanguageChooserWidget"
           parent="Gtk.Grid"
           glib:type-name="TeplLanguageChooserWidget"
           glib:get-type="tepl_language_chooser_widget_get_type"
           glib:type-struct="LanguageChooserWidgetClass">
      <source-position filename="../tepl/tepl-language-chooser-widget.h"
                       line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="LanguageChooser"/>
      <constructor name="new"
                   c:identifier="tepl_language_chooser_widget_new"
                   version="5.2">
        <source-position filename="../tepl/tepl-language-chooser-widget.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-language-chooser-widget.c"
               line="499">a new #TeplLanguageChooserWidget.</doc>
          <type name="LanguageChooserWidget"
                c:type="TeplLanguageChooserWidget*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <field name="priv">
        <type name="LanguageChooserWidgetPrivate"
              c:type="TeplLanguageChooserWidgetPrivate*"/>
      </field>
    </class>
    <record name="LanguageChooserWidgetClass"
            c:type="TeplLanguageChooserWidgetClass"
            glib:is-gtype-struct-for="LanguageChooserWidget">
      <source-position filename="../tepl/tepl-language-chooser-widget.h"
                       line="40"/>
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="LanguageChooserWidgetPrivate"
            c:type="TeplLanguageChooserWidgetPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-language-chooser-widget.h"
                       line="26"/>
    </record>
    <function-macro name="METADATA"
                    c:identifier="TEPL_METADATA"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="METADATA_CLASS"
                    c:identifier="TEPL_METADATA_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="METADATA_GET_CLASS"
                    c:identifier="TEPL_METADATA_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="METADATA_MANAGER"
                    c:identifier="TEPL_METADATA_MANAGER"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata-manager.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="METADATA_MANAGER_CLASS"
                    c:identifier="TEPL_METADATA_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata-manager.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="METADATA_MANAGER_GET_CLASS"
                    c:identifier="TEPL_METADATA_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-metadata-manager.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Metadata"
           c:symbol-prefix="metadata"
           c:type="TeplMetadata"
           parent="GObject.Object"
           glib:type-name="TeplMetadata"
           glib:get-type="tepl_metadata_get_type"
           glib:type-struct="MetadataClass">
      <source-position filename="../tepl/tepl-metadata.h" line="40"/>
      <constructor name="new" c:identifier="tepl_metadata_new" version="5.0">
        <source-position filename="../tepl/tepl-metadata.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-metadata.c"
               line="84">a new, empty #TeplMetadata object.</doc>
          <type name="Metadata" c:type="TeplMetadata*"/>
        </return-value>
      </constructor>
      <method name="get" c:identifier="tepl_metadata_get" version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-metadata.c"
             line="93">Gets the value of a metadata stored in the @metadata object memory.

@key must follow [the requirements explained in the class
description][tepl-metadata-keys-requirements].</doc>
        <source-position filename="../tepl/tepl-metadata.h" line="49"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-metadata.c"
               line="103">the associated value (a UTF-8 string),
or %NULL. Free with g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata.c"
                 line="95">a #TeplMetadata.</doc>
            <type name="Metadata" c:type="TeplMetadata*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata.c"
                 line="96">a key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="tepl_metadata_set" version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-metadata.c"
             line="117">Sets or unsets @key. This function just stores the new metadata value in the
@metadata object memory.

@key must follow [the requirements explained in the class
description][tepl-metadata-keys-requirements].</doc>
        <source-position filename="../tepl/tepl-metadata.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata.c"
                 line="119">a #TeplMetadata.</doc>
            <type name="Metadata" c:type="TeplMetadata*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata.c"
                 line="120">a key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata.c"
                 line="121">a nul-terminated UTF-8 string, or %NULL to unset the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MetadataPrivate" c:type="TeplMetadataPrivate*"/>
      </field>
    </class>
    <record name="MetadataClass"
            c:type="TeplMetadataClass"
            glib:is-gtype-struct-for="Metadata">
      <source-position filename="../tepl/tepl-metadata.h" line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="MetadataManager"
           c:symbol-prefix="metadata_manager"
           c:type="TeplMetadataManager"
           parent="GObject.Object"
           glib:type-name="TeplMetadataManager"
           glib:get-type="tepl_metadata_manager_get_type"
           glib:type-struct="MetadataManagerClass">
      <source-position filename="../tepl/tepl-metadata-manager.h" line="40"/>
      <function name="get_singleton"
                c:identifier="tepl_metadata_manager_get_singleton"
                version="5.0">
        <source-position filename="../tepl/tepl-metadata-manager.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-metadata-manager.c"
               line="106">the #TeplMetadataManager singleton instance.</doc>
          <type name="MetadataManager" c:type="TeplMetadataManager*"/>
        </return-value>
      </function>
      <method name="copy_from"
              c:identifier="tepl_metadata_manager_copy_from"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-metadata-manager.c"
             line="314">Copies the metadata stored in @from_manager for @for_location into
@to_metadata.

If @to_metadata already contains a key that is also present in @from_manager,
the value in @to_metadata is overwritten.

If @to_metadata already contains a key that is not present in @from_manager,
the key/value pair is kept in @to_metadata, it is not erased.</doc>
        <source-position filename="../tepl/tepl-metadata-manager.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="from_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="316">the #TeplMetadataManager.</doc>
            <type name="MetadataManager" c:type="TeplMetadataManager*"/>
          </instance-parameter>
          <parameter name="for_location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="317">a #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="to_metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="318">a #TeplMetadata.</doc>
            <type name="Metadata" c:type="TeplMetadata*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_disk"
              c:identifier="tepl_metadata_manager_load_from_disk"
              version="5.0"
              throws="1">
        <doc xml:space="preserve"
             filename="../tepl/tepl-metadata-manager.c"
             line="196">Loads synchronously all the metadata from @from_file into @manager.

A good moment to call this function is on application startup, see the
#GApplication::startup signal.</doc>
        <source-position filename="../tepl/tepl-metadata-manager.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-metadata-manager.c"
               line="207">whether the operation was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="198">the #TeplMetadataManager.</doc>
            <type name="MetadataManager" c:type="TeplMetadataManager*"/>
          </instance-parameter>
          <parameter name="from_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="199">the #GFile to load metadata from.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge_into"
              c:identifier="tepl_metadata_manager_merge_into"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-metadata-manager.c"
             line="350">Merges the metadata from @from_metadata into @into_manager for @for_location.

If a key from @from_metadata has been set to %NULL, the key/value pair is
removed from @into_manager. In other words that key/value pair will not be
saved at all when calling tepl_metadata_manager_save_to_disk().

If @into_manager already contains a key that is not present in
@from_metadata, the key/value pair is kept in @into_manager, it is not
erased.</doc>
        <source-position filename="../tepl/tepl-metadata-manager.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="into_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="352">the #TeplMetadataManager.</doc>
            <type name="MetadataManager" c:type="TeplMetadataManager*"/>
          </instance-parameter>
          <parameter name="for_location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="353">a #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="from_metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="354">a #TeplMetadata.</doc>
            <type name="Metadata" c:type="TeplMetadata*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_disk"
              c:identifier="tepl_metadata_manager_save_to_disk"
              version="5.0"
              throws="1">
        <doc xml:space="preserve"
             filename="../tepl/tepl-metadata-manager.c"
             line="249">Saves synchronously all the metadata from @manager to @to_file. The parent
directories of @to_file are created if needed.

A good moment to call this function is on application shutdown, see the
#GApplication::shutdown signal.</doc>
        <source-position filename="../tepl/tepl-metadata-manager.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-metadata-manager.c"
               line="262">whether the operation was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="251">the #TeplMetadataManager.</doc>
            <type name="MetadataManager" c:type="TeplMetadataManager*"/>
          </instance-parameter>
          <parameter name="to_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="252">the #GFile to save metadata to.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="trim" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="253">if %TRUE, tepl_metadata_manager_trim() is called with -1.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="trim"
              c:identifier="tepl_metadata_manager_trim"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-metadata-manager.c"
             line="134">The purpose of having a maximum size is to avoid that the file on disk grows
indefinitely.

@max_number_of_locations is the maximum number of #GFile locations for which
metadata are kept. This function discards the least recently accessed
metadata if needed.

If @max_number_of_locations is -1, a default internal value is used that
should fit most applications' needs.</doc>
        <source-position filename="../tepl/tepl-metadata-manager.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="136">the #TeplMetadataManager.</doc>
            <type name="MetadataManager" c:type="TeplMetadataManager*"/>
          </instance-parameter>
          <parameter name="max_number_of_locations" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-metadata-manager.c"
                 line="137">the maximum size, or -1 for the default value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MetadataManagerPrivate"
              c:type="TeplMetadataManagerPrivate*"/>
      </field>
    </class>
    <record name="MetadataManagerClass"
            c:type="TeplMetadataManagerClass"
            glib:is-gtype-struct-for="MetadataManager">
      <source-position filename="../tepl/tepl-metadata-manager.h" line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MetadataManagerPrivate"
            c:type="TeplMetadataManagerPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-metadata-manager.h" line="26"/>
    </record>
    <record name="MetadataPrivate" c:type="TeplMetadataPrivate" disguised="1">
      <source-position filename="../tepl/tepl-metadata.h" line="26"/>
    </record>
    <callback name="MountOperationFactory"
              c:type="TeplMountOperationFactory"
              version="1.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-file.h"
           line="42">Type definition for a function that will be called to create a
#GMountOperation. This is useful for creating a #GtkMountOperation.</doc>
      <source-position filename="../tepl/tepl-file.h" line="52"/>
      <return-value>
        <type name="Gio.MountOperation" c:type="GMountOperation*"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file.h"
               line="44">a #TeplFile.</doc>
          <type name="File" c:type="TeplFile*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-file.h"
               line="45">user data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="NOTEBOOK"
                    c:identifier="TEPL_NOTEBOOK"
                    introspectable="0">
      <source-position filename="../tepl/tepl-notebook.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTEBOOK_CLASS"
                    c:identifier="TEPL_NOTEBOOK_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-notebook.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTEBOOK_GET_CLASS"
                    c:identifier="TEPL_NOTEBOOK_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-notebook.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="NewlineType"
                 version="1.0"
                 glib:type-name="TeplNewlineType"
                 glib:get-type="tepl_newline_type_get_type"
                 c:type="TeplNewlineType">
      <member name="lf"
              value="0"
              c:identifier="TEPL_NEWLINE_TYPE_LF"
              glib:nick="lf">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.h"
             line="57">line feed, used on UNIX.</doc>
      </member>
      <member name="cr"
              value="1"
              c:identifier="TEPL_NEWLINE_TYPE_CR"
              glib:nick="cr">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.h"
             line="58">carriage return, used on Mac.</doc>
      </member>
      <member name="cr_lf"
              value="2"
              c:identifier="TEPL_NEWLINE_TYPE_CR_LF"
              glib:nick="cr-lf">
        <doc xml:space="preserve"
             filename="../tepl/tepl-file.h"
             line="59">carriage return followed by a line feed, used
  on Windows.</doc>
      </member>
    </enumeration>
    <class name="Notebook"
           c:symbol-prefix="notebook"
           c:type="TeplNotebook"
           parent="Gtk.Notebook"
           glib:type-name="TeplNotebook"
           glib:get-type="tepl_notebook_get_type"
           glib:type-struct="NotebookClass">
      <source-position filename="../tepl/tepl-notebook.h" line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="TabGroup"/>
      <constructor name="new" c:identifier="tepl_notebook_new" version="3.0">
        <source-position filename="../tepl/tepl-notebook.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-notebook.c"
               line="303">a new #TeplNotebook.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="Gtk.Notebook" c:type="GtkNotebook"/>
      </field>
      <field name="priv">
        <type name="NotebookPrivate" c:type="TeplNotebookPrivate*"/>
      </field>
    </class>
    <record name="NotebookClass"
            c:type="TeplNotebookClass"
            glib:is-gtype-struct-for="Notebook">
      <source-position filename="../tepl/tepl-notebook.h" line="40"/>
      <field name="parent_class">
        <type name="Gtk.NotebookClass" c:type="GtkNotebookClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="NotebookPrivate" c:type="TeplNotebookPrivate" disguised="1">
      <source-position filename="../tepl/tepl-notebook.h" line="26"/>
    </record>
    <function-macro name="PANEL" c:identifier="TEPL_PANEL" introspectable="0">
      <source-position filename="../tepl/tepl-panel.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PANEL_CLASS"
                    c:identifier="TEPL_PANEL_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-panel.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PANEL_GET_CLASS"
                    c:identifier="TEPL_PANEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-panel.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Panel"
           c:symbol-prefix="panel"
           c:type="TeplPanel"
           parent="Gtk.Grid"
           glib:type-name="TeplPanel"
           glib:get-type="tepl_panel_get_type"
           glib:type-struct="PanelClass">
      <source-position filename="../tepl/tepl-panel.h" line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="tepl_panel_new" version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-panel.c"
             line="64">Creates a new #TeplPanel containing only an empty #GtkStack that can be
retrieved with tepl_panel_get_stack().</doc>
        <source-position filename="../tepl/tepl-panel.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-panel.c"
               line="70">a new #TeplPanel.</doc>
          <type name="Panel" c:type="TeplPanel*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_left_side_panel"
                   c:identifier="tepl_panel_new_for_left_side_panel"
                   version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-panel.c"
             line="130">Creates a new #TeplPanel intended to be used as a side panel added on the
left side inside a #GtkWindow.

It contains:
- A #GtkStackSwitcher.
- A close button that hides the #TeplPanel when clicked.
- A #GtkStack that can be retrieved with tepl_panel_get_stack().</doc>
        <source-position filename="../tepl/tepl-panel.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-panel.c"
               line="141">a new left side #TeplPanel.</doc>
          <type name="Panel" c:type="TeplPanel*"/>
        </return-value>
      </constructor>
      <method name="add_component"
              c:identifier="tepl_panel_add_component"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-panel.c"
             line="171">The equivalent of gtk_stack_add_titled(), with an optional @icon_name to set
the “icon-name” #GtkStack child property.</doc>
        <source-position filename="../tepl/tepl-panel.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="173">a #TeplPanel.</doc>
            <type name="Panel" c:type="TeplPanel*"/>
          </instance-parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="174">the child #GtkWidget to add to the #GtkStack of @panel.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="175">the name for @component.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="176">a human-readable title for @component.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="177">the icon name for @component, or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="tepl_panel_get_stack"
              version="5.0">
        <source-position filename="../tepl/tepl-panel.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-panel.c"
               line="159">the #GtkStack widget of @panel (a direct child
#GtkWidget of @panel).</doc>
          <type name="Gtk.Stack" c:type="GtkStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="157">a #TeplPanel.</doc>
            <type name="Panel" c:type="TeplPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="provide_active_component_gsetting"
              c:identifier="tepl_panel_provide_active_component_gsetting"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-panel.c"
             line="207">Provides a #GSettings key for saving and restoring the
#GtkStack:visible-child-name property of the #GtkStack belonging to @panel.

This function just stores @settings and @setting_key for further use by
tepl_panel_restore_state_from_gsettings() and
tepl_panel_save_state_to_gsettings().

Note that only one @settings/@setting_key pair is stored by @panel for
further use, if you call this function twice on the same @panel, the second
call overrides the first one.</doc>
        <source-position filename="../tepl/tepl-panel.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="209">a #TeplPanel.</doc>
            <type name="Panel" c:type="TeplPanel*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="210">a #GSettings object.</doc>
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
          <parameter name="setting_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="211">a #GSettings key of type string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_state_from_gsettings"
              c:identifier="tepl_panel_restore_state_from_gsettings"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-panel.c"
             line="241">Restores the state of @panel according to the provided #GSettings.

This function must be called when all components have been added to the
#GtkStack of @panel.</doc>
        <source-position filename="../tepl/tepl-panel.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="243">a #TeplPanel.</doc>
            <type name="Panel" c:type="TeplPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_state_to_gsettings"
              c:identifier="tepl_panel_save_state_to_gsettings"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-panel.c"
             line="283">Saves the current state of @panel to the provided #GSettings.</doc>
        <source-position filename="../tepl/tepl-panel.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-panel.c"
                 line="285">a #TeplPanel.</doc>
            <type name="Panel" c:type="TeplPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <field name="priv">
        <type name="PanelPrivate" c:type="TeplPanelPrivate*"/>
      </field>
    </class>
    <record name="PanelClass"
            c:type="TeplPanelClass"
            glib:is-gtype-struct-for="Panel">
      <source-position filename="../tepl/tepl-panel.h" line="40"/>
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="PanelPrivate" c:type="TeplPanelPrivate" disguised="1">
      <source-position filename="../tepl/tepl-panel.h" line="26"/>
    </record>
    <function-macro name="SPACE_DRAWER_PREFS"
                    c:identifier="TEPL_SPACE_DRAWER_PREFS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-space-drawer-prefs.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SPACE_DRAWER_PREFS_CLASS"
                    c:identifier="TEPL_SPACE_DRAWER_PREFS_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-space-drawer-prefs.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SPACE_DRAWER_PREFS_GET_CLASS"
                    c:identifier="TEPL_SPACE_DRAWER_PREFS_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-space-drawer-prefs.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUSBAR"
                    c:identifier="TEPL_STATUSBAR"
                    introspectable="0">
      <source-position filename="../tepl/tepl-statusbar.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUSBAR_CLASS"
                    c:identifier="TEPL_STATUSBAR_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-statusbar.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUSBAR_GET_CLASS"
                    c:identifier="TEPL_STATUSBAR_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-statusbar.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STYLE_SCHEME_CHOOSER_WIDGET"
                    c:identifier="TEPL_STYLE_SCHEME_CHOOSER_WIDGET"
                    introspectable="0">
      <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                       line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STYLE_SCHEME_CHOOSER_WIDGET_CLASS"
                    c:identifier="TEPL_STYLE_SCHEME_CHOOSER_WIDGET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                       line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STYLE_SCHEME_CHOOSER_WIDGET_GET_CLASS"
                    c:identifier="TEPL_STYLE_SCHEME_CHOOSER_WIDGET_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                       line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="SelectionType"
                 version="1.0"
                 glib:type-name="TeplSelectionType"
                 glib:get-type="tepl_selection_type_get_type"
                 c:type="TeplSelectionType">
      <member name="no_selection"
              value="0"
              c:identifier="TEPL_SELECTION_TYPE_NO_SELECTION"
              glib:nick="no-selection">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.h"
             line="36">No selection.</doc>
      </member>
      <member name="on_same_line"
              value="1"
              c:identifier="TEPL_SELECTION_TYPE_ON_SAME_LINE"
              glib:nick="on-same-line">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.h"
             line="37">The start and end selection bounds are on
  the same line.</doc>
      </member>
      <member name="multiple_lines"
              value="2"
              c:identifier="TEPL_SELECTION_TYPE_MULTIPLE_LINES"
              glib:nick="multiple-lines">
        <doc xml:space="preserve"
             filename="../tepl/tepl-buffer.h"
             line="39">The selection spans multiple lines.</doc>
      </member>
    </enumeration>
    <class name="SpaceDrawerPrefs"
           c:symbol-prefix="space_drawer_prefs"
           c:type="TeplSpaceDrawerPrefs"
           parent="Gtk.Grid"
           glib:type-name="TeplSpaceDrawerPrefs"
           glib:get-type="tepl_space_drawer_prefs_get_type"
           glib:type-struct="SpaceDrawerPrefsClass">
      <source-position filename="../tepl/tepl-space-drawer-prefs.h" line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="tepl_space_drawer_prefs_new"
                   version="5.2">
        <source-position filename="../tepl/tepl-space-drawer-prefs.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-space-drawer-prefs.c"
               line="368">a new #TeplSpaceDrawerPrefs.</doc>
          <type name="SpaceDrawerPrefs" c:type="TeplSpaceDrawerPrefs*"/>
        </return-value>
      </constructor>
      <method name="get_space_drawer"
              c:identifier="tepl_space_drawer_prefs_get_space_drawer"
              version="5.2">
        <doc xml:space="preserve"
             filename="../tepl/tepl-space-drawer-prefs.c"
             line="377">Gets the #GtkSourceSpaceDrawer associated with @prefs. The returned object is
guaranteed to be the same for the lifetime of @prefs. Each
#TeplSpaceDrawerPrefs object has a different #GtkSourceSpaceDrawer.</doc>
        <source-position filename="../tepl/tepl-space-drawer-prefs.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-space-drawer-prefs.c"
               line="385">the #GtkSourceSpaceDrawer associated with @prefs.</doc>
          <type name="GtkSource.SpaceDrawer" c:type="GtkSourceSpaceDrawer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="prefs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-space-drawer-prefs.c"
                 line="379">a #TeplSpaceDrawerPrefs.</doc>
            <type name="SpaceDrawerPrefs" c:type="TeplSpaceDrawerPrefs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <field name="priv">
        <type name="SpaceDrawerPrefsPrivate"
              c:type="TeplSpaceDrawerPrefsPrivate*"/>
      </field>
    </class>
    <record name="SpaceDrawerPrefsClass"
            c:type="TeplSpaceDrawerPrefsClass"
            glib:is-gtype-struct-for="SpaceDrawerPrefs">
      <source-position filename="../tepl/tepl-space-drawer-prefs.h" line="40"/>
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SpaceDrawerPrefsPrivate"
            c:type="TeplSpaceDrawerPrefsPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-space-drawer-prefs.h" line="26"/>
    </record>
    <class name="Statusbar"
           c:symbol-prefix="statusbar"
           c:type="TeplStatusbar"
           parent="Gtk.Statusbar"
           glib:type-name="TeplStatusbar"
           glib:get-type="tepl_statusbar_get_type"
           glib:type-struct="StatusbarClass">
      <source-position filename="../tepl/tepl-statusbar.h" line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="tepl_statusbar_new" version="5.0">
        <source-position filename="../tepl/tepl-statusbar.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-statusbar.c"
               line="68">a new #TeplStatusbar.</doc>
          <type name="Statusbar" c:type="TeplStatusbar*"/>
        </return-value>
      </constructor>
      <method name="hide_cursor_position"
              c:identifier="tepl_statusbar_hide_cursor_position"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-statusbar.c"
             line="111">The reverse action of tepl_statusbar_show_cursor_position(). This function
hides the text used to show the line and column numbers.</doc>
        <source-position filename="../tepl/tepl-statusbar.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="statusbar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-statusbar.c"
                 line="113">a #TeplStatusbar.</doc>
            <type name="Statusbar" c:type="TeplStatusbar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_tab_group"
              c:identifier="tepl_statusbar_set_tab_group"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-statusbar.c"
             line="194">Calls tepl_statusbar_show_cursor_position() and
tepl_statusbar_hide_cursor_position() according to the
#TeplTabGroup:active-view of @tab_group, and the
#TeplBuffer::tepl-cursor-moved signal.

For the column number it uses the gtk_source_view_get_visual_column()
function.

This function can be called only once, it is not possible to change the
#TeplTabGroup afterwards (this restriction may be lifted in the future if
there is a compelling use-case).</doc>
        <source-position filename="../tepl/tepl-statusbar.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="statusbar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-statusbar.c"
                 line="196">a #TeplStatusbar.</doc>
            <type name="Statusbar" c:type="TeplStatusbar*"/>
          </instance-parameter>
          <parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-statusbar.c"
                 line="197">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_cursor_position"
              c:identifier="tepl_statusbar_show_cursor_position"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-statusbar.c"
             line="77">Shows the line and column numbers on the right side of the @statusbar. (So
messages added with gtk_statusbar_push() are still visible after calling this
function).</doc>
        <source-position filename="../tepl/tepl-statusbar.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="statusbar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-statusbar.c"
                 line="79">a #TeplStatusbar.</doc>
            <type name="Statusbar" c:type="TeplStatusbar*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-statusbar.c"
                 line="80">the line number, must be &gt;= 1.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-statusbar.c"
                 line="81">the column number, must be &gt;= 1.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Statusbar" c:type="GtkStatusbar"/>
      </field>
      <field name="priv">
        <type name="StatusbarPrivate" c:type="TeplStatusbarPrivate*"/>
      </field>
    </class>
    <record name="StatusbarClass"
            c:type="TeplStatusbarClass"
            glib:is-gtype-struct-for="Statusbar">
      <source-position filename="../tepl/tepl-statusbar.h" line="40"/>
      <field name="parent_class">
        <type name="Gtk.StatusbarClass" c:type="GtkStatusbarClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StatusbarPrivate"
            c:type="TeplStatusbarPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-statusbar.h" line="26"/>
    </record>
    <class name="StyleSchemeChooserWidget"
           c:symbol-prefix="style_scheme_chooser_widget"
           c:type="TeplStyleSchemeChooserWidget"
           parent="Gtk.Bin"
           glib:type-name="TeplStyleSchemeChooserWidget"
           glib:get-type="tepl_style_scheme_chooser_widget_get_type"
           glib:type-struct="StyleSchemeChooserWidgetClass">
      <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                       line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="GtkSource.StyleSchemeChooser"/>
      <constructor name="new"
                   c:identifier="tepl_style_scheme_chooser_widget_new"
                   version="5.0">
        <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-style-scheme-chooser-widget.c"
               line="413">a new #TeplStyleSchemeChooserWidget.</doc>
          <type name="StyleSchemeChooserWidget"
                c:type="TeplStyleSchemeChooserWidget*"/>
        </return-value>
      </constructor>
      <method name="get_style_scheme_id"
              c:identifier="tepl_style_scheme_chooser_widget_get_style_scheme_id"
              version="5.0">
        <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../tepl/tepl-style-scheme-chooser-widget.c"
               line="426">the value of the #TeplStyleSchemeChooserWidget:tepl-style-scheme-id
property. Free with g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-style-scheme-chooser-widget.c"
                 line="424">a #TeplStyleSchemeChooserWidget.</doc>
            <type name="StyleSchemeChooserWidget"
                  c:type="TeplStyleSchemeChooserWidget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_style_scheme_id"
              c:identifier="tepl_style_scheme_chooser_widget_set_style_scheme_id"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-style-scheme-chooser-widget.c"
             line="452">Sets the #TeplStyleSchemeChooserWidget:tepl-style-scheme-id property.

The #GtkSourceStyleScheme is taken from the default
#GtkSourceStyleSchemeManager as returned by
gtk_source_style_scheme_manager_get_default().</doc>
        <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-style-scheme-chooser-widget.c"
                 line="454">a #TeplStyleSchemeChooserWidget.</doc>
            <type name="StyleSchemeChooserWidget"
                  c:type="TeplStyleSchemeChooserWidget*"/>
          </instance-parameter>
          <parameter name="style_scheme_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-style-scheme-chooser-widget.c"
                 line="455">the new value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="tepl-style-scheme-id"
                version="5.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-style-scheme-chooser-widget.c"
             line="175">The #GtkSourceStyleSchemeChooser:style-scheme ID, as a string. This
property is useful for binding it to a #GSettings key.

When the #GtkSourceStyleSchemeChooser:style-scheme is %NULL, this
property contains the empty string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <field name="priv">
        <type name="StyleSchemeChooserWidgetPrivate"
              c:type="TeplStyleSchemeChooserWidgetPrivate*"/>
      </field>
    </class>
    <record name="StyleSchemeChooserWidgetClass"
            c:type="TeplStyleSchemeChooserWidgetClass"
            glib:is-gtype-struct-for="StyleSchemeChooserWidget">
      <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                       line="40"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StyleSchemeChooserWidgetPrivate"
            c:type="TeplStyleSchemeChooserWidgetPrivate"
            disguised="1">
      <source-position filename="../tepl/tepl-style-scheme-chooser-widget.h"
                       line="26"/>
    </record>
    <function-macro name="TAB" c:identifier="TEPL_TAB" introspectable="0">
      <source-position filename="../tepl/tepl-tab.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TAB_CLASS"
                    c:identifier="TEPL_TAB_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TAB_GET_CLASS"
                    c:identifier="TEPL_TAB_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab.h" line="24"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TAB_GROUP"
                    c:identifier="TEPL_TAB_GROUP"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab-group.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TAB_GROUP_GET_INTERFACE"
                    c:identifier="TEPL_TAB_GROUP_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab-group.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TAB_LABEL"
                    c:identifier="TEPL_TAB_LABEL"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab-label.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TAB_LABEL_CLASS"
                    c:identifier="TEPL_TAB_LABEL_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab-label.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TAB_LABEL_GET_CLASS"
                    c:identifier="TEPL_TAB_LABEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="../tepl/tepl-tab-label.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Tab"
           c:symbol-prefix="tab"
           c:type="TeplTab"
           parent="Gtk.Grid"
           glib:type-name="TeplTab"
           glib:get-type="tepl_tab_get_type"
           glib:type-struct="TabClass">
      <source-position filename="../tepl/tepl-tab.h" line="74"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="TabGroup"/>
      <constructor name="new" c:identifier="tepl_tab_new" version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab.c"
             line="375">Creates a new #TeplTab with a new #TeplView. The new #TeplView can be
retrieved afterwards with tepl_tab_get_view().</doc>
        <source-position filename="../tepl/tepl-tab.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab.c"
               line="381">a new #TeplTab.</doc>
          <type name="Tab" c:type="TeplTab*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_view"
                   c:identifier="tepl_tab_new_with_view"
                   version="3.0">
        <source-position filename="../tepl/tepl-tab.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab.c"
               line="394">a new #TeplTab.</doc>
          <type name="Tab" c:type="TeplTab*"/>
        </return-value>
        <parameters>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab.c"
                 line="392">the #TeplView that will be contained in the tab.</doc>
            <type name="View" c:type="TeplView*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="close_request">
        <source-position filename="../tepl/tepl-tab.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pack_goto_line_bar">
        <source-position filename="../tepl/tepl-tab.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="goto_line_bar" transfer-ownership="none">
            <type name="GotoLineBar" c:type="TeplGotoLineBar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pack_info_bar">
        <source-position filename="../tepl/tepl-tab.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="info_bar" transfer-ownership="none">
            <type name="Gtk.InfoBar" c:type="GtkInfoBar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pack_view">
        <source-position filename="../tepl/tepl-tab.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="view" transfer-ownership="none">
            <type name="View" c:type="TeplView*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_info_bar"
              c:identifier="tepl_tab_add_info_bar"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab.c"
             line="478">Attaches @info_bar to @tab.

This function calls the ::pack_info_bar virtual function.</doc>
        <source-position filename="../tepl/tepl-tab.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab.c"
                 line="480">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="info_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab.c"
                 line="481">a #GtkInfoBar.</doc>
            <type name="Gtk.InfoBar" c:type="GtkInfoBar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffer"
              c:identifier="tepl_tab_get_buffer"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab.c"
             line="422">A convenience function that calls gtk_text_view_get_buffer() on the
#TeplTab:view associated with the @tab.</doc>
        <source-position filename="../tepl/tepl-tab.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab.c"
               line="429">the #TeplBuffer of the #TeplTab:view.</doc>
          <type name="Buffer" c:type="TeplBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab.c"
                 line="424">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_goto_line_bar"
              c:identifier="tepl_tab_get_goto_line_bar"
              version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab.c"
             line="445">Gets the #TeplGotoLineBar widget belonging to @tab. The #TeplGotoLineBar must
not be destroyed by the application, the purpose of this function is to
show/hide the widget.</doc>
        <source-position filename="../tepl/tepl-tab.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab.c"
               line="453">the #TeplGotoLineBar widget belonging to @tab.</doc>
          <type name="GotoLineBar" c:type="TeplGotoLineBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab.c"
                 line="447">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view" c:identifier="tepl_tab_get_view" version="3.0">
        <source-position filename="../tepl/tepl-tab.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab.c"
               line="411">the #TeplView contained in @tab.</doc>
          <type name="View" c:type="TeplView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab.c"
                 line="409">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_file" c:identifier="tepl_tab_load_file" version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-loading.c"
             line="48">Unconditionally loads a file in @tab, regardless if there are unsaved changes
in the #GtkTextBuffer. The previous buffer content is lost.

This function is asynchronous, there is no way to know when the file loading
is finished.</doc>
        <source-position filename="../tepl/tepl-tab-loading.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-loading.c"
                 line="50">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-loading.c"
                 line="51">a #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_as_async"
              c:identifier="tepl_tab_save_as_async"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-saving.c"
             line="250">Shows a #GtkFileChooser to save the @tab to a different location, creates an
appropriate #TeplFileSaver and asynchronously runs it.

See the #GAsyncResult documentation to know how to use this function.</doc>
        <source-position filename="../tepl/tepl-tab-saving.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="252">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="253">a #GAsyncReadyCallback to call when the request is
  satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="255">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_as_async_simple"
              c:identifier="tepl_tab_save_as_async_simple"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-saving.c"
             line="336">The same as tepl_tab_save_as_async(), but without callback.

This function is useful when you don't need to know:
- when the operation is finished;
- and whether the operation ran successfully.</doc>
        <source-position filename="../tepl/tepl-tab-saving.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="338">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_as_finish"
              c:identifier="tepl_tab_save_as_finish"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-saving.c"
             line="305">Finishes a tab saving started with tepl_tab_save_as_async().</doc>
        <source-position filename="../tepl/tepl-tab-saving.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-saving.c"
               line="312">whether the tab was saved successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="307">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="308">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async"
              c:identifier="tepl_tab_save_async"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-saving.c"
             line="114">Saves asynchronously the content of the @tab. The #TeplFile:location must not
be %NULL.

See the #GAsyncResult documentation to know how to use this function.</doc>
        <source-position filename="../tepl/tepl-tab-saving.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="116">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="117">a #GAsyncReadyCallback to call when the request is
  satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="119">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async_simple"
              c:identifier="tepl_tab_save_async_simple"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-saving.c"
             line="178">The same as tepl_tab_save_async(), but without callback.

This function is useful when you don't need to know:
- when the operation is finished;
- and whether the operation ran successfully.</doc>
        <source-position filename="../tepl/tepl-tab-saving.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="180">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="tepl_tab_save_finish"
              version="4.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-saving.c"
             line="150">Finishes a tab saving started with tepl_tab_save_async().</doc>
        <source-position filename="../tepl/tepl-tab-saving.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-saving.c"
               line="157">whether the tab was saved successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="152">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-saving.c"
                 line="153">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="view"
                version="3.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab.c"
             line="295">The #TeplView contained in the tab. When this property is set, the
::pack_view virtual function is called.</doc>
        <type name="View"/>
      </property>
      <field name="parent">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <field name="priv">
        <type name="TabPrivate" c:type="TeplTabPrivate*"/>
      </field>
      <glib:signal name="close-request" when="last" version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab.c"
             line="317">The ::close-request signal is emitted when there is a request to
close the #TeplTab, for example if the user clicks on a close button.

The default object method handler does the following:
- If the buffer is not modified (according to
  gtk_text_buffer_get_modified()), close the tab.
- Else, show a message dialog to propose to save the file before
  closing.

To override the default object method handler, either override the
virtual function in a #TeplTab subclass or connect to the signal and
call g_signal_stop_emission_by_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TabClass"
            c:type="TeplTabClass"
            glib:is-gtype-struct-for="Tab">
      <source-position filename="../tepl/tepl-tab.h" line="74"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab.h"
             line="39">The parent class.</doc>
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="pack_view">
        <callback name="pack_view">
          <source-position filename="../tepl/tepl-tab.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="TeplTab*"/>
            </parameter>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="TeplView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pack_info_bar">
        <callback name="pack_info_bar">
          <source-position filename="../tepl/tepl-tab.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="TeplTab*"/>
            </parameter>
            <parameter name="info_bar" transfer-ownership="none">
              <type name="Gtk.InfoBar" c:type="GtkInfoBar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pack_goto_line_bar">
        <callback name="pack_goto_line_bar">
          <source-position filename="../tepl/tepl-tab.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="TeplTab*"/>
            </parameter>
            <parameter name="goto_line_bar" transfer-ownership="none">
              <type name="GotoLineBar" c:type="TeplGotoLineBar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close_request">
        <callback name="close_request">
          <source-position filename="../tepl/tepl-tab.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="TeplTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <interface name="TabGroup"
               c:symbol-prefix="tab_group"
               c:type="TeplTabGroup"
               glib:type-name="TeplTabGroup"
               glib:get-type="tepl_tab_group_get_type"
               glib:type-struct="TabGroupInterface">
      <source-position filename="../tepl/tepl-tab-group.h" line="62"/>
      <virtual-method name="append_tab_vfunc">
        <source-position filename="../tepl/tepl-tab-group.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="TeplTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_active_tab"
                      invoker="get_active_tab"
                      version="3.0">
        <source-position filename="../tepl/tepl-tab-group.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-group.c"
               line="195">the #TeplTab currently shown in
@tab_group.</doc>
          <type name="Tab" c:type="TeplTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="193">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tabs" invoker="get_tabs" version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="102">Gets the list of #TeplTab's contained in @tab_group.

If @tab_group contains non-#TeplTab children, those will not be present in the
returned list. In other words, it is &lt;emphasis&gt;not&lt;/emphasis&gt; guaranteed that
the index of a #TeplTab in the returned #GList has the same child index in
the @tab_group container.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="53"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-group.c"
               line="113">the list of all the
#TeplTab's contained in @tab_group.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Tab"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="104">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_active_tab"
                      invoker="set_active_tab"
                      version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="207">Sets the #TeplTabGroup:active-tab. @tab must be part of @tab_group.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="209">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="210">a #TeplTab part of @tab_group.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="append_tab"
              c:identifier="tepl_tab_group_append_tab"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="276">Appends @tab to @tab_group.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="278">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="279">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </parameter>
          <parameter name="jump_to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="280">whether to set @tab as the active tab after appending it.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_buffer"
              c:identifier="tepl_tab_group_get_active_buffer"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="255">Convenience function.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="87"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-group.c"
               line="261">the #TeplBuffer of the active tab.</doc>
          <type name="Buffer" c:type="TeplBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="257">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_tab"
              c:identifier="tepl_tab_group_get_active_tab"
              version="3.0">
        <source-position filename="../tepl/tepl-tab-group.h" line="77"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-group.c"
               line="195">the #TeplTab currently shown in
@tab_group.</doc>
          <type name="Tab" c:type="TeplTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="193">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_view"
              c:identifier="tepl_tab_group_get_active_view"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="234">Convenience function.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-group.c"
               line="240">the #TeplView of the active tab.</doc>
          <type name="View" c:type="TeplView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="236">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_buffers"
              c:identifier="tepl_tab_group_get_buffers"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="158">Convenience function.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="74"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-group.c"
               line="164">like
tepl_tab_group_get_tabs(), but returns #TeplBuffer's.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Buffer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="160">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tabs"
              c:identifier="tepl_tab_group_get_tabs"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="102">Gets the list of #TeplTab's contained in @tab_group.

If @tab_group contains non-#TeplTab children, those will not be present in the
returned list. In other words, it is &lt;emphasis&gt;not&lt;/emphasis&gt; guaranteed that
the index of a #TeplTab in the returned #GList has the same child index in
the @tab_group container.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="68"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-group.c"
               line="113">the list of all the
#TeplTab's contained in @tab_group.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Tab"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="104">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_views"
              c:identifier="tepl_tab_group_get_views"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="125">Convenience function.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="71"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-group.c"
               line="131">like
tepl_tab_group_get_tabs(), but returns #TeplView's.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="View"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="127">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active_tab"
              c:identifier="tepl_tab_group_set_active_tab"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="207">Sets the #TeplTabGroup:active-tab. @tab must be part of @tab_group.</doc>
        <source-position filename="../tepl/tepl-tab-group.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="209">a #TeplTabGroup.</doc>
            <type name="TabGroup" c:type="TeplTabGroup*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="210">a #TeplTab part of @tab_group.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-buffer" version="3.0" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="86">The #TeplBuffer of the active tab.</doc>
        <type name="Buffer"/>
      </property>
      <property name="active-tab"
                version="3.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="56">The #TeplTab currently shown.</doc>
        <type name="Tab"/>
      </property>
      <property name="active-view" version="3.0" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.c"
             line="71">The #TeplView of the active tab.</doc>
        <type name="View"/>
      </property>
    </interface>
    <record name="TabGroupInterface"
            c:type="TeplTabGroupInterface"
            glib:is-gtype-struct-for="TabGroup"
            version="3.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-tab-group.h"
           line="27">The virtual function table for #TeplTabGroup. When implementing one of the
vfunc, you can assume that the pre-conditions are already checked (the
parameters are valid).</doc>
      <source-position filename="../tepl/tepl-tab-group.h" line="62"/>
      <field name="parent_interface">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-group.h"
             line="29">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_tabs">
        <callback name="get_tabs">
          <source-position filename="../tepl/tepl-tab-group.h" line="53"/>
          <return-value transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="113">the list of all the
#TeplTab's contained in @tab_group.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Tab"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="tab_group" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-tab-group.c"
                   line="104">a #TeplTabGroup.</doc>
              <type name="TabGroup" c:type="TeplTabGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active_tab">
        <callback name="get_active_tab">
          <source-position filename="../tepl/tepl-tab-group.h" line="55"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-group.c"
                 line="195">the #TeplTab currently shown in
@tab_group.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </return-value>
          <parameters>
            <parameter name="tab_group" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-tab-group.c"
                   line="193">a #TeplTabGroup.</doc>
              <type name="TabGroup" c:type="TeplTabGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_active_tab">
        <callback name="set_active_tab">
          <source-position filename="../tepl/tepl-tab-group.h" line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tab_group" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-tab-group.c"
                   line="209">a #TeplTabGroup.</doc>
              <type name="TabGroup" c:type="TeplTabGroup*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../tepl/tepl-tab-group.c"
                   line="210">a #TeplTab part of @tab_group.</doc>
              <type name="Tab" c:type="TeplTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="append_tab_vfunc">
        <callback name="append_tab_vfunc">
          <source-position filename="../tepl/tepl-tab-group.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tab_group" transfer-ownership="none">
              <type name="TabGroup" c:type="TeplTabGroup*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="TeplTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TabLabel"
           c:symbol-prefix="tab_label"
           c:type="TeplTabLabel"
           parent="Gtk.Grid"
           glib:type-name="TeplTabLabel"
           glib:get-type="tepl_tab_label_get_type"
           glib:type-struct="TabLabelClass">
      <source-position filename="../tepl/tepl-tab-label.h" line="53"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="tepl_tab_label_new" version="3.0">
        <source-position filename="../tepl/tepl-tab-label.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-label.c"
               line="333">a new #TeplTabLabel.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-label.c"
                 line="331">a #TeplTab.</doc>
            <type name="Tab" c:type="TeplTab*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="get_tooltip_markup">
        <source-position filename="../tepl/tepl-tab-label.h" line="49"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_label" transfer-ownership="none">
            <type name="TabLabel" c:type="TeplTabLabel*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_tab"
              c:identifier="tepl_tab_label_get_tab"
              version="3.0">
        <source-position filename="../tepl/tepl-tab-label.h" line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-tab-label.c"
               line="350">the #TeplTabLabel:tab.</doc>
          <type name="Tab" c:type="TeplTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-label.c"
                 line="348">a #TeplTabLabel.</doc>
            <type name="TabLabel" c:type="TeplTabLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_tooltip"
              c:identifier="tepl_tab_label_update_tooltip"
              version="3.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-label.c"
             line="361">Asks #TeplTabLabel to update its tooltip. The ::get_tooltip_markup virtual
function is called and the result is set with
gtk_widget_set_tooltip_markup().</doc>
        <source-position filename="../tepl/tepl-tab-label.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-tab-label.c"
                 line="363">a #TeplTabLabel.</doc>
            <type name="TabLabel" c:type="TeplTabLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="tab"
                version="3.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-label.c"
             line="269">The associated #TeplTab. #TeplTabLabel has a weak reference to the
#TeplTab.</doc>
        <type name="Tab"/>
      </property>
      <field name="parent">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <field name="priv">
        <type name="TabLabelPrivate" c:type="TeplTabLabelPrivate*"/>
      </field>
    </class>
    <record name="TabLabelClass"
            c:type="TeplTabLabelClass"
            glib:is-gtype-struct-for="TabLabel">
      <source-position filename="../tepl/tepl-tab-label.h" line="53"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../tepl/tepl-tab-label.h"
             line="37">The parent class.</doc>
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="get_tooltip_markup">
        <callback name="get_tooltip_markup">
          <source-position filename="../tepl/tepl-tab-label.h" line="49"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="tab_label" transfer-ownership="none">
              <type name="TabLabel" c:type="TeplTabLabel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="TabLabelPrivate" c:type="TeplTabLabelPrivate" disguised="1">
      <source-position filename="../tepl/tepl-tab-label.h" line="26"/>
    </record>
    <record name="TabPrivate" c:type="TeplTabPrivate" disguised="1">
      <source-position filename="../tepl/tepl-tab.h" line="28"/>
    </record>
    <class name="View"
           c:symbol-prefix="view"
           c:type="TeplView"
           parent="GtkSource.View"
           glib:type-name="TeplView"
           glib:get-type="tepl_view_get_type"
           glib:type-struct="ViewClass">
      <source-position filename="../tepl/tepl-view.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="tepl_view_new" version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="45">Creates a new #TeplView.

By default, an empty #TeplBuffer will be lazily created and can be retrieved
with gtk_text_view_get_buffer().

If you want to specify your own buffer, either override the
#GtkTextViewClass create_buffer factory method, or use
tepl_view_new_with_buffer().</doc>
        <source-position filename="../tepl/tepl-view.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-view.c"
               line="57">a new #TeplView.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_buffer"
                   c:identifier="tepl_view_new_with_buffer"
                   version="5.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="66">Creates a new #TeplView widget displaying the buffer @buffer.</doc>
        <source-position filename="../tepl/tepl-view.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-view.c"
               line="72">a new #TeplView.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="68">a #GtkSourceBuffer or a subclass of it.</doc>
            <type name="GtkSource.Buffer" c:type="GtkSourceBuffer*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy_clipboard"
              c:identifier="tepl_view_copy_clipboard"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="118">Copies the clipboard.</doc>
        <source-position filename="../tepl/tepl-view.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="120">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cut_clipboard"
              c:identifier="tepl_view_cut_clipboard"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="85">Cuts the clipboard and then scrolls to the cursor position.</doc>
        <source-position filename="../tepl/tepl-view.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="87">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_selection"
              c:identifier="tepl_view_delete_selection"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="175">Deletes the text currently selected in the #GtkTextBuffer associated
to the view and then scrolls to the cursor position.</doc>
        <source-position filename="../tepl/tepl-view.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="177">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="goto_line"
              c:identifier="tepl_view_goto_line"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="253">Places the cursor at the position returned by
gtk_text_buffer_get_iter_at_line(), and scrolls to that position.</doc>
        <source-position filename="../tepl/tepl-view.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-view.c"
               line="261">%TRUE if the cursor has been moved exactly to @line, %FALSE if that
  line didn't exist.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="255">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="256">a line number, counting from 0.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="goto_line_offset"
              c:identifier="tepl_view_goto_line_offset"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="286">Places the cursor at the position returned by
gtk_text_buffer_get_iter_at_line_offset(), and scrolls to that position.</doc>
        <source-position filename="../tepl/tepl-view.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-view.c"
               line="295">%TRUE if the cursor has been moved exactly to @line and
  @line_offset, %FALSE if that position didn't exist.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="288">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="289">a line number, counting from 0.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="line_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="290">the line offset, in characters (not bytes).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="paste_clipboard"
              c:identifier="tepl_view_paste_clipboard"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="144">Pastes the clipboard and then scrolls to the cursor position.</doc>
        <source-position filename="../tepl/tepl-view.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="146">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scroll_to_cursor"
              c:identifier="tepl_view_scroll_to_cursor"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="228">Scrolls the @view to the cursor position.</doc>
        <source-position filename="../tepl/tepl-view.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="230">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_all"
              c:identifier="tepl_view_select_all"
              version="1.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="205">Selects all the text.</doc>
        <source-position filename="../tepl/tepl-view.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="207">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_lines"
              c:identifier="tepl_view_select_lines"
              version="2.0">
        <doc xml:space="preserve"
             filename="../tepl/tepl-view.c"
             line="326">Selects the lines between @start_line and @end_line included, counting from
zero. And then scrolls to the cursor.

Possible use-case: line numbers coming from a compilation output, to go to
the place where a warning or error occurred.</doc>
        <source-position filename="../tepl/tepl-view.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="328">a #TeplView.</doc>
            <type name="View" c:type="TeplView*"/>
          </instance-parameter>
          <parameter name="start_line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="329">start of the region to select.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../tepl/tepl-view.c"
                 line="330">end of the region to select.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GtkSource.View" c:type="GtkSourceView"/>
      </field>
    </class>
    <record name="ViewClass"
            c:type="TeplViewClass"
            glib:is-gtype-struct-for="View">
      <source-position filename="../tepl/tepl-view.h" line="28"/>
      <field name="parent_class">
        <type name="GtkSource.ViewClass" c:type="GtkSourceViewClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <docsection name="abstract-factory">
      <doc xml:space="preserve"
           filename="../tepl/tepl-abstract-factory.c"
           line="8">The Tepl framework uses the #TeplAbstractFactory singleton to create some
objects and widgets. By creating a subclass of #TeplAbstractFactory (to
override the desired virtual functions) and setting the instance with
tepl_abstract_factory_set_singleton(), an application can tell Tepl to create
custom objects and widgets.

Note that #GtkTextViewClass has the ::create_buffer factory method, that
#TeplView overrides to create a #TeplBuffer. How the #TeplView and
#TeplBuffer are created can be customized with the ::create_tab vfunc of
#TeplAbstractFactory.

Recommendation for the subclass name: in Tepl, #TeplAbstractFactory is an
abstract class, but in an application it is a concrete class. So
“MyappAbstractFactory” is not a good name for a #TeplAbstractFactory
subclass. “MyappFactory” is a better name (of course change “Myapp” with the
application namespace).</doc>
    </docsection>
    <docsection name="application">
      <doc xml:space="preserve"
           filename="../tepl/tepl-application.c"
           line="12">#TeplApplication extends the #GtkApplication class.

For some features, the Tepl framework gets the default #GtkApplication with
g_application_get_default(), for example to call g_application_hold(),
g_application_mark_busy(), etc. Normally a GTK application has only one
#GApplication per process, so this shouldn't cause any problem.

Note that #TeplApplication extends the #GtkApplication class but without
subclassing it, because several libraries might want to extend
#GtkApplication and an application needs to be able to use all those
extensions at the same time.

# GActions # {#tepl-application-gactions}

This class adds the following #GAction's to the #GtkApplication.
Corresponding #AmtkActionInfo's are available with
tepl_application_get_tepl_action_info_store().

## For the File menu

- `"app.tepl-new-window"`: creates a new main window with
  tepl_abstract_factory_create_main_window().</doc>
    </docsection>
    <docsection name="application-window">
      <doc xml:space="preserve"
           filename="../tepl/tepl-application-window.c"
           line="16">#TeplApplicationWindow extends the #GtkApplicationWindow class.

An application needs to call tepl_application_window_set_tab_group() to
benefit from the #TeplTabGroup interface implemented by this class.

Note that #TeplApplicationWindow extends the #GtkApplicationWindow class but
without subclassing it, because several libraries might want to extend
#GtkApplicationWindow and an application needs to be able to use all those
extensions at the same time.

# GActions # {#tepl-application-window-gactions}

This class adds the following #GAction's to the #GtkApplicationWindow.
Corresponding #AmtkActionInfo's are available with
tepl_application_get_tepl_action_info_store().

## For the File menu

- `"win.tepl-new-file"`: creates a new #TeplTab, appends it with
  tepl_tab_group_append_tab() and set it as the active tab.
- `"win.tepl-open"`: shows a #GtkFileChooser to open a new file.
- `"win.tepl-save"`: saves the current file.
- `"win.tepl-save-as"`: shows a #GtkFileChooser to save the current file to a
  different location.

## For the Edit menu

- `"win.tepl-undo"`: calls gtk_source_buffer_undo() on the active buffer.
- `"win.tepl-redo"`: calls gtk_source_buffer_redo() on the active buffer.

The following actions require the %AMTK_FACTORY_IGNORE_ACCELS_FOR_APP flag,
because otherwise accelerators don't work in other text widgets than the
active view (e.g. in a #GtkEntry):
- `"win.tepl-cut"`: calls tepl_view_cut_clipboard() on the active view.
- `"win.tepl-copy"`: calls tepl_view_copy_clipboard() on the active view.
- `"win.tepl-paste"`: calls tepl_view_paste_clipboard() on the active view.
- `"win.tepl-delete"`: calls tepl_view_delete_selection() on the active view.
- `"win.tepl-select-all"`: calls tepl_view_select_all() on the active view.
- `"win.tepl-indent"`: calls gtk_source_view_indent_lines() on the selected
  text of the active view.
- `"win.tepl-unindent"`: calls gtk_source_view_unindent_lines() on the
  selected text of the active view.

See the tepl_menu_shell_append_edit_actions() convenience function.

## For the Search menu

- `"win.tepl-goto-line"`: shows the #TeplGotoLineBar of all #TeplTab's
  belonging to #TeplApplicationWindow. Even though each #TeplTab has a
  different #TeplGotoLineBar, all #TeplGotoLineBar's of the #TeplTabGroup
  have their #GtkWidget:visible state synchronized, so when one
  #TeplGotoLineBar is hidden, all the other #TeplGotoLineBar's are hidden as
  well. The user may think that there is only one #TeplGotoLineBar per
  window, with the #TeplGotoLineBar remembering a different state (mainly the
  content of the #GtkSearchEntry) for each #TeplTab. To remember the state
  for each #TeplTab, the easiest is to have a different widget for each
  #TeplTab, hence the current implementation.</doc>
    </docsection>
    <docsection name="buffer">
      <doc xml:space="preserve"
           filename="../tepl/tepl-buffer.c"
           line="10">#TeplBuffer is a subclass of #GtkSourceBuffer, to add more features useful
for a text editor.

It also adds an association to a #TeplFile that can be retrieved with
tepl_buffer_get_file(). The association cannot change. The same for
#TeplMetadata with tepl_buffer_get_metadata().

The properties and signals have the tepl namespace, to avoid potential
conflicts in the future if the property or signal is moved to
#GtkSourceBuffer.</doc>
    </docsection>
    <docsection name="file">
      <doc xml:space="preserve"
           filename="../tepl/tepl-file.c"
           line="11">A #TeplFile object is the on-disk representation of a #TeplBuffer.

With a #TeplFile, you can create and configure a #TeplFileLoader and
#TeplFileSaver which take by default the values of the #TeplFile properties
(except for the file loader which auto-detect some properties). On a
successful load or save operation, the #TeplFile properties are updated. If
an operation fails, the #TeplFile properties have still the previous valid
values.</doc>
    </docsection>
    <docsection name="file-chooser">
      <doc xml:space="preserve"
           filename="../tepl/tepl-file-chooser.c"
           line="7">Extra functions for #GtkFileChooser, to have common code between
#GtkFileChooserDialog and GtkFileChooserNative.</doc>
    </docsection>
    <docsection name="file-loader">
      <doc xml:space="preserve"
           filename="../tepl/tepl-file-loader.c"
           line="9">A #TeplFileLoader object permits to load the content of a #GFile into a
#TeplBuffer.

A file loader should be used only for one load operation, including errors
handling. If an error occurs, you can reconfigure the loader and relaunch the
operation with tepl_file_loader_load_async().

Running a #TeplFileLoader is an undoable action for the #TeplBuffer. That is,
gtk_source_buffer_begin_not_undoable_action() and
gtk_source_buffer_end_not_undoable_action() are called, which delete the
undo/redo history.

After a file loading, the buffer is reset to the content provided by the
#GFile, so the buffer is set as “unmodified”, that is,
gtk_text_buffer_set_modified() is called with %FALSE.</doc>
    </docsection>
    <docsection name="file-saver">
      <doc xml:space="preserve"
           filename="../tepl/tepl-file-saver.c"
           line="12">A #TeplFileSaver object permits to save a #TeplBuffer into a #GFile.

A file saver should be used only for one save operation, including errors
handling. If an error occurs, you can reconfigure the saver and relaunch the
operation with tepl_file_saver_save_async().

# Things that need to be done at a higher level

Make the #GtkTextView non-editable during the save operation. See
gtk_text_view_set_editable(). Because the save operation is asynchronous, and
gtk_text_buffer_set_modified() must be called (with a %FALSE value) only when
the file has been successfully saved. So that's why
gtk_text_buffer_set_modified() is called by tepl_file_saver_save_finish(),
not at the beginning of the save operation. If the view/buffer is editable
during the save operation, gtk_text_buffer_set_modified() may be called at
the wrong place in the undo/redo history.</doc>
    </docsection>
    <function name="finalize" c:identifier="tepl_finalize" version="3.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-init.c"
           line="65">Free the resources allocated by Tepl. For example it unrefs the singleton
objects.

This function also calls amtk_finalize() and gtk_source_finalize().

It is not mandatory to call this function, it's just to be friendlier to
memory debugging tools. This function is meant to be called at the end of
main(). It can be called several times.</doc>
      <source-position filename="../tepl/tepl-init.h" line="21"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <docsection name="fold-region">
      <doc xml:space="preserve"
           filename="../tepl/tepl-fold-region.c"
           line="7">#TeplFoldRegion represents a region in a #GtkTextBuffer that can be folded.

When a region is being folded, a #GtkTextTag with the #GtkTextTag:invisible
property is applied to the folded region. The actual start and end position
of this #GtkTextTag is respectively at the next new line after the start and
end position of the bounds handed over to tepl_fold_region_set_bounds().</doc>
    </docsection>
    <docsection name="goto-line-bar">
      <doc xml:space="preserve"
           filename="../tepl/tepl-goto-line-bar.c"
           line="10">#TeplGotoLineBar is an horizontal bar containing among other things:
- A #GtkSearchEntry.
- A close button.

When the #GtkSearchEntry's content changes, tepl_view_goto_line() is called
on the associated #TeplView.

# High-level API

#TeplGotoLineBar is integrated in the Tepl framework, see:
- The `"win.tepl-goto-line"` #GAction in #TeplApplicationWindow.
- The tepl_tab_get_goto_line_bar() function.</doc>
    </docsection>
    <docsection name="gutter-renderer-folds">
      <doc xml:space="preserve"
           filename="../tepl/tepl-gutter-renderer-folds.c"
           line="8">#TeplGutterRendererFolds is a basic gutter renderer for code folding. It
handles only the drawing, and has a flat view of the folding tree.</doc>
    </docsection>
    <docsection name="info-bar">
      <doc xml:space="preserve"
           filename="../tepl/tepl-info-bar.c"
           line="7">#TeplInfoBar is a subclass of #GtkInfoBar with functions to ease the creation
of info bars.</doc>
    </docsection>
    <function name="init" c:identifier="tepl_init" version="3.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-init.c"
           line="31">Initializes the Tepl library (e.g. for the internationalization).

This function can be called several times, but is meant to be called at the
beginning of main(), before any other Tepl function call.

This function also calls amtk_init() and gtk_source_init().</doc>
      <source-position filename="../tepl/tepl-init.h" line="18"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <docsection name="io-error-info-bars">
      <doc xml:space="preserve"
           filename="../tepl/tepl-io-error-info-bars.c"
           line="10">Verbose error reporting for file I/O operations.</doc>
    </docsection>
    <function name="io_error_info_bar_cant_create_backup"
              c:identifier="tepl_io_error_info_bar_cant_create_backup"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-io-error-info-bars.c"
           line="62">When a %G_IO_ERROR_CANT_CREATE_BACKUP error occurs while saving @location,
offer two possible actions:
- Save anyway: %GTK_RESPONSE_YES.
- Don't save: %GTK_RESPONSE_CANCEL.</doc>
      <source-position filename="../tepl/tepl-io-error-info-bars.h" line="17"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-io-error-info-bars.c"
             line="72">the newly created #TeplInfoBar.</doc>
        <type name="InfoBar" c:type="TeplInfoBar*"/>
      </return-value>
      <parameters>
        <parameter name="location" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-io-error-info-bars.c"
               line="64">the #GFile for which the backup failed to be created.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-io-error-info-bars.c"
               line="65">must be a %G_IO_ERROR_CANT_CREATE_BACKUP.</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_info_bar_externally_modified"
              c:identifier="tepl_io_error_info_bar_externally_modified"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-io-error-info-bars.c"
           line="123">Creates a warning about @location having changed on disk. The possible
actions:
- Depending on @document_modified, "Reload" or "Drop changes and reload":
  %GTK_RESPONSE_OK.
- A close button as added with gtk_info_bar_set_show_close_button().</doc>
      <source-position filename="../tepl/tepl-io-error-info-bars.h" line="21"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-io-error-info-bars.c"
             line="135">the newly created #TeplInfoBar.</doc>
        <type name="InfoBar" c:type="TeplInfoBar*"/>
      </return-value>
      <parameters>
        <parameter name="location" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-io-error-info-bars.c"
               line="125">the #GFile for which there has been an external modification.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="document_modified" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-io-error-info-bars.c"
               line="126">whether the document (e.g. the #GtkTextBuffer) has
  unsaved modifications.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_info_bar_file_already_open"
              c:identifier="tepl_io_error_info_bar_file_already_open"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-io-error-info-bars.c"
           line="18">Creates a warning about @location being already open in another window,
offering two possible actions:
- Edit anyway: %GTK_RESPONSE_YES.
- Don't edit: %GTK_RESPONSE_CANCEL.</doc>
      <source-position filename="../tepl/tepl-io-error-info-bars.h" line="14"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-io-error-info-bars.c"
             line="27">the newly created #TeplInfoBar.</doc>
        <type name="InfoBar" c:type="TeplInfoBar*"/>
      </return-value>
      <parameters>
        <parameter name="location" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-io-error-info-bars.c"
               line="20">the #GFile already open in another window.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_info_bar_invalid_characters"
              c:identifier="tepl_io_error_info_bar_invalid_characters"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-io-error-info-bars.c"
           line="168">For file saving, creates a warning about invalid characters that can corrupt
the file. Possible actions:
- Save anyway: %GTK_RESPONSE_YES.
- Don't save: %GTK_RESPONSE_CANCEL.</doc>
      <source-position filename="../tepl/tepl-io-error-info-bars.h" line="25"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-io-error-info-bars.c"
             line="177">the newly created #TeplInfoBar.</doc>
        <type name="InfoBar" c:type="TeplInfoBar*"/>
      </return-value>
      <parameters>
        <parameter name="location" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-io-error-info-bars.c"
               line="170">where to save the document.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="iter">
      <doc xml:space="preserve"
           filename="../tepl/tepl-iter.c"
           line="7">#GtkTextIter utility functions.</doc>
    </docsection>
    <function name="iter_get_line_indentation"
              c:identifier="tepl_iter_get_line_indentation"
              version="2.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-iter.c"
           line="44">Gets the indentation, as a string, of the line at @iter. @iter can be
anywhere in the line.

Possible use-case: to implement an action that inserts some text in a
#GtkTextBuffer. If the text to insert spans multiple lines, it is usually
desired to keep the same indentation level.</doc>
      <source-position filename="../tepl/tepl-iter.h" line="18"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../tepl/tepl-iter.c"
             line="55">the line indentation at @iter. Free with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-iter.c"
               line="46">a #GtkTextIter.</doc>
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="language-chooser">
      <doc xml:space="preserve"
           filename="../tepl/tepl-language-chooser.c"
           line="7">A #TeplLanguageChooser widget shows a list of available #GtkSourceLanguage's,
as returned by gtk_source_language_manager_get_default(). The list contains a
"Plain Text" item for the %NULL language.

The typical workflow when using a #TeplLanguageChooser widget in an
application is:
1. Create a #TeplLanguageChooser widget.
2. Call tepl_language_chooser_select_language() with the value of the
   #GtkSourceBuffer:language property.
3. Wait for the #TeplLanguageChooser::language-activated signal to be emitted
   and/or destroy the #TeplLanguageChooser widget.</doc>
    </docsection>
    <docsection name="language-chooser-dialog">
      <doc xml:space="preserve"
           filename="../tepl/tepl-language-chooser-dialog.c"
           line="11">#TeplLanguageChooserDialog is a #GtkDialog to choose a #GtkSourceLanguage.
#TeplLanguageChooserDialog implements the #TeplLanguageChooser interface.</doc>
    </docsection>
    <docsection name="language-chooser-widget">
      <doc xml:space="preserve"
           filename="../tepl/tepl-language-chooser-widget.c"
           line="11">#TeplLanguageChooserWidget is a #GtkWidget to choose a #GtkSourceLanguage.
#TeplLanguageChooserWidget implements the #TeplLanguageChooser interface.

In addition to the list, it contains a #GtkSearchEntry to search the list.</doc>
    </docsection>
    <docsection name="menu-shell">
      <doc xml:space="preserve"
           filename="../tepl/tepl-menu-shell.c"
           line="8">#GtkMenuShell functions.</doc>
    </docsection>
    <function name="menu_shell_append_edit_actions"
              c:identifier="tepl_menu_shell_append_edit_actions"
              version="3.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-menu-shell.c"
           line="16">Appends #GtkMenuItem's to @menu_shell for the following #GAction's:
- `"win.tepl-cut"`
- `"win.tepl-copy"`
- `"win.tepl-paste"`
- `"win.tepl-delete"`
- `"win.tepl-select-all"`

See the [list of GActions implemented in
TeplApplicationWindow][tepl-application-window-gactions]. This function
correctly uses the %AMTK_FACTORY_IGNORE_ACCELS_FOR_APP flag to create the
#GtkMenuItem's.</doc>
      <source-position filename="../tepl/tepl-menu-shell.h" line="18"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="menu_shell" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-menu-shell.c"
               line="18">a #GtkMenuShell.</doc>
          <type name="Gtk.MenuShell" c:type="GtkMenuShell*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="metadata">
      <doc xml:space="preserve"
           filename="../tepl/tepl-metadata.c"
           line="7">A #TeplMetadata object contains a set of file metadata as key/value pairs.

The tepl_metadata_get() and tepl_metadata_set() functions don't load or save
the metadata on disk, they only access the metadata stored in the
#TeplMetadata object memory.

#TeplMetadata is intended to be used alongside #TeplMetadataManager to load
and store the metadata on disk.

# Values requirements

Values must be nul-terminated UTF-8 strings.

# Keys requirements # {#tepl-metadata-keys-requirements}

Keys must be non-empty strings containing only:
- ASCII alphanumeric characters (see g_ascii_isalnum());
- `'-'` characters (dashes);
- or `'_'` characters (underscores).

Additionally, it's preferable that keys start with a namespace, to not get
metadata conflicts between the application and libraries.

Examples of valid metadata keys:
- `"gedit-spell-checking-language"`
- `"gCSVedit_column_delimiter"`
- `"tepl-character-encoding"`</doc>
    </docsection>
    <docsection name="metadata-manager">
      <doc xml:space="preserve"
           filename="../tepl/tepl-metadata-manager.c"
           line="10">#TeplMetadataManager permits to store file metadata on disk. It serves both
as an easier replacement for GVfs metadata, and to have metadata support on
platforms that don't support GVfs metadata.

For the #GFile where the metadata are stored (see the
tepl_metadata_manager_load_from_disk() and
tepl_metadata_manager_save_to_disk() functions), the following applies:
- A good place to store the metadata is in a sub-directory of the user data
  directory. See g_get_user_data_dir().
- The #GFile must be different for each process. It is advised for your
  application to rely on #GApplication process uniqueness.
  #TeplMetadataManager doesn't support concurrent accesses to the same #GFile
  from different processes. Which means that metadata cannot be shared
  between applications.

# High-level API

#TeplMetadataManager and #TeplMetadata are integrated in the Tepl framework,
see:
- tepl_application_handle_metadata().
- the metadata API of #TeplBuffer.</doc>
    </docsection>
    <docsection name="notebook">
      <doc xml:space="preserve"
           filename="../tepl/tepl-notebook.c"
           line="11">#TeplNotebook is a subclass of #GtkNotebook that implements the #TeplTabGroup
interface.</doc>
    </docsection>
    <docsection name="panel">
      <doc xml:space="preserve"
           filename="../tepl/tepl-panel.c"
           line="10">#TeplPanel permits to create a side or bottom panel that contains several
components.

#TeplPanel is a #GtkGrid subclass containing only one child #GtkWidget by
default: the #GtkStack that can be retrieved with tepl_panel_get_stack().</doc>
    </docsection>
    <docsection name="pango">
      <doc xml:space="preserve"
           filename="../tepl/tepl-pango.c"
           line="6">Utility functions related to the Pango library.</doc>
    </docsection>
    <function name="pango_font_description_to_css"
              c:identifier="tepl_pango_font_description_to_css"
              version="5.2">
      <doc xml:space="preserve"
           filename="../tepl/tepl-pango.c"
           line="74">This function will generate CSS suitable for the GTK CSS engine based on the
properties of the #PangoFontDescription.

The returned string contains only the CSS declarations, it is not a complete
CSS rule set. So the selector and curly braces are not present. Each
declaration, including the last one, ends with a semicolon.</doc>
      <source-position filename="../tepl/tepl-pango.h" line="18"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../tepl/tepl-pango.c"
             line="85">A newly allocated string containing the CSS
  describing the font description. Free with g_free() when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="desc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-pango.c"
               line="76">a #PangoFontDescription.</doc>
          <type name="Pango.FontDescription"
                c:type="const PangoFontDescription*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="space-drawer-prefs">
      <doc xml:space="preserve"
           filename="../tepl/tepl-space-drawer-prefs.c"
           line="9">#TeplSpaceDrawerPrefs is a #GtkWidget for configuring the preferences about
white space drawing with #GtkSourceSpaceDrawer.

The configuration is stored in the #GtkSourceSpaceDrawer:matrix property of
the associated #GtkSourceSpaceDrawer object.</doc>
    </docsection>
    <docsection name="statusbar">
      <doc xml:space="preserve"
           filename="../tepl/tepl-statusbar.c"
           line="10">#TeplStatusbar is a subclass of #GtkStatusbar with a better look by default,
and with added functions useful for a text editor.</doc>
    </docsection>
    <docsection name="style-scheme-chooser-widget">
      <doc xml:space="preserve"
           filename="../tepl/tepl-style-scheme-chooser-widget.c"
           line="9">#TeplStyleSchemeChooserWidget is a simple implementation of the
#GtkSourceStyleSchemeChooser interface. It already contains a
#GtkScrolledWindow internally.

Additional features compared to #GtkSourceStyleSchemeChooserWidget:
- There is an additional convenience property:
  #TeplStyleSchemeChooserWidget:tepl-style-scheme-id.
- When the #GtkWidget::map signal is emitted, #TeplStyleSchemeChooserWidget
  scrolls to the selected row.</doc>
    </docsection>
    <docsection name="tab">
      <doc xml:space="preserve"
           filename="../tepl/tepl-tab.c"
           line="12">#TeplTab is meant to be the content of one tab in the text editor (if the
text editor has a Tabbed Document Interface). It is a #GtkGrid container that
contains the #TeplView and can contain one or several #GtkInfoBar's. Since it
is a #GtkGrid, an application can of course add any other widget to it.

To create a new #GtkInfoBar, it is recommended to use #TeplInfoBar (but
#TeplTab doesn't enforce it).

By default:
- #TeplTab has a vertical #GtkOrientation.
- The main child widget of #TeplTab is a #GtkScrolledWindow which contains
  the #TeplView.
- #GtkInfoBar's are added on top of the #GtkScrolledWindow.

The way that the #TeplView is packed into the #TeplTab is customizable with
the ::pack_view virtual function. Similarly, the way that #GtkInfoBar's are
added can be customized with ::pack_info_bar.

# TeplTabGroup implementation

#TeplTab implements the #TeplTabGroup interface, for a group of only one tab.
It is useful for text editors that open each file in a separate window, or
for applications that don't require to open more than one file. But the
tepl_tab_group_append_tab() operation is not supported, so some higher-level
features of Tepl don't work with #TeplTab as the #TeplTabGroup of the window.
This will maybe be improved in the future by creating automatically a new
window.</doc>
    </docsection>
    <docsection name="tab-group">
      <doc xml:space="preserve"
           filename="../tepl/tepl-tab-group.c"
           line="7">The tepl_tab_group_get_tabs() function permits to get the list of #TeplTab's.
The tepl_tab_group_get_active_tab() function permits to get the #TeplTab
currently shown in the #TeplTabGroup.

#TeplTabGroup also contains convenience functions to get #TeplView's and
#TeplBuffer's instead of #TeplTab's.</doc>
    </docsection>
    <docsection name="tab-label">
      <doc xml:space="preserve"
           filename="../tepl/tepl-tab-label.c"
           line="13">#TeplTabLabel is the label/title of a #TeplTab, suitable for #GtkNotebook.

A #TeplTabLabel contains:
- a #GtkLabel with the #TeplBuffer:tepl-short-title.
- a close button, when clicked the #TeplTab #TeplTab::close-request signal is
  emitted.
- a customizable tooltip, by default it shows the full #TeplFile:location.</doc>
    </docsection>
    <docsection name="utils">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="15">Utility functions.</doc>
    </docsection>
    <function name="utils_binding_transform_func_smart_bool"
              c:identifier="tepl_utils_binding_transform_func_smart_bool"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="1018">A #GBindingTransformFunc to transform between these two #GValue types:
- A #GValue of type #gboolean.
- A #GValue of type #GVariant, with the #GVariant of type boolean.

For convenience, this function works in both directions (hence the “smart”),
it introspects the types of @from_value and @to_value.

Note that if @from_value and @to_value are of the same #GValue type, this
function won't work and you shouldn't use a custom #GBindingTransformFunc in
the first place.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="115"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="1036">%TRUE if the transformation was successful, and %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="binding" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="1020">a #GBinding.</doc>
          <type name="GObject.Binding" c:type="GBinding*"/>
        </parameter>
        <parameter name="from_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="1021">the #GValue containing the value to transform.</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="to_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="1022">the #GValue in which to store the transformed value.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="1023">data passed to the transform function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_create_close_button"
              c:identifier="tepl_utils_create_close_button"
              version="5.0">
      <source-position filename="../tepl/tepl-utils.h" line="75"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="673">a new close button (a #GtkButton).</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
    </function>
    <function name="utils_create_parent_directories"
              c:identifier="tepl_utils_create_parent_directories"
              version="5.0"
              throws="1">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="565">Synchronously creates parent directories of @file, so that @file can be
saved.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="58"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="574">whether the directories are correctly created. %FALSE is returned on
error.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="567">a file</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="568">optional #GCancellable object, %NULL to ignore.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_decode_uri"
              c:identifier="tepl_utils_decode_uri"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="366">Parse and break an uri apart in its individual components like the uri
scheme, user info, host, port and path. The return value pointer can be
%NULL to ignore certain parts of the uri. If the function returns %TRUE, then
all return value pointers should be freed using g_free().</doc>
      <source-position filename="../tepl/tepl-utils.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="381">%TRUE if the uri could be properly decoded, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="368">the uri to decode</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="scheme"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="369">return value pointer for the uri's
    scheme (e.g. http, sftp, ...), or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="user"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="371">return value pointer for the uri user info, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="host"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="372">return value pointer for the uri host, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="port"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="373">return value pointer for the uri port, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="path"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="374">return value pointer for the uri path, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_file_query_exists_async"
              c:identifier="tepl_utils_file_query_exists_async"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="614">The asynchronous version of g_file_query_exists(). When the operation is
finished, @callback will be called. You can then call
tepl_utils_file_query_exists_finish() to get the result of the operation.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="63"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="616">a #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="617">a #GCancellable.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="3">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="618">the callback to call when the operation is finished.</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="619">the data to pass to the callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_file_query_exists_finish"
              c:identifier="tepl_utils_file_query_exists_finish"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="642">Finishes the operation started with tepl_utils_file_query_exists_async().
There is no output #GError parameter, so you should check if the operation
has been cancelled (in which case %FALSE will be returned).</doc>
      <source-position filename="../tepl/tepl-utils.h" line="69"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="651">%TRUE if the file exists and the operation hasn't been cancelled,
%FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="644">a #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="645">a #GAsyncResult.</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_get_file_extension"
              c:identifier="tepl_utils_get_file_extension"
              version="4.4">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="263">Examples:
- "file.pdf" returns ".pdf".
- "file.PDF" returns ".pdf".
- "file.tar.gz" returns ".gz".
- "path/to/file.pdf" returns ".pdf".
- "file" (without an extension) returns "" (the empty string).</doc>
      <source-position filename="../tepl/tepl-utils.h" line="38"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="274">the @filename's extension with the dot, in lowercase. Free with
g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="265">a filename.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_get_file_shortname"
              c:identifier="tepl_utils_get_file_shortname"
              version="4.4">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="286">Returns @filename without its extension. With the “extension” having the same
definition as in tepl_utils_get_file_extension(); in other words it returns
the other part of @filename.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="41"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="294">the @filename without its extension. Free with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="288">a filename.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_list_box_clear"
              c:identifier="tepl_utils_list_box_clear"
              version="5.2">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="808">Removes all rows of @list_box, to obtain an empty #GtkListBox.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="87"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list_box" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="810">a #GtkListBox.</doc>
          <type name="Gtk.ListBox" c:type="GtkListBox*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_list_box_get_filtered_children"
              c:identifier="tepl_utils_list_box_get_filtered_children"
              version="5.2">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="959">Gets an array of all the #GtkListBoxRow childen of @list_box for which
@filter_func returns %TRUE. The elements in the array are sorted by
increasing index order (as returned by gtk_list_box_row_get_index()).</doc>
      <source-position filename="../tepl/tepl-utils.h" line="107"/>
      <return-value transfer-ownership="container" nullable="1">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="972">
  a %NULL-terminated array of #GtkListBoxRow objects, or %NULL. Free with
  g_free() when no longer needed.</doc>
        <array c:type="GtkListBoxRow**">
          <type name="Gtk.ListBoxRow"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="list_box" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="961">a #GtkListBox.</doc>
          <type name="Gtk.ListBox" c:type="GtkListBox*"/>
        </parameter>
        <parameter name="filter_func"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="962">non-%NULL callback function.</doc>
          <type name="Gtk.ListBoxFilterFunc" c:type="GtkListBoxFilterFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="963">user data passed to @filter_func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="n_filtered_children"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="964">location to store the number of
  #GtkListBoxRow's present in the returned array, without counting the
  terminating %NULL.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_list_box_get_row_at_index_with_filter"
              c:identifier="tepl_utils_list_box_get_row_at_index_with_filter"
              version="5.2">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="901">This function has the same semantics as gtk_list_box_get_row_at_index(), but
it takes into account only the rows for which @filter_func returns %TRUE.

As an example, if @index is 0, it returns the first #GtkListBoxRow for which
@filter_func returns %TRUE.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="101"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="915">the child #GtkListBoxRow or %NULL.</doc>
        <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow*"/>
      </return-value>
      <parameters>
        <parameter name="list_box" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="903">a #GtkListBox.</doc>
          <type name="Gtk.ListBox" c:type="GtkListBox*"/>
        </parameter>
        <parameter name="index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="904">the index of the row, starting at 0. The index is among the filtered
  rows only.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="filter_func"
                   transfer-ownership="none"
                   scope="call"
                   closure="3">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="906">non-%NULL callback function.</doc>
          <type name="Gtk.ListBoxFilterFunc" c:type="GtkListBoxFilterFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="907">user data passed to @filter_func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_list_box_scroll_to_row"
              c:identifier="tepl_utils_list_box_scroll_to_row"
              version="5.2">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="852">Scrolls to a specific #GtkListBoxRow.

Before using this function, tepl_utils_list_box_setup_scrolling() must have
been called.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="94"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list_box" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="854">a #GtkListBox.</doc>
          <type name="Gtk.ListBox" c:type="GtkListBox*"/>
        </parameter>
        <parameter name="row" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="855">a #GtkListBoxRow.</doc>
          <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_list_box_scroll_to_selected_row"
              c:identifier="tepl_utils_list_box_scroll_to_selected_row"
              version="5.2">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="874">Calls tepl_utils_list_box_scroll_to_row() on the row returned by
gtk_list_box_get_selected_row(). This function assumes that there is either
zero or one selected row.

Before using this function, tepl_utils_list_box_setup_scrolling() must have
been called.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="98"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list_box" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="876">a #GtkListBox.</doc>
          <type name="Gtk.ListBox" c:type="GtkListBox*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_list_box_setup_scrolling"
              c:identifier="tepl_utils_list_box_setup_scrolling"
              version="5.2">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="826">Setup vertical scrolling between @list_box and @scrolled_window, to be able
to use tepl_utils_list_box_scroll_to_row() afterwards.

This function is intended to be called only once per #GtkListBox, when
initializing the @list_box and @scrolled_window widgets.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="90"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list_box" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="828">a #GtkListBox.</doc>
          <type name="Gtk.ListBox" c:type="GtkListBox*"/>
        </parameter>
        <parameter name="scrolled_window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="829">a #GtkScrolledWindow.</doc>
          <type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_markup_escape_text"
              c:identifier="tepl_utils_markup_escape_text"
              version="5.0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="163">The same as g_markup_escape_text(), but with an implementation that fully
supports round-trip integrity. I.e. when #GMarkupParser or any other XML
parser will decode/unescape the string, the exact same string as @src will be
brought back. As long as @src is a valid UTF-8 string.

The other difference with g_markup_escape_text() is that the @length
parameter is not present for tepl_utils_markup_escape_text().

# g_markup_escape_text() doesn't fully support round-trip integrity

In fact, g_markup_escape_text() doesn't escape the tabstop, newline and
carriage return characters. And the #GMarkupParser correctly processes
whitespace and line endings according to the [XML rules for normalization of
line endings and attribute values](https://www.w3.org/TR/xml/#AVNormalize).

For example `"\t"` (a tab) after a round-trip through g_markup_escape_text()
and #GMarkupParser becomes a simple space.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="33"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="185">a newly allocated string with the
escaped text, or %NULL if @src is not a valid UTF-8 string. Free with
g_free() when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="165">a nul-terminated UTF-8 string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_replace_home_dir_with_tilde"
              c:identifier="tepl_utils_replace_home_dir_with_tilde"
              version="4.4">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="303">Replaces the home directory with a tilde, if the home directory is present in
the @filename.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="44"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="310">the new filename. Free with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="305">the filename.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_show_warning_dialog"
              c:identifier="tepl_utils_show_warning_dialog"
              version="5.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="744">Shows a #GtkDialog with the provided warning message.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="82"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="746">the #GtkWindow issuing the warning.</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="747">format string, as with printf().</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="748">parameters to insert into the format string.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_str_end_truncate"
              c:identifier="tepl_utils_str_end_truncate"
              version="4.4">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="102">Like tepl_utils_str_middle_truncate() but the “…” character is at the end.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="24"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="110">the truncated string. Free with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="104">a UTF-8 string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="truncate_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="105">truncate the string at that length, in UTF-8 characters
  (not bytes).</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_str_middle_truncate"
              c:identifier="tepl_utils_str_middle_truncate"
              version="4.4">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="82">If @str is longer than @truncate_length, then this function returns @str
truncated in the middle with a “…” character. Otherwise it just returns a
copy of @str.</doc>
      <source-position filename="../tepl/tepl-utils.h" line="20"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="92">the truncated string. Free with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="84">a UTF-8 string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="truncate_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="85">truncate the string at that length, in UTF-8 characters
  (not bytes).</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_str_replace"
              c:identifier="tepl_utils_str_replace"
              version="4.4">
      <doc xml:space="preserve"
           filename="../tepl/tepl-utils.c"
           line="120">Replaces all occurences of @search by @replacement.

The function does only one pass, for example:
|[
tepl_utils_str_replace ("aaaa", "aa", "a");
]|
returns "aa", not "a".</doc>
      <source-position filename="../tepl/tepl-utils.h" line="28"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../tepl/tepl-utils.c"
             line="134">A newly allocated string with the replacements. Free with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="122">a string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="search" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="123">the search string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="replacement" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../tepl/tepl-utils.c"
               line="124">the replacement string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="view">
      <doc xml:space="preserve"
           filename="../tepl/tepl-view.c"
           line="13">#TeplView is a subclass of #GtkSourceView, to add more features useful for a
text editor.</doc>
    </docsection>
  </namespace>
</repository>
