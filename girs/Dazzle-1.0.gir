<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="libdazzle-1.0"/>
  <c:include name="dazzle.h"/>
  <namespace name="Dazzle"
             version="1.0"
             shared-library="libdazzle-1.0.so.0"
             c:identifier-prefixes="Dzl"
             c:symbol-prefixes="dzl">
    <function-macro name="ALIGNED_BEGIN"
                    c:identifier="DZL_ALIGNED_BEGIN"
                    introspectable="0">
      <source-position filename="src/util/dzl-macros.h" line="34"/>
      <parameters>
        <parameter name="_N">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ALIGNED_END"
                    c:identifier="DZL_ALIGNED_END"
                    introspectable="0">
      <source-position filename="src/util/dzl-macros.h" line="35"/>
      <parameters>
        <parameter name="_N">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Animation"
           c:symbol-prefix="animation"
           c:type="DzlAnimation"
           parent="GObject.InitiallyUnowned"
           glib:type-name="DzlAnimation"
           glib:get-type="dzl_animation_get_type"
           glib:type-struct="AnimationClass">
      <source-position filename="src/animation/dzl-animation.h" line="32"/>
      <function name="calculate_duration"
                c:identifier="dzl_animation_calculate_duration">
        <source-position filename="src/animation/dzl-animation.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Gdk.Monitor" c:type="GdkMonitor*"/>
          </parameter>
          <parameter name="from_value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="to_value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_property" c:identifier="dzl_animation_add_property">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="720">Adds a new property to the set of properties to be animated during the
lifetime of the animation.

Side effects: None.</doc>
        <source-position filename="src/animation/dzl-animation.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/animation/dzl-animation.c"
                 line="722">A #DzlAnimation.</doc>
            <type name="Animation" c:type="DzlAnimation*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/animation/dzl-animation.c"
                 line="723">A #ParamSpec of @target or a #GtkWidget&lt;!-- --&gt;'s parent.</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/animation/dzl-animation.c"
                 line="724">The new value for the property at the end of the animation.</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="dzl_animation_start">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="606">Start the animation. When the animation stops, the internal reference will
be dropped and the animation may be finalized.

Side effects: None.</doc>
        <source-position filename="src/animation/dzl-animation.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/animation/dzl-animation.c"
                 line="608">A #DzlAnimation.</doc>
            <type name="Animation" c:type="DzlAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="dzl_animation_stop">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="676">Stops a running animation. The internal reference to the animation is
dropped and therefore may cause the object to finalize.

As a convenience, this function accepts %NULL for @animation but
does nothing if that should occur.</doc>
        <source-position filename="src/animation/dzl-animation.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/animation/dzl-animation.c"
                 line="678">A #DzlAnimation.</doc>
            <type name="Animation" c:type="DzlAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="duration"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="250">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="881">The "duration" property is the total number of milliseconds that the
animation should run before being completed.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="frame-clock"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gdk.FrameClock"/>
      </property>
      <property name="mode"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="DZL_ANIMATION_LINEAR">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="907">The "mode" property is the Alpha function that should be used to
determine the offset within the animation based on the current
offset in the animations duration.</doc>
        <type name="AnimationMode"/>
      </property>
      <property name="target"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="924">The "target" property is the #GObject that should have its properties
animated.</doc>
        <type name="GObject.Object"/>
      </property>
      <glib:signal name="tick" when="first">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="941">The "tick" signal is emitted on each frame in the animation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AnimationClass"
            c:type="DzlAnimationClass"
            glib:is-gtype-struct-for="Animation">
      <source-position filename="src/animation/dzl-animation.h" line="32"/>
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
    </record>
    <enumeration name="AnimationMode"
                 glib:type-name="DzlAnimationMode"
                 glib:get-type="dzl_animation_mode_get_type"
                 c:type="DzlAnimationMode">
      <member name="linear"
              value="0"
              c:identifier="DZL_ANIMATION_LINEAR"
              glib:nick="linear"
              glib:name="DZL_ANIMATION_LINEAR">
      </member>
      <member name="ease_in_quad"
              value="1"
              c:identifier="DZL_ANIMATION_EASE_IN_QUAD"
              glib:nick="ease-in-quad"
              glib:name="DZL_ANIMATION_EASE_IN_QUAD">
      </member>
      <member name="ease_in_out_quad"
              value="3"
              c:identifier="DZL_ANIMATION_EASE_IN_OUT_QUAD"
              glib:nick="ease-in-out-quad"
              glib:name="DZL_ANIMATION_EASE_IN_OUT_QUAD">
      </member>
      <member name="ease_out_quad"
              value="2"
              c:identifier="DZL_ANIMATION_EASE_OUT_QUAD"
              glib:nick="ease-out-quad"
              glib:name="DZL_ANIMATION_EASE_OUT_QUAD">
      </member>
      <member name="ease_in_cubic"
              value="4"
              c:identifier="DZL_ANIMATION_EASE_IN_CUBIC"
              glib:nick="ease-in-cubic"
              glib:name="DZL_ANIMATION_EASE_IN_CUBIC">
      </member>
      <member name="ease_out_cubic"
              value="5"
              c:identifier="DZL_ANIMATION_EASE_OUT_CUBIC"
              glib:nick="ease-out-cubic"
              glib:name="DZL_ANIMATION_EASE_OUT_CUBIC">
      </member>
      <member name="ease_in_out_cubic"
              value="6"
              c:identifier="DZL_ANIMATION_EASE_IN_OUT_CUBIC"
              glib:nick="ease-in-out-cubic"
              glib:name="DZL_ANIMATION_EASE_IN_OUT_CUBIC">
      </member>
    </enumeration>
    <class name="Application"
           c:symbol-prefix="application"
           c:type="DzlApplication"
           parent="Gtk.Application"
           glib:type-name="DzlApplication"
           glib:get-type="dzl_application_get_type"
           glib:type-struct="ApplicationClass">
      <source-position filename="src/app/dzl-application.h" line="59"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <constructor name="new" c:identifier="dzl_application_new">
        <source-position filename="src/app/dzl-application.h" line="62"/>
        <return-value transfer-ownership="full">
          <type name="Application" c:type="DzlApplication*"/>
        </return-value>
        <parameters>
          <parameter name="application_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.ApplicationFlags" c:type="GApplicationFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="add_resources" invoker="add_resources">
        <doc xml:space="preserve"
             filename="src/app/dzl-application.c"
             line="421">This adds @resource_path to the list of "automatic resources".

If @resource_path starts with "resource://", then the corresponding
#GResources path will be searched for resources. Otherwise, @resource_path
should be a path to a location on disk.

The #DzlApplication will locate resources such as CSS themes, icons, and
keyboard shortcuts using @resource_path.</doc>
        <source-position filename="src/app/dzl-application.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="423">a #DzlApplication</doc>
            <type name="Application" c:type="DzlApplication*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="424">the location of the resources.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_resources" invoker="remove_resources">
        <doc xml:space="preserve"
             filename="src/app/dzl-application.c"
             line="453">This attempts to undo as many side-effects as possible from a call to
dzl_application_add_resources().</doc>
        <source-position filename="src/app/dzl-application.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="455">a #DzlApplication</doc>
            <type name="Application" c:type="DzlApplication*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="456">the location of the resources.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_resources"
              c:identifier="dzl_application_add_resources">
        <doc xml:space="preserve"
             filename="src/app/dzl-application.c"
             line="421">This adds @resource_path to the list of "automatic resources".

If @resource_path starts with "resource://", then the corresponding
#GResources path will be searched for resources. Otherwise, @resource_path
should be a path to a location on disk.

The #DzlApplication will locate resources such as CSS themes, icons, and
keyboard shortcuts using @resource_path.</doc>
        <source-position filename="src/app/dzl-application.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="423">a #DzlApplication</doc>
            <type name="Application" c:type="DzlApplication*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="424">the location of the resources.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_menu_by_id"
              c:identifier="dzl_application_get_menu_by_id">
        <doc xml:space="preserve"
             filename="src/app/dzl-application.c"
             line="399">Similar to gtk_application_get_menu_by_id() but takes into account
menu merging which could have occurred upon loading plugins.</doc>
        <source-position filename="src/app/dzl-application.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app/dzl-application.c"
               line="407">A #GMenu</doc>
          <type name="Gio.Menu" c:type="GMenu*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="401">a #DzlApplication</doc>
            <type name="Application" c:type="DzlApplication*"/>
          </instance-parameter>
          <parameter name="menu_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="402">the id of the menu to locate</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_menu_manager"
              c:identifier="dzl_application_get_menu_manager"
              glib:get-property="menu-manager">
        <doc xml:space="preserve"
             filename="src/app/dzl-application.c"
             line="363">Gets the menu manager for the application.</doc>
        <source-position filename="src/app/dzl-application.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app/dzl-application.c"
               line="369">A #DzlMenuManager</doc>
          <type name="MenuManager" c:type="DzlMenuManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="365">a #DzlApplication</doc>
            <type name="Application" c:type="DzlApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shortcut_manager"
              c:identifier="dzl_application_get_shortcut_manager"
              glib:get-property="shortcut-manager">
        <doc xml:space="preserve"
             filename="src/app/dzl-application.c"
             line="479">Gets the #DzlShortcutManager for the application.</doc>
        <source-position filename="src/app/dzl-application.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app/dzl-application.c"
               line="485">A #DzlShortcutManager</doc>
          <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="481">a #DzlApplication</doc>
            <type name="Application" c:type="DzlApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_theme_manager"
              c:identifier="dzl_application_get_theme_manager"
              glib:get-property="theme-manager">
        <doc xml:space="preserve"
             filename="src/app/dzl-application.c"
             line="381">Get the theme manager for the application.</doc>
        <source-position filename="src/app/dzl-application.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app/dzl-application.c"
               line="387">A #DzlThemeManager</doc>
          <type name="ThemeManager" c:type="DzlThemeManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="383">a #DzlApplication</doc>
            <type name="Application" c:type="DzlApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_resources"
              c:identifier="dzl_application_remove_resources">
        <doc xml:space="preserve"
             filename="src/app/dzl-application.c"
             line="453">This attempts to undo as many side-effects as possible from a call to
dzl_application_add_resources().</doc>
        <source-position filename="src/app/dzl-application.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="455">a #DzlApplication</doc>
            <type name="Application" c:type="DzlApplication*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application.c"
                 line="456">the location of the resources.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="menu-manager"
                transfer-ownership="none"
                getter="get_menu_manager">
        <type name="MenuManager"/>
      </property>
      <property name="shortcut-manager"
                transfer-ownership="none"
                getter="get_shortcut_manager">
        <type name="ShortcutManager"/>
      </property>
      <property name="theme-manager"
                transfer-ownership="none"
                getter="get_theme_manager">
        <type name="ThemeManager"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Application" c:type="GtkApplication"/>
      </field>
    </class>
    <record name="ApplicationClass"
            c:type="DzlApplicationClass"
            glib:is-gtype-struct-for="Application">
      <source-position filename="src/app/dzl-application.h" line="59"/>
      <field name="parent_class">
        <type name="Gtk.ApplicationClass" c:type="GtkApplicationClass"/>
      </field>
      <field name="add_resources">
        <callback name="add_resources">
          <source-position filename="src/app/dzl-application.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/app/dzl-application.c"
                   line="423">a #DzlApplication</doc>
              <type name="Application" c:type="DzlApplication*"/>
            </parameter>
            <parameter name="resource_path" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/app/dzl-application.c"
                   line="424">the location of the resources.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_resources">
        <callback name="remove_resources">
          <source-position filename="src/app/dzl-application.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/app/dzl-application.c"
                   line="455">a #DzlApplication</doc>
              <type name="Application" c:type="DzlApplication*"/>
            </parameter>
            <parameter name="resource_path" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/app/dzl-application.c"
                   line="456">the location of the resources.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="ApplicationWindow"
           c:symbol-prefix="application_window"
           c:type="DzlApplicationWindow"
           parent="Gtk.ApplicationWindow"
           glib:type-name="DzlApplicationWindow"
           glib:get-type="dzl_application_window_get_type"
           glib:type-struct="ApplicationWindowClass">
      <source-position filename="src/app/dzl-application-window.h" line="57"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="get_fullscreen"
                      invoker="get_fullscreen"
                      version="3.26">
        <doc xml:space="preserve"
             filename="src/app/dzl-application-window.c"
             line="611">Gets if the window is in the fullscreen state.</doc>
        <source-position filename="src/app/dzl-application-window.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app/dzl-application-window.c"
               line="617">%TRUE if @self is fullscreen, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="613">a #DzlApplicationWindow</doc>
            <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_fullscreen"
                      invoker="set_fullscreen"
                      version="3.26">
        <doc xml:space="preserve"
             filename="src/app/dzl-application-window.c"
             line="629">Sets the #DzlApplicationWindow into either the fullscreen or unfullscreen
state based on @fullscreen.

The titlebar for the window is contained within a #GtkRevealer which is
repurposed as a floating bar when the application is in fullscreen mode.

See dzl_application_window_get_fullscreen() to get the current fullscreen
state.</doc>
        <source-position filename="src/app/dzl-application-window.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="631">a #DzlApplicationWindow</doc>
            <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
          </instance-parameter>
          <parameter name="fullscreen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="632">if the window should be in the fullscreen state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_fullscreen"
              c:identifier="dzl_application_window_get_fullscreen"
              glib:get-property="fullscreen"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/app/dzl-application-window.c"
             line="611">Gets if the window is in the fullscreen state.</doc>
        <source-position filename="src/app/dzl-application-window.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app/dzl-application-window.c"
               line="617">%TRUE if @self is fullscreen, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="613">a #DzlApplicationWindow</doc>
            <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_titlebar"
              c:identifier="dzl_application_window_get_titlebar"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/app/dzl-application-window.c"
             line="687">Gets the titlebar for the window, if there is one.</doc>
        <source-position filename="src/app/dzl-application-window.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app/dzl-application-window.c"
               line="693">A #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="689">a #DzlApplicationWindow</doc>
            <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_titlebar_animation"
              c:identifier="dzl_application_window_get_titlebar_animation"
              glib:get-property="titlebar-animation">
        <source-position filename="src/app/dzl-application-window.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="TitlebarAnimation" c:type="DzlTitlebarAnimation"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_fullscreen"
              c:identifier="dzl_application_window_set_fullscreen"
              glib:set-property="fullscreen"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/app/dzl-application-window.c"
             line="629">Sets the #DzlApplicationWindow into either the fullscreen or unfullscreen
state based on @fullscreen.

The titlebar for the window is contained within a #GtkRevealer which is
repurposed as a floating bar when the application is in fullscreen mode.

See dzl_application_window_get_fullscreen() to get the current fullscreen
state.</doc>
        <source-position filename="src/app/dzl-application-window.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="631">a #DzlApplicationWindow</doc>
            <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
          </instance-parameter>
          <parameter name="fullscreen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="632">if the window should be in the fullscreen state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_titlebar"
              c:identifier="dzl_application_window_set_titlebar"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/app/dzl-application-window.c"
             line="712">Sets the titlebar for the window.

Generally, you want to do this from your GTK ui template by setting
the &amp;lt;child type="titlebar"&amp;gt;</doc>
        <source-position filename="src/app/dzl-application-window.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="714">a #DzlApplicationWindow</doc>
            <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
          </instance-parameter>
          <parameter name="titlebar" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="fullscreen"
                writable="1"
                transfer-ownership="none"
                setter="set_fullscreen"
                getter="get_fullscreen"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/app/dzl-application-window.c"
             line="518">The "fullscreen" property denotes if the window is in the fullscreen
state. The titlebar of the #DzlApplicationWindow contains a revealer
which will be repurposed into a floating bar while the window is in
the fullscreen mode.

Set this property to %FALSE to unfullscreen.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="titlebar-animation"
                transfer-ownership="none"
                getter="get_titlebar_animation"
                default-value="DZL_TITLEBAR_ANIMATION_SHOWN">
        <type name="TitlebarAnimation"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow"/>
      </field>
    </class>
    <record name="ApplicationWindowClass"
            c:type="DzlApplicationWindowClass"
            glib:is-gtype-struct-for="ApplicationWindow">
      <source-position filename="src/app/dzl-application-window.h" line="57"/>
      <field name="parent_class">
        <type name="Gtk.ApplicationWindowClass"
              c:type="GtkApplicationWindowClass"/>
      </field>
      <field name="get_fullscreen">
        <callback name="get_fullscreen">
          <source-position filename="src/app/dzl-application-window.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app/dzl-application-window.c"
                 line="617">%TRUE if @self is fullscreen, otherwise %FALSE.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/app/dzl-application-window.c"
                   line="613">a #DzlApplicationWindow</doc>
              <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_fullscreen">
        <callback name="set_fullscreen">
          <source-position filename="src/app/dzl-application-window.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/app/dzl-application-window.c"
                   line="631">a #DzlApplicationWindow</doc>
              <type name="ApplicationWindow" c:type="DzlApplicationWindow*"/>
            </parameter>
            <parameter name="fullscreen" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/app/dzl-application-window.c"
                   line="632">if the window should be in the fullscreen state</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="Bin"
           c:symbol-prefix="bin"
           c:type="DzlBin"
           parent="Gtk.Bin"
           glib:type-name="DzlBin"
           glib:get-type="dzl_bin_get_type"
           glib:type-struct="BinClass">
      <source-position filename="src/widgets/dzl-bin.h" line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_bin_new">
        <source-position filename="src/widgets/dzl-bin.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="BinClass"
            c:type="DzlBinClass"
            glib:is-gtype-struct-for="Bin">
      <source-position filename="src/widgets/dzl-bin.h" line="40"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="BindingGroup"
           c:symbol-prefix="binding_group"
           c:type="DzlBindingGroup"
           parent="GObject.Object"
           glib:type-name="DzlBindingGroup"
           glib:get-type="dzl_binding_group_get_type"
           glib:type-struct="BindingGroupClass">
      <doc xml:space="preserve"
           filename="src/bindings/dzl-binding-group.c"
           line="29">#DzlBindingGroup manages to simplify the process of binding
many properties from a #GObject as a group. As such there is no API
to unbind a property from the group.

In particular, this allows you to change the source instance for the
bindings. This automatically causes the unbinding of the properties
from the old instance and binding to the new instance.

This should not be confused with #GtkBindingGroup.</doc>
      <source-position filename="src/bindings/dzl-binding-group.h" line="32"/>
      <constructor name="new" c:identifier="dzl_binding_group_new">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-binding-group.c"
             line="362">Creates a new #DzlBindingGroup.</doc>
        <source-position filename="src/bindings/dzl-binding-group.h"
                         line="35"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bindings/dzl-binding-group.c"
               line="367">a new #DzlBindingGroup</doc>
          <type name="BindingGroup" c:type="DzlBindingGroup*"/>
        </return-value>
      </constructor>
      <method name="bind" c:identifier="dzl_binding_group_bind">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-binding-group.c"
             line="530">Creates a binding between @source_property on the source object
and @target_property on @target. Whenever the @source_property
is changed the @target_property is updated using the same value.
The binding flags #G_BINDING_SYNC_CREATE is automatically specified.

See: g_object_bind_property().</doc>
        <source-position filename="src/bindings/dzl-binding-group.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="532">the #DzlBindingGroup</doc>
            <type name="BindingGroup" c:type="DzlBindingGroup*"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="533">the property on the source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="534">the target #GObject</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="535">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="536">the flags used to create the #GBinding</doc>
            <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_full"
              c:identifier="dzl_binding_group_bind_full"
              shadowed-by="bind_with_closures">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-binding-group.c"
             line="559">Creates a binding between @source_property on the source object and
@target_property on @target, allowing you to set the transformation
functions to be used by the binding. The binding flags
#G_BINDING_SYNC_CREATE is automatically specified.

See: g_object_bind_property_full().</doc>
        <source-position filename="src/bindings/dzl-binding-group.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="561">the #DzlBindingGroup</doc>
            <type name="BindingGroup" c:type="DzlBindingGroup*"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="562">the property on the source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="563">the target #GObject</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="564">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="565">the flags used to create the #GBinding</doc>
            <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
          </parameter>
          <parameter name="transform_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="566">the transformation function
    from the source object to the @target, or %NULL to use the default</doc>
            <type name="GObject.BindingTransformFunc"
                  c:type="GBindingTransformFunc"/>
          </parameter>
          <parameter name="transform_from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="568">the transformation function
    from the @target to the source object, or %NULL to use the default</doc>
            <type name="GObject.BindingTransformFunc"
                  c:type="GBindingTransformFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="570">custom data to be passed to the transformation
            functions, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="572">function to be called when disposing the binding,
    to free the resources used by the transformation functions</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_with_closures"
              c:identifier="dzl_binding_group_bind_with_closures"
              shadows="bind_full">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-binding-group.c"
             line="601">Creates a binding between @source_property on the source object and
@target_property on @target, allowing you to set the transformation
functions to be used by the binding. The binding flags
#G_BINDING_SYNC_CREATE is automatically specified.

This function is the language bindings friendly version of
dzl_binding_group_bind_property_full(), using #GClosures
instead of function pointers.

See: g_object_bind_property_with_closures().</doc>
        <source-position filename="src/bindings/dzl-binding-group.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="603">the #DzlBindingGroup</doc>
            <type name="BindingGroup" c:type="DzlBindingGroup*"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="604">the property on the source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="605">the target #GObject</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="606">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="607">the flags used to create the #GBinding</doc>
            <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
          </parameter>
          <parameter name="transform_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="608">a #GClosure wrapping the
    transformation function from the source object to the @target,
    or %NULL to use the default</doc>
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="transform_from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="611">a #GClosure wrapping the
    transformation function from the @target to the source object,
    or %NULL to use the default</doc>
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_source"
              c:identifier="dzl_binding_group_get_source"
              glib:get-property="source">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-binding-group.c"
             line="375">Gets the source object used for binding properties.</doc>
        <source-position filename="src/bindings/dzl-binding-group.h"
                         line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bindings/dzl-binding-group.c"
               line="381">the source object.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="377">the #DzlBindingGroup</doc>
            <type name="BindingGroup" c:type="DzlBindingGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_source"
              c:identifier="dzl_binding_group_set_source"
              glib:set-property="source">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-binding-group.c"
             line="411">Sets @source as the source object used for creating property
bindings. If there is already a source object all bindings from it
will be removed.

Note: All properties that have been bound must exist on @source.</doc>
        <source-position filename="src/bindings/dzl-binding-group.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="413">the #DzlBindingGroup</doc>
            <type name="BindingGroup" c:type="DzlBindingGroup*"/>
          </instance-parameter>
          <parameter name="source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-binding-group.c"
                 line="414">the source #GObject</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="source"
                writable="1"
                transfer-ownership="none"
                setter="set_source"
                getter="get_source">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-binding-group.c"
             line="341">The source object used for binding properties.</doc>
        <type name="GObject.Object"/>
      </property>
    </class>
    <record name="BindingGroupClass"
            c:type="DzlBindingGroupClass"
            glib:is-gtype-struct-for="BindingGroup">
      <source-position filename="src/bindings/dzl-binding-group.h" line="32"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="BoldingLabel"
           c:symbol-prefix="bolding_label"
           c:type="DzlBoldingLabel"
           parent="Gtk.Label"
           glib:type-name="DzlBoldingLabel"
           glib:get-type="dzl_bolding_label_get_type"
           glib:type-struct="BoldingLabelClass">
      <source-position filename="src/widgets/dzl-bolding-label.h" line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_bolding_label_new">
        <source-position filename="src/widgets/dzl-bolding-label.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="BoldingLabel" c:type="DzlBoldingLabel*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="bold" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="dzl_bolding_label_new_with_mnemonic">
        <source-position filename="src/widgets/dzl-bolding-label.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="BoldingLabel" c:type="DzlBoldingLabel*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="bold" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_bold"
              c:identifier="dzl_bolding_label_set_bold"
              glib:set-property="bold">
        <source-position filename="src/widgets/dzl-bolding-label.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BoldingLabel" c:type="DzlBoldingLabel*"/>
          </instance-parameter>
          <parameter name="bold" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_weight" c:identifier="dzl_bolding_label_set_weight">
        <source-position filename="src/widgets/dzl-bolding-label.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BoldingLabel" c:type="DzlBoldingLabel*"/>
          </instance-parameter>
          <parameter name="weight" transfer-ownership="none">
            <type name="Pango.Weight" c:type="PangoWeight"/>
          </parameter>
        </parameters>
      </method>
      <property name="bold"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_bold"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="BoldingLabelClass"
            c:type="DzlBoldingLabelClass"
            glib:is-gtype-struct-for="BoldingLabel">
      <source-position filename="src/widgets/dzl-bolding-label.h" line="31"/>
      <field name="parent_class">
        <type name="Gtk.LabelClass" c:type="GtkLabelClass"/>
      </field>
    </record>
    <class name="Box"
           c:symbol-prefix="box"
           c:type="DzlBox"
           parent="Gtk.Box"
           glib:type-name="DzlBox"
           glib:get-type="dzl_box_get_type"
           glib:type-struct="BoxClass">
      <source-position filename="src/widgets/dzl-box.h" line="36"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_box_new">
        <source-position filename="src/widgets/dzl-box.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_max_width_request"
              c:identifier="dzl_box_get_max_width_request"
              glib:get-property="max-width-request">
        <source-position filename="src/widgets/dzl-box.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Box" c:type="DzlBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_child" c:identifier="dzl_box_get_nth_child">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-box.c"
             line="40">Gets the nth child of @self.</doc>
        <source-position filename="src/widgets/dzl-box.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-box.c"
               line="47">A #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-box.c"
                 line="42">a #DzlBox</doc>
            <type name="Box" c:type="DzlBox*"/>
          </instance-parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-box.c"
                 line="43">the index of the child starting from 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_width_request"
              c:identifier="dzl_box_set_max_width_request"
              glib:set-property="max-width-request">
        <source-position filename="src/widgets/dzl-box.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Box" c:type="DzlBox*"/>
          </instance-parameter>
          <parameter name="max_width_request" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="max-width-request"
                writable="1"
                transfer-ownership="none"
                setter="set_max_width_request"
                getter="get_max_width_request"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
    </class>
    <record name="BoxClass"
            c:type="DzlBoxClass"
            glib:is-gtype-struct-for="Box">
      <source-position filename="src/widgets/dzl-box.h" line="36"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="BoxTheatric"
           c:symbol-prefix="box_theatric"
           c:type="DzlBoxTheatric"
           parent="GObject.Object"
           glib:type-name="DzlBoxTheatric"
           glib:get-type="dzl_box_theatric_get_type"
           glib:type-struct="BoxTheatricClass">
      <source-position filename="src/animation/dzl-box-theatric.h" line="31"/>
      <property name="alpha"
                writable="1"
                transfer-ownership="none"
                default-value="1.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="background"
                writable="1"
                transfer-ownership="none"
                default-value="#000000">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="height"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="icon" writable="1" transfer-ownership="none">
        <type name="Gio.Icon"/>
      </property>
      <property name="surface"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="target"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <property name="width"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="x"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="y"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="BoxTheatricClass"
            c:type="DzlBoxTheatricClass"
            glib:is-gtype-struct-for="BoxTheatric">
      <source-position filename="src/animation/dzl-box-theatric.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="DZL_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/dzl-version.h"
           line="81">Compile-time version checking. Evaluates to %TRUE if the version
of dazzle is greater than the required one.</doc>
      <source-position filename="src/dzl-version.h" line="89"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="src/dzl-version.h"
               line="83">required major version</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="src/dzl-version.h"
               line="84">required minor version</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="src/dzl-version.h"
               line="85">required micro version</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="COUNTER_ADD"
                    c:identifier="DZL_COUNTER_ADD"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util/dzl-counter.h"
           line="219">Adds @Count to @Identifier.

This operation is not guaranteed to have full correctness. It tries to find
a happy medium between fast, and accurate. When possible, the %rdtscp
instruction is used to get a cacheline owned by the executing CPU, to avoid
collisions. However, this is not guaranteed as the thread could be swapped
between the calls to %rdtscp and %addq (on 64-bit Intel).

Other platforms have fallbacks which may give different guarantees, such as
using atomic operations (and therefore, memory barriers).

See #DzlCounter for more information.</doc>
      <source-position filename="src/util/dzl-counter.h" line="238"/>
      <parameters>
        <parameter name="Identifier">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="221">The identifier of the counter.</doc>
        </parameter>
        <parameter name="Count">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="222">the amount to add to the counter.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="COUNTER_DEC"
                    c:identifier="DZL_COUNTER_DEC"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util/dzl-counter.h"
           line="202">Decrements the counter @Identifier by 1.</doc>
      <source-position filename="src/util/dzl-counter.h" line="208"/>
      <parameters>
        <parameter name="Identifier">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="204">The identifier of the counter.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="COUNTER_INC"
                    c:identifier="DZL_COUNTER_INC"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util/dzl-counter.h"
           line="194">Increments the counter @Identifier by 1.</doc>
      <source-position filename="src/util/dzl-counter.h" line="200"/>
      <parameters>
        <parameter name="Identifier">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="196">The identifier of the counter.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="COUNTER_REQUIRES_ATOMIC"
              value="1"
              c:type="DZL_COUNTER_REQUIRES_ATOMIC">
      <source-position filename="src/util/dzl-counter.h" line="171"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="COUNTER_SUB"
                    c:identifier="DZL_COUNTER_SUB"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util/dzl-counter.h"
           line="210">Subtracts from the counter identified by @Identifier by @Count.</doc>
      <source-position filename="src/util/dzl-counter.h" line="217"/>
      <parameters>
        <parameter name="Identifier">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="212">The identifier of the counter.</doc>
        </parameter>
        <parameter name="Count">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="213">the amount to subtract.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="CenteringBin"
           c:symbol-prefix="centering_bin"
           c:type="DzlCenteringBin"
           parent="Gtk.Bin"
           glib:type-name="DzlCenteringBin"
           glib:get-type="dzl_centering_bin_get_type"
           glib:type-struct="CenteringBinClass">
      <doc xml:space="preserve"
           filename="src/widgets/dzl-centering-bin.c"
           line="26">First off, you probably want to use GtkBox with a center widget instead
of this widget. However, the case where this widget is useful is when
you cannot control your layout within the width of the toplevel, but
still want your child centered within the toplevel.

This is done by translating coordinates of the widget with respect to
the toplevel and anchoring the child at TRUE_CENTER-(alloc.width/2).</doc>
      <source-position filename="src/widgets/dzl-centering-bin.h" line="36"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_centering_bin_new">
        <source-position filename="src/widgets/dzl-centering-bin.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="max-width-request"
                writable="1"
                transfer-ownership="none"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="CenteringBinClass"
            c:type="DzlCenteringBinClass"
            glib:is-gtype-struct-for="CenteringBin">
      <source-position filename="src/widgets/dzl-centering-bin.h" line="36"/>
      <field name="parent">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="ChildPropertyAction"
           c:symbol-prefix="child_property_action"
           c:type="DzlChildPropertyAction"
           parent="GObject.Object"
           glib:type-name="DzlChildPropertyAction"
           glib:get-type="dzl_child_property_action_get_type"
           glib:type-struct="ChildPropertyActionClass">
      <source-position filename="src/actions/dzl-child-property-action.h"
                       line="35"/>
      <implements name="Gio.Action"/>
      <function name="new" c:identifier="dzl_child_property_action_new">
        <doc xml:space="preserve"
             filename="src/actions/dzl-child-property-action.c"
             line="472">This creates a new #GAction that will change when the underlying child
property of @container changes for @child.</doc>
        <source-position filename="src/actions/dzl-child-property-action.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/actions/dzl-child-property-action.c"
               line="482">A new #DzlChildPropertyAction.</doc>
          <type name="Gio.Action" c:type="GAction*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-child-property-action.c"
                 line="474">the name of the action</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="container" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-child-property-action.c"
                 line="475">the container of the widget</doc>
            <type name="Gtk.Container" c:type="GtkContainer*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-child-property-action.c"
                 line="476">the widget for the child property</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="child_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-child-property-action.c"
                 line="477">the name of the child property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <property name="child" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <property name="child-property-name"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="container" transfer-ownership="none">
        <type name="Gtk.Container"/>
      </property>
    </class>
    <record name="ChildPropertyActionClass"
            c:type="DzlChildPropertyActionClass"
            glib:is-gtype-struct-for="ChildPropertyAction">
      <source-position filename="src/actions/dzl-child-property-action.h"
                       line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ColumnLayout"
           c:symbol-prefix="column_layout"
           c:type="DzlColumnLayout"
           parent="Gtk.Container"
           glib:type-name="DzlColumnLayout"
           glib:get-type="dzl_column_layout_get_type"
           glib:type-struct="ColumnLayoutClass">
      <source-position filename="src/widgets/dzl-column-layout.h" line="36"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_column_layout_new">
        <source-position filename="src/widgets/dzl-column-layout.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_column_spacing"
              c:identifier="dzl_column_layout_get_column_spacing"
              glib:get-property="column-spacing">
        <source-position filename="src/widgets/dzl-column-layout.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ColumnLayout" c:type="DzlColumnLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_column_width"
              c:identifier="dzl_column_layout_get_column_width"
              glib:get-property="column-width">
        <source-position filename="src/widgets/dzl-column-layout.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ColumnLayout" c:type="DzlColumnLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_columns"
              c:identifier="dzl_column_layout_get_max_columns"
              glib:get-property="max-columns">
        <source-position filename="src/widgets/dzl-column-layout.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ColumnLayout" c:type="DzlColumnLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_row_spacing"
              c:identifier="dzl_column_layout_get_row_spacing"
              glib:get-property="row-spacing">
        <source-position filename="src/widgets/dzl-column-layout.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ColumnLayout" c:type="DzlColumnLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_column_spacing"
              c:identifier="dzl_column_layout_set_column_spacing"
              glib:set-property="column-spacing">
        <source-position filename="src/widgets/dzl-column-layout.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ColumnLayout" c:type="DzlColumnLayout*"/>
          </instance-parameter>
          <parameter name="column_spacing" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_column_width"
              c:identifier="dzl_column_layout_set_column_width"
              glib:set-property="column-width">
        <source-position filename="src/widgets/dzl-column-layout.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ColumnLayout" c:type="DzlColumnLayout*"/>
          </instance-parameter>
          <parameter name="column_width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_columns"
              c:identifier="dzl_column_layout_set_max_columns"
              glib:set-property="max-columns">
        <source-position filename="src/widgets/dzl-column-layout.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ColumnLayout" c:type="DzlColumnLayout*"/>
          </instance-parameter>
          <parameter name="max_columns" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_row_spacing"
              c:identifier="dzl_column_layout_set_row_spacing"
              glib:set-property="row-spacing">
        <source-position filename="src/widgets/dzl-column-layout.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ColumnLayout" c:type="DzlColumnLayout*"/>
          </instance-parameter>
          <parameter name="row_spacing" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="column-spacing"
                writable="1"
                transfer-ownership="none"
                setter="set_column_spacing"
                getter="get_column_spacing"
                default-value="24">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="column-width"
                writable="1"
                transfer-ownership="none"
                setter="set_column_width"
                getter="get_column_width"
                default-value="500">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="max-columns"
                writable="1"
                transfer-ownership="none"
                setter="set_max_columns"
                getter="get_max_columns"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="row-spacing"
                writable="1"
                transfer-ownership="none"
                setter="set_row_spacing"
                getter="get_row_spacing"
                default-value="24">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="ColumnLayoutClass"
            c:type="DzlColumnLayoutClass"
            glib:is-gtype-struct-for="ColumnLayout">
      <source-position filename="src/widgets/dzl-column-layout.h" line="36"/>
      <field name="parent">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <record name="Counter" c:type="DzlCounter">
      <source-position filename="src/util/dzl-counter.h" line="270"/>
      <field name="values" writable="1">
        <type name="CounterValue" c:type="DzlCounterValue*"/>
      </field>
      <field name="category" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <method name="get" c:identifier="dzl_counter_get">
        <source-position filename="src/util/dzl-counter.h" line="300"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <type name="Counter" c:type="DzlCounter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="dzl_counter_reset">
        <source-position filename="src/util/dzl-counter.h" line="298"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <type name="Counter" c:type="DzlCounter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="CounterArena"
            c:type="DzlCounterArena"
            opaque="1"
            glib:type-name="DzlCounterArena"
            glib:get-type="dzl_counter_arena_get_type"
            c:symbol-prefix="counter_arena">
      <source-position filename="src/util/dzl-counter.h" line="250"/>
      <constructor name="new_for_pid"
                   c:identifier="dzl_counter_arena_new_for_pid">
        <source-position filename="src/util/dzl-counter.h" line="285"/>
        <return-value transfer-ownership="full">
          <type name="CounterArena" c:type="DzlCounterArena*"/>
        </return-value>
        <parameters>
          <parameter name="pid" transfer-ownership="none">
            <type name="GLib.Pid" c:type="GPid"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="foreach" c:identifier="dzl_counter_arena_foreach">
        <doc xml:space="preserve"
             filename="src/util/dzl-counter.c"
             line="478">Calls @func for every counter found in @area.</doc>
        <source-position filename="src/util/dzl-counter.h" line="294"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arena" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-counter.c"
                 line="480">An #DzlCounterArena</doc>
            <type name="CounterArena" c:type="DzlCounterArena*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/util/dzl-counter.c"
                 line="481">A callback to execute</doc>
            <type name="CounterForeachFunc" c:type="DzlCounterForeachFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/util/dzl-counter.c"
                 line="482">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="dzl_counter_arena_ref">
        <source-position filename="src/util/dzl-counter.h" line="287"/>
        <return-value transfer-ownership="full">
          <type name="CounterArena" c:type="DzlCounterArena*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arena" transfer-ownership="none">
            <type name="CounterArena" c:type="DzlCounterArena*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="dzl_counter_arena_register">
        <source-position filename="src/util/dzl-counter.h" line="291"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arena" transfer-ownership="none">
            <type name="CounterArena" c:type="DzlCounterArena*"/>
          </instance-parameter>
          <parameter name="counter" transfer-ownership="none">
            <type name="Counter" c:type="DzlCounter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="dzl_counter_arena_unref">
        <source-position filename="src/util/dzl-counter.h" line="289"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arena" transfer-ownership="none">
            <type name="CounterArena" c:type="DzlCounterArena*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="get_default"
                c:identifier="dzl_counter_arena_get_default">
        <source-position filename="src/util/dzl-counter.h" line="283"/>
        <return-value transfer-ownership="full">
          <type name="CounterArena" c:type="DzlCounterArena*"/>
        </return-value>
      </function>
    </record>
    <callback name="CounterForeachFunc" c:type="DzlCounterForeachFunc">
      <doc xml:space="preserve"
           filename="src/util/dzl-counter.h"
           line="253">Function prototype for callbacks provided to dzl_counter_arena_foreach().</doc>
      <source-position filename="src/util/dzl-counter.h" line="260"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="counter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="255">the counter.</doc>
          <type name="Counter" c:type="DzlCounter*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="256">data supplied to dzl_counter_arena_foreach().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="CounterValue" c:type="DzlCounterValue">
      <source-position filename="src/util/dzl-counter.h" line="276"/>
      <field name="value" writable="1">
        <type name="gint64" c:type="volatile gint64"/>
      </field>
      <field name="padding" writable="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="gint64" c:type="gint64"/>
        </array>
      </field>
    </record>
    <class name="CountersWindow"
           c:symbol-prefix="counters_window"
           c:type="DzlCountersWindow"
           parent="Gtk.Window"
           glib:type-name="DzlCountersWindow"
           glib:get-type="dzl_counters_window_get_type"
           glib:type-struct="CountersWindowClass">
      <source-position filename="src/widgets/dzl-counters-window.h" line="43"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_counters_window_new">
        <source-position filename="src/widgets/dzl-counters-window.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_arena" c:identifier="dzl_counters_window_get_arena">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-counters-window.c"
             line="201">Gets the currently viewed arena, if any.</doc>
        <source-position filename="src/widgets/dzl-counters-window.h"
                         line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-counters-window.c"
               line="207">A #DzlCounterArena or %NULL.</doc>
          <type name="CounterArena" c:type="DzlCounterArena*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-counters-window.c"
                 line="203">a #DzlCountersWindow</doc>
            <type name="CountersWindow" c:type="DzlCountersWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_arena" c:identifier="dzl_counters_window_set_arena">
        <source-position filename="src/widgets/dzl-counters-window.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CountersWindow" c:type="DzlCountersWindow*"/>
          </instance-parameter>
          <parameter name="arena" transfer-ownership="none">
            <type name="CounterArena" c:type="DzlCounterArena*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
    </class>
    <record name="CountersWindowClass"
            c:type="DzlCountersWindowClass"
            glib:is-gtype-struct-for="CountersWindow">
      <source-position filename="src/widgets/dzl-counters-window.h" line="43"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="CpuGraph"
           c:symbol-prefix="cpu_graph"
           c:type="DzlCpuGraph"
           parent="GraphView"
           glib:type-name="DzlCpuGraph"
           glib:get-type="dzl_cpu_graph_get_type"
           glib:type-struct="CpuGraphClass">
      <source-position filename="src/graphing/dzl-cpu-graph.h" line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new_full" c:identifier="dzl_cpu_graph_new_full">
        <source-position filename="src/graphing/dzl-cpu-graph.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="timespan" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="max_samples" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="max-samples"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="120">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="timespan"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="60000000">
        <type name="gint64" c:type="gint64"/>
      </property>
    </class>
    <record name="CpuGraphClass"
            c:type="DzlCpuGraphClass"
            glib:is-gtype-struct-for="CpuGraph">
      <source-position filename="src/graphing/dzl-cpu-graph.h" line="31"/>
      <field name="parent_class">
        <type name="GraphViewClass" c:type="DzlGraphViewClass"/>
      </field>
    </record>
    <class name="CpuModel"
           c:symbol-prefix="cpu_model"
           c:type="DzlCpuModel"
           parent="GraphModel"
           glib:type-name="DzlCpuModel"
           glib:get-type="dzl_cpu_model_get_type"
           glib:type-struct="CpuModelClass">
      <source-position filename="src/graphing/dzl-cpu-model.h" line="31"/>
      <constructor name="new" c:identifier="dzl_cpu_model_new">
        <source-position filename="src/graphing/dzl-cpu-model.h" line="34"/>
        <return-value transfer-ownership="full">
          <type name="GraphModel" c:type="DzlGraphModel*"/>
        </return-value>
      </constructor>
    </class>
    <record name="CpuModelClass"
            c:type="DzlCpuModelClass"
            glib:is-gtype-struct-for="CpuModel">
      <source-position filename="src/graphing/dzl-cpu-model.h" line="31"/>
      <field name="parent_class">
        <type name="GraphModelClass" c:type="DzlGraphModelClass"/>
      </field>
    </record>
    <class name="CssProvider"
           c:symbol-prefix="css_provider"
           c:type="DzlCssProvider"
           parent="Gtk.CssProvider"
           glib:type-name="DzlCssProvider"
           glib:get-type="dzl_css_provider_get_type"
           glib:type-struct="CssProviderClass">
      <source-position filename="src/theming/dzl-css-provider.h" line="31"/>
      <implements name="Gtk.StyleProvider"/>
      <constructor name="new" c:identifier="dzl_css_provider_new">
        <source-position filename="src/theming/dzl-css-provider.h" line="34"/>
        <return-value transfer-ownership="full">
          <type name="Gtk.CssProvider" c:type="GtkCssProvider*"/>
        </return-value>
        <parameters>
          <parameter name="base_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="base-path"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="CssProviderClass"
            c:type="DzlCssProviderClass"
            glib:is-gtype-struct-for="CssProvider">
      <source-position filename="src/theming/dzl-css-provider.h" line="31"/>
      <field name="parent_class">
        <type name="Gtk.CssProviderClass" c:type="GtkCssProviderClass"/>
      </field>
    </record>
    <function-macro name="DEFINE_ACTION_GROUP"
                    c:identifier="DZL_DEFINE_ACTION_GROUP"
                    introspectable="0">
      <source-position filename="src/actions/dzl-action-group.h" line="26"/>
      <parameters>
        <parameter name="Type">
        </parameter>
        <parameter name="prefix">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_COUNTER"
                    c:identifier="DZL_DEFINE_COUNTER"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util/dzl-counter.h"
           line="174">|[&lt;!-- language="C" --&gt;
DZL_DEFINE_COUNTER (my_counter, "My", "Counter", "My Counter Description");
]|</doc>
      <source-position filename="src/util/dzl-counter.h" line="185"/>
      <parameters>
        <parameter name="Identifier">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="176">The symbol name of the counter</doc>
        </parameter>
        <parameter name="Category">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="177">A string category for the counter.</doc>
        </parameter>
        <parameter name="Name">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="178">A string name for the counter.</doc>
        </parameter>
        <parameter name="Description">
          <doc xml:space="preserve"
               filename="src/util/dzl-counter.h"
               line="179">A string description for the counter.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="DOCK_BIN_STYLE_CLASS_PINNED"
              value="pinned"
              c:type="DZL_DOCK_BIN_STYLE_CLASS_PINNED">
      <source-position filename="src/panel/dzl-dock-bin.h" line="32"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="DirectoryModel"
           c:symbol-prefix="directory_model"
           c:type="DzlDirectoryModel"
           parent="GObject.Object"
           glib:type-name="DzlDirectoryModel"
           glib:get-type="dzl_directory_model_get_type"
           glib:type-struct="DirectoryModelClass">
      <source-position filename="src/files/dzl-directory-model.h" line="31"/>
      <implements name="Gio.ListModel"/>
      <function name="new" c:identifier="dzl_directory_model_new">
        <doc xml:space="preserve"
             filename="src/files/dzl-directory-model.c"
             line="391">Creates a new #DzlDirectoryModel using @directory as the directory to monitor.</doc>
        <source-position filename="src/files/dzl-directory-model.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/files/dzl-directory-model.c"
               line="397">A newly created #DzlDirectoryModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-directory-model.c"
                 line="393">A #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_directory"
              c:identifier="dzl_directory_model_get_directory"
              glib:get-property="directory">
        <doc xml:space="preserve"
             filename="src/files/dzl-directory-model.c"
             line="409">Gets the directory the model is observing.</doc>
        <source-position filename="src/files/dzl-directory-model.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/files/dzl-directory-model.c"
               line="415">A #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-directory-model.c"
                 line="411">a #DzlDirectoryModel</doc>
            <type name="DirectoryModel" c:type="DzlDirectoryModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_directory"
              c:identifier="dzl_directory_model_set_directory"
              glib:set-property="directory">
        <source-position filename="src/files/dzl-directory-model.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryModel" c:type="DzlDirectoryModel*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_func"
              c:identifier="dzl_directory_model_set_visible_func">
        <source-position filename="src/files/dzl-directory-model.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryModel" c:type="DzlDirectoryModel*"/>
          </instance-parameter>
          <parameter name="visible_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <type name="DirectoryModelVisibleFunc"
                  c:type="DzlDirectoryModelVisibleFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="directory"
                writable="1"
                transfer-ownership="none"
                setter="set_directory"
                getter="get_directory">
        <type name="Gio.File"/>
      </property>
    </class>
    <record name="DirectoryModelClass"
            c:type="DzlDirectoryModelClass"
            glib:is-gtype-struct-for="DirectoryModel">
      <source-position filename="src/files/dzl-directory-model.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="DirectoryModelVisibleFunc"
              c:type="DzlDirectoryModelVisibleFunc">
      <source-position filename="src/files/dzl-directory-model.h" line="33"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <type name="DirectoryModel" c:type="DzlDirectoryModel*"/>
        </parameter>
        <parameter name="directory" transfer-ownership="none">
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="file_info" transfer-ownership="none">
          <type name="Gio.FileInfo" c:type="GFileInfo*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="DirectoryReaper"
           c:symbol-prefix="directory_reaper"
           c:type="DzlDirectoryReaper"
           parent="GObject.Object"
           glib:type-name="DzlDirectoryReaper"
           glib:get-type="dzl_directory_reaper_get_type"
           glib:type-struct="DirectoryReaperClass">
      <source-position filename="src/files/dzl-directory-reaper.h" line="31"/>
      <constructor name="new" c:identifier="dzl_directory_reaper_new">
        <source-position filename="src/files/dzl-directory-reaper.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <type name="DirectoryReaper" c:type="DzlDirectoryReaper*"/>
        </return-value>
      </constructor>
      <method name="add_directory"
              c:identifier="dzl_directory_reaper_add_directory">
        <source-position filename="src/files/dzl-directory-reaper.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="DzlDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="min_age" transfer-ownership="none">
            <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_file" c:identifier="dzl_directory_reaper_add_file">
        <source-position filename="src/files/dzl-directory-reaper.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="DzlDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="min_age" transfer-ownership="none">
            <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_glob" c:identifier="dzl_directory_reaper_add_glob">
        <source-position filename="src/files/dzl-directory-reaper.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="DzlDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="glob" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min_age" transfer-ownership="none">
            <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute"
              c:identifier="dzl_directory_reaper_execute"
              throws="1">
        <source-position filename="src/files/dzl-directory-reaper.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="DzlDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_async"
              c:identifier="dzl_directory_reaper_execute_async">
        <source-position filename="src/files/dzl-directory-reaper.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="DzlDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="dzl_directory_reaper_execute_finish"
              throws="1">
        <source-position filename="src/files/dzl-directory-reaper.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="DzlDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="remove-file" when="last" version="3.32">
        <doc xml:space="preserve"
             filename="src/files/dzl-directory-reaper.c"
             line="138">The "remove-file" signal is emitted for each file that is removed by the
#DzlDirectoryReaper instance. This may be useful if you want to show the
user what was processed by the reaper.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-directory-reaper.c"
                 line="141">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DirectoryReaperClass"
            c:type="DzlDirectoryReaperClass"
            glib:is-gtype-struct-for="DirectoryReaper">
      <source-position filename="src/files/dzl-directory-reaper.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="Dock"
               c:symbol-prefix="dock"
               c:type="DzlDock"
               glib:type-name="DzlDock"
               glib:get-type="dzl_dock_get_type"
               glib:type-struct="DockInterface">
      <source-position filename="src/panel/dzl-dock.h" line="33"/>
      <prerequisite name="Gtk.Container"/>
      <property name="manager" writable="1" transfer-ownership="none">
        <type name="DockManager"/>
      </property>
    </interface>
    <class name="DockBin"
           c:symbol-prefix="dock_bin"
           c:type="DzlDockBin"
           parent="Gtk.Container"
           glib:type-name="DzlDockBin"
           glib:get-type="dzl_dock_bin_get_type"
           glib:type-struct="DockBinClass">
      <source-position filename="src/panel/dzl-dock-bin.h" line="49"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Dock"/>
      <implements name="DockItem"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_dock_bin_new">
        <source-position filename="src/panel/dzl-dock-bin.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="create_edge" introspectable="0">
        <source-position filename="src/panel/dzl-dock-bin.h" line="38"/>
        <return-value>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockBin" c:type="DzlDockBin*"/>
          </instance-parameter>
          <parameter name="edge" transfer-ownership="none">
            <type name="Gtk.PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_bottom_edge"
              c:identifier="dzl_dock_bin_get_bottom_edge">
        <source-position filename="src/panel/dzl-dock-bin.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-bin.c"
               line="2113">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockBin" c:type="DzlDockBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_center_widget"
              c:identifier="dzl_dock_bin_get_center_widget">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-bin.c"
             line="2052">Gets the center widget for the dock.</doc>
        <source-position filename="src/panel/dzl-dock-bin.h" line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-bin.c"
               line="2058">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-bin.c"
                 line="2054">A #DzlDockBin</doc>
            <type name="DockBin" c:type="DzlDockBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_left_edge" c:identifier="dzl_dock_bin_get_left_edge">
        <source-position filename="src/panel/dzl-dock-bin.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-bin.c"
               line="2094">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockBin" c:type="DzlDockBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_right_edge" c:identifier="dzl_dock_bin_get_right_edge">
        <source-position filename="src/panel/dzl-dock-bin.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-bin.c"
               line="2132">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockBin" c:type="DzlDockBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_top_edge" c:identifier="dzl_dock_bin_get_top_edge">
        <source-position filename="src/panel/dzl-dock-bin.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-bin.c"
               line="2075">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockBin" c:type="DzlDockBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bottom-visible"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="left-visible"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="right-visible"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="top-visible"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="DockBinClass"
            c:type="DzlDockBinClass"
            glib:is-gtype-struct-for="DockBin">
      <source-position filename="src/panel/dzl-dock-bin.h" line="49"/>
      <field name="parent">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="create_edge" introspectable="0">
        <callback name="create_edge" introspectable="0">
          <source-position filename="src/panel/dzl-dock-bin.h" line="38"/>
          <return-value>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockBin" c:type="DzlDockBin*"/>
            </parameter>
            <parameter name="edge" transfer-ownership="none">
              <type name="Gtk.PositionType" c:type="GtkPositionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="DockBinEdge"
           c:symbol-prefix="dock_bin_edge"
           c:type="DzlDockBinEdge"
           parent="DockRevealer"
           glib:type-name="DzlDockBinEdge"
           glib:get-type="dzl_dock_bin_edge_get_type"
           glib:type-struct="DockBinEdgeClass">
      <source-position filename="src/panel/dzl-dock-bin-edge.h" line="46"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="DockItem"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="move_to_bin_child">
        <source-position filename="src/panel/dzl-dock-bin-edge.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockBinEdge" c:type="DzlDockBinEdge*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_edge"
              c:identifier="dzl_dock_bin_edge_get_edge"
              glib:get-property="edge">
        <source-position filename="src/panel/dzl-dock-bin-edge.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.PositionType" c:type="GtkPositionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockBinEdge" c:type="DzlDockBinEdge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="edge"
                writable="1"
                transfer-ownership="none"
                getter="get_edge"
                default-value="GTK_POS_LEFT">
        <type name="Gtk.PositionType"/>
      </property>
      <field name="parent_instance">
        <type name="DockRevealer" c:type="DzlDockRevealer"/>
      </field>
      <glib:signal name="move-to-bin-child" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DockBinEdgeClass"
            c:type="DzlDockBinEdgeClass"
            glib:is-gtype-struct-for="DockBinEdge">
      <source-position filename="src/panel/dzl-dock-bin-edge.h" line="46"/>
      <field name="parent">
        <type name="DockRevealerClass" c:type="DzlDockRevealerClass"/>
      </field>
      <field name="move_to_bin_child">
        <callback name="move_to_bin_child">
          <source-position filename="src/panel/dzl-dock-bin-edge.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockBinEdge" c:type="DzlDockBinEdge*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="DockInterface"
            c:type="DzlDockInterface"
            glib:is-gtype-struct-for="Dock">
      <source-position filename="src/panel/dzl-dock.h" line="33"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <interface name="DockItem"
               c:symbol-prefix="dock_item"
               c:type="DzlDockItem"
               glib:type-name="DzlDockItem"
               glib:get-type="dzl_dock_item_get_type"
               glib:type-struct="DockItemInterface">
      <source-position filename="src/panel/dzl-dock-item.h" line="63"/>
      <prerequisite name="Gtk.Widget"/>
      <virtual-method name="can_minimize" invoker="get_can_minimize">
        <source-position filename="src/panel/dzl-dock-item.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="681">%TRUE if the widget can be minimized.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="679">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="descendant" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="close" invoker="close">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="543">This function will request that the dock item close itself.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="549">%TRUE if the dock item was closed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="545">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_can_close" invoker="get_can_close">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="523">If this dock item can be closed by the user, this virtual function should be
implemented by the panel and return %TRUE.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="530">%TRUE if the dock item can be closed by the user, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="525">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_visible" invoker="get_child_visible">
        <source-position filename="src/panel/dzl-dock-item.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_icon_name" invoker="get_icon_name">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="627">Gets the icon_name for the #DzlDockItem.

Generally, you want to use a #DzlDockWidget which has a "icon-name" property
you can set. But this can be helpful for integration of various container
widgets.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="637">A newly allocated string or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="629">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_manager" invoker="get_manager">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="193">Gets the dock manager for this dock item.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="38"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="199">A #DzlDockmanager.</doc>
          <type name="DockManager" c:type="DzlDockManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="195">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_title" invoker="get_title">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="604">Gets the title for the #DzlDockItem.

Generally, you want to use a #DzlDockWidget which has a "title" property you
can set. But this can be helpful for integration of various container
widgets.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="49"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="614">A newly allocated string or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="606">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="manager_set">
        <source-position filename="src/panel/dzl-dock-item.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="old_manager" transfer-ownership="none">
            <type name="DockManager" c:type="DzlDockManager*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="minimize" invoker="minimize">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="569">This requests that @self minimize @child if it knows how.

If not, it should suggest the gravity for @child if it knows how to
determine that. For example, a #DzlDockBin might know if the widget was part
of the right panel and therefore may set @position to %GTK_POS_RIGHT.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="581">%TRUE if @child was minimized. Otherwise %FALSE and @position
  may be updated to a suggested position.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="571">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="572">A #DzlDockItem that is a child of @self</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
          <parameter name="position"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="573">A location for a #GtkPositionType</doc>
            <type name="Gtk.PositionType" c:type="GtkPositionType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="needs_attention"
                      invoker="needs_attention"
                      version="3.34">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="752">Emits the "needs-attention" signal.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="754">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="present_child" invoker="present_child">
        <source-position filename="src/panel/dzl-dock-item.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="presented">
        <source-position filename="src/panel/dzl-dock-item.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ref_gicon" invoker="ref_gicon" version="3.34">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="725">Gets a #GIcon for the dock item, if any has been set.

If an icon-name has been set, a new #GIcon for that icon-name
may be returned.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="61"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="734">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="727">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="release" invoker="release">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="650">This virtual method should remove @child from @self if the
dock item knows how to do so. For example, the #DzlDockStack
will remove @child from it's internal #GtkStack.

After the virtual function has been executed, child tracking
will be removed so that #DzlDockItem implementations do not
need to implement themselves.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="652">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_child_visible" invoker="set_child_visible">
        <source-position filename="src/panel/dzl-dock-item.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
          <parameter name="child_visible" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_manager" invoker="set_manager">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="209">Sets the dock manager for this #DzlDockItem.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="211">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="manager"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="212">A #DzlDockManager</doc>
            <type name="DockManager" c:type="DzlDockManager*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_visibility" invoker="update_visibility">
        <source-position filename="src/panel/dzl-dock-item.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="adopt" c:identifier="dzl_dock_item_adopt">
        <source-position filename="src/panel/dzl-dock-item.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="dzl_dock_item_close">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="543">This function will request that the dock item close itself.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="549">%TRUE if the dock item was closed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="545">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_presented"
              c:identifier="dzl_dock_item_emit_presented"
              version="3.30">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="702">Emits the #DzlDockItem::presented signal.

Containers should emit this when their descendant has been presented as the
current visible child. This allows dock items to do lazy initialization of
content once the widgetry is visible to the user.

Currently, this is best effort, as there are a number of situations that
make covering all cases problematic.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="704">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_close" c:identifier="dzl_dock_item_get_can_close">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="523">If this dock item can be closed by the user, this virtual function should be
implemented by the panel and return %TRUE.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="530">%TRUE if the dock item can be closed by the user, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="525">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_minimize"
              c:identifier="dzl_dock_item_get_can_minimize">
        <source-position filename="src/panel/dzl-dock-item.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="681">%TRUE if the widget can be minimized.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="679">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_visible"
              c:identifier="dzl_dock_item_get_child_visible">
        <source-position filename="src/panel/dzl-dock-item.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_name" c:identifier="dzl_dock_item_get_icon_name">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="627">Gets the icon_name for the #DzlDockItem.

Generally, you want to use a #DzlDockWidget which has a "icon-name" property
you can set. But this can be helpful for integration of various container
widgets.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="94"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="637">A newly allocated string or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="629">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager" c:identifier="dzl_dock_item_get_manager">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="193">Gets the dock manager for this dock item.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="66"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="199">A #DzlDockmanager.</doc>
          <type name="DockManager" c:type="DzlDockManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="195">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="dzl_dock_item_get_parent">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="473">Gets the parent #DzlDockItem, or %NULL.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="478">A #DzlDockItem or %NULL.</doc>
          <type name="DockItem" c:type="DzlDockItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="dzl_dock_item_get_title">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="604">Gets the title for the #DzlDockItem.

Generally, you want to use a #DzlDockWidget which has a "title" property you
can set. But this can be helpful for integration of various container
widgets.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="92"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="614">A newly allocated string or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="606">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_widgets" c:identifier="dzl_dock_item_has_widgets">
        <source-position filename="src/panel/dzl-dock-item.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="minimize" c:identifier="dzl_dock_item_minimize">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="569">This requests that @self minimize @child if it knows how.

If not, it should suggest the gravity for @child if it knows how to
determine that. For example, a #DzlDockBin might know if the widget was part
of the right panel and therefore may set @position to %GTK_POS_RIGHT.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="581">%TRUE if @child was minimized. Otherwise %FALSE and @position
  may be updated to a suggested position.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="571">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="572">A #DzlDockItem that is a child of @self</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
          <parameter name="position"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="573">A location for a #GtkPositionType</doc>
            <type name="Gtk.PositionType" c:type="GtkPositionType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="needs_attention"
              c:identifier="dzl_dock_item_needs_attention"
              version="3.34">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="752">Emits the "needs-attention" signal.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="754">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="present" c:identifier="dzl_dock_item_present">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="367">This widget will walk the widget hierarchy to ensure that the
dock item is visible to the user.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="369">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="present_child" c:identifier="dzl_dock_item_present_child">
        <source-position filename="src/panel/dzl-dock-item.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_gicon"
              c:identifier="dzl_dock_item_ref_gicon"
              version="3.34">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="725">Gets a #GIcon for the dock item, if any has been set.

If an icon-name has been set, a new #GIcon for that icon-name
may be returned.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="111"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-item.c"
               line="734">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="727">a #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="dzl_dock_item_release">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="650">This virtual method should remove @child from @self if the
dock item knows how to do so. For example, the #DzlDockStack
will remove @child from it's internal #GtkStack.

After the virtual function has been executed, child tracking
will be removed so that #DzlDockItem implementations do not
need to implement themselves.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="652">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_visible"
              c:identifier="dzl_dock_item_set_child_visible">
        <source-position filename="src/panel/dzl-dock-item.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
          <parameter name="child_visible" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager" c:identifier="dzl_dock_item_set_manager">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-item.c"
             line="209">Sets the dock manager for this #DzlDockItem.</doc>
        <source-position filename="src/panel/dzl-dock-item.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="211">A #DzlDockItem</doc>
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
          <parameter name="manager"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="212">A #DzlDockManager</doc>
            <type name="DockManager" c:type="DzlDockManager*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_visibility"
              c:identifier="dzl_dock_item_update_visibility">
        <source-position filename="src/panel/dzl-dock-item.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="manager-set" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DockManager"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="needs-attention" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="presented" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="DockItemInterface"
            c:type="DzlDockItemInterface"
            glib:is-gtype-struct-for="DockItem">
      <source-position filename="src/panel/dzl-dock-item.h" line="63"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_manager">
        <callback name="set_manager">
          <source-position filename="src/panel/dzl-dock-item.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="211">A #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="manager"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="212">A #DzlDockManager</doc>
              <type name="DockManager" c:type="DzlDockManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_manager">
        <callback name="get_manager">
          <source-position filename="src/panel/dzl-dock-item.h" line="38"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="199">A #DzlDockmanager.</doc>
            <type name="DockManager" c:type="DzlDockManager*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="195">A #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="manager_set">
        <callback name="manager_set">
          <source-position filename="src/panel/dzl-dock-item.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="old_manager" transfer-ownership="none">
              <type name="DockManager" c:type="DzlDockManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="present_child">
        <callback name="present_child">
          <source-position filename="src/panel/dzl-dock-item.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_visibility">
        <callback name="update_visibility">
          <source-position filename="src/panel/dzl-dock-item.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_visible">
        <callback name="get_child_visible">
          <source-position filename="src/panel/dzl-dock-item.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_child_visible">
        <callback name="set_child_visible">
          <source-position filename="src/panel/dzl-dock-item.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="child_visible" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_title">
        <callback name="get_title">
          <source-position filename="src/panel/dzl-dock-item.h" line="49"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="614">A newly allocated string or %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="606">A #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon_name">
        <callback name="get_icon_name">
          <source-position filename="src/panel/dzl-dock-item.h" line="50"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="637">A newly allocated string or %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="629">A #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_close">
        <callback name="get_can_close">
          <source-position filename="src/panel/dzl-dock-item.h" line="51"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="530">%TRUE if the dock item can be closed by the user, otherwise %FALSE.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="525">a #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_minimize">
        <callback name="can_minimize">
          <source-position filename="src/panel/dzl-dock-item.h" line="52"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="681">%TRUE if the widget can be minimized.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="679">a #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="descendant" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <source-position filename="src/panel/dzl-dock-item.h" line="54"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="549">%TRUE if the dock item was closed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="545">a #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="minimize">
        <callback name="minimize">
          <source-position filename="src/panel/dzl-dock-item.h" line="55"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="581">%TRUE if @child was minimized. Otherwise %FALSE and @position
  may be updated to a suggested position.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="571">a #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="572">A #DzlDockItem that is a child of @self</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="position"
                       direction="inout"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="573">A location for a #GtkPositionType</doc>
              <type name="Gtk.PositionType" c:type="GtkPositionType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="release">
        <callback name="release">
          <source-position filename="src/panel/dzl-dock-item.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="652">A #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="presented">
        <callback name="presented">
          <source-position filename="src/panel/dzl-dock-item.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ref_gicon">
        <callback name="ref_gicon">
          <source-position filename="src/panel/dzl-dock-item.h" line="61"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-item.c"
                 line="734">a #GIcon or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="727">a #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="needs_attention">
        <callback name="needs_attention">
          <source-position filename="src/panel/dzl-dock-item.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/panel/dzl-dock-item.c"
                   line="754">a #DzlDockItem</doc>
              <type name="DockItem" c:type="DzlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DockManager"
           c:symbol-prefix="dock_manager"
           c:type="DzlDockManager"
           parent="GObject.Object"
           glib:type-name="DzlDockManager"
           glib:get-type="dzl_dock_manager_get_type"
           glib:type-struct="DockManagerClass">
      <source-position filename="src/panel/dzl-dock-manager.h" line="49"/>
      <constructor name="new" c:identifier="dzl_dock_manager_new">
        <source-position filename="src/panel/dzl-dock-manager.h" line="52"/>
        <return-value transfer-ownership="full">
          <type name="DockManager" c:type="DzlDockManager*"/>
        </return-value>
      </constructor>
      <virtual-method name="register_dock" invoker="register_dock">
        <source-position filename="src/panel/dzl-dock-manager.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockManager" c:type="DzlDockManager*"/>
          </instance-parameter>
          <parameter name="dock" transfer-ownership="none">
            <type name="Dock" c:type="DzlDock*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unregister_dock" invoker="unregister_dock">
        <source-position filename="src/panel/dzl-dock-manager.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockManager" c:type="DzlDockManager*"/>
          </instance-parameter>
          <parameter name="dock" transfer-ownership="none">
            <type name="Dock" c:type="DzlDock*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="pause_grabs"
              c:identifier="dzl_dock_manager_pause_grabs"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-manager.c"
             line="353">Requests that the transient grab monitoring stop until
dzl_dock_manager_unpause_grabs() is called.

This might be useful while setting up UI so that you don't focus
something unexpectedly.

This function may be called multiple times and after an equivalent
number of calls to dzl_dock_manager_unpause_grabs(), transient
grab monitoring will continue.</doc>
        <source-position filename="src/panel/dzl-dock-manager.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-manager.c"
                 line="355">a #DzlDockManager</doc>
            <type name="DockManager" c:type="DzlDockManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register_dock"
              c:identifier="dzl_dock_manager_register_dock">
        <source-position filename="src/panel/dzl-dock-manager.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockManager" c:type="DzlDockManager*"/>
          </instance-parameter>
          <parameter name="dock" transfer-ownership="none">
            <type name="Dock" c:type="DzlDock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="release_transient_grab"
              c:identifier="dzl_dock_manager_release_transient_grab">
        <source-position filename="src/panel/dzl-dock-manager.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockManager" c:type="DzlDockManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unpause_grabs"
              c:identifier="dzl_dock_manager_unpause_grabs"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-manager.c"
             line="380">Unpauses a previous call to dzl_dock_manager_pause_grabs().

Once the pause count returns to zero, transient grab monitoring
will be restored.</doc>
        <source-position filename="src/panel/dzl-dock-manager.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-manager.c"
                 line="382">a #DzlDockManager</doc>
            <type name="DockManager" c:type="DzlDockManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unregister_dock"
              c:identifier="dzl_dock_manager_unregister_dock">
        <source-position filename="src/panel/dzl-dock-manager.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockManager" c:type="DzlDockManager*"/>
          </instance-parameter>
          <parameter name="dock" transfer-ownership="none">
            <type name="Dock" c:type="DzlDock*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="register-dock" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Dock"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="unregister-dock" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Dock"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DockManagerClass"
            c:type="DzlDockManagerClass"
            glib:is-gtype-struct-for="DockManager">
      <source-position filename="src/panel/dzl-dock-manager.h" line="49"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="register_dock">
        <callback name="register_dock">
          <source-position filename="src/panel/dzl-dock-manager.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockManager" c:type="DzlDockManager*"/>
            </parameter>
            <parameter name="dock" transfer-ownership="none">
              <type name="Dock" c:type="DzlDock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unregister_dock">
        <callback name="unregister_dock">
          <source-position filename="src/panel/dzl-dock-manager.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockManager" c:type="DzlDockManager*"/>
            </parameter>
            <parameter name="dock" transfer-ownership="none">
              <type name="Dock" c:type="DzlDock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="DockOverlay"
           c:symbol-prefix="dock_overlay"
           c:type="DzlDockOverlay"
           parent="Gtk.EventBox"
           glib:type-name="DzlDockOverlay"
           glib:get-type="dzl_dock_overlay_get_type"
           glib:type-struct="DockOverlayClass">
      <source-position filename="src/panel/dzl-dock-overlay.h" line="47"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Dock"/>
      <implements name="DockItem"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_dock_overlay_new">
        <source-position filename="src/panel/dzl-dock-overlay.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="hide_edges">
        <source-position filename="src/panel/dzl-dock-overlay.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockOverlay" c:type="DzlDockOverlay*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_edge" c:identifier="dzl_dock_overlay_get_edge">
        <source-position filename="src/panel/dzl-dock-overlay.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-overlay.c"
               line="1173">The corresponding #DzlDockOverlayEdge.</doc>
          <type name="DockOverlayEdge" c:type="DzlDockOverlayEdge*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-overlay.c"
                 line="1170">An #DzlDockOverlay.</doc>
            <type name="DockOverlay" c:type="DzlDockOverlay*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-overlay.c"
                 line="1171">the edge position.</doc>
            <type name="Gtk.PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_edge_adjustment"
              c:identifier="dzl_dock_overlay_get_edge_adjustment">
        <source-position filename="src/panel/dzl-dock-overlay.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-overlay.c"
               line="1191">The corresponding #GtkAdjustment.</doc>
          <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-overlay.c"
                 line="1188">An #DzlDockOverlay.</doc>
            <type name="DockOverlay" c:type="DzlDockOverlay*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-overlay.c"
                 line="1189">the edge position.</doc>
            <type name="Gtk.PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.EventBox" c:type="GtkEventBox"/>
      </field>
      <glib:signal name="hide-edges" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DockOverlayClass"
            c:type="DzlDockOverlayClass"
            glib:is-gtype-struct-for="DockOverlay">
      <source-position filename="src/panel/dzl-dock-overlay.h" line="47"/>
      <field name="parent">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
      <field name="hide_edges">
        <callback name="hide_edges">
          <source-position filename="src/panel/dzl-dock-overlay.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DockOverlay" c:type="DzlDockOverlay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="DockOverlayEdge"
           c:symbol-prefix="dock_overlay_edge"
           c:type="DzlDockOverlayEdge"
           parent="Bin"
           glib:type-name="DzlDockOverlayEdge"
           glib:get-type="dzl_dock_overlay_edge_get_type"
           glib:type-struct="DockOverlayEdgeClass">
      <source-position filename="src/panel/dzl-dock-types.h" line="74"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="DockItem"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_edge"
              c:identifier="dzl_dock_overlay_edge_get_edge"
              glib:get-property="edge">
        <source-position filename="src/panel/dzl-dock-overlay-edge.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.PositionType" c:type="GtkPositionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockOverlayEdge" c:type="DzlDockOverlayEdge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="dzl_dock_overlay_edge_get_position"
              glib:get-property="position">
        <source-position filename="src/panel/dzl-dock-overlay-edge.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockOverlayEdge" c:type="DzlDockOverlayEdge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_edge"
              c:identifier="dzl_dock_overlay_edge_set_edge"
              glib:set-property="edge">
        <source-position filename="src/panel/dzl-dock-overlay-edge.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockOverlayEdge" c:type="DzlDockOverlayEdge*"/>
          </instance-parameter>
          <parameter name="edge" transfer-ownership="none">
            <type name="Gtk.PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position"
              c:identifier="dzl_dock_overlay_edge_set_position"
              glib:set-property="position">
        <source-position filename="src/panel/dzl-dock-overlay-edge.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockOverlayEdge" c:type="DzlDockOverlayEdge*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="edge"
                writable="1"
                transfer-ownership="none"
                setter="set_edge"
                getter="get_edge"
                default-value="GTK_POS_LEFT">
        <type name="Gtk.PositionType"/>
      </property>
      <property name="position"
                writable="1"
                transfer-ownership="none"
                setter="set_position"
                getter="get_position"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="DockOverlayEdgeClass"
            c:type="DzlDockOverlayEdgeClass"
            glib:is-gtype-struct-for="DockOverlayEdge">
      <source-position filename="src/panel/dzl-dock-types.h" line="74"/>
      <field name="parent_class">
        <type name="BinClass" c:type="DzlBinClass"/>
      </field>
    </record>
    <class name="DockPaned"
           c:symbol-prefix="dock_paned"
           c:type="DzlDockPaned"
           parent="MultiPaned"
           glib:type-name="DzlDockPaned"
           glib:get-type="dzl_dock_paned_get_type"
           glib:type-struct="DockPanedClass">
      <source-position filename="src/panel/dzl-dock-paned.h" line="44"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="DockItem"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_dock_paned_new">
        <source-position filename="src/panel/dzl-dock-paned.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="MultiPaned" c:type="DzlMultiPaned"/>
      </field>
    </class>
    <record name="DockPanedClass"
            c:type="DzlDockPanedClass"
            glib:is-gtype-struct-for="DockPaned">
      <source-position filename="src/panel/dzl-dock-paned.h" line="44"/>
      <field name="parent">
        <type name="MultiPanedClass" c:type="DzlMultiPanedClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="DockRevealer"
           c:symbol-prefix="dock_revealer"
           c:type="DzlDockRevealer"
           parent="Bin"
           glib:type-name="DzlDockRevealer"
           glib:get-type="dzl_dock_revealer_get_type"
           glib:type-struct="DockRevealerClass">
      <doc xml:space="preserve"
           filename="src/panel/dzl-dock-revealer.c"
           line="27">This widget is a bit like #GtkRevealer with a couple of important
differences. First, it only supports a couple transition types
(the direction to slide reveal). Additionally, the size of the
child allocation will not change during the animation. This is not
as generally useful as an upstream GTK+ widget, but is extremely
important for the panel case to avoid things looking strange while
animating into and out of view.</doc>
      <source-position filename="src/panel/dzl-dock-revealer.h" line="59"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_dock_revealer_new">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="animate_to_position"
              c:identifier="dzl_dock_revealer_animate_to_position">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="transition_duration" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_revealed"
              c:identifier="dzl_dock_revealer_get_child_revealed"
              glib:get-property="child-revealed">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="dzl_dock_revealer_get_position"
              glib:get-property="position">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position_set"
              c:identifier="dzl_dock_revealer_get_position_set"
              glib:get-property="position-set">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_child"
              c:identifier="dzl_dock_revealer_get_reveal_child"
              glib:get-property="reveal-child">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_duration"
              c:identifier="dzl_dock_revealer_get_transition_duration"
              glib:get-property="transition-duration">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="dzl_dock_revealer_get_transition_type"
              glib:get-property="transition-type">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="DockRevealerTransitionType"
                c:type="DzlDockRevealerTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_animating"
              c:identifier="dzl_dock_revealer_is_animating">
        <doc xml:space="preserve"
             filename="src/panel/dzl-dock-revealer.c"
             line="1026">This is a helper to check if the revealer is animating. You probably don't
want to poll this function. Connect to notify::child-revealed or
notify::reveal-child instead.</doc>
        <source-position filename="src/panel/dzl-dock-revealer.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/panel/dzl-dock-revealer.c"
               line="1034">%TRUE if an animation is in progress.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/panel/dzl-dock-revealer.c"
                 line="1028">a #DzlDockRevealer</doc>
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_position"
              c:identifier="dzl_dock_revealer_set_position"
              glib:set-property="position">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position_set"
              c:identifier="dzl_dock_revealer_set_position_set"
              glib:set-property="position-set">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
          <parameter name="position_set" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_child"
              c:identifier="dzl_dock_revealer_set_reveal_child"
              glib:set-property="reveal-child">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
          <parameter name="reveal_child" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_duration"
              c:identifier="dzl_dock_revealer_set_transition_duration"
              glib:set-property="transition-duration">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
          <parameter name="transition_duration" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="dzl_dock_revealer_set_transition_type"
              glib:set-property="transition-type">
        <source-position filename="src/panel/dzl-dock-revealer.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockRevealer" c:type="DzlDockRevealer*"/>
          </instance-parameter>
          <parameter name="transition_type" transfer-ownership="none">
            <type name="DockRevealerTransitionType"
                  c:type="DzlDockRevealerTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-revealed"
                transfer-ownership="none"
                getter="get_child_revealed"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="position"
                writable="1"
                transfer-ownership="none"
                setter="set_position"
                getter="get_position"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="position-set"
                writable="1"
                transfer-ownership="none"
                setter="set_position_set"
                getter="get_position_set"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reveal-child"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_child"
                getter="get_reveal_child"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_duration"
                getter="get_transition_duration"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-type"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="DZL_DOCK_REVEALER_TRANSITION_TYPE_NONE">
        <type name="DockRevealerTransitionType"/>
      </property>
      <field name="parent_instance">
        <type name="Bin" c:type="DzlBin"/>
      </field>
    </class>
    <record name="DockRevealerClass"
            c:type="DzlDockRevealerClass"
            glib:is-gtype-struct-for="DockRevealer">
      <source-position filename="src/panel/dzl-dock-revealer.h" line="59"/>
      <field name="parent">
        <type name="BinClass" c:type="DzlBinClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <enumeration name="DockRevealerTransitionType"
                 glib:type-name="DzlDockRevealerTransitionType"
                 glib:get-type="dzl_dock_revealer_transition_type_get_type"
                 c:type="DzlDockRevealerTransitionType">
      <member name="none"
              value="0"
              c:identifier="DZL_DOCK_REVEALER_TRANSITION_TYPE_NONE"
              glib:nick="none"
              glib:name="DZL_DOCK_REVEALER_TRANSITION_TYPE_NONE">
      </member>
      <member name="slide_right"
              value="1"
              c:identifier="DZL_DOCK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT"
              glib:nick="slide-right"
              glib:name="DZL_DOCK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT">
      </member>
      <member name="slide_left"
              value="2"
              c:identifier="DZL_DOCK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT"
              glib:nick="slide-left"
              glib:name="DZL_DOCK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT">
      </member>
      <member name="slide_up"
              value="3"
              c:identifier="DZL_DOCK_REVEALER_TRANSITION_TYPE_SLIDE_UP"
              glib:nick="slide-up"
              glib:name="DZL_DOCK_REVEALER_TRANSITION_TYPE_SLIDE_UP">
      </member>
      <member name="slide_down"
              value="4"
              c:identifier="DZL_DOCK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN"
              glib:nick="slide-down"
              glib:name="DZL_DOCK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN">
      </member>
    </enumeration>
    <class name="DockStack"
           c:symbol-prefix="dock_stack"
           c:type="DzlDockStack"
           parent="Gtk.Box"
           glib:type-name="DzlDockStack"
           glib:get-type="dzl_dock_stack_get_type"
           glib:type-struct="DockStackClass">
      <source-position filename="src/panel/dzl-dock-stack.h" line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="DockItem"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_dock_stack_new">
        <source-position filename="src/panel/dzl-dock-stack.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_edge"
              c:identifier="dzl_dock_stack_get_edge"
              glib:get-property="edge">
        <source-position filename="src/panel/dzl-dock-stack.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.PositionType" c:type="GtkPositionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockStack" c:type="DzlDockStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_pinned_button"
              c:identifier="dzl_dock_stack_get_show_pinned_button"
              glib:get-property="show-pinned-button">
        <source-position filename="src/panel/dzl-dock-stack.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockStack" c:type="DzlDockStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style"
              c:identifier="dzl_dock_stack_get_style"
              glib:get-property="style">
        <source-position filename="src/panel/dzl-dock-stack.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="TabStyle" c:type="DzlTabStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockStack" c:type="DzlDockStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_edge"
              c:identifier="dzl_dock_stack_set_edge"
              glib:set-property="edge">
        <source-position filename="src/panel/dzl-dock-stack.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockStack" c:type="DzlDockStack*"/>
          </instance-parameter>
          <parameter name="edge" transfer-ownership="none">
            <type name="Gtk.PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_pinned_button"
              c:identifier="dzl_dock_stack_set_show_pinned_button"
              glib:set-property="show-pinned-button">
        <source-position filename="src/panel/dzl-dock-stack.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockStack" c:type="DzlDockStack*"/>
          </instance-parameter>
          <parameter name="show_pinned_button" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style"
              c:identifier="dzl_dock_stack_set_style"
              glib:set-property="style">
        <source-position filename="src/panel/dzl-dock-stack.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockStack" c:type="DzlDockStack*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="TabStyle" c:type="DzlTabStyle"/>
          </parameter>
        </parameters>
      </method>
      <property name="edge"
                writable="1"
                transfer-ownership="none"
                setter="set_edge"
                getter="get_edge"
                default-value="GTK_POS_TOP">
        <type name="Gtk.PositionType"/>
      </property>
      <property name="show-pinned-button"
                writable="1"
                transfer-ownership="none"
                setter="set_show_pinned_button"
                getter="get_show_pinned_button"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="style"
                writable="1"
                transfer-ownership="none"
                setter="set_style"
                getter="get_style"
                default-value="DZL_TAB_ICONS | DZL_TAB_TEXT">
        <type name="TabStyle"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
    </class>
    <record name="DockStackClass"
            c:type="DzlDockStackClass"
            glib:is-gtype-struct-for="DockStack">
      <source-position filename="src/panel/dzl-dock-stack.h" line="40"/>
      <field name="parent">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="DockTransientGrab"
           c:symbol-prefix="dock_transient_grab"
           c:type="DzlDockTransientGrab"
           parent="GObject.Object"
           glib:type-name="DzlDockTransientGrab"
           glib:get-type="dzl_dock_transient_grab_get_type"
           glib:type-struct="DockTransientGrabClass">
      <source-position filename="src/panel/dzl-dock-transient-grab.h"
                       line="35"/>
      <constructor name="new" c:identifier="dzl_dock_transient_grab_new">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
        </return-value>
      </constructor>
      <method name="acquire" c:identifier="dzl_dock_transient_grab_acquire">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_item" c:identifier="dzl_dock_transient_grab_add_item">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel" c:identifier="dzl_dock_transient_grab_cancel">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="contains" c:identifier="dzl_dock_transient_grab_contains">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_timeout"
              c:identifier="dzl_dock_transient_grab_get_timeout"
              glib:get-property="timeout">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_descendant"
              c:identifier="dzl_dock_transient_grab_is_descendant">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="dzl_dock_transient_grab_release">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_item"
              c:identifier="dzl_dock_transient_grab_remove_item">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="DockItem" c:type="DzlDockItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timeout"
              c:identifier="dzl_dock_transient_grab_set_timeout"
              glib:set-property="timeout">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="steal_common_ancestors"
              c:identifier="dzl_dock_transient_grab_steal_common_ancestors">
        <source-position filename="src/panel/dzl-dock-transient-grab.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="DockTransientGrab" c:type="DzlDockTransientGrab*"/>
          </parameter>
        </parameters>
      </method>
      <property name="timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_timeout"
                getter="get_timeout"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="DockTransientGrabClass"
            c:type="DzlDockTransientGrabClass"
            glib:is-gtype-struct-for="DockTransientGrab">
      <source-position filename="src/panel/dzl-dock-transient-grab.h"
                       line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DockWidget"
           c:symbol-prefix="dock_widget"
           c:type="DzlDockWidget"
           parent="Bin"
           glib:type-name="DzlDockWidget"
           glib:get-type="dzl_dock_widget_get_type"
           glib:type-struct="DockWidgetClass">
      <source-position filename="src/panel/dzl-dock-widget.h" line="44"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="DockItem"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_dock_widget_new">
        <source-position filename="src/panel/dzl-dock-widget.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="set_gicon"
              c:identifier="dzl_dock_widget_set_gicon"
              glib:set-property="gicon">
        <source-position filename="src/panel/dzl-dock-widget.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockWidget" c:type="DzlDockWidget*"/>
          </instance-parameter>
          <parameter name="gicon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="dzl_dock_widget_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/panel/dzl-dock-widget.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockWidget" c:type="DzlDockWidget*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="dzl_dock_widget_set_title"
              glib:set-property="title">
        <source-position filename="src/panel/dzl-dock-widget.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockWidget" c:type="DzlDockWidget*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-close"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gicon"
                writable="1"
                transfer-ownership="none"
                setter="set_gicon">
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="manager" writable="1" transfer-ownership="none">
        <type name="DockManager"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Bin" c:type="DzlBin"/>
      </field>
    </class>
    <record name="DockWidgetClass"
            c:type="DzlDockWidgetClass"
            glib:is-gtype-struct-for="DockWidget">
      <source-position filename="src/panel/dzl-dock-widget.h" line="44"/>
      <field name="parent">
        <type name="BinClass" c:type="DzlBinClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="DockWindow"
           c:symbol-prefix="dock_window"
           c:type="DzlDockWindow"
           parent="Gtk.Window"
           glib:type-name="DzlDockWindow"
           glib:get-type="dzl_dock_window_get_type"
           glib:type-struct="DockWindowClass">
      <source-position filename="src/panel/dzl-dock-window.h" line="44"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Dock"/>
      <implements name="DockItem"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_dock_window_new">
        <source-position filename="src/panel/dzl-dock-window.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
    </class>
    <record name="DockWindowClass"
            c:type="DzlDockWindowClass"
            glib:is-gtype-struct-for="DockWindow">
      <source-position filename="src/panel/dzl-dock-window.h" line="44"/>
      <field name="parent">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <constant name="ENABLE_TRACE" value="0" c:type="DZL_ENABLE_TRACE">
      <source-position filename="src/dzl-debug.h" line="23"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="ENCODE_VERSION"
                    c:identifier="DZL_ENCODE_VERSION"
                    introspectable="0">
      <source-position filename="src/dzl-version.h" line="69"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <class name="ElasticBin"
           c:symbol-prefix="elastic_bin"
           c:type="DzlElasticBin"
           parent="Gtk.Bin"
           glib:type-name="DzlElasticBin"
           glib:get-type="dzl_elastic_bin_get_type"
           glib:type-struct="ElasticBinClass">
      <source-position filename="src/widgets/dzl-elastic-bin.h" line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_elastic_bin_new">
        <source-position filename="src/widgets/dzl-elastic-bin.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="ElasticBinClass"
            c:type="DzlElasticBinClass"
            glib:is-gtype-struct-for="ElasticBin">
      <source-position filename="src/widgets/dzl-elastic-bin.h" line="41"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="EmptyState"
           c:symbol-prefix="empty_state"
           c:type="DzlEmptyState"
           parent="Gtk.Bin"
           glib:type-name="DzlEmptyState"
           glib:get-type="dzl_empty_state_get_type"
           glib:type-struct="EmptyStateClass">
      <source-position filename="src/widgets/dzl-empty-state.h" line="36"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_empty_state_new">
        <source-position filename="src/widgets/dzl-empty-state.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_icon_name"
              c:identifier="dzl_empty_state_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/widgets/dzl-empty-state.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EmptyState" c:type="DzlEmptyState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="dzl_empty_state_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/widgets/dzl-empty-state.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EmptyState" c:type="DzlEmptyState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_empty_state_get_title"
              glib:get-property="title">
        <source-position filename="src/widgets/dzl-empty-state.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EmptyState" c:type="DzlEmptyState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="dzl_empty_state_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/widgets/dzl-empty-state.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EmptyState" c:type="DzlEmptyState*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resource"
              c:identifier="dzl_empty_state_set_resource"
              glib:set-property="resource">
        <source-position filename="src/widgets/dzl-empty-state.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EmptyState" c:type="DzlEmptyState*"/>
          </instance-parameter>
          <parameter name="resource" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="dzl_empty_state_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/widgets/dzl-empty-state.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EmptyState" c:type="DzlEmptyState*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="dzl_empty_state_set_title"
              glib:set-property="title">
        <source-position filename="src/widgets/dzl-empty-state.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EmptyState" c:type="DzlEmptyState*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pixel-size"
                writable="1"
                transfer-ownership="none"
                default-value="128">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="resource"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_resource"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="EmptyStateClass"
            c:type="DzlEmptyStateClass"
            glib:is-gtype-struct-for="EmptyState">
      <source-position filename="src/widgets/dzl-empty-state.h" line="36"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="EntryBox"
           c:symbol-prefix="entry_box"
           c:type="DzlEntryBox"
           parent="Gtk.Box"
           glib:type-name="DzlEntryBox"
           glib:get-type="dzl_entry_box_get_type"
           glib:type-struct="EntryBoxClass">
      <source-position filename="src/widgets/dzl-entry-box.h" line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_entry_box_new">
        <source-position filename="src/widgets/dzl-entry-box.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="max-width-chars"
                writable="1"
                transfer-ownership="none"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="EntryBoxClass"
            c:type="DzlEntryBoxClass"
            glib:is-gtype-struct-for="EntryBox">
      <source-position filename="src/widgets/dzl-entry-box.h" line="31"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="FileChooserEntry"
           c:symbol-prefix="file_chooser_entry"
           c:type="DzlFileChooserEntry"
           parent="Gtk.Bin"
           glib:type-name="DzlFileChooserEntry"
           glib:get-type="dzl_file_chooser_entry_get_type"
           glib:type-struct="FileChooserEntryClass">
      <source-position filename="src/widgets/dzl-file-chooser-entry.h"
                       line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_file_chooser_entry_new">
        <source-position filename="src/widgets/dzl-file-chooser-entry.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Gtk.FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_entry"
              c:identifier="dzl_file_chooser_entry_get_entry"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-file-chooser-entry.c"
             line="576">Gets the entry used by the #GtkEntry.</doc>
        <source-position filename="src/widgets/dzl-file-chooser-entry.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-file-chooser-entry.c"
               line="582">a #GtkEntry</doc>
          <type name="Gtk.Entry" c:type="GtkEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-file-chooser-entry.c"
                 line="578">a #DzlFileChooserEntry</doc>
            <type name="FileChooserEntry" c:type="DzlFileChooserEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="dzl_file_chooser_entry_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-file-chooser-entry.c"
             line="525">Returns the currently selected file or %NULL if there is no selection.</doc>
        <source-position filename="src/widgets/dzl-file-chooser-entry.h"
                         line="47"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-file-chooser-entry.c"
               line="530">A #GFile or %NULL.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileChooserEntry" c:type="DzlFileChooserEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_file"
              c:identifier="dzl_file_chooser_entry_set_file"
              glib:set-property="file">
        <source-position filename="src/widgets/dzl-file-chooser-entry.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileChooserEntry" c:type="DzlFileChooserEntry*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <property name="action"
                writable="1"
                transfer-ownership="none"
                default-value="GTK_FILE_CHOOSER_ACTION_OPEN">
        <type name="Gtk.FileChooserAction"/>
      </property>
      <property name="create-folders"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="do-overwrite-confirmation"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="file"
                writable="1"
                transfer-ownership="none"
                setter="set_file"
                getter="get_file">
        <type name="Gio.File"/>
      </property>
      <property name="filter" writable="1" transfer-ownership="none">
        <type name="Gtk.FileFilter"/>
      </property>
      <property name="local-only"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="max-width-chars"
                writable="1"
                transfer-ownership="none"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="show-hidden"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="FileChooserEntryClass"
            c:type="DzlFileChooserEntryClass"
            glib:is-gtype-struct-for="FileChooserEntry">
      <source-position filename="src/widgets/dzl-file-chooser-entry.h"
                       line="41"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="FileTransfer"
           c:symbol-prefix="file_transfer"
           c:type="DzlFileTransfer"
           parent="GObject.Object"
           glib:type-name="DzlFileTransfer"
           glib:get-type="dzl_file_transfer_get_type"
           glib:type-struct="FileTransferClass">
      <source-position filename="src/files/dzl-file-transfer.h" line="38"/>
      <constructor name="new" c:identifier="dzl_file_transfer_new">
        <source-position filename="src/files/dzl-file-transfer.h" line="60"/>
        <return-value transfer-ownership="full">
          <type name="FileTransfer" c:type="DzlFileTransfer*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="dzl_file_transfer_add">
        <source-position filename="src/files/dzl-file-transfer.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="DzlFileTransfer*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute"
              c:identifier="dzl_file_transfer_execute"
              throws="1">
        <source-position filename="src/files/dzl-file-transfer.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="DzlFileTransfer*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_async"
              c:identifier="dzl_file_transfer_execute_async">
        <source-position filename="src/files/dzl-file-transfer.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="DzlFileTransfer*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="dzl_file_transfer_execute_finish"
              throws="1">
        <source-position filename="src/files/dzl-file-transfer.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="DzlFileTransfer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="dzl_file_transfer_get_flags"
              glib:get-property="flags">
        <source-position filename="src/files/dzl-file-transfer.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="FileTransferFlags" c:type="DzlFileTransferFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="DzlFileTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="dzl_file_transfer_get_progress"
              glib:get-property="progress">
        <source-position filename="src/files/dzl-file-transfer.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="DzlFileTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="dzl_file_transfer_set_flags"
              glib:set-property="flags">
        <source-position filename="src/files/dzl-file-transfer.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="DzlFileTransfer*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="FileTransferFlags" c:type="DzlFileTransferFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="stat" c:identifier="dzl_file_transfer_stat" version="3.28">
        <doc xml:space="preserve"
             filename="src/files/dzl-file-transfer.c"
             line="776">Gets statistics about the transfer progress.</doc>
        <source-position filename="src/files/dzl-file-transfer.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-file-transfer.c"
                 line="778">a #DzlFileTransfer</doc>
            <type name="FileTransfer" c:type="DzlFileTransfer*"/>
          </instance-parameter>
          <parameter name="stat_buf"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-file-transfer.c"
                 line="779">a #DzlFileTransferStat</doc>
            <type name="FileTransferStat" c:type="DzlFileTransferStat*"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags"
                writable="1"
                transfer-ownership="none"
                setter="set_flags"
                getter="get_flags"
                default-value="DZL_FILE_TRANSFER_FLAGS_NONE">
        <type name="FileTransferFlags"/>
      </property>
      <property name="progress"
                transfer-ownership="none"
                getter="get_progress"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FileTransferClass"
            c:type="DzlFileTransferClass"
            glib:is-gtype-struct-for="FileTransfer">
      <source-position filename="src/files/dzl-file-transfer.h" line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="FileTransferFlags"
              glib:type-name="DzlFileTransferFlags"
              glib:get-type="dzl_file_transfer_flags_get_type"
              c:type="DzlFileTransferFlags">
      <member name="none"
              value="0"
              c:identifier="DZL_FILE_TRANSFER_FLAGS_NONE"
              glib:nick="none"
              glib:name="DZL_FILE_TRANSFER_FLAGS_NONE">
      </member>
      <member name="move"
              value="1"
              c:identifier="DZL_FILE_TRANSFER_FLAGS_MOVE"
              glib:nick="move"
              glib:name="DZL_FILE_TRANSFER_FLAGS_MOVE">
      </member>
    </bitfield>
    <record name="FileTransferStat" c:type="DzlFileTransferStat">
      <source-position filename="src/files/dzl-file-transfer.h" line="57"/>
      <field name="n_files_total" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_files" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_dirs_total" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_dirs" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_bytes_total" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_bytes" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="10">
          <type name="gint64" c:type="gint64"/>
        </array>
      </field>
    </record>
    <class name="FuzzyIndex"
           c:symbol-prefix="fuzzy_index"
           c:type="DzlFuzzyIndex"
           parent="GObject.Object"
           glib:type-name="DzlFuzzyIndex"
           glib:get-type="dzl_fuzzy_index_get_type"
           glib:type-struct="FuzzyIndexClass">
      <source-position filename="src/search/dzl-fuzzy-index.h" line="31"/>
      <constructor name="new" c:identifier="dzl_fuzzy_index_new">
        <source-position filename="src/search/dzl-fuzzy-index.h" line="34"/>
        <return-value transfer-ownership="full">
          <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
        </return-value>
      </constructor>
      <method name="get_metadata" c:identifier="dzl_fuzzy_index_get_metadata">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-index.c"
             line="376">Looks up the metadata for @key.</doc>
        <source-position filename="src/search/dzl-fuzzy-index.h" line="62"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/search/dzl-fuzzy-index.c"
               line="381">A #GVariant or %NULL.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_string"
              c:identifier="dzl_fuzzy_index_get_metadata_string">
        <source-position filename="src/search/dzl-fuzzy-index.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_uint32"
              c:identifier="dzl_fuzzy_index_get_metadata_uint32">
        <source-position filename="src/search/dzl-fuzzy-index.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_uint64"
              c:identifier="dzl_fuzzy_index_get_metadata_uint64">
        <source-position filename="src/search/dzl-fuzzy-index.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file"
              c:identifier="dzl_fuzzy_index_load_file"
              throws="1">
        <source-position filename="src/search/dzl-fuzzy-index.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_async"
              c:identifier="dzl_fuzzy_index_load_file_async">
        <source-position filename="src/search/dzl-fuzzy-index.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_finish"
              c:identifier="dzl_fuzzy_index_load_file_finish"
              throws="1">
        <source-position filename="src/search/dzl-fuzzy-index.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_async" c:identifier="dzl_fuzzy_index_query_async">
        <source-position filename="src/search/dzl-fuzzy-index.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_matches" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_finish"
              c:identifier="dzl_fuzzy_index_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-index.c"
             line="358">Completes an asynchronous request to dzl_fuzzy_index_query_async().</doc>
        <source-position filename="src/search/dzl-fuzzy-index.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/search/dzl-fuzzy-index.c"
               line="363">A #GListModel of results.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="FuzzyIndexBuilder"
           c:symbol-prefix="fuzzy_index_builder"
           c:type="DzlFuzzyIndexBuilder"
           parent="GObject.Object"
           glib:type-name="DzlFuzzyIndexBuilder"
           glib:get-type="dzl_fuzzy_index_builder_get_type"
           glib:type-struct="FuzzyIndexBuilderClass">
      <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                       line="31"/>
      <constructor name="new" c:identifier="dzl_fuzzy_index_builder_new">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
        </return-value>
      </constructor>
      <method name="get_case_sensitive"
              c:identifier="dzl_fuzzy_index_builder_get_case_sensitive"
              glib:get-property="case-sensitive">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document"
              c:identifier="dzl_fuzzy_index_builder_get_document">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-index-builder.c"
             line="599">Returns the document that was inserted in a previous call to
dzl_fuzzy_index_builder_insert().</doc>
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/search/dzl-fuzzy-index-builder.c"
               line="605">A #GVariant</doc>
          <type name="GLib.Variant" c:type="const GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="document_id" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="dzl_fuzzy_index_builder_insert">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-index-builder.c"
             line="224">Inserts @document into the index using @key as the lookup key.

If a matching document (checked by hashing @document) has already
been inserted, only a single instance of the document will be stored.

If @document is floating, it will be consumed.

@priority may be used to group results by priority. Priority must be
less than 256.</doc>
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/search/dzl-fuzzy-index-builder.c"
               line="241">The document id registered for @document.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="226">A #DzlFuzzyIndexBuilder</doc>
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="227">The UTF-8 encoded key for the document</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="228">The document to store</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="229">An optional priority for the keyword.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_case_sensitive"
              c:identifier="dzl_fuzzy_index_builder_set_case_sensitive"
              glib:set-property="case-sensitive">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="case_sensitive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="dzl_fuzzy_index_builder_set_metadata">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_string"
              c:identifier="dzl_fuzzy_index_builder_set_metadata_string">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_uint32"
              c:identifier="dzl_fuzzy_index_builder_set_metadata_uint32">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_uint64"
              c:identifier="dzl_fuzzy_index_builder_set_metadata_uint64">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="write"
              c:identifier="dzl_fuzzy_index_builder_write"
              throws="1">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_async"
              c:identifier="dzl_fuzzy_index_builder_write_async">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-index-builder.c"
             line="531">Builds and writes the index to @file. The file format is a
GVariant on disk and can be loaded and searched using
#FuzzyIndex.</doc>
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="533">A #DzlFuzzyIndexBuilder</doc>
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="534">A #GFile to write the index to</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="535">The priority for IO operations</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="536">An optional #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="537">A callback for completion or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-builder.c"
                 line="538">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_finish"
              c:identifier="dzl_fuzzy_index_builder_write_finish"
              throws="1">
        <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="DzlFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="case-sensitive"
                writable="1"
                transfer-ownership="none"
                setter="set_case_sensitive"
                getter="get_case_sensitive"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="FuzzyIndexBuilderClass"
            c:type="DzlFuzzyIndexBuilderClass"
            glib:is-gtype-struct-for="FuzzyIndexBuilder">
      <source-position filename="src/search/dzl-fuzzy-index-builder.h"
                       line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FuzzyIndexClass"
            c:type="DzlFuzzyIndexClass"
            glib:is-gtype-struct-for="FuzzyIndex">
      <source-position filename="src/search/dzl-fuzzy-index.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="FuzzyIndexCursor"
           c:symbol-prefix="fuzzy_index_cursor"
           c:type="DzlFuzzyIndexCursor"
           parent="GObject.Object"
           glib:type-name="DzlFuzzyIndexCursor"
           glib:get-type="dzl_fuzzy_index_cursor_get_type"
           glib:type-struct="FuzzyIndexCursorClass">
      <source-position filename="src/search/dzl-fuzzy-index-cursor.h"
                       line="33"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.ListModel"/>
      <method name="get_index" c:identifier="dzl_fuzzy_index_cursor_get_index">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-index-cursor.c"
             line="618">Gets the index the cursor is iterating.</doc>
        <source-position filename="src/search/dzl-fuzzy-index-cursor.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/search/dzl-fuzzy-index-cursor.c"
               line="624">A #DzlFuzzyIndex.</doc>
          <type name="FuzzyIndex" c:type="DzlFuzzyIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-index-cursor.c"
                 line="620">A #DzlFuzzyIndexCursor</doc>
            <type name="FuzzyIndexCursor" c:type="DzlFuzzyIndexCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="case-sensitive"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="index"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="FuzzyIndex"/>
      </property>
      <property name="max-matches"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="query"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tables"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.VariantDict"/>
      </property>
    </class>
    <record name="FuzzyIndexCursorClass"
            c:type="DzlFuzzyIndexCursorClass"
            glib:is-gtype-struct-for="FuzzyIndexCursor">
      <source-position filename="src/search/dzl-fuzzy-index-cursor.h"
                       line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="FuzzyIndexMatch"
           c:symbol-prefix="fuzzy_index_match"
           c:type="DzlFuzzyIndexMatch"
           parent="GObject.Object"
           glib:type-name="DzlFuzzyIndexMatch"
           glib:get-type="dzl_fuzzy_index_match_get_type"
           glib:type-struct="FuzzyIndexMatchClass">
      <source-position filename="src/search/dzl-fuzzy-index-match.h"
                       line="31"/>
      <method name="get_document"
              c:identifier="dzl_fuzzy_index_match_get_document"
              glib:get-property="document">
        <source-position filename="src/search/dzl-fuzzy-index-match.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/search/dzl-fuzzy-index-match.c"
               line="174">A #GVariant.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexMatch" c:type="DzlFuzzyIndexMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key"
              c:identifier="dzl_fuzzy_index_match_get_key"
              glib:get-property="key">
        <source-position filename="src/search/dzl-fuzzy-index-match.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexMatch" c:type="DzlFuzzyIndexMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="dzl_fuzzy_index_match_get_priority"
              glib:get-property="priority">
        <source-position filename="src/search/dzl-fuzzy-index-match.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexMatch" c:type="DzlFuzzyIndexMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_score"
              c:identifier="dzl_fuzzy_index_match_get_score"
              glib:get-property="score">
        <source-position filename="src/search/dzl-fuzzy-index-match.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexMatch" c:type="DzlFuzzyIndexMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="document"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_document">
        <type name="GLib.Variant"/>
      </property>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_key"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_priority"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="score"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_score"
                default-value="0.000000">
        <type name="gfloat" c:type="gfloat"/>
      </property>
    </class>
    <record name="FuzzyIndexMatchClass"
            c:type="DzlFuzzyIndexMatchClass"
            glib:is-gtype-struct-for="FuzzyIndexMatch">
      <source-position filename="src/search/dzl-fuzzy-index-match.h"
                       line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FuzzyMutableIndex"
            c:type="DzlFuzzyMutableIndex"
            opaque="1"
            glib:type-name="DzlFuzzyMutableIndex"
            glib:get-type="dzl_fuzzy_mutable_index_get_type"
            c:symbol-prefix="fuzzy_mutable_index">
      <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                       line="30"/>
      <constructor name="new" c:identifier="dzl_fuzzy_mutable_index_new">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-mutable-index.c"
             line="130">Create a new #Fuzzy for fuzzy matching strings.</doc>
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/search/dzl-fuzzy-mutable-index.c"
               line="136">A newly allocated #Fuzzy that should be freed with dzl_fuzzy_mutable_index_unref().</doc>
          <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
        </return-value>
        <parameters>
          <parameter name="case_sensitive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="132">%TRUE if case should be preserved.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_free_func"
                   c:identifier="dzl_fuzzy_mutable_index_new_with_free_func">
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
        </return-value>
        <parameters>
          <parameter name="case_sensitive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="free_func" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="begin_bulk_insert"
              c:identifier="dzl_fuzzy_mutable_index_begin_bulk_insert">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-mutable-index.c"
             line="192">Start a bulk insertion. @fuzzy is not ready for searching until
dzl_fuzzy_mutable_index_end_bulk_insert() has been called.

This allows for inserting large numbers of strings and deferring
the final sort until dzl_fuzzy_mutable_index_end_bulk_insert().</doc>
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="194">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="contains" c:identifier="dzl_fuzzy_mutable_index_contains">
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_bulk_insert"
              c:identifier="dzl_fuzzy_mutable_index_end_bulk_insert">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-mutable-index.c"
             line="211">Complete a bulk insert and resort the index.</doc>
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="213">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="dzl_fuzzy_mutable_index_insert">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-mutable-index.c"
             line="238">Inserts a string into the fuzzy matcher.</doc>
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="240">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="241">A UTF-8 encoded string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="242">A value to associate with key.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="dzl_fuzzy_mutable_index_match">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-mutable-index.c"
             line="434">DzlFuzzyMutableIndex searches within @fuzzy for strings that fuzzy match @needle.
Only up to @max_matches will be returned.

TODO: max_matches is not yet respected.</doc>
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/search/dzl-fuzzy-mutable-index.c"
               line="445">A newly allocated
  #GArray containing #FuzzyMatch elements. This should be freed when
  the caller is done with it using g_array_unref().
  It is a programming error to keep the structure around longer than
  the @fuzzy instance.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="FuzzyMutableIndexMatch"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="436">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="needle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="437">The needle to fuzzy search for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_matches" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="438">The max number of matches to return.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="dzl_fuzzy_mutable_index_ref">
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="dzl_fuzzy_mutable_index_remove">
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_free_func"
              c:identifier="dzl_fuzzy_mutable_index_set_free_func">
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="free_func" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="dzl_fuzzy_mutable_index_unref">
        <doc xml:space="preserve"
             filename="src/search/dzl-fuzzy-mutable-index.c"
             line="306">Decrements the reference count of fuzzy by one. When the reference count
reaches zero, the structure will be freed.</doc>
        <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-fuzzy-mutable-index.c"
                 line="308">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="DzlFuzzyMutableIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="FuzzyMutableIndexMatch" c:type="DzlFuzzyMutableIndexMatch">
      <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                       line="38"/>
      <field name="key" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="score" writable="1">
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <function-macro name="GOTO" c:identifier="DZL_GOTO" introspectable="0">
      <source-position filename="src/dzl-debug.h" line="54"/>
      <parameters>
        <parameter name="_l">
        </parameter>
      </parameters>
    </function-macro>
    <class name="GraphColumn"
           c:symbol-prefix="graph_view_column"
           c:type="DzlGraphColumn"
           parent="GObject.Object"
           glib:type-name="DzlGraphColumn"
           glib:get-type="dzl_graph_view_column_get_type"
           glib:type-struct="GraphColumnClass">
      <source-position filename="src/graphing/dzl-graph-column.h" line="31"/>
      <constructor name="new" c:identifier="dzl_graph_view_column_new">
        <source-position filename="src/graphing/dzl-graph-column.h" line="39"/>
        <return-value transfer-ownership="full">
          <type name="GraphColumn" c:type="DzlGraphColumn*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_name"
              c:identifier="dzl_graph_view_column_get_name"
              glib:get-property="name">
        <source-position filename="src/graphing/dzl-graph-column.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphColumn" c:type="DzlGraphColumn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="dzl_graph_view_column_set_name"
              glib:set-property="name">
        <source-position filename="src/graphing/dzl-graph-column.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphColumn" c:type="DzlGraphColumn*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </property>
    </class>
    <record name="GraphColumnClass"
            c:type="DzlGraphColumnClass"
            glib:is-gtype-struct-for="GraphColumn">
      <source-position filename="src/graphing/dzl-graph-column.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="GraphLineRenderer"
           c:symbol-prefix="graph_view_line_renderer"
           c:type="DzlGraphLineRenderer"
           parent="GObject.Object"
           glib:type-name="DzlGraphLineRenderer"
           glib:get-type="dzl_graph_view_line_renderer_get_type"
           glib:type-struct="GraphLineRendererClass">
      <source-position filename="src/graphing/dzl-graph-line-renderer.h"
                       line="33"/>
      <implements name="GraphRenderer"/>
      <constructor name="new" c:identifier="dzl_graph_view_line_renderer_new">
        <source-position filename="src/graphing/dzl-graph-line-renderer.h"
                         line="36"/>
        <return-value transfer-ownership="full">
          <type name="GraphLineRenderer" c:type="DzlGraphLineRenderer*"/>
        </return-value>
      </constructor>
      <method name="get_stroke_color_rgba"
              c:identifier="dzl_graph_view_line_renderer_get_stroke_color_rgba"
              glib:get-property="stroke-color-rgba">
        <source-position filename="src/graphing/dzl-graph-line-renderer.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gdk.RGBA" c:type="const GdkRGBA*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphLineRenderer" c:type="DzlGraphLineRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_stroke_color"
              c:identifier="dzl_graph_view_line_renderer_set_stroke_color"
              glib:set-property="stroke-color">
        <source-position filename="src/graphing/dzl-graph-line-renderer.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphLineRenderer" c:type="DzlGraphLineRenderer*"/>
          </instance-parameter>
          <parameter name="stroke_color" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stroke_color_rgba"
              c:identifier="dzl_graph_view_line_renderer_set_stroke_color_rgba"
              glib:set-property="stroke-color-rgba">
        <source-position filename="src/graphing/dzl-graph-line-renderer.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphLineRenderer" c:type="DzlGraphLineRenderer*"/>
          </instance-parameter>
          <parameter name="stroke_color_rgba" transfer-ownership="none">
            <type name="Gdk.RGBA" c:type="const GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <property name="column"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="line-width"
                writable="1"
                transfer-ownership="none"
                default-value="1.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="stroke-color"
                writable="1"
                transfer-ownership="none"
                setter="set_stroke_color"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="stroke-color-rgba"
                writable="1"
                transfer-ownership="none"
                setter="set_stroke_color_rgba"
                getter="get_stroke_color_rgba">
        <type name="Gdk.RGBA"/>
      </property>
    </class>
    <record name="GraphLineRendererClass"
            c:type="DzlGraphLineRendererClass"
            glib:is-gtype-struct-for="GraphLineRenderer">
      <source-position filename="src/graphing/dzl-graph-line-renderer.h"
                       line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="GraphModel"
           c:symbol-prefix="graph_view_model"
           c:type="DzlGraphModel"
           parent="GObject.Object"
           glib:type-name="DzlGraphModel"
           glib:get-type="dzl_graph_view_model_get_type"
           glib:type-struct="GraphModelClass">
      <source-position filename="src/graphing/dzl-graph-model.h" line="38"/>
      <constructor name="new" c:identifier="dzl_graph_view_model_new">
        <source-position filename="src/graphing/dzl-graph-model.h" line="46"/>
        <return-value transfer-ownership="full">
          <type name="GraphModel" c:type="DzlGraphModel*"/>
        </return-value>
      </constructor>
      <function name="iter_get"
                c:identifier="dzl_graph_view_model_iter_get"
                introspectable="0">
        <source-position filename="src/graphing/dzl-graph-model.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
          <parameter name="first_column" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="iter_get_timestamp"
                c:identifier="dzl_graph_view_model_iter_get_timestamp">
        <source-position filename="src/graphing/dzl-graph-model.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
        </parameters>
      </function>
      <function name="iter_get_value"
                c:identifier="dzl_graph_view_model_iter_get_value">
        <source-position filename="src/graphing/dzl-graph-model.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </function>
      <function name="iter_next" c:identifier="dzl_graph_view_model_iter_next">
        <source-position filename="src/graphing/dzl-graph-model.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
        </parameters>
      </function>
      <function name="iter_set"
                c:identifier="dzl_graph_view_model_iter_set"
                shadowed-by="iter_set_value"
                introspectable="0">
        <source-position filename="src/graphing/dzl-graph-model.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
          <parameter name="first_column" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="iter_set_value"
                c:identifier="dzl_graph_view_model_iter_set_value"
                shadows="iter_set"
                version="3.30">
        <doc xml:space="preserve"
             filename="src/graphing/dzl-graph-model.c"
             line="444">Sets an individual value within a specific column.</doc>
        <source-position filename="src/graphing/dzl-graph-model.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/graphing/dzl-graph-model.c"
                 line="446">the iter to set</doc>
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/graphing/dzl-graph-model.c"
                 line="447">the column to set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/graphing/dzl-graph-model.c"
                 line="448">the new value for the column</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_column" c:identifier="dzl_graph_view_model_add_column">
        <source-position filename="src/graphing/dzl-graph-model.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="GraphColumn" c:type="DzlGraphColumn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_end_time"
              c:identifier="dzl_graph_view_model_get_end_time">
        <source-position filename="src/graphing/dzl-graph-model.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter_first"
              c:identifier="dzl_graph_view_model_get_iter_first">
        <source-position filename="src/graphing/dzl-graph-model.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_last"
              c:identifier="dzl_graph_view_model_get_iter_last">
        <source-position filename="src/graphing/dzl-graph-model.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_samples"
              c:identifier="dzl_graph_view_model_get_max_samples"
              glib:get-property="max-samples">
        <source-position filename="src/graphing/dzl-graph-model.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_columns"
              c:identifier="dzl_graph_view_model_get_n_columns">
        <source-position filename="src/graphing/dzl-graph-model.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timespan"
              c:identifier="dzl_graph_view_model_get_timespan"
              glib:get-property="timespan">
        <source-position filename="src/graphing/dzl-graph-model.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="dzl_graph_view_model_push">
        <source-position filename="src/graphing/dzl-graph-model.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/graphing/dzl-graph-model.c"
                 line="195">Table to push to</doc>
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/graphing/dzl-graph-model.c"
                 line="196">Newly created #DzlGraphModelIter</doc>
            <type name="GraphModelIter" c:type="DzlGraphModelIter*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/graphing/dzl-graph-model.c"
                 line="197">Time of new event</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_samples"
              c:identifier="dzl_graph_view_model_set_max_samples"
              glib:set-property="max-samples">
        <source-position filename="src/graphing/dzl-graph-model.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
          <parameter name="n_rows" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timespan"
              c:identifier="dzl_graph_view_model_set_timespan"
              glib:set-property="timespan">
        <source-position filename="src/graphing/dzl-graph-model.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </instance-parameter>
          <parameter name="timespan" transfer-ownership="none">
            <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
          </parameter>
        </parameters>
      </method>
      <property name="max-samples"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_max_samples"
                getter="get_max_samples"
                default-value="120">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="timespan"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_timespan"
                getter="get_timespan"
                default-value="60000000">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="value-max"
                writable="1"
                transfer-ownership="none"
                default-value="100.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="value-min"
                writable="1"
                transfer-ownership="none"
                default-value="100.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="GraphModelClass"
            c:type="DzlGraphModelClass"
            glib:is-gtype-struct-for="GraphModel">
      <source-position filename="src/graphing/dzl-graph-model.h" line="38"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="GraphModelIter" c:type="DzlGraphModelIter">
      <source-position filename="src/graphing/dzl-graph-model.h" line="43"/>
      <field name="data" writable="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <interface name="GraphRenderer"
               c:symbol-prefix="graph_view_renderer"
               c:type="DzlGraphRenderer"
               glib:type-name="DzlGraphRenderer"
               glib:get-type="dzl_graph_view_renderer_get_type"
               glib:type-struct="GraphRendererInterface">
      <source-position filename="src/graphing/dzl-graph-renderer.h" line="46"/>
      <virtual-method name="render" invoker="render">
        <source-position filename="src/graphing/dzl-graph-renderer.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphRenderer" c:type="DzlGraphRenderer*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </parameter>
          <parameter name="x_begin" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="x_end" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="y_begin" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y_end" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="cairo.RectangleInt"
                  c:type="const cairo_rectangle_int_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="render" c:identifier="dzl_graph_view_renderer_render">
        <source-position filename="src/graphing/dzl-graph-renderer.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphRenderer" c:type="DzlGraphRenderer*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </parameter>
          <parameter name="x_begin" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="x_end" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="y_begin" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y_end" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="cairo.RectangleInt"
                  c:type="const cairo_rectangle_int_t*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="GraphRendererInterface"
            c:type="DzlGraphRendererInterface"
            glib:is-gtype-struct-for="GraphRenderer">
      <source-position filename="src/graphing/dzl-graph-renderer.h" line="46"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="render">
        <callback name="render">
          <source-position filename="src/graphing/dzl-graph-renderer.h"
                           line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GraphRenderer" c:type="DzlGraphRenderer*"/>
            </parameter>
            <parameter name="table" transfer-ownership="none">
              <type name="GraphModel" c:type="DzlGraphModel*"/>
            </parameter>
            <parameter name="x_begin" transfer-ownership="none">
              <type name="gint64" c:type="gint64"/>
            </parameter>
            <parameter name="x_end" transfer-ownership="none">
              <type name="gint64" c:type="gint64"/>
            </parameter>
            <parameter name="y_begin" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y_end" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="cr" transfer-ownership="none">
              <type name="cairo.Context" c:type="cairo_t*"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="cairo.RectangleInt"
                    c:type="const cairo_rectangle_int_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GraphView"
           c:symbol-prefix="graph_view"
           c:type="DzlGraphView"
           parent="Gtk.DrawingArea"
           glib:type-name="DzlGraphView"
           glib:get-type="dzl_graph_view_get_type"
           glib:type-struct="GraphViewClass">
      <source-position filename="src/graphing/dzl-graph-view.h" line="48"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_graph_view_new">
        <source-position filename="src/graphing/dzl-graph-view.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_renderer" c:identifier="dzl_graph_view_add_renderer">
        <source-position filename="src/graphing/dzl-graph-view.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphView" c:type="DzlGraphView*"/>
          </instance-parameter>
          <parameter name="renderer" transfer-ownership="none">
            <type name="GraphRenderer" c:type="DzlGraphRenderer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="dzl_graph_view_get_model"
              glib:get-property="model">
        <doc xml:space="preserve"
             filename="src/graphing/dzl-graph-view.c"
             line="64">Gets the #DzlGraphView:model property.</doc>
        <source-position filename="src/graphing/dzl-graph-view.h" line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/graphing/dzl-graph-view.c"
               line="69">An #DzlGraphModel or %NULL.</doc>
          <type name="GraphModel" c:type="DzlGraphModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphView" c:type="DzlGraphView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="dzl_graph_view_set_model"
              glib:set-property="model">
        <source-position filename="src/graphing/dzl-graph-view.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GraphView" c:type="DzlGraphView*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="GraphModel" c:type="DzlGraphModel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <type name="GraphModel"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.DrawingArea" c:type="GtkDrawingArea"/>
      </field>
    </class>
    <record name="GraphViewClass"
            c:type="DzlGraphViewClass"
            glib:is-gtype-struct-for="GraphView">
      <source-position filename="src/graphing/dzl-graph-view.h" line="48"/>
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="Heap"
            c:type="DzlHeap"
            glib:type-name="DzlHeap"
            glib:get-type="dzl_heap_get_type"
            c:symbol-prefix="heap">
      <doc xml:space="preserve"
           filename="src/util/dzl-heap.c"
           line="27">Heaps are similar to a partially sorted tree but implemented as an
array. They allow for efficient O(1) lookup of the highest priority
item as it will always be the first item of the array.

To create a new heap use dzl_heap_new().

To add items to the heap, use dzl_heap_insert_val() or
dzl_heap_insert_vals() to insert in bulk.

To access an item in the heap, use dzl_heap_index().

To remove an arbitrary item from the heap, use dzl_heap_extract_index().

To remove the highest priority item in the heap, use dzl_heap_extract().

To free a heap, use dzl_heap_unref().

Here is an example that stores integers in a #DzlHeap:
|[&lt;!-- language="C" --&gt;
static int
cmpint (gconstpointer a,
        gconstpointer b)
{
  return *(const gint *)a - *(const gint *)b;
}

int
main (gint   argc,
      gchar *argv[])
{
  DzlHeap *heap;
  gint i;
  gint v;

  heap = dzl_heap_new (sizeof (gint), cmpint);

  for (i = 0; i &lt; 10000; i++)
    dzl_heap_insert_val (heap, i);
  for (i = 0; i &lt; 10000; i++)
    dzl_heap_extract (heap, &amp;v);

  dzl_heap_unref (heap);
}
]|</doc>
      <source-position filename="src/util/dzl-heap.h" line="39"/>
      <field name="data" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="len" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <constructor name="new" c:identifier="dzl_heap_new">
        <doc xml:space="preserve"
             filename="src/util/dzl-heap.c"
             line="112">Creates a new #DzlHeap. A heap is a tree-like structure stored in
an array that is not fully sorted, but head is guaranteed to be either
the max, or min value based on @compare_func. This is also known as
a priority queue.</doc>
        <source-position filename="src/util/dzl-heap.h" line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/util/dzl-heap.c"
               line="122">A newly allocated #DzlHeap</doc>
          <type name="Heap" c:type="DzlHeap*"/>
        </return-value>
        <parameters>
          <parameter name="element_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-heap.c"
                 line="114">the size of each element in the heap</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/util/dzl-heap.c"
                 line="115">a function to compare to elements</doc>
            <type name="GLib.CompareFunc" c:type="GCompareFunc"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="extract" c:identifier="dzl_heap_extract">
        <source-position filename="src/util/dzl-heap.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="none">
            <type name="Heap" c:type="DzlHeap*"/>
          </instance-parameter>
          <parameter name="result"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="extract_index" c:identifier="dzl_heap_extract_index">
        <source-position filename="src/util/dzl-heap.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="none">
            <type name="Heap" c:type="DzlHeap*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="result"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_vals" c:identifier="dzl_heap_insert_vals">
        <source-position filename="src/util/dzl-heap.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="none">
            <type name="Heap" c:type="DzlHeap*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="dzl_heap_ref">
        <doc xml:space="preserve"
             filename="src/util/dzl-heap.c"
             line="144">Increments the reference count of @heap by one.</doc>
        <source-position filename="src/util/dzl-heap.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/util/dzl-heap.c"
               line="150">@heap</doc>
          <type name="Heap" c:type="DzlHeap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-heap.c"
                 line="146">An #DzlHeap</doc>
            <type name="Heap" c:type="DzlHeap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="dzl_heap_unref">
        <doc xml:space="preserve"
             filename="src/util/dzl-heap.c"
             line="175">Decrements the reference count of @heap by one, freeing the structure
when the reference count reaches zero.</doc>
        <source-position filename="src/util/dzl-heap.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/util/dzl-heap.c"
                 line="177">An #DzlHeap</doc>
            <type name="Heap" c:type="DzlHeap*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="IS_SHORTCUTS_GROUP"
                    c:identifier="DZL_IS_SHORTCUTS_GROUP"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-group.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SHORTCUTS_GROUP_CLASS"
                    c:identifier="DZL_IS_SHORTCUTS_GROUP_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-group.h"
                       line="32"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SHORTCUTS_SECTION"
                    c:identifier="DZL_IS_SHORTCUTS_SECTION"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-section.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SHORTCUTS_SECTION_CLASS"
                    c:identifier="DZL_IS_SHORTCUTS_SECTION_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-section.h"
                       line="32"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SHORTCUTS_SHORTCUT"
                    c:identifier="DZL_IS_SHORTCUTS_SHORTCUT"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-shortcut.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SHORTCUTS_SHORTCUT_CLASS"
                    c:identifier="DZL_IS_SHORTCUTS_SHORTCUT_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-shortcut.h"
                       line="32"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SHORTCUTS_WINDOW"
                    c:identifier="DZL_IS_SHORTCUTS_WINDOW"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SHORTCUTS_WINDOW_CLASS"
                    c:identifier="DZL_IS_SHORTCUTS_WINDOW_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                       line="32"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <class name="JoinedMenu"
           c:symbol-prefix="joined_menu"
           c:type="DzlJoinedMenu"
           parent="Gio.MenuModel"
           glib:type-name="DzlJoinedMenu"
           glib:get-type="dzl_joined_menu_get_type"
           glib:type-struct="JoinedMenuClass">
      <source-position filename="src/menus/dzl-joined-menu.h" line="31"/>
      <constructor name="new" c:identifier="dzl_joined_menu_new">
        <source-position filename="src/menus/dzl-joined-menu.h" line="34"/>
        <return-value transfer-ownership="full">
          <type name="JoinedMenu" c:type="DzlJoinedMenu*"/>
        </return-value>
      </constructor>
      <method name="append_menu" c:identifier="dzl_joined_menu_append_menu">
        <source-position filename="src/menus/dzl-joined-menu.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="JoinedMenu" c:type="DzlJoinedMenu*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_joined" c:identifier="dzl_joined_menu_get_n_joined">
        <doc xml:space="preserve"
             filename="src/menus/dzl-joined-menu.c"
             line="314">Gets the number of joined menus.</doc>
        <source-position filename="src/menus/dzl-joined-menu.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-joined-menu.c"
                 line="316">a #DzlJoinedMenu</doc>
            <type name="JoinedMenu" c:type="DzlJoinedMenu*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend_menu" c:identifier="dzl_joined_menu_prepend_menu">
        <source-position filename="src/menus/dzl-joined-menu.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="JoinedMenu" c:type="DzlJoinedMenu*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_index" c:identifier="dzl_joined_menu_remove_index">
        <source-position filename="src/menus/dzl-joined-menu.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="JoinedMenu" c:type="DzlJoinedMenu*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_menu" c:identifier="dzl_joined_menu_remove_menu">
        <source-position filename="src/menus/dzl-joined-menu.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="JoinedMenu" c:type="DzlJoinedMenu*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="JoinedMenuClass"
            c:type="DzlJoinedMenuClass"
            glib:is-gtype-struct-for="JoinedMenu">
      <source-position filename="src/menus/dzl-joined-menu.h" line="31"/>
      <field name="parent_class">
        <type name="Gio.MenuModelClass" c:type="GMenuModelClass"/>
      </field>
    </record>
    <function-macro name="LITERAL_LENGTH"
                    c:identifier="DZL_LITERAL_LENGTH"
                    introspectable="0">
      <source-position filename="src/util/dzl-macros.h" line="69"/>
      <parameters>
        <parameter name="s">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="LOG_LEVEL_TRACE"
              value="1"
              c:type="DZL_LOG_LEVEL_TRACE"
              introspectable="0">
      <source-position filename="src/dzl-debug.h" line="41"/>
      <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
    </constant>
    <class name="ListBox"
           c:symbol-prefix="list_box"
           c:type="DzlListBox"
           parent="Gtk.ListBox"
           glib:type-name="DzlListBox"
           glib:get-type="dzl_list_box_get_type"
           glib:type-struct="ListBoxClass">
      <source-position filename="src/widgets/dzl-list-box.h" line="39"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_list_box_new">
        <source-position filename="src/widgets/dzl-list-box.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="row_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_model" c:identifier="dzl_list_box_get_model">
        <source-position filename="src/widgets/dzl-list-box.h" line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-list-box.c"
               line="329">A #GListModel or %NULL.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ListBox" c:type="DzlListBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_property_name"
              c:identifier="dzl_list_box_get_property_name"
              glib:get-property="property-name">
        <source-position filename="src/widgets/dzl-list-box.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ListBox" c:type="DzlListBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_row_type"
              c:identifier="dzl_list_box_get_row_type"
              glib:get-property="row-type">
        <source-position filename="src/widgets/dzl-list-box.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ListBox" c:type="DzlListBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_model" c:identifier="dzl_list_box_set_model">
        <source-position filename="src/widgets/dzl-list-box.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ListBox" c:type="DzlListBox*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_recycle_max"
              c:identifier="dzl_list_box_set_recycle_max"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-list-box.c"
             line="384">Sets the max number of rows to cache for reuse.  Set to 0 to return
to the default.</doc>
        <source-position filename="src/widgets/dzl-list-box.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-list-box.c"
                 line="386">a #DzlListBox</doc>
            <type name="ListBox" c:type="DzlListBox*"/>
          </instance-parameter>
          <parameter name="recycle_max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-list-box.c"
                 line="387">max number of rows to cache</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="property-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_property_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="row-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_row_type">
        <type name="GType" c:type="GType"/>
      </property>
      <property name="row-type-name"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.ListBox" c:type="GtkListBox"/>
      </field>
    </class>
    <record name="ListBoxClass"
            c:type="DzlListBoxClass"
            glib:is-gtype-struct-for="ListBox">
      <source-position filename="src/widgets/dzl-list-box.h" line="39"/>
      <field name="parent_class">
        <type name="Gtk.ListBoxClass" c:type="GtkListBoxClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ListBoxRow"
           c:symbol-prefix="list_box_row"
           c:type="DzlListBoxRow"
           parent="Gtk.ListBoxRow"
           abstract="1"
           glib:type-name="DzlListBoxRow"
           glib:get-type="dzl_list_box_row_get_type"
           glib:type-struct="ListBoxRowClass">
      <source-position filename="src/widgets/dzl-list-box-row.h" line="34"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <field name="parent_instance">
        <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow"/>
      </field>
    </class>
    <record name="ListBoxRowClass"
            c:type="DzlListBoxRowClass"
            glib:is-gtype-struct-for="ListBoxRow">
      <source-position filename="src/widgets/dzl-list-box-row.h" line="34"/>
      <field name="parent_class">
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
    </record>
    <class name="ListModelFilter"
           c:symbol-prefix="list_model_filter"
           c:type="DzlListModelFilter"
           parent="GObject.Object"
           glib:type-name="DzlListModelFilter"
           glib:get-type="dzl_list_model_filter_get_type"
           glib:type-struct="ListModelFilterClass">
      <source-position filename="src/util/dzl-list-model-filter.h" line="33"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="dzl_list_model_filter_new">
        <source-position filename="src/util/dzl-list-model-filter.h"
                         line="36"/>
        <return-value transfer-ownership="full">
          <type name="ListModelFilter" c:type="DzlListModelFilter*"/>
        </return-value>
        <parameters>
          <parameter name="child_model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_child_model"
              c:identifier="dzl_list_model_filter_get_child_model"
              glib:get-property="child-model">
        <doc xml:space="preserve"
             filename="src/util/dzl-list-model-filter.c"
             line="403">Gets the child model that is being filtered.</doc>
        <source-position filename="src/util/dzl-list-model-filter.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-list-model-filter.c"
               line="409">A #GListModel.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-list-model-filter.c"
                 line="405">A #DzlListModelFilter</doc>
            <type name="ListModelFilter" c:type="DzlListModelFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate"
              c:identifier="dzl_list_model_filter_invalidate">
        <source-position filename="src/util/dzl-list-model-filter.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ListModelFilter" c:type="DzlListModelFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_filter_func"
              c:identifier="dzl_list_model_filter_set_filter_func">
        <source-position filename="src/util/dzl-list-model-filter.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ListModelFilter" c:type="DzlListModelFilter*"/>
          </instance-parameter>
          <parameter name="filter_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <type name="ListModelFilterFunc" c:type="DzlListModelFilterFunc"/>
          </parameter>
          <parameter name="filter_func_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="filter_func_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-model"
                transfer-ownership="none"
                getter="get_child_model">
        <type name="Gio.ListModel"/>
      </property>
    </class>
    <record name="ListModelFilterClass"
            c:type="DzlListModelFilterClass"
            glib:is-gtype-struct-for="ListModelFilter">
      <source-position filename="src/util/dzl-list-model-filter.h" line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="ListModelFilterFunc" c:type="DzlListModelFilterFunc">
      <source-position filename="src/util/dzl-list-model-filter.h" line="29"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ListStoreAdapter"
           c:symbol-prefix="list_store_adapter"
           c:type="DzlListStoreAdapter"
           parent="GObject.Object"
           glib:type-name="DzlListStoreAdapter"
           glib:get-type="dzl_list_store_adapter_get_type"
           glib:type-struct="ListStoreAdapterClass">
      <source-position filename="src/tree/dzl-list-store-adapter.h" line="36"/>
      <implements name="Gtk.TreeModel"/>
      <constructor name="new" c:identifier="dzl_list_store_adapter_new">
        <source-position filename="src/tree/dzl-list-store-adapter.h"
                         line="39"/>
        <return-value transfer-ownership="full">
          <type name="ListStoreAdapter" c:type="DzlListStoreAdapter*"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_model"
              c:identifier="dzl_list_store_adapter_get_model"
              glib:get-property="model"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/tree/dzl-list-store-adapter.c"
             line="384">Gets the model being adapted.</doc>
        <source-position filename="src/tree/dzl-list-store-adapter.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/tree/dzl-list-store-adapter.c"
               line="390">A #GListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-list-store-adapter.c"
                 line="386">A #DzlListStoreAdapter</doc>
            <type name="ListStoreAdapter" c:type="DzlListStoreAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="dzl_list_store_adapter_set_model"
              glib:set-property="model">
        <source-position filename="src/tree/dzl-list-store-adapter.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ListStoreAdapter" c:type="DzlListStoreAdapter*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <type name="Gio.ListModel"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ListStoreAdapterClass"
            c:type="DzlListStoreAdapterClass"
            glib:is-gtype-struct-for="ListStoreAdapter">
      <source-position filename="src/tree/dzl-list-store-adapter.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="MAJOR_VERSION" value="3" c:type="DZL_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="src/dzl-version.h"
           line="33">Dzl major version component (e.g. 1 if %DZL_VERSION is 1.2.3)</doc>
      <source-position filename="src/dzl-version.h" line="38"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="0" c:type="DZL_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="src/dzl-version.h"
           line="47">Dzl micro version component (e.g. 3 if %DZL_VERSION is 1.2.3)</doc>
      <source-position filename="src/dzl-version.h" line="52"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="44" c:type="DZL_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="src/dzl-version.h"
           line="40">Dzl minor version component (e.g. 2 if %DZL_VERSION is 1.2.3)</doc>
      <source-position filename="src/dzl-version.h" line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="MenuButton"
           c:symbol-prefix="menu_button"
           c:type="DzlMenuButton"
           parent="Gtk.MenuButton"
           glib:type-name="DzlMenuButton"
           glib:get-type="dzl_menu_button_get_type"
           glib:type-struct="MenuButtonClass">
      <source-position filename="src/menus/dzl-menu-button.h" line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new_with_model"
                   c:identifier="dzl_menu_button_new_with_model">
        <doc xml:space="preserve"
             filename="src/menus/dzl-menu-button.c"
             line="412">Creates a new #DzlMenuButton with the icon @icon_name and
the menu contents of @model.</doc>
        <source-position filename="src/menus/dzl-menu-button.h" line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/menus/dzl-menu-button.c"
               line="420">A #DzlMenuButton</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-button.c"
                 line="414">An icon-name for the button</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-button.c"
                 line="415">A #GMenuModel or %NULL</doc>
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_model"
              c:identifier="dzl_menu_button_get_model"
              glib:get-property="model"
              version="3.26">
        <source-position filename="src/menus/dzl-menu-button.h" line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/menus/dzl-menu-button.c"
               line="567">A #DzlMenuButton or %NULL.</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-button.c"
                 line="565">a #DzlMenuButton</doc>
            <type name="MenuButton" c:type="DzlMenuButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_accels"
              c:identifier="dzl_menu_button_get_show_accels"
              glib:get-property="show-accels">
        <source-position filename="src/menus/dzl-menu-button.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuButton" c:type="DzlMenuButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_arrow"
              c:identifier="dzl_menu_button_get_show_arrow"
              glib:get-property="show-arrow">
        <source-position filename="src/menus/dzl-menu-button.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuButton" c:type="DzlMenuButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_icons"
              c:identifier="dzl_menu_button_get_show_icons"
              glib:get-property="show-icons">
        <source-position filename="src/menus/dzl-menu-button.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuButton" c:type="DzlMenuButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="dzl_menu_button_set_model"
              glib:set-property="model">
        <source-position filename="src/menus/dzl-menu-button.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuButton" c:type="DzlMenuButton*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_accels"
              c:identifier="dzl_menu_button_set_show_accels"
              glib:set-property="show-accels"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/menus/dzl-menu-button.c"
             line="517">Sets the #DzlMenuButton:show-accels property.

If %TRUE, accelerators will be displayed next to menu items that
contain a shortcut.</doc>
        <source-position filename="src/menus/dzl-menu-button.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-button.c"
                 line="519">a #DzlMenuButton</doc>
            <type name="MenuButton" c:type="DzlMenuButton*"/>
          </instance-parameter>
          <parameter name="show_accels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-button.c"
                 line="520">if accelerators should be visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_arrow"
              c:identifier="dzl_menu_button_set_show_arrow"
              glib:set-property="show-arrow"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/menus/dzl-menu-button.c"
             line="444">Sets the #DzlMenuButton:show-arrow property.

If %TRUE, an pan-down-symbolic image will be displayed next to the
image in the button.</doc>
        <source-position filename="src/menus/dzl-menu-button.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-button.c"
                 line="446">a #DzlMenuButton</doc>
            <type name="MenuButton" c:type="DzlMenuButton*"/>
          </instance-parameter>
          <parameter name="show_arrow" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_icons"
              c:identifier="dzl_menu_button_set_show_icons"
              glib:set-property="show-icons"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/menus/dzl-menu-button.c"
             line="477">Sets the #DzlMenuButton:show-icons property.

If %TRUE, icons will be displayed next to menu items that
contain a shortcut.</doc>
        <source-position filename="src/menus/dzl-menu-button.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-button.c"
                 line="479">a #DzlMenuButton</doc>
            <type name="MenuButton" c:type="DzlMenuButton*"/>
          </instance-parameter>
          <parameter name="show_icons" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-button.c"
                 line="480">if icons should be visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                readable="0"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="menu-id"
                version="3.26"
                readable="0"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/menus/dzl-menu-button.c"
             line="322">The "menu-id" property can be used to automatically load a
#GMenuModel from the applications merged menus. This is
performed via dzl_application_get_menu_by_id().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <type name="Gio.MenuModel"/>
      </property>
      <property name="show-accels"
                writable="1"
                transfer-ownership="none"
                setter="set_show_accels"
                getter="get_show_accels"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-arrow"
                writable="1"
                transfer-ownership="none"
                setter="set_show_arrow"
                getter="get_show_arrow"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-icons"
                writable="1"
                transfer-ownership="none"
                setter="set_show_icons"
                getter="get_show_icons"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transitions-enabled"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.MenuButton" c:type="GtkMenuButton"/>
      </field>
    </class>
    <record name="MenuButtonClass"
            c:type="DzlMenuButtonClass"
            glib:is-gtype-struct-for="MenuButton">
      <source-position filename="src/menus/dzl-menu-button.h" line="41"/>
      <field name="parent_class">
        <type name="Gtk.MenuButtonClass" c:type="GtkMenuButtonClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="MenuManager"
           c:symbol-prefix="menu_manager"
           c:type="DzlMenuManager"
           version="3.26"
           parent="GObject.Object"
           glib:type-name="DzlMenuManager"
           glib:get-type="dzl_menu_manager_get_type"
           glib:type-struct="MenuManagerClass">
      <doc xml:space="preserve"
           filename="src/menus/dzl-menu-manager.c"
           line="42">The goal of #DzlMenuManager is to simplify the process of merging multiple
GtkBuilder .ui files containing menus into a single representation of the
application menus. Additionally, it provides the ability to "unmerge"
previously merged menus.

This allows for an application to have plugins which seemlessly extends
the core application menus.

Implementation notes:

To make this work, we don't use the GMenu instances created by a GtkBuilder
instance. Instead, we create the menus ourself and recreate section and
submenu links. This allows the #DzlMenuManager to be in full control of
the generated menus.

dzl_menu_manager_get_menu_by_id() will always return a #GMenu, however
that menu may contain no children until something has extended it later
on during the application process.</doc>
      <source-position filename="src/menus/dzl-menu-manager.h" line="31"/>
      <constructor name="new" c:identifier="dzl_menu_manager_new">
        <source-position filename="src/menus/dzl-menu-manager.h" line="34"/>
        <return-value transfer-ownership="full">
          <type name="MenuManager" c:type="DzlMenuManager*"/>
        </return-value>
      </constructor>
      <method name="add_filename"
              c:identifier="dzl_menu_manager_add_filename"
              throws="1">
        <source-position filename="src/menus/dzl-menu-manager.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="DzlMenuManager*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_resource"
              c:identifier="dzl_menu_manager_add_resource"
              throws="1">
        <source-position filename="src/menus/dzl-menu-manager.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="DzlMenuManager*"/>
          </instance-parameter>
          <parameter name="resource" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_menu_by_id"
              c:identifier="dzl_menu_manager_get_menu_by_id">
        <source-position filename="src/menus/dzl-menu-manager.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/menus/dzl-menu-manager.c"
               line="624">A #GMenu.</doc>
          <type name="Gio.Menu" c:type="GMenu*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="DzlMenuManager*"/>
          </instance-parameter>
          <parameter name="menu_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="dzl_menu_manager_merge">
        <source-position filename="src/menus/dzl-menu-manager.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="DzlMenuManager*"/>
          </instance-parameter>
          <parameter name="menu_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="dzl_menu_manager_remove"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/menus/dzl-menu-manager.c"
             line="572">This removes items from menus that were added as part of a previous
menu merge. Use the value returned from dzl_menu_manager_merge() as
the @merge_id.</doc>
        <source-position filename="src/menus/dzl-menu-manager.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-manager.c"
                 line="574">a #DzlMenuManager</doc>
            <type name="MenuManager" c:type="DzlMenuManager*"/>
          </instance-parameter>
          <parameter name="merge_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/menus/dzl-menu-manager.c"
                 line="575">A previously registered merge id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="MenuManagerClass"
            c:type="DzlMenuManagerClass"
            glib:is-gtype-struct-for="MenuManager">
      <source-position filename="src/menus/dzl-menu-manager.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="MultiPaned"
           c:symbol-prefix="multi_paned"
           c:type="DzlMultiPaned"
           parent="Gtk.Container"
           glib:type-name="DzlMultiPaned"
           glib:get-type="dzl_multi_paned_get_type"
           glib:type-struct="MultiPanedClass">
      <doc xml:space="preserve"
           filename="src/widgets/dzl-multi-paned.c"
           line="32">This widget is similar to #GtkPaned except that it allows adding more than
two children to the widget. For each additional child added to the
#DzlMultiPaned, an additional resize grip is added.</doc>
      <source-position filename="src/widgets/dzl-multi-paned.h" line="55"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_multi_paned_new">
        <source-position filename="src/widgets/dzl-multi-paned.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="resize_drag_begin">
        <source-position filename="src/widgets/dzl-multi-paned.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MultiPaned" c:type="DzlMultiPaned*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="resize_drag_end">
        <source-position filename="src/widgets/dzl-multi-paned.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MultiPaned" c:type="DzlMultiPaned*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_at_point"
              c:identifier="dzl_multi_paned_get_at_point"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-multi-paned.c"
             line="2194">Locates the widget at position x,y within widget.

@x and @y should be relative to @self.</doc>
        <source-position filename="src/widgets/dzl-multi-paned.h" line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-multi-paned.c"
               line="2204">a #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-multi-paned.c"
                 line="2196">a #DzlMultiPaned</doc>
            <type name="MultiPaned" c:type="DzlMultiPaned*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-multi-paned.c"
                 line="2197">x coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-multi-paned.c"
                 line="2198">y coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_children"
              c:identifier="dzl_multi_paned_get_n_children">
        <source-position filename="src/widgets/dzl-multi-paned.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MultiPaned" c:type="DzlMultiPaned*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_child"
              c:identifier="dzl_multi_paned_get_nth_child">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-multi-paned.c"
             line="2169">Gets the @nth child of the #DzlMultiPaned.

It is an error to call this function with a value &gt;= the result of
dzl_multi_paned_get_nth_child().

The index starts from 0.</doc>
        <source-position filename="src/widgets/dzl-multi-paned.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-multi-paned.c"
               line="2180">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-multi-paned.c"
                 line="2171">a #DzlMultiPaned</doc>
            <type name="MultiPaned" c:type="DzlMultiPaned*"/>
          </instance-parameter>
          <parameter name="nth" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="orientation"
                writable="1"
                transfer-ownership="none"
                default-value="GTK_ORIENTATION_VERTICAL">
        <type name="Gtk.Orientation"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
      <glib:signal name="resize-drag-begin" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resize-drag-end" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MultiPanedClass"
            c:type="DzlMultiPanedClass"
            glib:is-gtype-struct-for="MultiPaned">
      <source-position filename="src/widgets/dzl-multi-paned.h" line="55"/>
      <field name="parent">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="resize_drag_begin">
        <callback name="resize_drag_begin">
          <source-position filename="src/widgets/dzl-multi-paned.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="MultiPaned" c:type="DzlMultiPaned*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resize_drag_end">
        <callback name="resize_drag_end">
          <source-position filename="src/widgets/dzl-multi-paned.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="MultiPaned" c:type="DzlMultiPaned*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="Path"
           c:symbol-prefix="path"
           c:type="DzlPath"
           parent="GObject.Object"
           glib:type-name="DzlPath"
           glib:get-type="dzl_path_get_type"
           glib:type-struct="PathClass">
      <source-position filename="src/pathbar/dzl-path.h" line="33"/>
      <constructor name="new" c:identifier="dzl_path_new">
        <source-position filename="src/pathbar/dzl-path.h" line="36"/>
        <return-value transfer-ownership="full">
          <type name="Path" c:type="DzlPath*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="dzl_path_append">
        <source-position filename="src/pathbar/dzl-path.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </instance-parameter>
          <parameter name="element" transfer-ownership="none">
            <type name="PathElement" c:type="DzlPathElement*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_element" c:identifier="dzl_path_get_element">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path.c"
             line="168">Gets the path element found at @index.

Indexes start from zero.</doc>
        <source-position filename="src/pathbar/dzl-path.h" line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/pathbar/dzl-path.c"
               line="175">An #DzlPathElement.</doc>
          <type name="PathElement" c:type="DzlPathElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_elements" c:identifier="dzl_path_get_elements">
        <source-position filename="src/pathbar/dzl-path.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/pathbar/dzl-path.c"
               line="62">The elements of the path.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="PathElement"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="dzl_path_get_length">
        <source-position filename="src/pathbar/dzl-path.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_prefix" c:identifier="dzl_path_has_prefix">
        <source-position filename="src/pathbar/dzl-path.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_empty" c:identifier="dzl_path_is_empty">
        <source-position filename="src/pathbar/dzl-path.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="dzl_path_prepend">
        <source-position filename="src/pathbar/dzl-path.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </instance-parameter>
          <parameter name="element" transfer-ownership="none">
            <type name="PathElement" c:type="DzlPathElement*"/>
          </parameter>
        </parameters>
      </method>
      <method name="printf" c:identifier="dzl_path_printf">
        <source-position filename="src/pathbar/dzl-path.h" line="54"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="PathBar"
           c:symbol-prefix="path_bar"
           c:type="DzlPathBar"
           parent="Gtk.Box"
           glib:type-name="DzlPathBar"
           glib:get-type="dzl_path_bar_get_type"
           glib:type-struct="PathBarClass">
      <source-position filename="src/pathbar/dzl-path-bar.h" line="33"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_path_bar_new">
        <source-position filename="src/pathbar/dzl-path-bar.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_path"
              c:identifier="dzl_path_bar_get_path"
              glib:get-property="path">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path-bar.c"
             line="375">Gets the path for the view.</doc>
        <source-position filename="src/pathbar/dzl-path-bar.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/pathbar/dzl-path-bar.c"
               line="380">A #DzlPath.</doc>
          <type name="Path" c:type="DzlPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PathBar" c:type="DzlPathBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_path"
              c:identifier="dzl_path_bar_set_path"
              glib:set-property="path">
        <source-position filename="src/pathbar/dzl-path-bar.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PathBar" c:type="DzlPathBar*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="DzlPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_index"
              c:identifier="dzl_path_bar_set_selected_index">
        <source-position filename="src/pathbar/dzl-path-bar.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PathBar" c:type="DzlPathBar*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="path"
                writable="1"
                transfer-ownership="none"
                setter="set_path"
                getter="get_path">
        <type name="Path"/>
      </property>
      <glib:signal name="element-selected" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Path"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="PathElement"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="populate-menu" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Path"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="PathElement"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="Gio.Menu"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PathBarClass"
            c:type="DzlPathBarClass"
            glib:is-gtype-struct-for="PathBar">
      <source-position filename="src/pathbar/dzl-path-bar.h" line="33"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <record name="PathClass"
            c:type="DzlPathClass"
            glib:is-gtype-struct-for="Path">
      <source-position filename="src/pathbar/dzl-path.h" line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="PathElement"
           c:symbol-prefix="path_element"
           c:type="DzlPathElement"
           parent="GObject.Object"
           glib:type-name="DzlPathElement"
           glib:get-type="dzl_path_element_get_type"
           glib:type-struct="PathElementClass">
      <source-position filename="src/pathbar/dzl-path-element.h" line="31"/>
      <constructor name="new"
                   c:identifier="dzl_path_element_new"
                   version="3.26">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path-element.c"
             line="46">Creates a new path element for an #DzlPath.</doc>
        <source-position filename="src/pathbar/dzl-path-element.h" line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/pathbar/dzl-path-element.c"
               line="54">A #DzlPathElement</doc>
          <type name="PathElement" c:type="DzlPathElement*"/>
        </return-value>
        <parameters>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/pathbar/dzl-path-element.c"
                 line="48">An id for the path element.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/pathbar/dzl-path-element.c"
                 line="49">An optional icon name for the element</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/pathbar/dzl-path-element.c"
                 line="50">The title of the element.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_icon_name"
              c:identifier="dzl_path_element_get_icon_name"
              glib:get-property="icon-name"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path-element.c"
             line="219">Gets the #DzlPathElement:icon-name property. This is used by the
path bar to display an icon next to the element of the path.</doc>
        <source-position filename="src/pathbar/dzl-path-element.h" line="42"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/pathbar/dzl-path-element.c"
               line="226">The icon-name for the #DzlPathElement.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/pathbar/dzl-path-element.c"
                 line="221">A #DzlPathElement</doc>
            <type name="PathElement" c:type="DzlPathElement*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="dzl_path_element_get_id"
              glib:get-property="id"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path-element.c"
             line="198">Gets the id for the element. Generally, a path is built of
multiple elements and each element should have an id that
is useful to the application that it using it. You might store
the name of a directory, or some other key as the id.</doc>
        <source-position filename="src/pathbar/dzl-path-element.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/pathbar/dzl-path-element.c"
               line="207">The id for the #DzlPathElement.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/pathbar/dzl-path-element.c"
                 line="200">A #DzlPathElement</doc>
            <type name="PathElement" c:type="DzlPathElement*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_path_element_get_title"
              glib:get-property="title"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path-element.c"
             line="238">Gets the #DzlPathElement:title property. This is used by the
path bar to display text representing the element of the path.</doc>
        <source-position filename="src/pathbar/dzl-path-element.h" line="38"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/pathbar/dzl-path-element.c"
               line="245">The title for the #DzlPathElement.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/pathbar/dzl-path-element.c"
                 line="240">A #DzlPathElement</doc>
            <type name="PathElement" c:type="DzlPathElement*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="icon-name"
                version="3.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path-element.c"
             line="145">The icon-name of the icon to display next to the path element
in the path bar. Set to %NULL for no icon.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                version="3.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path-element.c"
             line="160">The id property is an application specific identifier for the
element within the path.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="3.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/pathbar/dzl-path-element.c"
             line="175">The title property should contain the display text that should
be shown to represent the element in the #DzlPathBar.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PathElementClass"
            c:type="DzlPathElementClass"
            glib:is-gtype-struct-for="PathElement">
      <source-position filename="src/pathbar/dzl-path-element.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="PatternSpec"
            c:type="DzlPatternSpec"
            opaque="1"
            glib:type-name="DzlPatternSpec"
            glib:get-type="dzl_pattern_spec_get_type"
            c:symbol-prefix="pattern_spec">
      <source-position filename="src/search/dzl-pattern-spec.h" line="28"/>
      <constructor name="new" c:identifier="dzl_pattern_spec_new">
        <source-position filename="src/search/dzl-pattern-spec.h" line="35"/>
        <return-value transfer-ownership="full">
          <type name="PatternSpec" c:type="DzlPatternSpec*"/>
        </return-value>
        <parameters>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_text" c:identifier="dzl_pattern_spec_get_text">
        <source-position filename="src/search/dzl-pattern-spec.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="DzlPatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="dzl_pattern_spec_match">
        <source-position filename="src/search/dzl-pattern-spec.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="DzlPatternSpec*"/>
          </instance-parameter>
          <parameter name="haystack" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="dzl_pattern_spec_ref">
        <source-position filename="src/search/dzl-pattern-spec.h" line="37"/>
        <return-value transfer-ownership="full">
          <type name="PatternSpec" c:type="DzlPatternSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="DzlPatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="dzl_pattern_spec_unref">
        <source-position filename="src/search/dzl-pattern-spec.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="DzlPatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="PillBox"
           c:symbol-prefix="pill_box"
           c:type="DzlPillBox"
           parent="Gtk.EventBox"
           glib:type-name="DzlPillBox"
           glib:get-type="dzl_pill_box_get_type"
           glib:type-struct="PillBoxClass">
      <source-position filename="src/widgets/dzl-pill-box.h" line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_pill_box_new">
        <source-position filename="src/widgets/dzl-pill-box.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_label"
              c:identifier="dzl_pill_box_get_label"
              glib:get-property="label">
        <source-position filename="src/widgets/dzl-pill-box.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PillBox" c:type="DzlPillBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="dzl_pill_box_set_label"
              glib:set-property="label">
        <source-position filename="src/widgets/dzl-pill-box.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PillBox" c:type="DzlPillBox*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PillBoxClass"
            c:type="DzlPillBoxClass"
            glib:is-gtype-struct-for="PillBox">
      <source-position filename="src/widgets/dzl-pill-box.h" line="31"/>
      <field name="parent_class">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
    </record>
    <interface name="Preferences"
               c:symbol-prefix="preferences"
               c:type="DzlPreferences"
               glib:type-name="DzlPreferences"
               glib:get-type="dzl_preferences_get_type"
               glib:type-struct="PreferencesInterface">
      <source-position filename="src/prefs/dzl-preferences.h" line="121"/>
      <virtual-method name="add_custom" invoker="add_custom">
        <source-position filename="src/prefs/dzl-preferences.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="keywords"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="117">Optional keywords for search</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_file_chooser" invoker="add_file_chooser">
        <source-position filename="src/prefs/dzl-preferences.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Gtk.FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_font_button" invoker="add_font_button">
        <source-position filename="src/prefs/dzl-preferences.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_group" invoker="add_group">
        <source-position filename="src/prefs/dzl-preferences.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_list_group" invoker="add_list_group">
        <source-position filename="src/prefs/dzl-preferences.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="Gtk.SelectionMode" c:type="GtkSelectionMode"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_page" invoker="add_page">
        <source-position filename="src/prefs/dzl-preferences.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_radio" invoker="add_radio">
        <source-position filename="src/prefs/dzl-preferences.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="153">An optional path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="variant_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="154">An optional gvariant string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="155">An optional title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="156">An optional subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="157">Optional keywords for search</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_spin_button" invoker="add_spin_button">
        <source-position filename="src/prefs/dzl-preferences.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_switch" invoker="add_switch">
        <source-position filename="src/prefs/dzl-preferences.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="63">An optional path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="variant_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="64">An optional gvariant string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="65">An optional title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="66">An optional subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="67">Optional keywords for search</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_table_row_va" introspectable="0">
        <source-position filename="src/prefs/dzl-preferences.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="first_widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_widget" invoker="get_widget">
        <source-position filename="src/prefs/dzl-preferences.h" line="114"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/prefs/dzl-preferences.c"
               line="255">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="widget_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_id" invoker="remove_id">
        <source-position filename="src/prefs/dzl-preferences.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="widget_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_page" invoker="set_page">
        <source-position filename="src/prefs/dzl-preferences.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="map" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_custom" c:identifier="dzl_preferences_add_custom">
        <source-position filename="src/prefs/dzl-preferences.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="keywords"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="117">Optional keywords for search</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_file_chooser"
              c:identifier="dzl_preferences_add_file_chooser">
        <source-position filename="src/prefs/dzl-preferences.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Gtk.FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_font_button"
              c:identifier="dzl_preferences_add_font_button">
        <source-position filename="src/prefs/dzl-preferences.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_group" c:identifier="dzl_preferences_add_group">
        <source-position filename="src/prefs/dzl-preferences.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_list_group"
              c:identifier="dzl_preferences_add_list_group">
        <source-position filename="src/prefs/dzl-preferences.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="Gtk.SelectionMode" c:type="GtkSelectionMode"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_page" c:identifier="dzl_preferences_add_page">
        <source-position filename="src/prefs/dzl-preferences.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_radio" c:identifier="dzl_preferences_add_radio">
        <source-position filename="src/prefs/dzl-preferences.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="153">An optional path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="variant_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="154">An optional gvariant string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="155">An optional title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="156">An optional subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="157">Optional keywords for search</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_spin_button"
              c:identifier="dzl_preferences_add_spin_button">
        <source-position filename="src/prefs/dzl-preferences.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_switch" c:identifier="dzl_preferences_add_switch">
        <source-position filename="src/prefs/dzl-preferences.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="63">An optional path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="variant_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="64">An optional gvariant string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="65">An optional title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="66">An optional subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="67">Optional keywords for search</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_table_row"
              c:identifier="dzl_preferences_add_table_row"
              introspectable="0">
        <source-position filename="src/prefs/dzl-preferences.h" line="215"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="first_widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_widget" c:identifier="dzl_preferences_get_widget">
        <source-position filename="src/prefs/dzl-preferences.h" line="212"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/prefs/dzl-preferences.c"
               line="255">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="widget_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_id" c:identifier="dzl_preferences_remove_id">
        <source-position filename="src/prefs/dzl-preferences.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="widget_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page" c:identifier="dzl_preferences_set_page">
        <source-position filename="src/prefs/dzl-preferences.h" line="208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="DzlPreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="map" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
    </interface>
    <class name="PreferencesBin"
           c:symbol-prefix="preferences_bin"
           c:type="DzlPreferencesBin"
           parent="Gtk.Bin"
           glib:type-name="DzlPreferencesBin"
           glib:get-type="dzl_preferences_bin_get_type"
           glib:type-struct="PreferencesBinClass">
      <source-position filename="src/prefs/dzl-preferences-bin.h" line="54"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="connect">
        <source-position filename="src/prefs/dzl-preferences-bin.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesBin" c:type="DzlPreferencesBin*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnect">
        <source-position filename="src/prefs/dzl-preferences-bin.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesBin" c:type="DzlPreferencesBin*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="matches">
        <source-position filename="src/prefs/dzl-preferences-bin.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesBin" c:type="DzlPreferencesBin*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="PatternSpec" c:type="DzlPatternSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <property name="keywords"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="schema-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <glib:signal name="preference-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PreferencesBinClass"
            c:type="DzlPreferencesBinClass"
            glib:is-gtype-struct-for="PreferencesBin">
      <source-position filename="src/prefs/dzl-preferences-bin.h" line="54"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="connect">
        <callback name="connect">
          <source-position filename="src/prefs/dzl-preferences-bin.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PreferencesBin" c:type="DzlPreferencesBin*"/>
            </parameter>
            <parameter name="settings" transfer-ownership="none">
              <type name="Gio.Settings" c:type="GSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect">
        <callback name="disconnect">
          <source-position filename="src/prefs/dzl-preferences-bin.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PreferencesBin" c:type="DzlPreferencesBin*"/>
            </parameter>
            <parameter name="settings" transfer-ownership="none">
              <type name="Gio.Settings" c:type="GSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="matches">
        <callback name="matches">
          <source-position filename="src/prefs/dzl-preferences-bin.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PreferencesBin" c:type="DzlPreferencesBin*"/>
            </parameter>
            <parameter name="spec" transfer-ownership="none">
              <type name="PatternSpec" c:type="DzlPatternSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="PreferencesEntry"
           c:symbol-prefix="preferences_entry"
           c:type="DzlPreferencesEntry"
           parent="PreferencesBin"
           glib:type-name="DzlPreferencesEntry"
           glib:get-type="dzl_preferences_entry_get_type"
           glib:type-struct="PreferencesEntryClass">
      <source-position filename="src/prefs/dzl-preferences-entry.h" line="38"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_entry_widget"
              c:identifier="dzl_preferences_entry_get_entry_widget">
        <source-position filename="src/prefs/dzl-preferences-entry.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/prefs/dzl-preferences-entry.c"
               line="225">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesEntry" c:type="DzlPreferencesEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title_widget"
              c:identifier="dzl_preferences_entry_get_title_widget">
        <source-position filename="src/prefs/dzl-preferences-entry.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/prefs/dzl-preferences-entry.c"
               line="210">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesEntry" c:type="DzlPreferencesEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="text"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="PreferencesBin" c:type="DzlPreferencesBin"/>
      </field>
      <glib:signal name="activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PreferencesEntryClass"
            c:type="DzlPreferencesEntryClass"
            glib:is-gtype-struct-for="PreferencesEntry">
      <source-position filename="src/prefs/dzl-preferences-entry.h" line="38"/>
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="DzlPreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesFileChooserButton"
           c:symbol-prefix="preferences_file_chooser_button"
           c:type="DzlPreferencesFileChooserButton"
           parent="PreferencesBin"
           glib:type-name="DzlPreferencesFileChooserButton"
           glib:get-type="dzl_preferences_file_chooser_button_get_type"
           glib:type-struct="PreferencesFileChooserButtonClass">
      <source-position filename="src/prefs/dzl-preferences-file-chooser-button.h"
                       line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <property name="action"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER">
        <type name="Gtk.FileChooserAction"/>
      </property>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PreferencesFileChooserButtonClass"
            c:type="DzlPreferencesFileChooserButtonClass"
            glib:is-gtype-struct-for="PreferencesFileChooserButton">
      <source-position filename="src/prefs/dzl-preferences-file-chooser-button.h"
                       line="31"/>
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="DzlPreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesFlowBox"
           c:symbol-prefix="preferences_flow_box"
           c:type="DzlPreferencesFlowBox"
           parent="ColumnLayout"
           glib:type-name="DzlPreferencesFlowBox"
           glib:get-type="dzl_preferences_flow_box_get_type"
           glib:type-struct="PreferencesFlowBoxClass">
      <source-position filename="src/prefs/dzl-preferences-flow-box.h"
                       line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_preferences_flow_box_new">
        <source-position filename="src/prefs/dzl-preferences-flow-box.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="PreferencesFlowBoxClass"
            c:type="DzlPreferencesFlowBoxClass"
            glib:is-gtype-struct-for="PreferencesFlowBox">
      <source-position filename="src/prefs/dzl-preferences-flow-box.h"
                       line="31"/>
      <field name="parent_class">
        <type name="ColumnLayoutClass" c:type="DzlColumnLayoutClass"/>
      </field>
    </record>
    <class name="PreferencesFontButton"
           c:symbol-prefix="preferences_font_button"
           c:type="DzlPreferencesFontButton"
           parent="PreferencesBin"
           glib:type-name="DzlPreferencesFontButton"
           glib:get-type="dzl_preferences_font_button_get_type"
           glib:type-struct="PreferencesFontButtonClass">
      <source-position filename="src/prefs/dzl-preferences-font-button.h"
                       line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PreferencesFontButtonClass"
            c:type="DzlPreferencesFontButtonClass"
            glib:is-gtype-struct-for="PreferencesFontButton">
      <source-position filename="src/prefs/dzl-preferences-font-button.h"
                       line="31"/>
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="DzlPreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesGroup"
           c:symbol-prefix="preferences_group"
           c:type="DzlPreferencesGroup"
           parent="Gtk.Bin"
           glib:type-name="DzlPreferencesGroup"
           glib:get-type="dzl_preferences_group_get_type"
           glib:type-struct="PreferencesGroupClass">
      <source-position filename="src/prefs/dzl-preferences-group.h" line="33"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="add" c:identifier="dzl_preferences_group_add">
        <source-position filename="src/prefs/dzl-preferences-group.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="DzlPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="dzl_preferences_group_get_priority"
              glib:get-property="priority">
        <source-position filename="src/prefs/dzl-preferences-group.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="DzlPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size_group"
              c:identifier="dzl_preferences_group_get_size_group">
        <doc xml:space="preserve"
             filename="src/prefs/dzl-preferences-group.c"
             line="451">Gets a size group that can be used to organize items in
a group based on columns.</doc>
        <source-position filename="src/prefs/dzl-preferences-group.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/prefs/dzl-preferences-group.c"
               line="458">a #GtkSizeGroup</doc>
          <type name="Gtk.SizeGroup" c:type="GtkSizeGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences-group.c"
                 line="453">a #DzlPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="DzlPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_preferences_group_get_title"
              glib:get-property="title">
        <source-position filename="src/prefs/dzl-preferences-group.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="DzlPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refilter" c:identifier="dzl_preferences_group_refilter">
        <source-position filename="src/prefs/dzl-preferences-group.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="DzlPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="PatternSpec" c:type="DzlPatternSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_map" c:identifier="dzl_preferences_group_set_map">
        <source-position filename="src/prefs/dzl-preferences-group.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="DzlPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="is-list"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode"
                writable="1"
                transfer-ownership="none"
                default-value="GTK_SELECTION_NONE">
        <type name="Gtk.SelectionMode"/>
      </property>
      <property name="priority"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_priority"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PreferencesGroupClass"
            c:type="DzlPreferencesGroupClass"
            glib:is-gtype-struct-for="PreferencesGroup">
      <source-position filename="src/prefs/dzl-preferences-group.h" line="33"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <record name="PreferencesInterface"
            c:type="DzlPreferencesInterface"
            glib:is-gtype-struct-for="Preferences">
      <source-position filename="src/prefs/dzl-preferences.h" line="121"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_page">
        <callback name="set_page">
          <source-position filename="src/prefs/dzl-preferences.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="map" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_page">
        <callback name="add_page">
          <source-position filename="src/prefs/dzl-preferences.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_group">
        <callback name="add_group">
          <source-position filename="src/prefs/dzl-preferences.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_list_group">
        <callback name="add_list_group">
          <source-position filename="src/prefs/dzl-preferences.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <type name="Gtk.SelectionMode" c:type="GtkSelectionMode"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_radio">
        <callback name="add_radio">
          <source-position filename="src/prefs/dzl-preferences.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="path"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="153">An optional path</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="variant_string"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="154">An optional gvariant string</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="155">An optional title</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subtitle"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="156">An optional subtitle</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="keywords"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="157">Optional keywords for search</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_font_button">
        <callback name="add_font_button">
          <source-position filename="src/prefs/dzl-preferences.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="keywords" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_switch">
        <callback name="add_switch">
          <source-position filename="src/prefs/dzl-preferences.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="path"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="63">An optional path</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="variant_string"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="64">An optional gvariant string</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="65">An optional title</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subtitle"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="66">An optional subtitle</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="keywords"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="67">Optional keywords for search</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_spin_button">
        <callback name="add_spin_button">
          <source-position filename="src/prefs/dzl-preferences.h" line="85"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subtitle" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="keywords" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_file_chooser">
        <callback name="add_file_chooser">
          <source-position filename="src/prefs/dzl-preferences.h" line="95"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subtitle" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Gtk.FileChooserAction"
                    c:type="GtkFileChooserAction"/>
            </parameter>
            <parameter name="keywords" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_custom">
        <callback name="add_custom">
          <source-position filename="src/prefs/dzl-preferences.h" line="106"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="keywords"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/prefs/dzl-preferences.c"
                   line="117">Optional keywords for search</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_id">
        <callback name="remove_id">
          <source-position filename="src/prefs/dzl-preferences.h" line="112"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="widget_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_widget">
        <callback name="get_widget">
          <source-position filename="src/prefs/dzl-preferences.h" line="114"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/prefs/dzl-preferences.c"
                 line="255">A #GtkWidget or %NULL.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="widget_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_table_row_va" introspectable="0">
        <callback name="add_table_row_va" introspectable="0">
          <source-position filename="src/prefs/dzl-preferences.h" line="116"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="DzlPreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="first_widget" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="args" transfer-ownership="none">
              <type name="va_list" c:type="va_list"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PreferencesPage"
           c:symbol-prefix="preferences_page"
           c:type="DzlPreferencesPage"
           parent="Gtk.Bin"
           glib:type-name="DzlPreferencesPage"
           glib:get-type="dzl_preferences_page_get_type"
           glib:type-struct="PreferencesPageClass">
      <source-position filename="src/prefs/dzl-preferences-page.h" line="34"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="add_group" c:identifier="dzl_preferences_page_add_group">
        <source-position filename="src/prefs/dzl-preferences-page.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesPage" c:type="DzlPreferencesPage*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="DzlPreferencesGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_group" c:identifier="dzl_preferences_page_get_group">
        <source-position filename="src/prefs/dzl-preferences-page.h"
                         line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/prefs/dzl-preferences-page.c"
               line="149">An #DzlPreferencesGroup or %NULL.</doc>
          <type name="PreferencesGroup" c:type="DzlPreferencesGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesPage" c:type="DzlPreferencesPage*"/>
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refilter" c:identifier="dzl_preferences_page_refilter">
        <source-position filename="src/prefs/dzl-preferences-page.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesPage" c:type="DzlPreferencesPage*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="PatternSpec" c:type="DzlPatternSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_map" c:identifier="dzl_preferences_page_set_map">
        <source-position filename="src/prefs/dzl-preferences-page.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesPage" c:type="DzlPreferencesPage*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="priority"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="PreferencesPageClass"
            c:type="DzlPreferencesPageClass"
            glib:is-gtype-struct-for="PreferencesPage">
      <source-position filename="src/prefs/dzl-preferences-page.h" line="34"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="PreferencesSpinButton"
           c:symbol-prefix="preferences_spin_button"
           c:type="DzlPreferencesSpinButton"
           parent="PreferencesBin"
           glib:type-name="DzlPreferencesSpinButton"
           glib:get-type="dzl_preferences_spin_button_get_type"
           glib:type-struct="PreferencesSpinButtonClass">
      <source-position filename="src/prefs/dzl-preferences-spin-button.h"
                       line="33"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_spin_button"
              c:identifier="dzl_preferences_spin_button_get_spin_button">
        <source-position filename="src/prefs/dzl-preferences-spin-button.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/prefs/dzl-preferences-spin-button.c"
               line="411">The actual spin button widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesSpinButton"
                  c:type="DzlPreferencesSpinButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PreferencesSpinButtonClass"
            c:type="DzlPreferencesSpinButtonClass"
            glib:is-gtype-struct-for="PreferencesSpinButton">
      <source-position filename="src/prefs/dzl-preferences-spin-button.h"
                       line="33"/>
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="DzlPreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesSwitch"
           c:symbol-prefix="preferences_switch"
           c:type="DzlPreferencesSwitch"
           parent="PreferencesBin"
           glib:type-name="DzlPreferencesSwitch"
           glib:get-type="dzl_preferences_switch_get_type"
           glib:type-struct="PreferencesSwitchClass">
      <source-position filename="src/prefs/dzl-preferences-switch.h"
                       line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <property name="is-radio"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="target"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PreferencesSwitchClass"
            c:type="DzlPreferencesSwitchClass"
            glib:is-gtype-struct-for="PreferencesSwitch">
      <source-position filename="src/prefs/dzl-preferences-switch.h"
                       line="31"/>
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="DzlPreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesView"
           c:symbol-prefix="preferences_view"
           c:type="DzlPreferencesView"
           parent="Gtk.Bin"
           glib:type-name="DzlPreferencesView"
           glib:get-type="dzl_preferences_view_get_type"
           glib:type-struct="PreferencesViewClass">
      <source-position filename="src/prefs/dzl-preferences-view.h" line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Preferences"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_preferences_view_new">
        <source-position filename="src/prefs/dzl-preferences-view.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_show_search_entry"
              c:identifier="dzl_preferences_view_get_show_search_entry"
              glib:get-property="show-search-entry">
        <source-position filename="src/prefs/dzl-preferences-view.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesView" c:type="DzlPreferencesView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_sidebar"
              c:identifier="dzl_preferences_view_get_use_sidebar"
              glib:get-property="use-sidebar">
        <source-position filename="src/prefs/dzl-preferences-view.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesView" c:type="DzlPreferencesView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reapply_filter"
              c:identifier="dzl_preferences_view_reapply_filter">
        <source-position filename="src/prefs/dzl-preferences-view.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesView" c:type="DzlPreferencesView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_search_entry"
              c:identifier="dzl_preferences_view_set_show_search_entry"
              glib:set-property="show-search-entry">
        <source-position filename="src/prefs/dzl-preferences-view.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesView" c:type="DzlPreferencesView*"/>
          </instance-parameter>
          <parameter name="show_search_entry" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_sidebar"
              c:identifier="dzl_preferences_view_set_use_sidebar"
              glib:set-property="use-sidebar">
        <source-position filename="src/prefs/dzl-preferences-view.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesView" c:type="DzlPreferencesView*"/>
          </instance-parameter>
          <parameter name="use_sidebar" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="show-search-entry"
                writable="1"
                transfer-ownership="none"
                setter="set_show_search_entry"
                getter="get_show_search_entry"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-sidebar"
                writable="1"
                transfer-ownership="none"
                setter="set_use_sidebar"
                getter="get_use_sidebar"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="PreferencesViewClass"
            c:type="DzlPreferencesViewClass"
            glib:is-gtype-struct-for="PreferencesView">
      <source-position filename="src/prefs/dzl-preferences-view.h" line="41"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PriorityBox"
           c:symbol-prefix="priority_box"
           c:type="DzlPriorityBox"
           parent="Gtk.Box"
           glib:type-name="DzlPriorityBox"
           glib:get-type="dzl_priority_box_get_type"
           glib:type-struct="PriorityBoxClass">
      <doc xml:space="preserve"
           filename="src/widgets/dzl-priority-box.c"
           line="19">This is like a #GtkBox but uses stable priorities to sort.</doc>
      <source-position filename="src/widgets/dzl-priority-box.h" line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_priority_box_new">
        <source-position filename="src/widgets/dzl-priority-box.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
    </class>
    <record name="PriorityBoxClass"
            c:type="DzlPriorityBoxClass"
            glib:is-gtype-struct-for="PriorityBox">
      <source-position filename="src/widgets/dzl-priority-box.h" line="41"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="ProgressButton"
           c:symbol-prefix="progress_button"
           c:type="DzlProgressButton"
           parent="Gtk.Button"
           glib:type-name="DzlProgressButton"
           glib:get-type="dzl_progress_button_get_type"
           glib:type-struct="ProgressButtonClass">
      <source-position filename="src/widgets/dzl-progress-button.h" line="43"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_progress_button_new">
        <source-position filename="src/widgets/dzl-progress-button.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_progress"
              c:identifier="dzl_progress_button_get_progress"
              glib:get-property="progress">
        <source-position filename="src/widgets/dzl-progress-button.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressButton" c:type="DzlProgressButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_progress"
              c:identifier="dzl_progress_button_get_show_progress"
              glib:get-property="show-progress">
        <source-position filename="src/widgets/dzl-progress-button.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressButton" c:type="DzlProgressButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="dzl_progress_button_set_progress"
              glib:set-property="progress">
        <source-position filename="src/widgets/dzl-progress-button.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <type name="ProgressButton" c:type="DzlProgressButton*"/>
          </instance-parameter>
          <parameter name="percentage" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_progress"
              c:identifier="dzl_progress_button_set_show_progress"
              glib:set-property="show-progress">
        <source-position filename="src/widgets/dzl-progress-button.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <type name="ProgressButton" c:type="DzlProgressButton*"/>
          </instance-parameter>
          <parameter name="show_progress" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="show-progress"
                writable="1"
                transfer-ownership="none"
                setter="set_show_progress"
                getter="get_show_progress"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Button" c:type="GtkButton"/>
      </field>
    </class>
    <record name="ProgressButtonClass"
            c:type="DzlProgressButtonClass"
            glib:is-gtype-struct-for="ProgressButton">
      <source-position filename="src/widgets/dzl-progress-button.h" line="43"/>
      <field name="parent_class">
        <type name="Gtk.ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="ProgressIcon"
           c:symbol-prefix="progress_icon"
           c:type="DzlProgressIcon"
           parent="Gtk.DrawingArea"
           glib:type-name="DzlProgressIcon"
           glib:get-type="dzl_progress_icon_get_type"
           glib:type-struct="ProgressIconClass">
      <source-position filename="src/widgets/dzl-progress-icon.h" line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_progress_icon_new">
        <source-position filename="src/widgets/dzl-progress-icon.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_progress"
              c:identifier="dzl_progress_icon_get_progress"
              glib:get-property="progress">
        <source-position filename="src/widgets/dzl-progress-icon.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressIcon" c:type="DzlProgressIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="dzl_progress_icon_set_progress"
              glib:set-property="progress">
        <source-position filename="src/widgets/dzl-progress-icon.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressIcon" c:type="DzlProgressIcon*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="ProgressIconClass"
            c:type="DzlProgressIconClass"
            glib:is-gtype-struct-for="ProgressIcon">
      <source-position filename="src/widgets/dzl-progress-icon.h" line="31"/>
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
    </record>
    <class name="ProgressMenuButton"
           c:symbol-prefix="progress_menu_button"
           c:type="DzlProgressMenuButton"
           parent="Gtk.MenuButton"
           glib:type-name="DzlProgressMenuButton"
           glib:get-type="dzl_progress_menu_button_get_type"
           glib:type-struct="ProgressMenuButtonClass">
      <source-position filename="src/widgets/dzl-progress-menu-button.h"
                       line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_progress_menu_button_new">
        <source-position filename="src/widgets/dzl-progress-menu-button.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_progress"
              c:identifier="dzl_progress_menu_button_get_progress"
              glib:get-property="progress">
        <source-position filename="src/widgets/dzl-progress-menu-button.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <type name="ProgressMenuButton" c:type="DzlProgressMenuButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_progress"
              c:identifier="dzl_progress_menu_button_get_show_progress"
              glib:get-property="show-progress">
        <source-position filename="src/widgets/dzl-progress-menu-button.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressMenuButton" c:type="DzlProgressMenuButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_theatric"
              c:identifier="dzl_progress_menu_button_get_show_theatric"
              glib:get-property="show-theatric">
        <source-position filename="src/widgets/dzl-progress-menu-button.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressMenuButton" c:type="DzlProgressMenuButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset_theatrics"
              c:identifier="dzl_progress_menu_button_reset_theatrics">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-progress-menu-button.c"
             line="350">To avoid suprious animations from the button, you must call this function any
time you want to allow animations to continue. This is because animations are
automatically started upon reaching a progress of 1.0.

If you are performing operations in the background, calling this function
every time you add an operation is a good strategry.</doc>
        <source-position filename="src/widgets/dzl-progress-menu-button.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-progress-menu-button.c"
                 line="352">a #DzlProgressMenuButton</doc>
            <type name="ProgressMenuButton" c:type="DzlProgressMenuButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="dzl_progress_menu_button_set_progress"
              glib:set-property="progress">
        <source-position filename="src/widgets/dzl-progress-menu-button.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <type name="ProgressMenuButton" c:type="DzlProgressMenuButton*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_progress"
              c:identifier="dzl_progress_menu_button_set_show_progress"
              glib:set-property="show-progress">
        <source-position filename="src/widgets/dzl-progress-menu-button.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressMenuButton" c:type="DzlProgressMenuButton*"/>
          </instance-parameter>
          <parameter name="show_progress" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_theatric"
              c:identifier="dzl_progress_menu_button_set_show_theatric"
              glib:set-property="show-theatric">
        <source-position filename="src/widgets/dzl-progress-menu-button.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressMenuButton" c:type="DzlProgressMenuButton*"/>
          </instance-parameter>
          <parameter name="show_theatic" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="show-progress"
                writable="1"
                transfer-ownership="none"
                setter="set_show_progress"
                getter="get_show_progress"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-theatric"
                writable="1"
                transfer-ownership="none"
                setter="set_show_theatric"
                getter="get_show_theatric"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="theatric-icon-name"
                writable="1"
                transfer-ownership="none"
                default-value="folder-download-symbolic">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transition-duration"
                writable="1"
                transfer-ownership="none"
                default-value="750">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.MenuButton" c:type="GtkMenuButton"/>
      </field>
    </class>
    <record name="ProgressMenuButtonClass"
            c:type="DzlProgressMenuButtonClass"
            glib:is-gtype-struct-for="ProgressMenuButton">
      <source-position filename="src/widgets/dzl-progress-menu-button.h"
                       line="41"/>
      <field name="parent_class">
        <type name="Gtk.MenuButtonClass" c:type="GtkMenuButtonClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <bitfield name="PropertiesFlags" c:type="DzlPropertiesFlags">
      <source-position filename="src/actions/dzl-properties-group.h"
                       line="37"/>
      <member name="none" value="0" c:identifier="DZL_PROPERTIES_FLAGS_NONE">
      </member>
      <member name="stateful_booleans"
              value="1"
              c:identifier="DZL_PROPERTIES_FLAGS_STATEFUL_BOOLEANS">
      </member>
    </bitfield>
    <class name="PropertiesGroup"
           c:symbol-prefix="properties_group"
           c:type="DzlPropertiesGroup"
           parent="GObject.Object"
           glib:type-name="DzlPropertiesGroup"
           glib:get-type="dzl_properties_group_get_type"
           glib:type-struct="PropertiesGroupClass">
      <source-position filename="src/actions/dzl-properties-group.h"
                       line="31"/>
      <implements name="Gio.ActionGroup"/>
      <constructor name="new"
                   c:identifier="dzl_properties_group_new"
                   version="3.26">
        <doc xml:space="preserve"
             filename="src/actions/dzl-properties-group.c"
             line="772">This creates a new #DzlPropertiesGroup to create stateful actions
around properties in @object.

Call dzl_properties_group_add_property() to add a property to
action name mapping for this group. Until you've called this,
no actions are mapped.

Note that #DzlPropertiesGroup only holds a weak reference to
@object and therefore you must keep @object alive elsewhere.</doc>
        <source-position filename="src/actions/dzl-properties-group.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/actions/dzl-properties-group.c"
               line="786">A #DzlPropertiesGroup</doc>
          <type name="PropertiesGroup" c:type="DzlPropertiesGroup*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="774">The object containing the properties</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_type"
                   c:identifier="dzl_properties_group_new_for_type">
        <doc xml:space="preserve"
             filename="src/actions/dzl-properties-group.c"
             line="986">This creates a new #DzlPropertiesGroup for which the initial object is
%NULL.

Set @object_type to a type of a class which is a #GObject-based type.</doc>
        <source-position filename="src/actions/dzl-properties-group.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/actions/dzl-properties-group.c"
               line="995">A #DzlPropertiesGroup.</doc>
          <type name="PropertiesGroup" c:type="DzlPropertiesGroup*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="988">A #GObjectClass based type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_all_properties"
              c:identifier="dzl_properties_group_add_all_properties"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/actions/dzl-properties-group.c"
             line="925">This function will try to add all properties found on the target
instance to the group. Only properties that are supported by the
#DzlPropertiesGroup will be added.

The action name of all added properties will be identical to their
property name.</doc>
        <source-position filename="src/actions/dzl-properties-group.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="927">A #DzlPropertiesGroup</doc>
            <type name="PropertiesGroup" c:type="DzlPropertiesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_property"
              c:identifier="dzl_properties_group_add_property"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/actions/dzl-properties-group.c"
             line="873">Adds a new stateful action named @name which maps to the underlying
property @property_name of #DzlPropertiesGroup:object.</doc>
        <source-position filename="src/actions/dzl-properties-group.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="875">a #DzlPropertiesGroup</doc>
            <type name="PropertiesGroup" c:type="DzlPropertiesGroup*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="876">the name of the action</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="877">the name of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_property_full"
              c:identifier="dzl_properties_group_add_property_full"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/actions/dzl-properties-group.c"
             line="801">Adds a new stateful action named @name which maps to the underlying
property @property_name of #DzlPropertiesGroup:object.

Seting @flags allows you to tweak some settings about the action.</doc>
        <source-position filename="src/actions/dzl-properties-group.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="803">a #DzlPropertiesGroup</doc>
            <type name="PropertiesGroup" c:type="DzlPropertiesGroup*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="804">the name of the action</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="805">the name of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="806">optional flags for the action</doc>
            <type name="PropertiesFlags" c:type="DzlPropertiesFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="dzl_properties_group_remove"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/actions/dzl-properties-group.c"
             line="892">Removes an action from @self that was previously added with
dzl_properties_group_add_property(). @name should match the
name parameter to that function.</doc>
        <source-position filename="src/actions/dzl-properties-group.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="894">a #DzlPropertiesGroup</doc>
            <type name="PropertiesGroup" c:type="DzlPropertiesGroup*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-properties-group.c"
                 line="895">the name of the action</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="object" writable="1" transfer-ownership="none">
        <type name="GObject.Object"/>
      </property>
      <property name="object-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </property>
    </class>
    <record name="PropertiesGroupClass"
            c:type="DzlPropertiesGroupClass"
            glib:is-gtype-struct-for="PropertiesGroup">
      <source-position filename="src/actions/dzl-properties-group.h"
                       line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="RETURN" c:identifier="DZL_RETURN" introspectable="0">
      <source-position filename="src/dzl-debug.h" line="60"/>
      <parameters>
        <parameter name="_r">
        </parameter>
      </parameters>
    </function-macro>
    <class name="RadioBox"
           c:symbol-prefix="radio_box"
           c:type="DzlRadioBox"
           parent="Gtk.Bin"
           glib:type-name="DzlRadioBox"
           glib:get-type="dzl_radio_box_get_type"
           glib:type-struct="RadioBoxClass">
      <source-position filename="src/widgets/dzl-radio-box.h" line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_radio_box_new">
        <source-position filename="src/widgets/dzl-radio-box.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_item" c:identifier="dzl_radio_box_add_item">
        <source-position filename="src/widgets/dzl-radio-box.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RadioBox" c:type="DzlRadioBox*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_id"
              c:identifier="dzl_radio_box_get_active_id"
              glib:get-property="active-id">
        <source-position filename="src/widgets/dzl-radio-box.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RadioBox" c:type="DzlRadioBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_item" c:identifier="dzl_radio_box_remove_item">
        <source-position filename="src/widgets/dzl-radio-box.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RadioBox" c:type="DzlRadioBox*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active_id"
              c:identifier="dzl_radio_box_set_active_id"
              glib:set-property="active-id">
        <source-position filename="src/widgets/dzl-radio-box.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RadioBox" c:type="DzlRadioBox*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-id"
                writable="1"
                transfer-ownership="none"
                setter="set_active_id"
                getter="get_active_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="has-more"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-more"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RadioBoxClass"
            c:type="DzlRadioBoxClass"
            glib:is-gtype-struct-for="RadioBox">
      <source-position filename="src/widgets/dzl-radio-box.h" line="41"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="_padding1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_padding2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_padding3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_padding4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="ReadOnlyListModel"
           c:symbol-prefix="read_only_list_model"
           c:type="DzlReadOnlyListModel"
           parent="GObject.Object"
           glib:type-name="DzlReadOnlyListModel"
           glib:get-type="dzl_read_only_list_model_get_type"
           glib:type-struct="ReadOnlyListModelClass">
      <source-position filename="src/util/dzl-read-only-list-model.h"
                       line="30"/>
      <implements name="Gio.ListModel"/>
      <function name="new"
                c:identifier="dzl_read_only_list_model_new"
                version="3.30">
        <doc xml:space="preserve"
             filename="src/util/dzl-read-only-list-model.c"
             line="188">Creates a new #DzlReadOnlyListModel which is a read-only wrapper around
@base_model. This is useful when you want to give API consumers access to
a #GListModel but without the ability to mutate the underlying list.</doc>
        <source-position filename="src/util/dzl-read-only-list-model.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/util/dzl-read-only-list-model.c"
               line="196">a #DzlReadOnlyListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <parameter name="base_model" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-read-only-list-model.c"
                 line="190">a #GListModel</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </function>
      <property name="base-model"
                version="3.30"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/util/dzl-read-only-list-model.c"
             line="160">The "base-model" property is the #GListModel that will be wrapped.

This base model is not accessible after creation so that API creators can
be sure the consumer cannot mutate the underlying model. That is useful
when you want to give a caller access to a #GListModel without the ability
to introspect on the type and mutate it without your knowledge (such as
with #GListStore).</doc>
        <type name="Gio.ListModel"/>
      </property>
    </class>
    <record name="ReadOnlyListModelClass"
            c:type="DzlReadOnlyListModelClass"
            glib:is-gtype-struct-for="ReadOnlyListModel">
      <source-position filename="src/util/dzl-read-only-list-model.h"
                       line="30"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="RecursiveFileMonitor"
           c:symbol-prefix="recursive_file_monitor"
           c:type="DzlRecursiveFileMonitor"
           parent="GObject.Object"
           glib:type-name="DzlRecursiveFileMonitor"
           glib:get-type="dzl_recursive_file_monitor_get_type"
           glib:type-struct="RecursiveFileMonitorClass">
      <source-position filename="src/files/dzl-recursive-file-monitor.h"
                       line="31"/>
      <constructor name="new" c:identifier="dzl_recursive_file_monitor_new">
        <source-position filename="src/files/dzl-recursive-file-monitor.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="RecursiveFileMonitor" c:type="DzlRecursiveFileMonitor*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="cancel"
              c:identifier="dzl_recursive_file_monitor_cancel"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/files/dzl-recursive-file-monitor.c"
             line="591">Cancels the recursive file monitor.</doc>
        <source-position filename="src/files/dzl-recursive-file-monitor.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="593">a #DzlRecursiveFileMonitor</doc>
            <type name="RecursiveFileMonitor"
                  c:type="DzlRecursiveFileMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root"
              c:identifier="dzl_recursive_file_monitor_get_root"
              glib:get-property="root"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/files/dzl-recursive-file-monitor.c"
             line="607">Gets the root directory used forthe file monitor.</doc>
        <source-position filename="src/files/dzl-recursive-file-monitor.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/files/dzl-recursive-file-monitor.c"
               line="613">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="609">a #DzlRecursiveFileMonitor</doc>
            <type name="RecursiveFileMonitor"
                  c:type="DzlRecursiveFileMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_ignore_func"
              c:identifier="dzl_recursive_file_monitor_set_ignore_func"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/files/dzl-recursive-file-monitor.c"
             line="625">Sets a callback function to determine if a #GFile should be ignored
from signal emission.

@ignore_func will always be called from the applications main thread.

If @ignore_func is %NULL, it is set to the default which does not
ignore any files or directories.</doc>
        <source-position filename="src/files/dzl-recursive-file-monitor.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="627">a #DzlRecursiveFileMonitor</doc>
            <type name="RecursiveFileMonitor"
                  c:type="DzlRecursiveFileMonitor*"/>
          </instance-parameter>
          <parameter name="ignore_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="628">a #DzlRecursiveIgnoreFunc</doc>
            <type name="RecursiveIgnoreFunc" c:type="DzlRecursiveIgnoreFunc"/>
          </parameter>
          <parameter name="ignore_func_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="629">closure data for @ignore_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="ignore_func_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="630">destroy notify for @ignore_func_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_async"
              c:identifier="dzl_recursive_file_monitor_start_async">
        <source-position filename="src/files/dzl-recursive-file-monitor.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecursiveFileMonitor"
                  c:type="DzlRecursiveFileMonitor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_finish"
              c:identifier="dzl_recursive_file_monitor_start_finish"
              throws="1">
        <source-position filename="src/files/dzl-recursive-file-monitor.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecursiveFileMonitor"
                  c:type="DzlRecursiveFileMonitor*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="root"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_root">
        <type name="Gio.File"/>
      </property>
      <glib:signal name="changed" when="last" version="3.28">
        <doc xml:space="preserve"
             filename="src/files/dzl-recursive-file-monitor.c"
             line="550">This event is similar to #GFileMonitor::changed but can be fired from
any of the monitored directories in the recursive mount.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="553">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="other_file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="554">a #GFile for the other file when applicable</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/files/dzl-recursive-file-monitor.c"
                 line="555">the #GFileMonitorEvent event</doc>
            <type name="Gio.FileMonitorEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RecursiveFileMonitorClass"
            c:type="DzlRecursiveFileMonitorClass"
            glib:is-gtype-struct-for="RecursiveFileMonitor">
      <source-position filename="src/files/dzl-recursive-file-monitor.h"
                       line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="RecursiveIgnoreFunc" c:type="DzlRecursiveIgnoreFunc">
      <source-position filename="src/files/dzl-recursive-file-monitor.h"
                       line="33"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Ring"
            c:type="DzlRing"
            glib:type-name="DzlRing"
            glib:get-type="dzl_ring_get_type"
            c:symbol-prefix="ring">
      <source-position filename="src/util/dzl-ring.h" line="83"/>
      <field name="data" writable="1">
        <type name="guint8" c:type="guint8*"/>
      </field>
      <field name="len" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pos" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="sized_new" c:identifier="dzl_ring_sized_new">
        <doc xml:space="preserve"
             filename="src/util/dzl-ring.c"
             line="45">Creates a new instance of #DzlRing with the given number of elements.</doc>
        <source-position filename="src/util/dzl-ring.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/util/dzl-ring.c"
               line="53">A new #DzlRing.</doc>
          <type name="Ring" c:type="DzlRing*"/>
        </return-value>
        <parameters>
          <parameter name="element_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="47">The size per element.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reserved_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="48">The number of elements to allocate.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="element_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="49">Notification called when removing an element.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_vals" c:identifier="dzl_ring_append_vals">
        <doc xml:space="preserve"
             filename="src/util/dzl-ring.c"
             line="72">Appends @len values located at @data.</doc>
        <source-position filename="src/util/dzl-ring.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-ring.c"
               line="80">the index of the first item.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ring" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="74">A #DzlRing.</doc>
            <type name="Ring" c:type="DzlRing*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="75">A pointer to the array of values.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="76">The number of values.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="dzl_ring_foreach">
        <doc xml:space="preserve"
             filename="src/util/dzl-ring.c"
             line="117">Calls @func for every item in the #DzlRing starting from the most recently
inserted element to the least recently inserted.</doc>
        <source-position filename="src/util/dzl-ring.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ring" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="119">A #DzlRing.</doc>
            <type name="Ring" c:type="DzlRing*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="120">A #GFunc to call for each element.</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="121">user data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="dzl_ring_ref">
        <doc xml:space="preserve"
             filename="src/util/dzl-ring.c"
             line="173">Atomically increments the reference count of @ring by one.</doc>
        <source-position filename="src/util/dzl-ring.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/util/dzl-ring.c"
               line="179">The @ring pointer.</doc>
          <type name="Ring" c:type="DzlRing*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ring" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="175">A #DzlRing.</doc>
            <type name="Ring" c:type="DzlRing*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="dzl_ring_unref">
        <doc xml:space="preserve"
             filename="src/util/dzl-ring.c"
             line="194">Atomically decrements the reference count of @ring by one.  When the
reference count reaches zero, the structure is freed.</doc>
        <source-position filename="src/util/dzl-ring.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ring" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/util/dzl-ring.c"
                 line="196">A #DzlRing.</doc>
            <type name="Ring" c:type="DzlRing*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="SHORTCUTS_GROUP"
                    c:identifier="DZL_SHORTCUTS_GROUP"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-group.h"
                       line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_GROUP_CLASS"
                    c:identifier="DZL_SHORTCUTS_GROUP_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-group.h"
                       line="30"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_GROUP_GET_CLASS"
                    c:identifier="DZL_SHORTCUTS_GROUP_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-group.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_SECTION"
                    c:identifier="DZL_SHORTCUTS_SECTION"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-section.h"
                       line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_SECTION_CLASS"
                    c:identifier="DZL_SHORTCUTS_SECTION_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-section.h"
                       line="30"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_SECTION_GET_CLASS"
                    c:identifier="DZL_SHORTCUTS_SECTION_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-section.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_SHORTCUT"
                    c:identifier="DZL_SHORTCUTS_SHORTCUT"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-shortcut.h"
                       line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_SHORTCUT_CLASS"
                    c:identifier="DZL_SHORTCUTS_SHORTCUT_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-shortcut.h"
                       line="30"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_SHORTCUT_GET_CLASS"
                    c:identifier="DZL_SHORTCUTS_SHORTCUT_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-shortcut.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_WINDOW"
                    c:identifier="DZL_SHORTCUTS_WINDOW"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                       line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_WINDOW_CLASS"
                    c:identifier="DZL_SHORTCUTS_WINDOW_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                       line="30"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SHORTCUTS_WINDOW_GET_CLASS"
                    c:identifier="DZL_SHORTCUTS_WINDOW_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="ScrolledWindow"
           c:symbol-prefix="scrolled_window"
           c:type="DzlScrolledWindow"
           parent="Gtk.ScrolledWindow"
           glib:type-name="DzlScrolledWindow"
           glib:get-type="dzl_scrolled_window_get_type"
           glib:type-struct="ScrolledWindowClass">
      <source-position filename="src/widgets/dzl-scrolled-window.h" line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
    </class>
    <record name="ScrolledWindowClass"
            c:type="DzlScrolledWindowClass"
            glib:is-gtype-struct-for="ScrolledWindow">
      <source-position filename="src/widgets/dzl-scrolled-window.h" line="31"/>
      <field name="parent_class">
        <type name="Gtk.ScrolledWindowClass" c:type="GtkScrolledWindowClass"/>
      </field>
    </record>
    <class name="SearchBar"
           c:symbol-prefix="search_bar"
           c:type="DzlSearchBar"
           parent="Gtk.Bin"
           glib:type-name="DzlSearchBar"
           glib:get-type="dzl_search_bar_get_type"
           glib:type-struct="SearchBarClass">
      <source-position filename="src/widgets/dzl-search-bar.h" line="36"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_search_bar_new">
        <source-position filename="src/widgets/dzl-search-bar.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_entry" c:identifier="dzl_search_bar_get_entry">
        <source-position filename="src/widgets/dzl-search-bar.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-search-bar.c"
               line="471">A #GtkSearchEntry.</doc>
          <type name="Gtk.SearchEntry" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchBar" c:type="DzlSearchBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_mode_enabled"
              c:identifier="dzl_search_bar_get_search_mode_enabled"
              glib:get-property="search-mode-enabled">
        <source-position filename="src/widgets/dzl-search-bar.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchBar" c:type="DzlSearchBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_close_button"
              c:identifier="dzl_search_bar_get_show_close_button"
              glib:get-property="show-close-button">
        <source-position filename="src/widgets/dzl-search-bar.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchBar" c:type="DzlSearchBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_search_mode_enabled"
              c:identifier="dzl_search_bar_set_search_mode_enabled"
              glib:set-property="search-mode-enabled">
        <source-position filename="src/widgets/dzl-search-bar.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchBar" c:type="DzlSearchBar*"/>
          </instance-parameter>
          <parameter name="search_mode_enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_close_button"
              c:identifier="dzl_search_bar_set_show_close_button"
              glib:set-property="show-close-button">
        <source-position filename="src/widgets/dzl-search-bar.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchBar" c:type="DzlSearchBar*"/>
          </instance-parameter>
          <parameter name="show_close_button" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="search-mode-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_search_mode_enabled"
                getter="get_search_mode_enabled"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-close-button"
                writable="1"
                transfer-ownership="none"
                setter="set_show_close_button"
                getter="get_show_close_button"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <glib:signal name="activate" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="reveal" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SearchBarClass"
            c:type="DzlSearchBarClass"
            glib:is-gtype-struct-for="SearchBar">
      <source-position filename="src/widgets/dzl-search-bar.h" line="36"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="SettingsFlagAction"
           c:symbol-prefix="settings_flag_action"
           c:type="DzlSettingsFlagAction"
           parent="GObject.Object"
           glib:type-name="DzlSettingsFlagAction"
           glib:get-type="dzl_settings_flag_action_get_type"
           glib:type-struct="SettingsFlagActionClass">
      <source-position filename="src/actions/dzl-settings-flag-action.h"
                       line="31"/>
      <implements name="Gio.Action"/>
      <function name="new" c:identifier="dzl_settings_flag_action_new">
        <doc xml:space="preserve"
             filename="src/actions/dzl-settings-flag-action.c"
             line="59">This creates a new action that can be used to toggle an individual flag in
a #GSettings key which is of a flags type.</doc>
        <source-position filename="src/actions/dzl-settings-flag-action.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/actions/dzl-settings-flag-action.c"
               line="65">A new #GAction.</doc>
          <type name="Gio.Action" c:type="GAction*"/>
        </return-value>
        <parameters>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flag_nick" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <property name="flag-nick"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-key"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SettingsFlagActionClass"
            c:type="DzlSettingsFlagActionClass"
            glib:is-gtype-struct-for="SettingsFlagAction">
      <source-position filename="src/actions/dzl-settings-flag-action.h"
                       line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SettingsSandwich"
           c:symbol-prefix="settings_sandwich"
           c:type="DzlSettingsSandwich"
           parent="GObject.Object"
           glib:type-name="DzlSettingsSandwich"
           glib:get-type="dzl_settings_sandwich_get_type"
           glib:type-struct="SettingsSandwichClass">
      <source-position filename="src/settings/dzl-settings-sandwich.h"
                       line="31"/>
      <constructor name="new" c:identifier="dzl_settings_sandwich_new">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
        </return-value>
        <parameters>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append" c:identifier="dzl_settings_sandwich_append">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind" c:identifier="dzl_settings_sandwich_bind">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.SettingsBindFlags" c:type="GSettingsBindFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_with_mapping"
              c:identifier="dzl_settings_sandwich_bind_with_mapping">
        <doc xml:space="preserve"
             filename="src/settings/dzl-settings-sandwich.c"
             line="427">Creates a new binding similar to g_settings_bind_with_mapping() but applying
from the resolved value via the settings sandwich.</doc>
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/settings/dzl-settings-sandwich.c"
                 line="429">An #DzlSettingsSandwich.</doc>
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/settings/dzl-settings-sandwich.c"
                 line="430">the settings key to bind.
@object (type GObject.Object): the target object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/settings/dzl-settings-sandwich.c"
                 line="432">the property on @object to apply.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/settings/dzl-settings-sandwich.c"
                 line="433">flags for the binding.</doc>
            <type name="Gio.SettingsBindFlags" c:type="GSettingsBindFlags"/>
          </parameter>
          <parameter name="get_mapping"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="src/settings/dzl-settings-sandwich.c"
                 line="434">the get mapping function</doc>
            <type name="Gio.SettingsBindGetMapping"
                  c:type="GSettingsBindGetMapping"/>
          </parameter>
          <parameter name="set_mapping"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="src/settings/dzl-settings-sandwich.c"
                 line="435">the set mapping function</doc>
            <type name="Gio.SettingsBindSetMapping"
                  c:type="GSettingsBindSetMapping"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/settings/dzl-settings-sandwich.c"
                 line="436">user data for @get_mapping and @set_mapping.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="src/settings/dzl-settings-sandwich.c"
                 line="437">destroy notify for @user_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean"
              c:identifier="dzl_settings_sandwich_get_boolean">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_value"
              c:identifier="dzl_settings_sandwich_get_default_value">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double"
              c:identifier="dzl_settings_sandwich_get_double">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="dzl_settings_sandwich_get_int">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string"
              c:identifier="dzl_settings_sandwich_get_string">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="59"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uint" c:identifier="dzl_settings_sandwich_get_uint">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_value"
              c:identifier="dzl_settings_sandwich_get_user_value">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="dzl_settings_sandwich_get_value">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean"
              c:identifier="dzl_settings_sandwich_set_boolean">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double"
              c:identifier="dzl_settings_sandwich_set_double">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="dzl_settings_sandwich_set_int">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="dzl_settings_sandwich_set_string">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint" c:identifier="dzl_settings_sandwich_set_uint">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="dzl_settings_sandwich_set_value">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="dzl_settings_sandwich_unbind">
        <source-position filename="src/settings/dzl-settings-sandwich.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingsSandwich" c:type="DzlSettingsSandwich*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SettingsSandwichClass"
            c:type="DzlSettingsSandwichClass"
            glib:is-gtype-struct-for="SettingsSandwich">
      <source-position filename="src/settings/dzl-settings-sandwich.h"
                       line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ShortcutAccelDialog"
           c:symbol-prefix="shortcut_accel_dialog"
           c:type="DzlShortcutAccelDialog"
           parent="Gtk.Dialog"
           glib:type-name="DzlShortcutAccelDialog"
           glib:get-type="dzl_shortcut_accel_dialog_get_type"
           glib:type-struct="ShortcutAccelDialogClass">
      <source-position filename="src/shortcuts/dzl-shortcut-accel-dialog.h"
                       line="33"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_shortcut_accel_dialog_new">
        <source-position filename="src/shortcuts/dzl-shortcut-accel-dialog.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_accelerator"
              c:identifier="dzl_shortcut_accel_dialog_get_accelerator"
              glib:get-property="accelerator">
        <source-position filename="src/shortcuts/dzl-shortcut-accel-dialog.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="DzlShortcutAccelDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chord"
              c:identifier="dzl_shortcut_accel_dialog_get_chord">
        <source-position filename="src/shortcuts/dzl-shortcut-accel-dialog.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="DzlShortcutAccelDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shortcut_title"
              c:identifier="dzl_shortcut_accel_dialog_get_shortcut_title"
              glib:get-property="shortcut-title">
        <source-position filename="src/shortcuts/dzl-shortcut-accel-dialog.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="DzlShortcutAccelDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_accelerator"
              c:identifier="dzl_shortcut_accel_dialog_set_accelerator"
              glib:set-property="accelerator">
        <source-position filename="src/shortcuts/dzl-shortcut-accel-dialog.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="DzlShortcutAccelDialog*"/>
          </instance-parameter>
          <parameter name="accelerator" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shortcut_title"
              c:identifier="dzl_shortcut_accel_dialog_set_shortcut_title"
              glib:set-property="shortcut-title">
        <source-position filename="src/shortcuts/dzl-shortcut-accel-dialog.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="DzlShortcutAccelDialog*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accelerator"
                writable="1"
                transfer-ownership="none"
                setter="set_accelerator"
                getter="get_accelerator"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="shortcut-title"
                writable="1"
                transfer-ownership="none"
                setter="set_shortcut_title"
                getter="get_shortcut_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ShortcutAccelDialogClass"
            c:type="DzlShortcutAccelDialogClass"
            glib:is-gtype-struct-for="ShortcutAccelDialog">
      <source-position filename="src/shortcuts/dzl-shortcut-accel-dialog.h"
                       line="33"/>
      <field name="parent_class">
        <type name="Gtk.DialogClass" c:type="GtkDialogClass"/>
      </field>
    </record>
    <record name="ShortcutChord"
            c:type="DzlShortcutChord"
            opaque="1"
            glib:type-name="DzlShortcutChord"
            glib:get-type="dzl_shortcut_chord_get_type"
            c:symbol-prefix="shortcut_chord">
      <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                       line="39"/>
      <constructor name="new_from_event"
                   c:identifier="dzl_shortcut_chord_new_from_event">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <type name="ShortcutChord" c:type="DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.EventKey" c:type="const GdkEventKey*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="dzl_shortcut_chord_new_from_string">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <type name="ShortcutChord" c:type="DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <parameter name="accelerator" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_event"
              c:identifier="dzl_shortcut_chord_append_event">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="DzlShortcutChord*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.EventKey" c:type="const GdkEventKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="dzl_shortcut_chord_copy">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="77"/>
        <return-value transfer-ownership="full">
          <type name="ShortcutChord" c:type="DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="dzl_shortcut_chord_free">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="DzlShortcutChord*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label" c:identifier="dzl_shortcut_chord_get_label">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="dzl_shortcut_chord_get_length">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_key" c:identifier="dzl_shortcut_chord_get_nth_key">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </instance-parameter>
          <parameter name="nth" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keyval" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="modifier" transfer-ownership="none">
            <type name="Gdk.ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_modifier"
              c:identifier="dzl_shortcut_chord_has_modifier">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="dzl_shortcut_chord_match">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="ShortcutMatch" c:type="DzlShortcutMatch"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="dzl_shortcut_chord_to_string">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="equal" c:identifier="dzl_shortcut_chord_equal">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="data1"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="data2"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="hash" c:identifier="dzl_shortcut_chord_hash">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ShortcutChordTable"
            c:type="DzlShortcutChordTable"
            disguised="1"
            opaque="1">
      <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                       line="40"/>
      <method name="add" c:identifier="dzl_shortcut_chord_table_add">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
          </instance-parameter>
          <parameter name="chord" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="dzl_shortcut_chord_table_foreach">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-chord.c"
             line="735">This function will call @foreach_func for each chord in the table.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-chord.c"
                 line="737">a #DzlShortcutChordTable</doc>
            <type name="ShortcutChordTable"
                  c:type="const DzlShortcutChordTable*"/>
          </instance-parameter>
          <parameter name="foreach_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-chord.c"
                 line="738">A callback for each chord</doc>
            <type name="ShortcutChordTableForeach"
                  c:type="DzlShortcutChordTableForeach"/>
          </parameter>
          <parameter name="foreach_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-chord.c"
                 line="739">user data for @foreach_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="dzl_shortcut_chord_table_free">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="dzl_shortcut_chord_table_lookup">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="ShortcutMatch" c:type="DzlShortcutMatch"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
          </instance-parameter>
          <parameter name="chord" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_data"
              c:identifier="dzl_shortcut_chord_table_lookup_data">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="printf" c:identifier="dzl_shortcut_chord_table_printf">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable"
                  c:type="const DzlShortcutChordTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="dzl_shortcut_chord_table_remove">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
          </instance-parameter>
          <parameter name="chord" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_data"
              c:identifier="dzl_shortcut_chord_table_remove_data">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_free_func"
              c:identifier="dzl_shortcut_chord_table_set_free_func">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="dzl_shortcut_chord_table_size">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutChordTable"
                  c:type="const DzlShortcutChordTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="dzl_shortcut_chord_table_new"
                introspectable="0">
        <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                         line="83"/>
        <return-value>
          <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
        </return-value>
      </function>
    </record>
    <callback name="ShortcutChordTableForeach"
              c:type="DzlShortcutChordTableForeach">
      <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                       line="42"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="chord" transfer-ownership="none">
          <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
        </parameter>
        <parameter name="chord_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ShortcutContext"
           c:symbol-prefix="shortcut_context"
           c:type="DzlShortcutContext"
           parent="GObject.Object"
           glib:type-name="DzlShortcutContext"
           glib:get-type="dzl_shortcut_context_get_type"
           glib:type-struct="ShortcutContextClass">
      <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                       line="33"/>
      <constructor name="new" c:identifier="dzl_shortcut_context_new">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="36"/>
        <return-value transfer-ownership="full">
          <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="activate" c:identifier="dzl_shortcut_context_activate">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="ShortcutMatch" c:type="DzlShortcutMatch"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="chord" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_action" c:identifier="dzl_shortcut_context_add_action">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="detailed_action_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_command"
              c:identifier="dzl_shortcut_context_add_command">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_signal"
              c:identifier="dzl_shortcut_context_add_signal"
              introspectable="0">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="signal_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_args" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_signal_va_list"
              c:identifier="dzl_shortcut_context_add_signal_va_list"
              introspectable="0">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="signal_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_args" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_signalv"
              c:identifier="dzl_shortcut_context_add_signalv">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-context.c"
             line="368">This is similar to dzl_shortcut_context_add_signal() but is easier to use
from language bindings.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-context.c"
                 line="370">a #DzlShortcutContext</doc>
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="accel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-context.c"
                 line="371">the accelerator for the shortcut</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="signal_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-context.c"
                 line="372">the name of the signal</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="values"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-context.c"
                 line="373">The
  values to use when calling the signal.</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="GObject.Value"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="dzl_shortcut_context_get_name"
              glib:get-property="name">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="dzl_shortcut_context_load_from_data"
              throws="1">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_resource"
              c:identifier="dzl_shortcut_context_load_from_resource"
              throws="1">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="dzl_shortcut_context_remove">
        <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </instance-parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-binding-sets"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="ShortcutContextClass"
            c:type="DzlShortcutContextClass"
            glib:is-gtype-struct-for="ShortcutContext">
      <source-position filename="src/shortcuts/dzl-shortcut-context.h"
                       line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ShortcutController"
           c:symbol-prefix="shortcut_controller"
           c:type="DzlShortcutController"
           parent="GObject.Object"
           glib:type-name="DzlShortcutController"
           glib:get-type="dzl_shortcut_controller_get_type"
           glib:type-struct="ShortcutControllerClass">
      <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                       line="35"/>
      <constructor name="new" c:identifier="dzl_shortcut_controller_new">
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <type name="ShortcutController" c:type="DzlShortcutController*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="find" c:identifier="dzl_shortcut_controller_find">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="635">Finds the registered #DzlShortcutController for a widget.

The controller is created if it does not already exist.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-controller.c"
               line="642">An #DzlShortcutController or %NULL.</doc>
          <type name="ShortcutController" c:type="DzlShortcutController*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <function name="try_find"
                c:identifier="dzl_shortcut_controller_try_find">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="618">Finds the registered #DzlShortcutController for a widget.

If no controller is found, %NULL is returned.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-controller.c"
               line="625">An #DzlShortcutController or %NULL.</doc>
          <type name="ShortcutController" c:type="DzlShortcutController*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_command_action"
              c:identifier="dzl_shortcut_controller_add_command_action">
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
          <parameter name="command_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_command_callback"
              c:identifier="dzl_shortcut_controller_add_command_callback">
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
          <parameter name="command_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <type name="Gtk.Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_command_signal"
              c:identifier="dzl_shortcut_controller_add_command_signal"
              introspectable="0">
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
          <parameter name="command_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
          <parameter name="signal_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_args" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_command"
              c:identifier="dzl_shortcut_controller_execute_command">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="1003">This method will locate and execute the command matching the id @command.

If the command is not found, %FALSE is returned.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-controller.c"
               line="1012">%TRUE if the command was found and executed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="1005">a #DzlShortcutController</doc>
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="1006">the id of the command</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context"
              c:identifier="dzl_shortcut_controller_get_context"
              glib:get-property="context"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="729">This function gets the #DzlShortcutController:context property, which
is the current context to dispatch events to. An #DzlShortcutContext
is a group of keybindings that may be activated in response to a
single or series of #GdkEventKey.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-controller.c"
               line="738">A #DzlShortcutContext or %NULL.</doc>
          <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="731">An #DzlShortcutController</doc>
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context_for_phase"
              c:identifier="dzl_shortcut_controller_get_context_for_phase"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="698">Controllers can have a different context for a particular phase, which allows
them to activate different keybindings depending if the event in capture,
bubble, or dispatch.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-controller.c"
               line="707">A #DzlShortcutContext or %NULL.</doc>
          <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="700">a #DzlShortcutController</doc>
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="701">the phase for the shorcut delivery</doc>
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_chord"
              c:identifier="dzl_shortcut_controller_get_current_chord"
              glib:get-property="current-chord">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="980">This method gets the #DzlShortcutController:current-chord property.
This is useful if you want to monitor in-progress chord building.

Note that this value will only be valid on the controller for the
toplevel widget (a #GtkWindow). Chords are not tracked at the
individual widget controller level.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-controller.c"
               line="991">A #DzlShortcutChord or %NULL.</doc>
          <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="982">a #DzlShortcutController</doc>
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager"
              c:identifier="dzl_shortcut_controller_get_manager"
              glib:get-property="manager">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="149">Gets the #DzlShortcutManager associated with this controller.

Generally, this will look for the root controller's manager as mixing and
matching managers in a single window hierarchy is not supported.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-controller.c"
               line="158">A #DzlShortcutManager.</doc>
          <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="151">a #DzlShortcutController</doc>
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_widget"
              c:identifier="dzl_shortcut_controller_get_widget"
              glib:get-property="widget"
              version="3.34">
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-controller.c"
               line="1238">the widget for the controller</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="1236">a #DzlShortcutController</doc>
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_accel"
              c:identifier="dzl_shortcut_controller_remove_accel">
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_context_by_name"
              c:identifier="dzl_shortcut_controller_set_context_by_name"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="398">Changes the context for the controller to the context matching @name.

Contexts are resolved at runtime through the current theme (and possibly
a parent theme if it inherits from one).</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="400">a #DzlShortcutController</doc>
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="401">The name of the context</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager"
              c:identifier="dzl_shortcut_controller_set_manager"
              glib:set-property="manager">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="176">Sets the #DzlShortcutController:manager property.

If you set this to %NULL, it will revert to the default #DzlShortcutManager
for the process.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="178">a #DzlShortcutController</doc>
            <type name="ShortcutController" c:type="DzlShortcutController*"/>
          </instance-parameter>
          <parameter name="manager"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="179">A #DzlShortcutManager or %NULL</doc>
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context" transfer-ownership="none" getter="get_context">
        <type name="ShortcutContext"/>
      </property>
      <property name="current-chord"
                transfer-ownership="none"
                getter="get_current_chord">
        <type name="ShortcutChord"/>
      </property>
      <property name="manager"
                writable="1"
                transfer-ownership="none"
                setter="set_manager"
                getter="get_manager">
        <type name="ShortcutManager"/>
      </property>
      <property name="widget"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_widget">
        <type name="Gtk.Widget"/>
      </property>
      <glib:signal name="reset" when="last" action="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="550">This signal is emitted when the shortcut controller is requesting
the widget to reset any state it may have regarding the shortcut
controller. Such an example might be a modal system that lives
outside the controller whose state should be cleared in response
to the controller changing modes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="set-context-named" when="last" action="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-controller.c"
             line="565">This changes the current context on the #DzlShortcutController to be the
context matching @name. This is found by looking up the context by name
in the active #DzlShortcutTheme.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-controller.c"
                 line="568">The name of the context</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ShortcutControllerClass"
            c:type="DzlShortcutControllerClass"
            glib:is-gtype-struct-for="ShortcutController">
      <source-position filename="src/shortcuts/dzl-shortcut-controller.h"
                       line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ShortcutEntry" c:type="DzlShortcutEntry">
      <doc xml:space="preserve"
           filename="src/shortcuts/dzl-shortcut-manager.h"
           line="37">The #DzlShortcutEntry structure can be used to bulk register shortcuts
for a particular widget. It can also do the necessary hooks of registering
commands that can be changed using the keytheme components.</doc>
      <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                       line="60"/>
      <field name="command" writable="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.h"
             line="39">the command identifier</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="phase" writable="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.h"
             line="40">the phase for activation, or 0 for the default</doc>
        <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
      </field>
      <field name="default_accel" writable="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.h"
             line="41">the default accelerator for the command, if any</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="section" writable="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.h"
             line="42">the section for the shortcuts window</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="group" writable="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.h"
             line="43">the group for the shortcuts window</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="title" writable="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.h"
             line="44">the title for the shortcuts window</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="subtitle" writable="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.h"
             line="45">the subtitle for the shortcuts window, if any</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <class name="ShortcutLabel"
           c:symbol-prefix="shortcut_label"
           c:type="DzlShortcutLabel"
           parent="Gtk.Box"
           glib:type-name="DzlShortcutLabel"
           glib:get-type="dzl_shortcut_label_get_type"
           glib:type-struct="ShortcutLabelClass">
      <source-position filename="src/shortcuts/dzl-shortcut-label.h"
                       line="33"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_shortcut_label_new">
        <source-position filename="src/shortcuts/dzl-shortcut-label.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_accelerator"
              c:identifier="dzl_shortcut_label_get_accelerator"
              glib:get-property="accelerator">
        <source-position filename="src/shortcuts/dzl-shortcut-label.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutLabel" c:type="DzlShortcutLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chord"
              c:identifier="dzl_shortcut_label_get_chord"
              glib:get-property="chord">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-label.c"
             line="211">Gets the chord for the label, or %NULL.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-label.h"
                         line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-label.c"
               line="217">A #DzlShortcutChord or %NULL</doc>
          <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-label.c"
                 line="213">a #DzlShortcutLabel</doc>
            <type name="ShortcutLabel" c:type="DzlShortcutLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_accelerator"
              c:identifier="dzl_shortcut_label_set_accelerator"
              glib:set-property="accelerator">
        <source-position filename="src/shortcuts/dzl-shortcut-label.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutLabel" c:type="DzlShortcutLabel*"/>
          </instance-parameter>
          <parameter name="accelerator" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chord"
              c:identifier="dzl_shortcut_label_set_chord"
              glib:set-property="chord">
        <source-position filename="src/shortcuts/dzl-shortcut-label.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutLabel" c:type="DzlShortcutLabel*"/>
          </instance-parameter>
          <parameter name="chord" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accelerator"
                writable="1"
                transfer-ownership="none"
                setter="set_accelerator"
                getter="get_accelerator"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="chord"
                writable="1"
                transfer-ownership="none"
                setter="set_chord"
                getter="get_chord">
        <type name="ShortcutChord"/>
      </property>
    </class>
    <record name="ShortcutLabelClass"
            c:type="DzlShortcutLabelClass"
            glib:is-gtype-struct-for="ShortcutLabel">
      <source-position filename="src/shortcuts/dzl-shortcut-label.h"
                       line="33"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="ShortcutManager"
           c:symbol-prefix="shortcut_manager"
           c:type="DzlShortcutManager"
           parent="GObject.Object"
           glib:type-name="DzlShortcutManager"
           glib:get-type="dzl_shortcut_manager_get_type"
           glib:type-struct="ShortcutManagerClass">
      <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                       line="74"/>
      <implements name="Gio.Initable"/>
      <implements name="Gio.ListModel"/>
      <function name="get_default"
                c:identifier="dzl_shortcut_manager_get_default">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.c"
             line="583">Gets the singleton #DzlShortcutManager for the process.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-manager.c"
               line="588">An #DzlShortcutManager.</doc>
          <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
        </return-value>
      </function>
      <method name="add_action" c:identifier="dzl_shortcut_manager_add_action">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="detailed_action_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="section" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_command"
              c:identifier="dzl_shortcut_manager_add_command">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="section" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_shortcut_entries"
              c:identifier="dzl_shortcut_manager_add_shortcut_entries">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.c"
             line="1511">This method will add @shortcuts to the #DzlShortcutManager.

This provides a simple way for widgets to add their shortcuts to the manager
so that they may be overriden by themes or the end user.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="1513">a #DzlShortcutManager or %NULL for the default</doc>
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="shortcuts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="1514">shortcuts to add</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="const DzlShortcutEntry*">
              <type name="ShortcutEntry" c:type="DzlShortcutEntry"/>
            </array>
          </parameter>
          <parameter name="n_shortcuts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="1515">the number of entries in @shortcuts</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="translation_domain"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="1516">the gettext domain to use for translations</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_shortcuts_to_window"
              c:identifier="dzl_shortcut_manager_add_shortcuts_to_window">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.c"
             line="1417">Adds shortcuts registered with the #DzlShortcutManager to the
#DzlShortcutsWindow.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="1419">A #DzlShortcutManager</doc>
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="1420">A #DzlShortcutsWindow</doc>
            <type name="ShortcutsWindow" c:type="DzlShortcutsWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_search_path"
              c:identifier="dzl_shortcut_manager_append_search_path">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_theme"
              c:identifier="dzl_shortcut_manager_get_theme"
              glib:get-property="theme">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.c"
             line="604">Gets the "theme" property.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-manager.c"
               line="610">An #DzlShortcutTheme.</doc>
          <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="606">A #DzlShortcutManager or %NULL</doc>
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_theme_by_name"
              c:identifier="dzl_shortcut_manager_get_theme_by_name">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.c"
             line="1573">Locates a theme by the name of the theme.

If @theme_name is %NULL, then the internal theme is used. You probably dont
need to use that as it is used by various controllers to hook up their
default actions.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="103"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-manager.c"
               line="1584">A #DzlShortcutTheme or %NULL.</doc>
          <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="1575">a #DzlShortcutManager</doc>
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="theme_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="1576">the name of a theme or %NULL of the internal theme</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_theme_name"
              c:identifier="dzl_shortcut_manager_get_theme_name"
              glib:get-property="theme-name">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_dir"
              c:identifier="dzl_shortcut_manager_get_user_dir"
              glib:get-property="user-dir">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_event"
              c:identifier="dzl_shortcut_manager_handle_event">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.c"
             line="933">This function will try to dispatch @event to the proper widget and
#DzlShortcutContext. If the event is handled, then %TRUE is returned.

You should call this from #GtkWidget::key-press-event handler in your
#GtkWindow toplevel.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-manager.c"
               line="945">%TRUE if the event was handled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="935">An #DzlShortcutManager</doc>
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="937">A #GdkEventKey event to handle.</doc>
            <type name="Gdk.EventKey" c:type="const GdkEventKey*"/>
          </parameter>
          <parameter name="toplevel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="936">A #GtkWidget or %NULL.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_search_path"
              c:identifier="dzl_shortcut_manager_prepend_search_path">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_reload"
              c:identifier="dzl_shortcut_manager_queue_reload">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reload" c:identifier="dzl_shortcut_manager_reload">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_search_path"
              c:identifier="dzl_shortcut_manager_remove_search_path">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_theme"
              c:identifier="dzl_shortcut_manager_set_theme"
              glib:set-property="theme">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-manager.c"
             line="641">Sets the theme for the shortcut manager.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="643">An #DzlShortcutManager</doc>
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-manager.c"
                 line="644">An #DzlShortcutTheme</doc>
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_theme_name"
              c:identifier="dzl_shortcut_manager_set_theme_name"
              glib:set-property="theme-name">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="theme_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_dir"
              c:identifier="dzl_shortcut_manager_set_user_dir"
              glib:set-property="user-dir">
        <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </instance-parameter>
          <parameter name="user_dir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="theme"
                writable="1"
                transfer-ownership="none"
                setter="set_theme"
                getter="get_theme">
        <type name="ShortcutTheme"/>
      </property>
      <property name="theme-name"
                writable="1"
                transfer-ownership="none"
                setter="set_theme_name"
                getter="get_theme_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="user-dir"
                writable="1"
                transfer-ownership="none"
                setter="set_user_dir"
                getter="get_user_dir"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ShortcutManagerClass"
            c:type="DzlShortcutManagerClass"
            glib:is-gtype-struct-for="ShortcutManager">
      <source-position filename="src/shortcuts/dzl-shortcut-manager.h"
                       line="74"/>
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <enumeration name="ShortcutMatch"
                 glib:type-name="DzlShortcutMatch"
                 glib:get-type="dzl_shortcut_match_get_type"
                 c:type="DzlShortcutMatch">
      <member name="none"
              value="0"
              c:identifier="DZL_SHORTCUT_MATCH_NONE"
              glib:nick="none"
              glib:name="DZL_SHORTCUT_MATCH_NONE">
      </member>
      <member name="equal"
              value="1"
              c:identifier="DZL_SHORTCUT_MATCH_EQUAL"
              glib:nick="equal"
              glib:name="DZL_SHORTCUT_MATCH_EQUAL">
      </member>
      <member name="partial"
              value="2"
              c:identifier="DZL_SHORTCUT_MATCH_PARTIAL"
              glib:nick="partial"
              glib:name="DZL_SHORTCUT_MATCH_PARTIAL">
      </member>
    </enumeration>
    <class name="ShortcutModel"
           c:symbol-prefix="shortcut_model"
           c:type="DzlShortcutModel"
           parent="Gtk.TreeStore"
           glib:type-name="DzlShortcutModel"
           glib:get-type="dzl_shortcut_model_get_type"
           glib:type-struct="ShortcutModelClass">
      <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                       line="35"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.TreeDragDest"/>
      <implements name="Gtk.TreeDragSource"/>
      <implements name="Gtk.TreeModel"/>
      <implements name="Gtk.TreeSortable"/>
      <function name="new" c:identifier="dzl_shortcut_model_new">
        <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-model.c"
               line="220">A #GtkTreeModel</doc>
          <type name="Gtk.TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </function>
      <method name="get_manager"
              c:identifier="dzl_shortcut_model_get_manager"
              glib:get-property="manager">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-model.c"
             line="228">Gets the manager to be edited.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-model.c"
               line="234">A #DzlShortcutManager</doc>
          <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-model.c"
                 line="230">a #DzlShortcutModel</doc>
            <type name="ShortcutModel" c:type="DzlShortcutModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_theme"
              c:identifier="dzl_shortcut_model_get_theme"
              glib:get-property="theme">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-model.c"
             line="258">Get the theme to be edited.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-model.c"
               line="264">A #DzlShortcutTheme</doc>
          <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-model.c"
                 line="260">a #DzlShortcutModel</doc>
            <type name="ShortcutModel" c:type="DzlShortcutModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rebuild" c:identifier="dzl_shortcut_model_rebuild">
        <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutModel" c:type="DzlShortcutModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_chord" c:identifier="dzl_shortcut_model_set_chord">
        <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutModel" c:type="DzlShortcutModel*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="Gtk.TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="chord" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager"
              c:identifier="dzl_shortcut_model_set_manager"
              glib:set-property="manager">
        <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutModel" c:type="DzlShortcutModel*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <type name="ShortcutManager" c:type="DzlShortcutManager*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_theme"
              c:identifier="dzl_shortcut_model_set_theme"
              glib:set-property="theme">
        <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutModel" c:type="DzlShortcutModel*"/>
          </instance-parameter>
          <parameter name="theme" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </parameter>
        </parameters>
      </method>
      <property name="manager"
                writable="1"
                transfer-ownership="none"
                setter="set_manager"
                getter="get_manager">
        <type name="ShortcutManager"/>
      </property>
      <property name="theme"
                writable="1"
                transfer-ownership="none"
                setter="set_theme"
                getter="get_theme">
        <type name="ShortcutTheme"/>
      </property>
    </class>
    <record name="ShortcutModelClass"
            c:type="DzlShortcutModelClass"
            glib:is-gtype-struct-for="ShortcutModel">
      <source-position filename="src/shortcuts/dzl-shortcut-model.h"
                       line="35"/>
      <field name="parent_class">
        <type name="Gtk.TreeStoreClass" c:type="GtkTreeStoreClass"/>
      </field>
    </record>
    <bitfield name="ShortcutPhase"
              glib:type-name="DzlShortcutPhase"
              glib:get-type="dzl_shortcut_phase_get_type"
              c:type="DzlShortcutPhase">
      <member name="dispatch"
              value="0"
              c:identifier="DZL_SHORTCUT_PHASE_DISPATCH"
              glib:nick="dispatch"
              glib:name="DZL_SHORTCUT_PHASE_DISPATCH">
      </member>
      <member name="capture"
              value="1"
              c:identifier="DZL_SHORTCUT_PHASE_CAPTURE"
              glib:nick="capture"
              glib:name="DZL_SHORTCUT_PHASE_CAPTURE">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-phase.h"
             line="32">Indicates the capture phase of the shortcut
  activation. This allows parent widgets to intercept the keybinding before
  it is dispatched to the target #GdkWindow.</doc>
      </member>
      <member name="bubble"
              value="2"
              c:identifier="DZL_SHORTCUT_PHASE_BUBBLE"
              glib:nick="bubble"
              glib:name="DZL_SHORTCUT_PHASE_BUBBLE">
      </member>
      <member name="global"
              value="4"
              c:identifier="DZL_SHORTCUT_PHASE_GLOBAL"
              glib:nick="global"
              glib:name="DZL_SHORTCUT_PHASE_GLOBAL">
      </member>
    </bitfield>
    <class name="ShortcutSimpleLabel"
           c:symbol-prefix="shortcut_simple_label"
           c:type="DzlShortcutSimpleLabel"
           parent="Gtk.Box"
           glib:type-name="DzlShortcutSimpleLabel"
           glib:get-type="dzl_shortcut_simple_label_get_type"
           glib:type-struct="ShortcutSimpleLabelClass">
      <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                       line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_shortcut_simple_label_new">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_accel"
              c:identifier="dzl_shortcut_simple_label_get_accel"
              glib:get-property="accel">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutSimpleLabel" c:type="DzlShortcutSimpleLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_action"
              c:identifier="dzl_shortcut_simple_label_get_action"
              glib:get-property="action">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutSimpleLabel" c:type="DzlShortcutSimpleLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_command"
              c:identifier="dzl_shortcut_simple_label_get_command"
              glib:get-property="command">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutSimpleLabel" c:type="DzlShortcutSimpleLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_shortcut_simple_label_get_title"
              glib:get-property="title">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutSimpleLabel" c:type="DzlShortcutSimpleLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_accel"
              c:identifier="dzl_shortcut_simple_label_set_accel"
              glib:set-property="accel">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutSimpleLabel" c:type="DzlShortcutSimpleLabel*"/>
          </instance-parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_action"
              c:identifier="dzl_shortcut_simple_label_set_action"
              glib:set-property="action">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutSimpleLabel" c:type="DzlShortcutSimpleLabel*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_command"
              c:identifier="dzl_shortcut_simple_label_set_command"
              glib:set-property="command">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutSimpleLabel" c:type="DzlShortcutSimpleLabel*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="dzl_shortcut_simple_label_set_title"
              glib:set-property="title">
        <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutSimpleLabel" c:type="DzlShortcutSimpleLabel*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accel"
                writable="1"
                transfer-ownership="none"
                setter="set_accel"
                getter="get_accel"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="action"
                writable="1"
                transfer-ownership="none"
                setter="set_action"
                getter="get_action"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="command"
                writable="1"
                transfer-ownership="none"
                setter="set_command"
                getter="get_command"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="show-accel"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ShortcutSimpleLabelClass"
            c:type="DzlShortcutSimpleLabelClass"
            glib:is-gtype-struct-for="ShortcutSimpleLabel">
      <source-position filename="src/shortcuts/dzl-shortcut-simple-label.h"
                       line="31"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="ShortcutTheme"
           c:symbol-prefix="shortcut_theme"
           c:type="DzlShortcutTheme"
           parent="GObject.Object"
           glib:type-name="DzlShortcutTheme"
           glib:get-type="dzl_shortcut_theme_get_type"
           glib:type-struct="ShortcutThemeClass">
      <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                       line="49"/>
      <constructor name="new" c:identifier="dzl_shortcut_theme_new">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_command" c:identifier="dzl_shortcut_theme_add_command">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="accelerator" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_context" c:identifier="dzl_shortcut_theme_add_context">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_css_resource"
              c:identifier="dzl_shortcut_theme_add_css_resource">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_context_by_name"
              c:identifier="dzl_shortcut_theme_find_context_by_name">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-theme.c"
             line="239">Gets the context named @name. If the context does not exist, it will
be created.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-theme.c"
               line="247">An #DzlShortcutContext</doc>
          <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="241">An #DzlShortcutContext</doc>
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="242">The name of the context</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_default_context"
              c:identifier="dzl_shortcut_theme_find_default_context">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-theme.c"
             line="306">Finds the default context in the theme for @widget.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="67"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-theme.c"
               line="311">An #DzlShortcutContext or %NULL.</doc>
          <type name="ShortcutContext" c:type="DzlShortcutContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chord_for_action"
              c:identifier="dzl_shortcut_theme_get_chord_for_action">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="detailed_action_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chord_for_command"
              c:identifier="dzl_shortcut_theme_get_chord_for_command">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="dzl_shortcut_theme_get_name"
              glib:get-property="name">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="dzl_shortcut_theme_get_parent">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-theme.c"
             line="653">If the #DzlShortcutTheme:parent-name property has been set, this will fetch
the parent #DzlShortcutTheme.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-theme.c"
               line="660">A #DzlShortcutTheme or %NULL.</doc>
          <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="655">a #DzlShortcutTheme</doc>
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent_name"
              c:identifier="dzl_shortcut_theme_get_parent_name"
              glib:get-property="parent-name">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-theme.c"
             line="415">Gets the name of the parent shortcut theme.

This is used to resolve shortcuts from the parent theme without having to
copy them directly into this shortcut theme. It allows for some level of
copy-on-write (CoW).</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-theme.c"
               line="425">The name of the parent theme, or %NULL if none is set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="417">a #DzlShortcutTheme</doc>
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="dzl_shortcut_theme_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_shortcut_theme_get_title"
              glib:get-property="title">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="dzl_shortcut_theme_load_from_data"
              throws="1">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_file"
              c:identifier="dzl_shortcut_theme_load_from_file"
              throws="1">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_path"
              c:identifier="dzl_shortcut_theme_load_from_path"
              throws="1">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_css_resource"
              c:identifier="dzl_shortcut_theme_remove_css_resource">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_file"
              c:identifier="dzl_shortcut_theme_save_to_file"
              throws="1">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_path"
              c:identifier="dzl_shortcut_theme_save_to_path"
              throws="1">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_stream"
              c:identifier="dzl_shortcut_theme_save_to_stream"
              throws="1">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accel_for_action"
              c:identifier="dzl_shortcut_theme_set_accel_for_action">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="detailed_action_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accel_for_command"
              c:identifier="dzl_shortcut_theme_set_accel_for_command">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-theme.c"
             line="626">This will set the command to execute when @accel is pressed.  If command is
%NULL, the accelerator will be cleared.  If accelerator is %NULL, all
accelerators for @command will be cleared.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="628">a #DzlShortcutTheme</doc>
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="command"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="629">the command to be executed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="accel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="630">the shortcut accelerator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="631">the phase to activate within, or 0 for the default</doc>
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chord_for_action"
              c:identifier="dzl_shortcut_theme_set_chord_for_action">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="detailed_action_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="chord" transfer-ownership="none">
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chord_for_command"
              c:identifier="dzl_shortcut_theme_set_chord_for_command">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-theme.c"
             line="557">This will set the command to execute when @chord is pressed.  If command is
%NULL, the accelerator will be cleared.  If @chord is %NULL, all
accelerators for @command will be cleared.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="559">a #DzlShortcutTheme</doc>
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="command"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="561">the command to be executed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="chord"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="560">the chord for the command</doc>
            <type name="ShortcutChord" c:type="const DzlShortcutChord*"/>
          </parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme.c"
                 line="562">the phase to activate within, or 0 for the default</doc>
            <type name="ShortcutPhase" c:type="DzlShortcutPhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parent_name"
              c:identifier="dzl_shortcut_theme_set_parent_name"
              glib:set-property="parent-name">
        <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </instance-parameter>
          <parameter name="parent_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent-name"
                writable="1"
                transfer-ownership="none"
                setter="set_parent_name"
                getter="get_parent_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ShortcutThemeClass"
            c:type="DzlShortcutThemeClass"
            glib:is-gtype-struct-for="ShortcutTheme">
      <source-position filename="src/shortcuts/dzl-shortcut-theme.h"
                       line="49"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="ShortcutThemeEditor"
           c:symbol-prefix="shortcut_theme_editor"
           c:type="DzlShortcutThemeEditor"
           parent="Gtk.Bin"
           glib:type-name="DzlShortcutThemeEditor"
           glib:get-type="dzl_shortcut_theme_editor_get_type"
           glib:type-struct="ShortcutThemeEditorClass">
      <source-position filename="src/shortcuts/dzl-shortcut-theme-editor.h"
                       line="47"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_shortcut_theme_editor_new">
        <source-position filename="src/shortcuts/dzl-shortcut-theme-editor.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_theme"
              c:identifier="dzl_shortcut_theme_editor_get_theme"
              glib:get-property="theme">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-theme-editor.c"
             line="452">Gets the shortcut theme if one hsa been set.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-theme-editor.h"
                         line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-theme-editor.c"
               line="458">An #DzlShortcutTheme or %NULL</doc>
          <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-theme-editor.c"
                 line="454">a #DzlShortcutThemeEditor</doc>
            <type name="ShortcutThemeEditor" c:type="DzlShortcutThemeEditor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_theme"
              c:identifier="dzl_shortcut_theme_editor_set_theme"
              glib:set-property="theme">
        <source-position filename="src/shortcuts/dzl-shortcut-theme-editor.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutThemeEditor" c:type="DzlShortcutThemeEditor*"/>
          </instance-parameter>
          <parameter name="theme" transfer-ownership="none">
            <type name="ShortcutTheme" c:type="DzlShortcutTheme*"/>
          </parameter>
        </parameters>
      </method>
      <property name="theme"
                writable="1"
                transfer-ownership="none"
                setter="set_theme"
                getter="get_theme">
        <type name="ShortcutTheme"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-theme-editor.c"
             line="358">The "changed" signal is emitted when one of the rows within the editor
has been changed.

You might want to use this signal to save your theme changes to your
configured storage backend.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ShortcutThemeEditorClass"
            c:type="DzlShortcutThemeEditorClass"
            glib:is-gtype-struct-for="ShortcutThemeEditor">
      <source-position filename="src/shortcuts/dzl-shortcut-theme-editor.h"
                       line="47"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="ShortcutTooltip"
           c:symbol-prefix="shortcut_tooltip"
           c:type="DzlShortcutTooltip"
           parent="GObject.Object"
           glib:type-name="DzlShortcutTooltip"
           glib:get-type="dzl_shortcut_tooltip_get_type"
           glib:type-struct="ShortcutTooltipClass">
      <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                       line="32"/>
      <constructor name="new"
                   c:identifier="dzl_shortcut_tooltip_new"
                   version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="171">Create a new #DzlShortcutTooltip.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="35"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-tooltip.c"
               line="176">a newly created #DzlShortcutTooltip</doc>
          <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
        </return-value>
      </constructor>
      <method name="get_accel"
              c:identifier="dzl_shortcut_tooltip_get_accel"
              glib:get-property="accel"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="472">Gets the #DzlShortcutTooltip:accel property, which can be used to override
the commands accel.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-tooltip.c"
               line="479">an override accel, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="474">a #DzlShortcutTooltip</doc>
            <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_command_id"
              c:identifier="dzl_shortcut_tooltip_get_command_id"
              glib:get-property="command-id"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="362">Gets the #DzlShortcutTooltip:command-id property.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-tooltip.c"
               line="368">a string containing the command id</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="364">a #DzlShortcutTooltip</doc>
            <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_shortcut_tooltip_get_title"
              glib:get-property="title"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="320">Gets the #DzlShortcutTooltip:title property, if set.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-tooltip.c"
               line="325">a string containing the title, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_widget"
              c:identifier="dzl_shortcut_tooltip_get_widget"
              glib:get-property="widget"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="406">Gets the #GtkWidget that the shortcut-tooltip is wrapping.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="42"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shortcuts/dzl-shortcut-tooltip.c"
               line="411">a #GtkWidget or %NULL if unset</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_accel"
              c:identifier="dzl_shortcut_tooltip_set_accel"
              glib:set-property="accel"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="491">Allows overriding the accel that is used.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="493">#DzlShortcutTooltip</doc>
            <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
          </instance-parameter>
          <parameter name="accel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="494">Sets the accelerator to use, or %NULL to unset
  and use the default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_command_id"
              c:identifier="dzl_shortcut_tooltip_set_command_id"
              glib:set-property="command-id"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="380">This sets the #DzlShortcutTooltip:command-id property which denotes which
shortcut registered with libdazzle to display when a tooltip request is
received.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="382">a #DzlShortcutTooltip</doc>
            <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
          </instance-parameter>
          <parameter name="command_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="383">the command-id of the shortcut registered</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="dzl_shortcut_tooltip_set_title"
              glib:set-property="title"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="337">Sets the #DzlShortcutTooltip:title property, which can be used to
override the default title for the tooltip as discovered from the
shortcut manager.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="339">a #DzlShortcutTooltip</doc>
            <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="340">a title for the tooltip, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_widget"
              c:identifier="dzl_shortcut_tooltip_set_widget"
              glib:set-property="widget"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="423">Sets the widget to connect to the #GtkWidget::query-tooltip signal.

If configured, the widget will be displayed with an appropriate tooltip
message matching the shortcut from #DzlShortcutTooltip:command-id.</doc>
        <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="425">a #DzlShortcutTooltip</doc>
            <type name="ShortcutTooltip" c:type="DzlShortcutTooltip*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/shortcuts/dzl-shortcut-tooltip.c"
                 line="426">a #GtkWidget or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accel"
                writable="1"
                transfer-ownership="none"
                setter="set_accel"
                getter="get_accel"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="command-id"
                writable="1"
                transfer-ownership="none"
                setter="set_command_id"
                getter="get_command_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="3.32"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcut-tooltip.c"
             line="290">The "title" property contains an alternate title for the tooltip
instead of discovering the title from the shortcut manager.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="widget"
                writable="1"
                transfer-ownership="none"
                setter="set_widget"
                getter="get_widget">
        <type name="Gtk.Widget"/>
      </property>
    </class>
    <record name="ShortcutTooltipClass"
            c:type="DzlShortcutTooltipClass"
            glib:is-gtype-struct-for="ShortcutTooltip">
      <source-position filename="src/shortcuts/dzl-shortcut-tooltip.h"
                       line="32"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ShortcutType" version="3.20" c:type="DzlShortcutType">
      <doc xml:space="preserve"
           filename="src/shortcuts/dzl-shortcuts-shortcut.h"
           line="39">DzlShortcutType specifies the kind of shortcut that is being described.
More values may be added to this enumeration over time.</doc>
      <source-position filename="src/shortcuts/dzl-shortcuts-shortcut.h"
                       line="74"/>
      <member name="accelerator"
              value="0"
              c:identifier="DZL_SHORTCUT_ACCELERATOR">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.h"
             line="41">The shortcut is a keyboard accelerator. The #DzlShortcutsShortcut:accelerator
  property will be used.</doc>
      </member>
      <member name="gesture_pinch"
              value="1"
              c:identifier="DZL_SHORTCUT_GESTURE_PINCH">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.h"
             line="44">The shortcut is a pinch gesture. GTK+ provides an icon and subtitle.</doc>
      </member>
      <member name="gesture_stretch"
              value="2"
              c:identifier="DZL_SHORTCUT_GESTURE_STRETCH">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.h"
             line="46">The shortcut is a stretch gesture. GTK+ provides an icon and subtitle.</doc>
      </member>
      <member name="gesture_rotate_clockwise"
              value="3"
              c:identifier="DZL_SHORTCUT_GESTURE_ROTATE_CLOCKWISE">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.h"
             line="48">The shortcut is a clockwise rotation gesture. GTK+ provides an icon and subtitle.</doc>
      </member>
      <member name="gesture_rotate_counterclockwise"
              value="4"
              c:identifier="DZL_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.h"
             line="50">The shortcut is a counterclockwise rotation gesture. GTK+ provides an icon and subtitle.</doc>
      </member>
      <member name="gesture_two_finger_swipe_left"
              value="5"
              c:identifier="DZL_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.h"
             line="52">The shortcut is a two-finger swipe gesture. GTK+ provides an icon and subtitle.</doc>
      </member>
      <member name="gesture_two_finger_swipe_right"
              value="6"
              c:identifier="DZL_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.h"
             line="54">The shortcut is a two-finger swipe gesture. GTK+ provides an icon and subtitle.</doc>
      </member>
      <member name="gesture" value="7" c:identifier="DZL_SHORTCUT_GESTURE">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.h"
             line="56">The shortcut is a gesture. The #DzlShortcutsShortcut:icon property will be
  used.</doc>
      </member>
    </enumeration>
    <class name="ShortcutsGroup"
           c:symbol-prefix="shortcuts_group"
           c:type="DzlShortcutsGroup"
           parent="Gtk.Box"
           glib:type-name="DzlShortcutsGroup"
           glib:get-type="dzl_shortcuts_group_get_type"
           glib:type-struct="ShortcutsGroupClass">
      <source-position filename="src/shortcuts/dzl-shortcuts-group.h"
                       line="37"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <property name="accel-size-group"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-group.c"
             line="322">The size group for the accelerator portion of shortcuts in this group.

This is used internally by GTK+, and must not be modified by applications.</doc>
        <type name="Gtk.SizeGroup"/>
      </property>
      <property name="height" transfer-ownership="none" default-value="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-group.c"
             line="350">A rough measure for the number of lines in this group.

This is used internally by GTK+, and is not useful for applications.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-group.c"
             line="298">The title for this group of shortcuts.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title-size-group"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-group.c"
             line="336">The size group for the textual portion of shortcuts in this group.

This is used internally by GTK+, and must not be modified by applications.</doc>
        <type name="Gtk.SizeGroup"/>
      </property>
      <property name="view"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-group.c"
             line="308">An optional view that the shortcuts in this group are relevant for.
The group will be hidden if the #DzlShortcutsWindow:view-name property
does not match the view of this group.

Set this to %NULL to make the group always visible.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ShortcutsGroupClass"
            c:type="DzlShortcutsGroupClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="ShortcutsGroup">
      <source-position filename="src/shortcuts/dzl-shortcuts-group.h"
                       line="37"/>
    </record>
    <class name="ShortcutsSection"
           c:symbol-prefix="shortcuts_section"
           c:type="DzlShortcutsSection"
           parent="Gtk.Box"
           glib:type-name="DzlShortcutsSection"
           glib:get-type="dzl_shortcuts_section_get_type"
           glib:type-struct="ShortcutsSectionClass">
      <source-position filename="src/shortcuts/dzl-shortcuts-section.h"
                       line="36"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <property name="max-height"
                writable="1"
                transfer-ownership="none"
                default-value="15">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-section.c"
             line="368">The maximum number of lines to allow per column. This property can
be used to influence how the groups in this section are distributed
across pages and columns. The default value of 15 should work in
for most cases.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="section-name"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-section.c"
             line="329">A unique name to identify this section among the sections
added to the DzlShortcutsWindow. Setting the #DzlShortcutsWindow:section-name
property to this string will make this section shown in the
DzlShortcutsWindow.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-section.c"
             line="356">The string to show in the section selector of the DzlShortcutsWindow
for this section. If there is only one section, you don't need to
set a title, since the section selector will not be shown in this case.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="view-name"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-section.c"
             line="342">A view name to filter the groups in this section by.
See #DzlShortcutsGroup:view.

Applications are expected to use the #DzlShortcutsWindow:view-name
property for this purpose.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="change-current-page" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ShortcutsSectionClass"
            c:type="DzlShortcutsSectionClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="ShortcutsSection">
      <source-position filename="src/shortcuts/dzl-shortcuts-section.h"
                       line="36"/>
    </record>
    <class name="ShortcutsShortcut"
           c:symbol-prefix="shortcuts_shortcut"
           c:type="DzlShortcutsShortcut"
           parent="Gtk.Box"
           glib:type-name="DzlShortcutsShortcut"
           glib:get-type="dzl_shortcuts_shortcut_get_type"
           glib:type-struct="ShortcutsShortcutClass">
      <source-position filename="src/shortcuts/dzl-shortcuts-shortcut.h"
                       line="37"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <property name="accel-size-group"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="616">The size group for the accelerator portion of this shortcut.

This is used internally by GTK+, and must not be modified by applications.</doc>
        <type name="Gtk.SizeGroup"/>
      </property>
      <property name="accelerator"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="517">The accelerator(s) represented by this object. This property is used
if #DzlShortcutsShortcut:shortcut-type is set to #GTK_SHORTCUT_ACCELERATOR.

The syntax of this property is (an extension of) the syntax understood by
gtk_accelerator_parse(). Multiple accelerators can be specified by separating
them with a space, but keep in mind that the available width is limited.
It is also possible to specify ranges of shortcuts, using ... between the keys.
Sequences of keys can be specified using a + or &amp; between the keys.

Examples:
- A single shortcut: &amp;lt;ctl&amp;gt;&amp;lt;alt&amp;gt;delete
- Two alternative shortcuts: &amp;lt;shift&amp;gt;a Home
- A range of shortcuts: &amp;lt;alt&amp;gt;1...&amp;lt;alt&amp;gt;9
- Several keys pressed together: Control_L&amp;Control_R
- A sequence of shortcuts or keys: &amp;lt;ctl&amp;gt;c+&amp;lt;ctl&amp;gt;x

Use + instead of &amp; when the keys may (or have to be) pressed sequentially (e.g
use t+t for 'press the t key twice').

Note that &lt;, &gt; and &amp; need to be escaped as &amp;lt;, &amp;gt; and &amp;amp; when used
in .ui files.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="action-name"
                version="3.22"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="672">A detailed action name. If this is set for a shortcut
of type %GTK_SHORTCUT_ACCELERATOR, then GTK+ will use
the accelerators that are associated with the action
via gtk_application_set_accels_for_action(), and setting
#DzlShortcutsShortcut::accelerator is not necessary.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="direction"
                writable="1"
                transfer-ownership="none"
                default-value="GTK_TEXT_DIR_NONE">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="644">The text direction for which this shortcut is active. If the shortcut
is used regardless of the text direction, set this property to
#GTK_TEXT_DIR_NONE.</doc>
        <type name="Gtk.TextDirection"/>
      </property>
      <property name="icon" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="549">An icon to represent the shortcut or gesture. This property is used if
#DzlShortcutsShortcut:shortcut-type is set to #GTK_SHORTCUT_GESTURE.
For the other predefined gesture types, GTK+ provides an icon on its own.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="563">%TRUE if an icon has been set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="shortcut-type"
                writable="1"
                transfer-ownership="none"
                default-value="GTK_SHORTCUT_ACCELERATOR">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="659">The type of shortcut that is represented.</doc>
        <type name="Gtk.ShortcutType"/>
      </property>
      <property name="subtitle" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="588">The subtitle for the shortcut or gesture.

This is typically used for gestures and should be a short, one-line
text that describes the gesture itself. For the predefined gesture
types, GTK+ provides a subtitle on its own.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="604">%TRUE if a subtitle has been set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="575">The textual description for the shortcut or gesture represented by
this object. This should be a short string that can fit in a single line.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title-size-group"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-shortcut.c"
             line="630">The size group for the textual portion of this shortcut.

This is used internally by GTK+, and must not be modified by applications.</doc>
        <type name="Gtk.SizeGroup"/>
      </property>
    </class>
    <record name="ShortcutsShortcutClass"
            c:type="DzlShortcutsShortcutClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="ShortcutsShortcut">
      <source-position filename="src/shortcuts/dzl-shortcuts-shortcut.h"
                       line="37"/>
    </record>
    <class name="ShortcutsWindow"
           c:symbol-prefix="shortcuts_window"
           c:type="DzlShortcutsWindow"
           parent="Gtk.Window"
           glib:type-name="DzlShortcutsWindow"
           glib:get-type="dzl_shortcuts_window_get_type"
           glib:type-struct="ShortcutsWindowClass">
      <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                       line="51"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="close">
        <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutsWindow" c:type="DzlShortcutsWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search">
        <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutsWindow" c:type="DzlShortcutsWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <property name="section-name"
                writable="1"
                transfer-ownership="none"
                default-value="internal-search">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-window.c"
             line="775">The name of the section to show.

This should be the section-name of one of the #DzlShortcutsSection
objects that are in this shortcuts window.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="view-name"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-window.c"
             line="788">The view name by which to filter the contents.

This should correspond to the #DzlShortcutsGroup:view property of some of
the #DzlShortcutsGroup objects that are inside this shortcuts window.

Set this to %NULL to show all groups.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="window">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <glib:signal name="close" when="last" action="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-window.c"
             line="805">The ::close signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user uses a keybinding to close
the window.

The default binding for this signal is the Escape key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="search" when="last" action="1">
        <doc xml:space="preserve"
             filename="src/shortcuts/dzl-shortcuts-window.c"
             line="823">The ::search signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user uses a keybinding to start a search.

The default binding for this signal is Control-F.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ShortcutsWindowClass"
            c:type="DzlShortcutsWindowClass"
            glib:is-gtype-struct-for="ShortcutsWindow">
      <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                       line="51"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="close">
        <callback name="close">
          <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ShortcutsWindow" c:type="DzlShortcutsWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search">
        <callback name="search">
          <source-position filename="src/shortcuts/dzl-shortcuts-window.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ShortcutsWindow" c:type="DzlShortcutsWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SignalGroup"
           c:symbol-prefix="signal_group"
           c:type="DzlSignalGroup"
           parent="GObject.Object"
           glib:type-name="DzlSignalGroup"
           glib:get-type="dzl_signal_group_get_type"
           glib:type-struct="SignalGroupClass">
      <doc xml:space="preserve"
           filename="src/bindings/dzl-signal-group.c"
           line="29">#DzlSignalGroup manages to simplify the process of connecting
many signals to a #GObject as a group. As such there is no API
to disconnect a signal from the group.

In particular, this allows you to:

 - Change the target instance, which automatically causes disconnection
   of the signals from the old instance and connecting to the new instance.
 - Block and unblock signals as a group
 - Ensuring that blocked state transfers across target instances.

One place you might want to use such a structure is with #GtkTextView and
#GtkTextBuffer. Often times, you'll need to connect to many signals on
#GtkTextBuffer from a #GtkTextView subclass. This allows you to create a
signal group during instance construction, simply bind the
#GtkTextView:buffer property to #DzlSignalGroup:target and connect
all the signals you need. When the #GtkTextView:buffer property changes
all of the signals will be transitioned correctly.</doc>
      <source-position filename="src/bindings/dzl-signal-group.h" line="32"/>
      <constructor name="new" c:identifier="dzl_signal_group_new">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="634">Creates a new #DzlSignalGroup for target instances of @target_type.</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="35"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bindings/dzl-signal-group.c"
               line="640">a new #DzlSignalGroup</doc>
          <type name="SignalGroup" c:type="DzlSignalGroup*"/>
        </return-value>
        <parameters>
          <parameter name="target_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="636">the #GType of the target instance.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="block" c:identifier="dzl_signal_group_block">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="301">Blocks all signal handlers managed by @self so they will not
be called during any signal emissions. Must be unblocked exactly
the same number of times it has been blocked to become active again.

This blocked state will be kept across changes of the target instance.

See: g_signal_handler_block().</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="303">the #DzlSignalGroup</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="connect"
              c:identifier="dzl_signal_group_connect"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="762">Connects @callback to the signal @detailed_signal
on the target instance of @self.

See: g_signal_connect().</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="764">a #DzlSignalGroup</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
          <parameter name="detailed_signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="765">a string of the form "signal-name::detail"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="c_handler"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="766">the #GCallback to connect</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="767">the data to pass to @callback calls</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_after"
              c:identifier="dzl_signal_group_connect_after"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="784">Connects @callback to the signal @detailed_signal
on the target instance of @self.

The @callback will be called after the default handler of the signal.

See: g_signal_connect_after().</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="786">a #DzlSignalGroup</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
          <parameter name="detailed_signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="787">a string of the form "signal-name::detail"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="c_handler"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="788">the #GCallback to connect</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="789">the data to pass to @callback calls</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_data" c:identifier="dzl_signal_group_connect_data">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="736">Connects @callback to the signal @detailed_signal
on the target instance of @self.

See: g_signal_connect_data().</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="738">a #DzlSignalGroup</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
          <parameter name="detailed_signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="739">a string of the form "signal-name::detail"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="c_handler"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="740">the #GCallback to connect</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="741">the data to pass to @callback calls</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="notified">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="742">function to be called when disposing of @self</doc>
            <type name="GObject.ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="743">the flags used to create the signal connection</doc>
            <type name="GObject.ConnectFlags" c:type="GConnectFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_object"
              c:identifier="dzl_signal_group_connect_object"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="707">Connects @callback to the signal @detailed_signal
on the target object of @self.

Ensures that the @object stays alive during the call to @callback
by temporarily adding a reference count. When the @object is destroyed
the signal handler will automatically be removed.

See: g_signal_connect_object().</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="709">a #DzlSignalGroup</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
          <parameter name="detailed_signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="710">a string of the form "signal-name::detail"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="c_handler"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="711">the #GCallback to connect</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="712">the #GObject to pass as data to @callback calls</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="GObject.ConnectFlags" c:type="GConnectFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_swapped"
              c:identifier="dzl_signal_group_connect_swapped">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="808">Connects @callback to the signal @detailed_signal
on the target instance of @self.

The instance on which the signal is emitted and @data
will be swapped when calling @callback.

See: g_signal_connect_swapped().</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="810">a #DzlSignalGroup</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
          <parameter name="detailed_signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="811">a string of the form "signal-name::detail"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="c_handler"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="812">the #GCallback to connect</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="813">the data to pass to @callback calls</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_target"
              c:identifier="dzl_signal_group_get_target"
              glib:get-property="target">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="380">Gets the target instance used when connecting signals.</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bindings/dzl-signal-group.c"
               line="386">The target instance.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="382">the #DzlSignalGroup</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_target"
              c:identifier="dzl_signal_group_set_target"
              glib:set-property="target">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="414">Sets the target instance used when connecting signals. Any signal
that has been registered with dzl_signal_group_connect_object() or
similar functions will be connected to this object.

If the target instance was previously set, signals will be
disconnected from that object prior to connecting to @target.</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="416">the #DzlSignalGroup.</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
          <parameter name="target"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="417">The target instance used
    when connecting signals.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unblock" c:identifier="dzl_signal_group_unblock">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="341">Unblocks all signal handlers managed by @self so they will be
called again during any signal emissions unless it is blocked
again. Must be unblocked exactly the same number of times it
has been blocked to become active again.

See: g_signal_handler_unblock().</doc>
        <source-position filename="src/bindings/dzl-signal-group.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="343">the #DzlSignalGroup</doc>
            <type name="SignalGroup" c:type="DzlSignalGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="target"
                writable="1"
                transfer-ownership="none"
                setter="set_target"
                getter="get_target">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="561">The target instance used when connecting signals.</doc>
        <type name="GObject.Object"/>
      </property>
      <property name="target-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="573">The GType of the target property.</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <glib:signal name="bind" when="last">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="587">This signal is emitted when the target instance of @self
is set to a new #GObject.

This signal will only be emitted if the target of @self is non-%NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bindings/dzl-signal-group.c"
                 line="590">a #GObject</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="unbind" when="last">
        <doc xml:space="preserve"
             filename="src/bindings/dzl-signal-group.c"
             line="607">This signal is emitted when the target instance of @self
is set to a new #GObject.

This signal will only be emitted if the previous target
of @self is non-%NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SignalGroupClass"
            c:type="DzlSignalGroupClass"
            glib:is-gtype-struct-for="SignalGroup">
      <source-position filename="src/bindings/dzl-signal-group.h" line="32"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SimpleLabel"
           c:symbol-prefix="simple_label"
           c:type="DzlSimpleLabel"
           parent="Gtk.Widget"
           glib:type-name="DzlSimpleLabel"
           glib:get-type="dzl_simple_label_get_type"
           glib:type-struct="SimpleLabelClass">
      <source-position filename="src/widgets/dzl-simple-label.h" line="38"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_simple_label_new">
        <source-position filename="src/widgets/dzl-simple-label.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_label"
              c:identifier="dzl_simple_label_get_label"
              glib:get-property="label">
        <source-position filename="src/widgets/dzl-simple-label.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleLabel" c:type="DzlSimpleLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width_chars"
              c:identifier="dzl_simple_label_get_width_chars"
              glib:get-property="width-chars">
        <source-position filename="src/widgets/dzl-simple-label.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleLabel" c:type="DzlSimpleLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xalign"
              c:identifier="dzl_simple_label_get_xalign"
              glib:get-property="xalign">
        <source-position filename="src/widgets/dzl-simple-label.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleLabel" c:type="DzlSimpleLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="dzl_simple_label_set_label"
              glib:set-property="label">
        <source-position filename="src/widgets/dzl-simple-label.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleLabel" c:type="DzlSimpleLabel*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width_chars"
              c:identifier="dzl_simple_label_set_width_chars"
              glib:set-property="width-chars">
        <source-position filename="src/widgets/dzl-simple-label.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleLabel" c:type="DzlSimpleLabel*"/>
          </instance-parameter>
          <parameter name="width_chars" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_xalign"
              c:identifier="dzl_simple_label_set_xalign"
              glib:set-property="xalign">
        <source-position filename="src/widgets/dzl-simple-label.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleLabel" c:type="DzlSimpleLabel*"/>
          </instance-parameter>
          <parameter name="xalign" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width-chars"
                writable="1"
                transfer-ownership="none"
                setter="set_width_chars"
                getter="get_width_chars"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="xalign"
                writable="1"
                transfer-ownership="none"
                setter="set_xalign"
                getter="get_xalign"
                default-value="0.500000">
        <type name="gfloat" c:type="gfloat"/>
      </property>
    </class>
    <record name="SimpleLabelClass"
            c:type="DzlSimpleLabelClass"
            glib:is-gtype-struct-for="SimpleLabel">
      <source-position filename="src/widgets/dzl-simple-label.h" line="38"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="SimplePopover"
           c:symbol-prefix="simple_popover"
           c:type="DzlSimplePopover"
           parent="Gtk.Popover"
           glib:type-name="DzlSimplePopover"
           glib:get-type="dzl_simple_popover_get_type"
           glib:type-struct="SimplePopoverClass">
      <source-position filename="src/widgets/dzl-simple-popover.h" line="72"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_simple_popover_new">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="activate">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="changed">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="insert_text">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="chars" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_button_text"
              c:identifier="dzl_simple_popover_get_button_text"
              glib:get-property="button-text">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="dzl_simple_popover_get_message"
              glib:get-property="message">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="dzl_simple_popover_get_ready"
              glib:get-property="ready">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="dzl_simple_popover_get_text"
              glib:get-property="text">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_simple_popover_get_title"
              glib:get-property="title">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_button_text"
              c:identifier="dzl_simple_popover_set_button_text"
              glib:set-property="button-text">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
          <parameter name="button_text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message"
              c:identifier="dzl_simple_popover_set_message"
              glib:set-property="message">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ready"
              c:identifier="dzl_simple_popover_set_ready"
              glib:set-property="ready">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
          <parameter name="ready" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="dzl_simple_popover_set_text"
              glib:set-property="text">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="dzl_simple_popover_set_title"
              glib:set-property="title">
        <source-position filename="src/widgets/dzl-simple-popover.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimplePopover" c:type="DzlSimplePopover*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="button-text"
                writable="1"
                transfer-ownership="none"
                setter="set_button_text"
                getter="get_button_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="message"
                writable="1"
                transfer-ownership="none"
                setter="set_message"
                getter="get_message"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ready"
                writable="1"
                transfer-ownership="none"
                setter="set_ready"
                getter="get_ready"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="text"
                writable="1"
                transfer-ownership="none"
                setter="set_text"
                getter="get_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Popover" c:type="GtkPopover"/>
      </field>
      <glib:signal name="activate" when="last">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-simple-popover.h"
             line="37">This signal is emitted when the popover's forward button is activated.
Connect to this signal to perform your forward progress.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-simple-popover.h"
                 line="40">The text at the time of activation.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-simple-popover.h"
             line="65">This signal is emitted when the entry text changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="insert-text" when="last">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-simple-popover.h"
             line="48">Use this signal to determine if text should be allowed to be inserted
into the text buffer. Return GDK_EVENT_STOP to prevent the text from
being inserted.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-simple-popover.h"
                 line="51">the position in UTF-8 characters.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="chars" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-simple-popover.h"
                 line="52">the NULL terminated UTF-8 text to insert.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/widgets/dzl-simple-popover.h"
                 line="53">the number of UTF-8 characters in chars.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SimplePopoverClass"
            c:type="DzlSimplePopoverClass"
            glib:is-gtype-struct-for="SimplePopover">
      <source-position filename="src/widgets/dzl-simple-popover.h" line="72"/>
      <field name="parent">
        <type name="Gtk.PopoverClass" c:type="GtkPopoverClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <source-position filename="src/widgets/dzl-simple-popover.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SimplePopover" c:type="DzlSimplePopover*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_text">
        <callback name="insert_text">
          <source-position filename="src/widgets/dzl-simple-popover.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SimplePopover" c:type="DzlSimplePopover*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="chars" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="n_chars" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="src/widgets/dzl-simple-popover.h"
                           line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SimplePopover" c:type="DzlSimplePopover*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Slider"
           c:symbol-prefix="slider"
           c:type="DzlSlider"
           parent="Gtk.Container"
           glib:type-name="DzlSlider"
           glib:get-type="dzl_slider_get_type"
           glib:type-struct="SliderClass">
      <source-position filename="src/widgets/dzl-slider.h" line="46"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_slider_new">
        <source-position filename="src/widgets/dzl-slider.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_slider" c:identifier="dzl_slider_add_slider">
        <source-position filename="src/widgets/dzl-slider.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Slider" c:type="DzlSlider*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="SliderPosition" c:type="DzlSliderPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="dzl_slider_get_position"
              glib:get-property="position">
        <source-position filename="src/widgets/dzl-slider.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="SliderPosition" c:type="DzlSliderPosition"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Slider" c:type="DzlSlider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_position"
              c:identifier="dzl_slider_set_position"
              glib:set-property="position">
        <source-position filename="src/widgets/dzl-slider.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Slider" c:type="DzlSlider*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="SliderPosition" c:type="DzlSliderPosition"/>
          </parameter>
        </parameters>
      </method>
      <property name="position"
                writable="1"
                transfer-ownership="none"
                setter="set_position"
                getter="get_position"
                default-value="DZL_SLIDER_NONE">
        <type name="SliderPosition"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="SliderClass"
            c:type="DzlSliderClass"
            glib:is-gtype-struct-for="Slider">
      <source-position filename="src/widgets/dzl-slider.h" line="46"/>
      <field name="parent_instance">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <enumeration name="SliderPosition"
                 glib:type-name="DzlSliderPosition"
                 glib:get-type="dzl_slider_position_get_type"
                 c:type="DzlSliderPosition">
      <member name="none"
              value="0"
              c:identifier="DZL_SLIDER_NONE"
              glib:nick="none"
              glib:name="DZL_SLIDER_NONE">
      </member>
      <member name="top"
              value="1"
              c:identifier="DZL_SLIDER_TOP"
              glib:nick="top"
              glib:name="DZL_SLIDER_TOP">
      </member>
      <member name="right"
              value="2"
              c:identifier="DZL_SLIDER_RIGHT"
              glib:nick="right"
              glib:name="DZL_SLIDER_RIGHT">
      </member>
      <member name="bottom"
              value="3"
              c:identifier="DZL_SLIDER_BOTTOM"
              glib:nick="bottom"
              glib:name="DZL_SLIDER_BOTTOM">
      </member>
      <member name="left"
              value="4"
              c:identifier="DZL_SLIDER_LEFT"
              glib:nick="left"
              glib:name="DZL_SLIDER_LEFT">
      </member>
    </enumeration>
    <class name="StackList"
           c:symbol-prefix="stack_list"
           c:type="DzlStackList"
           parent="Gtk.Bin"
           glib:type-name="DzlStackList"
           glib:get-type="dzl_stack_list_get_type"
           glib:type-struct="StackListClass">
      <source-position filename="src/widgets/dzl-stack-list.h" line="50"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_stack_list_new">
        <source-position filename="src/widgets/dzl-stack-list.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="header_activated">
        <source-position filename="src/widgets/dzl-stack-list.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StackList" c:type="DzlStackList*"/>
          </instance-parameter>
          <parameter name="row" transfer-ownership="none">
            <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="row_activated">
        <source-position filename="src/widgets/dzl-stack-list.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StackList" c:type="DzlStackList*"/>
          </instance-parameter>
          <parameter name="row" transfer-ownership="none">
            <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear" c:identifier="dzl_stack_list_clear">
        <source-position filename="src/widgets/dzl-stack-list.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StackList" c:type="DzlStackList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_depth" c:identifier="dzl_stack_list_get_depth">
        <source-position filename="src/widgets/dzl-stack-list.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StackList" c:type="DzlStackList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="dzl_stack_list_get_model"
              glib:get-property="model">
        <source-position filename="src/widgets/dzl-stack-list.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-stack-list.c"
               line="636">An #DzlStackList.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StackList" c:type="DzlStackList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pop" c:identifier="dzl_stack_list_pop">
        <source-position filename="src/widgets/dzl-stack-list.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StackList" c:type="DzlStackList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="dzl_stack_list_push">
        <source-position filename="src/widgets/dzl-stack-list.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StackList" c:type="DzlStackList*"/>
          </instance-parameter>
          <parameter name="header" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
          <parameter name="create_widget_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <type name="StackListCreateWidgetFunc"
                  c:type="DzlStackListCreateWidgetFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="model" transfer-ownership="none" getter="get_model">
        <type name="Gio.ListModel"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <glib:signal name="header-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.ListBoxRow"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="row-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.ListBoxRow"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="StackListClass"
            c:type="DzlStackListClass"
            glib:is-gtype-struct-for="StackList">
      <source-position filename="src/widgets/dzl-stack-list.h" line="50"/>
      <field name="parent_instance">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="row_activated">
        <callback name="row_activated">
          <source-position filename="src/widgets/dzl-stack-list.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="StackList" c:type="DzlStackList*"/>
            </parameter>
            <parameter name="row" transfer-ownership="none">
              <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_activated">
        <callback name="header_activated">
          <source-position filename="src/widgets/dzl-stack-list.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="StackList" c:type="DzlStackList*"/>
            </parameter>
            <parameter name="row" transfer-ownership="none">
              <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <callback name="StackListCreateWidgetFunc"
              c:type="DzlStackListCreateWidgetFunc">
      <doc xml:space="preserve"
           filename="src/widgets/dzl-stack-list.h"
           line="52">Called for stack lists that are bound to a #GListModel with
dzl_stack_list_push() for each item that gets added to the model.</doc>
      <source-position filename="src/widgets/dzl-stack-list.h" line="62"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/widgets/dzl-stack-list.h"
             line="60">a #GtkWidget that represents @item</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="item" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-stack-list.h"
               line="54">the item from the model for which to create a widget for</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/widgets/dzl-stack-list.h"
               line="55">user data from dzl_stack_list_push()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="StateMachine"
           c:symbol-prefix="state_machine"
           c:type="DzlStateMachine"
           parent="GObject.Object"
           glib:type-name="DzlStateMachine"
           glib:get-type="dzl_state_machine_get_type"
           glib:type-struct="StateMachineClass">
      <source-position filename="src/statemachine/dzl-state-machine.h"
                       line="36"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_state_machine_new">
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="39"/>
        <return-value transfer-ownership="full">
          <type name="StateMachine" c:type="DzlStateMachine*"/>
        </return-value>
      </constructor>
      <function name="buildable_iface_init"
                c:identifier="dzl_state_machine_buildable_iface_init"
                introspectable="0">
        <source-position filename="src/statemachine/dzl-state-machine-buildable.h"
                         line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iface" transfer-ownership="none">
            <type name="Gtk.BuildableIface" c:type="GtkBuildableIface*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_binding" c:identifier="dzl_state_machine_add_binding">
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="source_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="source_property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_property"
              c:identifier="dzl_state_machine_add_property"
              introspectable="0">
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_property_valist"
              c:identifier="dzl_state_machine_add_property_valist"
              introspectable="0">
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_propertyv"
              c:identifier="dzl_state_machine_add_propertyv">
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_style" c:identifier="dzl_state_machine_add_style">
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_object"
              c:identifier="dzl_state_machine_connect_object"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/statemachine/dzl-state-machine.c"
             line="705">Connects to the @detailed_signal of @source only when the current
state of the state machine is @state.</doc>
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="707">A #DzlStateMachine.</doc>
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="708">The state the signal connection should exist within</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="709">the source object to connect to</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="detailed_signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="710">The detailed signal of @source to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="711">The callback to execute upon signal emission.</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="712">The user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="713">signal connection flags.</doc>
            <type name="GObject.ConnectFlags" c:type="GConnectFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_action"
              c:identifier="dzl_state_machine_create_action">
        <doc xml:space="preserve"
             filename="src/statemachine/dzl-state-machine.c"
             line="518">Creates a new #GAction with the name of @name.

Setting the state of this action will toggle the state of the state machine.
You should use g_variant_new_string() or similar to create the state.</doc>
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/statemachine/dzl-state-machine.c"
               line="528">A newly created #GAction.</doc>
          <type name="Gio.Action" c:type="GAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="520">An #DzlStateMachine</doc>
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="521">the name of the action.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="dzl_state_machine_get_state"
              glib:get-property="state">
        <doc xml:space="preserve"
             filename="src/statemachine/dzl-state-machine.c"
             line="459">Gets the #DzlStateMachine:state property. This is the name of the
current state of the machine.</doc>
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/statemachine/dzl-state-machine.c"
               line="466">The current state of the machine.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="461">the #DzlStateMachine.</doc>
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_state"
              c:identifier="dzl_state_machine_is_state"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/statemachine/dzl-state-machine.c"
             line="751">Checks to see if the current state of the #DzlStateMachine matches @state.</doc>
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/statemachine/dzl-state-machine.c"
               line="758">%TRUE if @self is currently set to @state.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="753">a #DzlStateMachine</doc>
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="state"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="754">the name of the state to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="dzl_state_machine_set_state"
              glib:set-property="state">
        <doc xml:space="preserve"
             filename="src/statemachine/dzl-state-machine.c"
             line="478">Sets the #DzlStateMachine:state property.

Registered state transformations will be applied during the state
transformation.

If the transition results in a cyclic operation, the state will stop at
the last state before the cycle was detected.</doc>
        <source-position filename="src/statemachine/dzl-state-machine.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/statemachine/dzl-state-machine.c"
                 line="480">the #DzlStateMachine @self: the #</doc>
            <type name="StateMachine" c:type="DzlStateMachine*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="state"
                writable="1"
                transfer-ownership="none"
                setter="set_state"
                getter="get_state"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="StateMachineClass"
            c:type="DzlStateMachineClass"
            glib:is-gtype-struct-for="StateMachine">
      <source-position filename="src/statemachine/dzl-state-machine.h"
                       line="36"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Suggestion"
           c:symbol-prefix="suggestion"
           c:type="DzlSuggestion"
           parent="GObject.Object"
           glib:type-name="DzlSuggestion"
           glib:get-type="dzl_suggestion_get_type"
           glib:type-struct="SuggestionClass">
      <source-position filename="src/suggestions/dzl-suggestion.h" line="48"/>
      <constructor name="new" c:identifier="dzl_suggestion_new">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <type name="Suggestion" c:type="DzlSuggestion*"/>
        </return-value>
      </constructor>
      <virtual-method name="get_icon" invoker="get_icon" version="3.30">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="460">Gets the icon for the suggestion, if any.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="42"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="466">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="462">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_icon_surface"
                      invoker="get_icon_surface"
                      version="3.30">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="478">This function allows subclasses to dynamicly generate content for the
suggestion such as may be required when integrating with favicons or
similar.

@widget is provided so that the implementation may determine scale or
any other style-specific settings from the style context.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="43"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="490">a #cairo_surface_t or %NULL</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="480">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="481">a widget that may contain the surface</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_secondary_icon"
                      invoker="get_secondary_icon"
                      version="3.36">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="506">Gets the secondary icon for the suggestion, if any.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="45"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="512">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="508">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_secondary_icon_surface"
                      invoker="get_secondary_icon_surface"
                      version="3.36">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="524">This function allows subclasses to dynamicly generate content for the
suggestion such as may be required when integrating with favicons or
similar.

@widget is provided so that the implementation may determine scale or
any other style-specific settings from the style context.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="46"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="536">a #cairo_surface_t or %NULL</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="526">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="527">a widget that may contain the surface</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="replace_typed_text" invoker="replace_typed_text">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="432">This function is meant to be used to replace the text in the entry with text
that represents the suggestion most accurately. This happens when the user
presses tab while typing a suggestion. For example, if typing "gno" in the
entry, you might have a suggest_suffix of "me.org" so that the user sees
"gnome.org". But the replace_typed_text might include more data such as
"https://gnome.org" as it more closely represents the suggestion.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="40"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="444">The replacement text to insert into
  the entry when "tab" is pressed to complete the insertion.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="434">An #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="typed_text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="435">the text that was typed into the entry</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="suggest_suffix" invoker="suggest_suffix">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="399">This function requests potential text to append to @typed_text to make it
more clear to the user what they will be activating by selecting this
suggestion. For example, if they start typing "gno", a potential suggested
suffix might be "me.org" to create "gnome.org".</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="38"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="409">Suffix to append to @typed_text
  or %NULL to leave it unchanged.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="401">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="typed_text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="402">The user entered text</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_icon"
              c:identifier="dzl_suggestion_get_icon"
              glib:get-property="icon"
              version="3.30">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="460">Gets the icon for the suggestion, if any.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="79"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="466">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="462">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="dzl_suggestion_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_surface"
              c:identifier="dzl_suggestion_get_icon_surface"
              version="3.30">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="478">This function allows subclasses to dynamicly generate content for the
suggestion such as may be required when integrating with favicons or
similar.

@widget is provided so that the implementation may determine scale or
any other style-specific settings from the style context.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="81"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="490">a #cairo_surface_t or %NULL</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="480">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="481">a widget that may contain the surface</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="dzl_suggestion_get_id"
              glib:get-property="id">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secondary_icon"
              c:identifier="dzl_suggestion_get_secondary_icon"
              glib:get-property="secondary-icon"
              version="3.36">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="506">Gets the secondary icon for the suggestion, if any.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="90"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="512">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="508">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secondary_icon_name"
              c:identifier="dzl_suggestion_get_secondary_icon_name"
              glib:get-property="secondary-icon-name">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secondary_icon_surface"
              c:identifier="dzl_suggestion_get_secondary_icon_surface"
              version="3.36">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="524">This function allows subclasses to dynamicly generate content for the
suggestion such as may be required when integrating with favicons or
similar.

@widget is provided so that the implementation may determine scale or
any other style-specific settings from the style context.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="92"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="536">a #cairo_surface_t or %NULL</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="526">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="527">a widget that may contain the surface</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="dzl_suggestion_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_suggestion_get_title"
              glib:get-property="title">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="replace_typed_text"
              c:identifier="dzl_suggestion_replace_typed_text">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="432">This function is meant to be used to replace the text in the entry with text
that represents the suggestion most accurately. This happens when the user
presses tab while typing a suggestion. For example, if typing "gno" in the
entry, you might have a suggest_suffix of "me.org" so that the user sees
"gnome.org". But the replace_typed_text might include more data such as
"https://gnome.org" as it more closely represents the suggestion.</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="76"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="444">The replacement text to insert into
  the entry when "tab" is pressed to complete the insertion.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="434">An #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="typed_text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="435">the text that was typed into the entry</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="dzl_suggestion_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="dzl_suggestion_set_id"
              glib:set-property="id">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secondary_icon_name"
              c:identifier="dzl_suggestion_set_secondary_icon_name"
              glib:set-property="secondary-icon-name">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="dzl_suggestion_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="dzl_suggestion_set_title"
              glib:set-property="title">
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="suggest_suffix"
              c:identifier="dzl_suggestion_suggest_suffix">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion.c"
             line="399">This function requests potential text to append to @typed_text to make it
more clear to the user what they will be activating by selecting this
suggestion. For example, if they start typing "gno", a potential suggested
suffix might be "me.org" to create "gnome.org".</doc>
        <source-position filename="src/suggestions/dzl-suggestion.h"
                         line="73"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion.c"
               line="409">Suffix to append to @typed_text
  or %NULL to leave it unchanged.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="401">a #DzlSuggestion</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </instance-parameter>
          <parameter name="typed_text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="402">The user entered text</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon" transfer-ownership="none" getter="get_icon">
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="secondary-icon"
                transfer-ownership="none"
                getter="get_secondary_icon">
        <type name="Gio.Icon"/>
      </property>
      <property name="secondary-icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_secondary_icon_name"
                getter="get_secondary_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="replace-typed-text" when="last">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="suggest-suffix" when="last">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="SuggestionButton"
           c:symbol-prefix="suggestion_button"
           c:type="DzlSuggestionButton"
           parent="Gtk.Stack"
           glib:type-name="DzlSuggestionButton"
           glib:get-type="dzl_suggestion_button_get_type"
           glib:type-struct="SuggestionButtonClass">
      <source-position filename="src/suggestions/dzl-suggestion-button.h"
                       line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_suggestion_button_new">
        <source-position filename="src/suggestions/dzl-suggestion-button.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_button"
              c:identifier="dzl_suggestion_button_get_button"
              glib:get-property="button"
              version="3.34">
        <source-position filename="src/suggestions/dzl-suggestion-button.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-button.c"
               line="298">a #GtkWidget</doc>
          <type name="Gtk.Button" c:type="GtkButton*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-button.c"
                 line="296">a #DzlSuggestionButton</doc>
            <type name="SuggestionButton" c:type="DzlSuggestionButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_entry"
              c:identifier="dzl_suggestion_button_get_entry"
              glib:get-property="entry"
              version="3.34">
        <source-position filename="src/suggestions/dzl-suggestion-button.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-button.c"
               line="280">a #DzlSuggestionEntry</doc>
          <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-button.c"
                 line="278">a #DzlSuggestionButton</doc>
            <type name="SuggestionButton" c:type="DzlSuggestionButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="button" transfer-ownership="none" getter="get_button">
        <type name="Gtk.Button"/>
      </property>
      <property name="entry" transfer-ownership="none" getter="get_entry">
        <type name="SuggestionEntry"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Stack" c:type="GtkStack"/>
      </field>
    </class>
    <record name="SuggestionButtonClass"
            c:type="DzlSuggestionButtonClass"
            glib:is-gtype-struct-for="SuggestionButton">
      <source-position filename="src/suggestions/dzl-suggestion-button.h"
                       line="41"/>
      <field name="parent_class">
        <type name="Gtk.StackClass" c:type="GtkStackClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SuggestionClass"
            c:type="DzlSuggestionClass"
            glib:is-gtype-struct-for="Suggestion">
      <source-position filename="src/suggestions/dzl-suggestion.h" line="48"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="suggest_suffix">
        <callback name="suggest_suffix">
          <source-position filename="src/suggestions/dzl-suggestion.h"
                           line="38"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="409">Suffix to append to @typed_text
  or %NULL to leave it unchanged.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="401">a #DzlSuggestion</doc>
              <type name="Suggestion" c:type="DzlSuggestion*"/>
            </parameter>
            <parameter name="typed_text" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="402">The user entered text</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="replace_typed_text">
        <callback name="replace_typed_text">
          <source-position filename="src/suggestions/dzl-suggestion.h"
                           line="40"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="444">The replacement text to insert into
  the entry when "tab" is pressed to complete the insertion.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="434">An #DzlSuggestion</doc>
              <type name="Suggestion" c:type="DzlSuggestion*"/>
            </parameter>
            <parameter name="typed_text" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="435">the text that was typed into the entry</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon">
        <callback name="get_icon">
          <source-position filename="src/suggestions/dzl-suggestion.h"
                           line="42"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="466">a #GIcon or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="462">a #DzlSuggestion</doc>
              <type name="Suggestion" c:type="DzlSuggestion*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon_surface">
        <callback name="get_icon_surface">
          <source-position filename="src/suggestions/dzl-suggestion.h"
                           line="43"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="490">a #cairo_surface_t or %NULL</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="480">a #DzlSuggestion</doc>
              <type name="Suggestion" c:type="DzlSuggestion*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="481">a widget that may contain the surface</doc>
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_secondary_icon">
        <callback name="get_secondary_icon">
          <source-position filename="src/suggestions/dzl-suggestion.h"
                           line="45"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="512">a #GIcon or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="508">a #DzlSuggestion</doc>
              <type name="Suggestion" c:type="DzlSuggestion*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_secondary_icon_surface">
        <callback name="get_secondary_icon_surface">
          <source-position filename="src/suggestions/dzl-suggestion.h"
                           line="46"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion.c"
                 line="536">a #cairo_surface_t or %NULL</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="526">a #DzlSuggestion</doc>
              <type name="Suggestion" c:type="DzlSuggestion*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/suggestions/dzl-suggestion.c"
                   line="527">a widget that may contain the surface</doc>
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SuggestionEntry"
           c:symbol-prefix="suggestion_entry"
           c:type="DzlSuggestionEntry"
           parent="Gtk.Entry"
           glib:type-name="DzlSuggestionEntry"
           glib:get-type="dzl_suggestion_entry_get_type"
           glib:type-struct="SuggestionEntryClass">
      <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                       line="69"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new" c:identifier="dzl_suggestion_entry_new">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="hide_suggestions" invoker="hide_suggestions">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="move_suggestion">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="amount" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show_suggestions">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="suggestion_activated">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="suggestion" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="suggestion_selected">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="suggestion" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="default_position_func"
              c:identifier="dzl_suggestion_entry_default_position_func">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="is_absolute" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activate_on_single_click"
              c:identifier="dzl_suggestion_entry_get_activate_on_single_click"
              glib:get-property="activate-on-single-click">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compact"
              c:identifier="dzl_suggestion_entry_get_compact"
              glib:get-property="compact"
              version="3.34">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="1138">Gets the #DzlSuggestionEntry:compact property.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry.c"
               line="1144">%TRUE if compact-mode is in use.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="1140">a #DzlSuggestionEntry</doc>
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="dzl_suggestion_entry_get_model"
              glib:get-property="model">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="821">Gets the model being visualized.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="77"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry.c"
               line="827">A #GListModel or %NULL.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="823">a #DzlSuggestionEntry</doc>
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_popover"
              c:identifier="dzl_suggestion_entry_get_popover"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="1090">Gets the result display widget for the entry. This is currently
always a #DzlSuggestionPopover.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry.c"
               line="1097">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="1092">a #DzlSuggestionEntry</doc>
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suggestion"
              c:identifier="dzl_suggestion_entry_get_suggestion"
              glib:get-property="suggestion">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="865">Gets the currently selected suggestion.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="81"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry.c"
               line="871">An #DzlSuggestion or %NULL.</doc>
          <type name="Suggestion" c:type="DzlSuggestion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="867">a #DzlSuggestionEntry</doc>
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_typed_text"
              c:identifier="dzl_suggestion_entry_get_typed_text"
              glib:get-property="typed-text">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide_suggestions"
              c:identifier="dzl_suggestion_entry_hide_suggestions">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_activate_on_single_click"
              c:identifier="dzl_suggestion_entry_set_activate_on_single_click"
              glib:set-property="activate-on-single-click">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="activate_on_single_click" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_compact"
              c:identifier="dzl_suggestion_entry_set_compact"
              glib:set-property="compact"
              version="3.34">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="1111">Sets the #DzlSuggestionEntry:compact property.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="1113">a #DzlSuggestionEntry</doc>
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="compact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="1114">if compact mode should be used</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="dzl_suggestion_entry_set_model"
              glib:set-property="model">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position_func"
              c:identifier="dzl_suggestion_entry_set_position_func"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="994">Sets a position func to position the popover.

In @func, you should set the height of the rectangle to the maximum height
that the popover should be allowed to grow.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="996">a #DzlSuggestionEntry</doc>
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="997">
  A function to call to position the popover, or %NULL to set the default.</doc>
            <type name="SuggestionPositionFunc"
                  c:type="DzlSuggestionPositionFunc"/>
          </parameter>
          <parameter name="func_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="999">closure data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="func_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="1000">a destroy notify for @func_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_suggestion"
              c:identifier="dzl_suggestion_entry_set_suggestion"
              glib:set-property="suggestion">
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="suggestion" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="window_position_func"
              c:identifier="dzl_suggestion_entry_window_position_func">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="942">This is a #DzlSuggestionPositionFunc that can be used to make the suggestion
popover the full width of the window. It is similar to what you might find
in a web browser.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
          </instance-parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="is_absolute" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="activate-on-single-click"
                version="3.30"
                writable="1"
                transfer-ownership="none"
                setter="set_activate_on_single_click"
                getter="get_activate_on_single_click"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="536">The "activate-on-single-click" property denotes if results should be
activated simply by clicking on them. You may want to set this to
%FALSE if you want the behavior to only select the item.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="compact"
                version="3.34"
                writable="1"
                transfer-ownership="none"
                setter="set_compact"
                getter="get_compact"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="552">The "compact" property denotes if an alternate style should be used to
reduce the width of the rows. This may be ideal in size contrained
situations with portrait display.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <type name="Gio.ListModel"/>
      </property>
      <property name="suggestion"
                version="3.30"
                writable="1"
                transfer-ownership="none"
                setter="set_suggestion"
                getter="get_suggestion">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="582">The "suggestion" property is the currently selected suggestion, if any.</doc>
        <type name="Suggestion"/>
      </property>
      <property name="typed-text"
                transfer-ownership="none"
                getter="get_typed_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Entry" c:type="GtkEntry"/>
      </field>
      <glib:signal name="action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="activate-suggestion" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hide-suggestions" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="move-suggestion" when="last" action="1">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="617">This moves the selected suggestion in the popover by the value
provided. -1 moves up one row, 1, moves down a row.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="620">The number of items to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="show-suggestions" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="suggestion-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Suggestion"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="suggestion-selected" when="last" version="3.30">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry.c"
             line="649">This signal is emitted when a selection has been specifically selected
by the user, such as by clicking on the row or moving to the row with
keyboard, such as with #DzlSuggestionEntry::move-suggestion</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="suggestion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry.c"
                 line="652">a #DzlSuggestion</doc>
            <type name="Suggestion"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="SuggestionEntryBuffer"
           c:symbol-prefix="suggestion_entry_buffer"
           c:type="DzlSuggestionEntryBuffer"
           parent="Gtk.EntryBuffer"
           glib:type-name="DzlSuggestionEntryBuffer"
           glib:get-type="dzl_suggestion_entry_buffer_get_type"
           glib:type-struct="SuggestionEntryBufferClass">
      <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                       line="43"/>
      <constructor name="new" c:identifier="dzl_suggestion_entry_buffer_new">
        <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <type name="SuggestionEntryBuffer"
                c:type="DzlSuggestionEntryBuffer*"/>
        </return-value>
      </constructor>
      <method name="clear" c:identifier="dzl_suggestion_entry_buffer_clear">
        <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntryBuffer"
                  c:type="DzlSuggestionEntryBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="commit" c:identifier="dzl_suggestion_entry_buffer_commit">
        <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntryBuffer"
                  c:type="DzlSuggestionEntryBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suggestion"
              c:identifier="dzl_suggestion_entry_buffer_get_suggestion"
              glib:get-property="suggestion">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry-buffer.c"
             line="333">Gets the #DzlSuggestion that is the current "preview suffix" of the
text in the entry.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                         line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry-buffer.c"
               line="340">An #DzlSuggestion or %NULL.</doc>
          <type name="Suggestion" c:type="DzlSuggestion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry-buffer.c"
                 line="335">a #DzlSuggestionEntryBuffer</doc>
            <type name="SuggestionEntryBuffer"
                  c:type="DzlSuggestionEntryBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_typed_length"
              c:identifier="dzl_suggestion_entry_buffer_get_typed_length">
        <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntryBuffer"
                  c:type="DzlSuggestionEntryBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_typed_text"
              c:identifier="dzl_suggestion_entry_buffer_get_typed_text">
        <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionEntryBuffer"
                  c:type="DzlSuggestionEntryBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_suggestion"
              c:identifier="dzl_suggestion_entry_buffer_set_suggestion"
              glib:set-property="suggestion">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-entry-buffer.c"
             line="352">Sets the current suggestion for the entry buffer.

The suggestion is used to get a potential suffix for the current entry
text. This allows the entry to show "preview text" after the entered
text for what might be inserted should they activate the current item.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry-buffer.c"
                 line="354">a #DzlSuggestionEntryBuffer</doc>
            <type name="SuggestionEntryBuffer"
                  c:type="DzlSuggestionEntryBuffer*"/>
          </instance-parameter>
          <parameter name="suggestion"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-entry-buffer.c"
                 line="355">An #DzlSuggestion or %NULL</doc>
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </parameter>
        </parameters>
      </method>
      <property name="suggestion"
                writable="1"
                transfer-ownership="none"
                setter="set_suggestion"
                getter="get_suggestion">
        <type name="Suggestion"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.EntryBuffer" c:type="GtkEntryBuffer"/>
      </field>
    </class>
    <record name="SuggestionEntryBufferClass"
            c:type="DzlSuggestionEntryBufferClass"
            glib:is-gtype-struct-for="SuggestionEntryBuffer">
      <source-position filename="src/suggestions/dzl-suggestion-entry-buffer.h"
                       line="43"/>
      <field name="parent_class">
        <type name="Gtk.EntryBufferClass" c:type="GtkEntryBufferClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="SuggestionEntryClass"
            c:type="DzlSuggestionEntryClass"
            glib:is-gtype-struct-for="SuggestionEntry">
      <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                       line="69"/>
      <field name="parent_class">
        <type name="Gtk.EntryClass" c:type="GtkEntryClass"/>
      </field>
      <field name="hide_suggestions">
        <callback name="hide_suggestions">
          <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show_suggestions">
        <callback name="show_suggestions">
          <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_suggestion">
        <callback name="move_suggestion">
          <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
            </parameter>
            <parameter name="amount" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="suggestion_activated">
        <callback name="suggestion_activated">
          <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
            </parameter>
            <parameter name="suggestion" transfer-ownership="none">
              <type name="Suggestion" c:type="DzlSuggestion*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="suggestion_selected">
        <callback name="suggestion_selected">
          <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
            </parameter>
            <parameter name="suggestion" transfer-ownership="none">
              <type name="Suggestion" c:type="DzlSuggestion*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SuggestionPopover"
           c:symbol-prefix="suggestion_popover"
           c:type="DzlSuggestionPopover"
           parent="Gtk.Window"
           glib:type-name="DzlSuggestionPopover"
           glib:get-type="dzl_suggestion_popover_get_type"
           glib:type-struct="SuggestionPopoverClass">
      <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                       line="32"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_suggestion_popover_new">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="activate_selected"
              c:identifier="dzl_suggestion_popover_activate_selected">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="dzl_suggestion_popover_get_model"
              glib:get-property="model">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-popover.c"
             line="1083">Gets the model being visualized.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-popover.c"
               line="1089">A #GListModel or %NULL.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-popover.c"
                 line="1085">a #DzlSuggestionPopover</doc>
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_relative_to"
              c:identifier="dzl_suggestion_popover_get_relative_to"
              glib:get-property="relative-to">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-popover.c"
               line="205">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-popover.c"
                 line="203">a #DzlSuggestionPopover</doc>
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected"
              c:identifier="dzl_suggestion_popover_get_selected"
              glib:get-property="selected">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-popover.c"
             line="1216">Gets the currently selected suggestion.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-popover.c"
               line="1222">An #DzlSuggestion or %NULL.</doc>
          <type name="Suggestion" c:type="DzlSuggestion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-popover.c"
                 line="1218">a #DzlSuggestionPopover</doc>
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_by" c:identifier="dzl_suggestion_popover_move_by">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
          <parameter name="amount" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="popdown" c:identifier="dzl_suggestion_popover_popdown">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="popup" c:identifier="dzl_suggestion_popover_popup">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="dzl_suggestion_popover_set_model"
              glib:set-property="model">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_relative_to"
              c:identifier="dzl_suggestion_popover_set_relative_to"
              glib:set-property="relative-to">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected"
              c:identifier="dzl_suggestion_popover_set_selected"
              glib:set-property="selected">
        <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionPopover" c:type="DzlSuggestionPopover*"/>
          </instance-parameter>
          <parameter name="suggestion" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </parameter>
        </parameters>
      </method>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <type name="Suggestion"/>
      </property>
      <property name="relative-to"
                writable="1"
                transfer-ownership="none"
                setter="set_relative_to"
                getter="get_relative_to">
        <type name="Gtk.Widget"/>
      </property>
      <property name="selected"
                writable="1"
                transfer-ownership="none"
                setter="set_selected"
                getter="get_selected">
        <type name="Suggestion"/>
      </property>
      <property name="subtitle-ellipsize"
                writable="1"
                transfer-ownership="none"
                default-value="PANGO_ELLIPSIZE_END">
        <type name="Pango.EllipsizeMode"/>
      </property>
      <property name="title-ellipsize"
                writable="1"
                transfer-ownership="none"
                default-value="PANGO_ELLIPSIZE_END">
        <type name="Pango.EllipsizeMode"/>
      </property>
      <glib:signal name="suggestion-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Suggestion"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SuggestionPopoverClass"
            c:type="DzlSuggestionPopoverClass"
            glib:is-gtype-struct-for="SuggestionPopover">
      <source-position filename="src/suggestions/dzl-suggestion-popover.h"
                       line="32"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <callback name="SuggestionPositionFunc"
              c:type="DzlSuggestionPositionFunc"
              version="3.26">
      <doc xml:space="preserve"
           filename="src/suggestions/dzl-suggestion-entry.h"
           line="35">Positions the popover in the coordinates defined by @area.

If @is_absolute is set to %TRUE, then absolute coordinates are used.
Otherwise, the position is expected to be relative to @entry.</doc>
      <source-position filename="src/suggestions/dzl-suggestion-entry.h"
                       line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="entry" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry.h"
               line="37">a #DzlSuggestionEntry</doc>
          <type name="SuggestionEntry" c:type="DzlSuggestionEntry*"/>
        </parameter>
        <parameter name="area"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry.h"
               line="38">location to place the popover</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="is_absolute"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry.h"
               line="39">If the area is in absolute coordinates</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-entry.h"
               line="40">closure data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="SuggestionRow"
           c:symbol-prefix="suggestion_row"
           c:type="DzlSuggestionRow"
           parent="ListBoxRow"
           glib:type-name="DzlSuggestionRow"
           glib:get-type="dzl_suggestion_row_get_type"
           glib:type-struct="SuggestionRowClass">
      <source-position filename="src/suggestions/dzl-suggestion-row.h"
                       line="42"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_suggestion_row_new">
        <source-position filename="src/suggestions/dzl-suggestion-row.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_suggestion"
              c:identifier="dzl_suggestion_row_get_suggestion"
              glib:get-property="suggestion">
        <doc xml:space="preserve"
             filename="src/suggestions/dzl-suggestion-row.c"
             line="310">Gets the suggestion to be displayed.</doc>
        <source-position filename="src/suggestions/dzl-suggestion-row.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/suggestions/dzl-suggestion-row.c"
               line="316">An #DzlSuggestion</doc>
          <type name="Suggestion" c:type="DzlSuggestion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/suggestions/dzl-suggestion-row.c"
                 line="312">a #DzlSuggestionRow</doc>
            <type name="SuggestionRow" c:type="DzlSuggestionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_suggestion"
              c:identifier="dzl_suggestion_row_set_suggestion"
              glib:set-property="suggestion">
        <source-position filename="src/suggestions/dzl-suggestion-row.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SuggestionRow" c:type="DzlSuggestionRow*"/>
          </instance-parameter>
          <parameter name="suggestion" transfer-ownership="none">
            <type name="Suggestion" c:type="DzlSuggestion*"/>
          </parameter>
        </parameters>
      </method>
      <property name="orientation"
                writable="1"
                transfer-ownership="none"
                default-value="GTK_ORIENTATION_VERTICAL">
        <type name="Gtk.Orientation"/>
      </property>
      <property name="suggestion"
                writable="1"
                transfer-ownership="none"
                setter="set_suggestion"
                getter="get_suggestion">
        <type name="Suggestion"/>
      </property>
      <field name="parent_instance">
        <type name="ListBoxRow" c:type="DzlListBoxRow"/>
      </field>
    </class>
    <record name="SuggestionRowClass"
            c:type="DzlSuggestionRowClass"
            glib:is-gtype-struct-for="SuggestionRow">
      <source-position filename="src/suggestions/dzl-suggestion-row.h"
                       line="42"/>
      <field name="parent_class">
        <type name="ListBoxRowClass" c:type="DzlListBoxRowClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="TODO" c:identifier="DZL_TODO" introspectable="0">
      <source-position filename="src/dzl-debug.h" line="49"/>
      <parameters>
        <parameter name="_msg">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRACE_MSG"
                    c:identifier="DZL_TRACE_MSG"
                    introspectable="0">
      <source-position filename="src/dzl-debug.h" line="45"/>
      <parameters>
        <parameter name="fmt">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Tab"
           c:symbol-prefix="tab"
           c:type="DzlTab"
           parent="Bin"
           glib:type-name="DzlTab"
           glib:get-type="dzl_tab_get_type"
           glib:type-struct="TabClass">
      <source-position filename="src/panel/dzl-dock-types.h" line="72"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_active"
              c:identifier="dzl_tab_get_active"
              glib:get-property="active">
        <source-position filename="src/panel/dzl-tab.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_close"
              c:identifier="dzl_tab_get_can_close"
              glib:get-property="can-close">
        <source-position filename="src/panel/dzl-tab.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_edge"
              c:identifier="dzl_tab_get_edge"
              glib:get-property="edge">
        <source-position filename="src/panel/dzl-tab.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.PositionType" c:type="GtkPositionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name" c:identifier="dzl_tab_get_icon_name">
        <source-position filename="src/panel/dzl-tab.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style"
              c:identifier="dzl_tab_get_style"
              glib:get-property="style">
        <source-position filename="src/panel/dzl-tab.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="TabStyle" c:type="DzlTabStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="dzl_tab_get_title"
              glib:get-property="title">
        <source-position filename="src/panel/dzl-tab.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_widget"
              c:identifier="dzl_tab_get_widget"
              glib:get-property="widget">
        <source-position filename="src/panel/dzl-tab.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-tab.c"
               line="984">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="dzl_tab_set_active"
              glib:set-property="active">
        <source-position filename="src/panel/dzl-tab.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_close"
              c:identifier="dzl_tab_set_can_close"
              glib:set-property="can-close">
        <source-position filename="src/panel/dzl-tab.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
          <parameter name="can_close" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_edge"
              c:identifier="dzl_tab_set_edge"
              glib:set-property="edge">
        <source-position filename="src/panel/dzl-tab.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
          <parameter name="edge" transfer-ownership="none">
            <type name="Gtk.PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gicon" c:identifier="dzl_tab_set_gicon">
        <source-position filename="src/panel/dzl-tab.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
          <parameter name="gicon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name" c:identifier="dzl_tab_set_icon_name">
        <source-position filename="src/panel/dzl-tab.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style"
              c:identifier="dzl_tab_set_style"
              glib:set-property="style">
        <source-position filename="src/panel/dzl-tab.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="TabStyle" c:type="DzlTabStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="dzl_tab_set_title"
              glib:set-property="title">
        <source-position filename="src/panel/dzl-tab.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_widget"
              c:identifier="dzl_tab_set_widget"
              glib:set-property="widget">
        <source-position filename="src/panel/dzl-tab.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tab" c:type="DzlTab*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-close"
                writable="1"
                transfer-ownership="none"
                setter="set_can_close"
                getter="get_can_close"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="edge"
                writable="1"
                transfer-ownership="none"
                setter="set_edge"
                getter="get_edge"
                default-value="GTK_POS_TOP">
        <type name="Gtk.PositionType"/>
      </property>
      <property name="style"
                writable="1"
                transfer-ownership="none"
                setter="set_style"
                getter="get_style"
                default-value="DZL_TAB_ICONS | DZL_TAB_TEXT">
        <type name="TabStyle"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="widget"
                writable="1"
                transfer-ownership="none"
                setter="set_widget"
                getter="get_widget">
        <type name="Gtk.Widget"/>
      </property>
      <glib:signal name="clicked" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TabClass"
            c:type="DzlTabClass"
            glib:is-gtype-struct-for="Tab">
      <source-position filename="src/panel/dzl-dock-types.h" line="72"/>
      <field name="parent_class">
        <type name="BinClass" c:type="DzlBinClass"/>
      </field>
    </record>
    <class name="TabStrip"
           c:symbol-prefix="tab_strip"
           c:type="DzlTabStrip"
           parent="Gtk.Box"
           glib:type-name="DzlTabStrip"
           glib:get-type="dzl_tab_strip_get_type"
           glib:type-struct="TabStripClass">
      <source-position filename="src/panel/dzl-tab-strip.h" line="45"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dzl_tab_strip_new">
        <source-position filename="src/panel/dzl-tab-strip.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_control" c:identifier="dzl_tab_strip_add_control">
        <source-position filename="src/panel/dzl-tab-strip.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TabStrip" c:type="DzlTabStrip*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_edge"
              c:identifier="dzl_tab_strip_get_edge"
              glib:get-property="edge">
        <source-position filename="src/panel/dzl-tab-strip.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.PositionType" c:type="GtkPositionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TabStrip" c:type="DzlTabStrip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="dzl_tab_strip_get_stack"
              glib:get-property="stack">
        <source-position filename="src/panel/dzl-tab-strip.h" line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/panel/dzl-tab-strip.c"
               line="600">A #GtkStack or %NULL.</doc>
          <type name="Gtk.Stack" c:type="GtkStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TabStrip" c:type="DzlTabStrip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style"
              c:identifier="dzl_tab_strip_get_style"
              glib:get-property="style">
        <source-position filename="src/panel/dzl-tab-strip.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="TabStyle" c:type="DzlTabStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TabStrip" c:type="DzlTabStrip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_edge"
              c:identifier="dzl_tab_strip_set_edge"
              glib:set-property="edge">
        <source-position filename="src/panel/dzl-tab-strip.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TabStrip" c:type="DzlTabStrip*"/>
          </instance-parameter>
          <parameter name="edge" transfer-ownership="none">
            <type name="Gtk.PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="dzl_tab_strip_set_stack"
              glib:set-property="stack">
        <source-position filename="src/panel/dzl-tab-strip.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TabStrip" c:type="DzlTabStrip*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <type name="Gtk.Stack" c:type="GtkStack*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style"
              c:identifier="dzl_tab_strip_set_style"
              glib:set-property="style">
        <source-position filename="src/panel/dzl-tab-strip.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TabStrip" c:type="DzlTabStrip*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="TabStyle" c:type="DzlTabStyle"/>
          </parameter>
        </parameters>
      </method>
      <property name="edge"
                writable="1"
                transfer-ownership="none"
                setter="set_edge"
                getter="get_edge"
                default-value="GTK_POS_TOP">
        <type name="Gtk.PositionType"/>
      </property>
      <property name="stack"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <type name="Gtk.Stack"/>
      </property>
      <property name="style"
                writable="1"
                transfer-ownership="none"
                setter="set_style"
                getter="get_style"
                default-value="DZL_TAB_ICONS | DZL_TAB_TEXT">
        <type name="TabStyle"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
    </class>
    <record name="TabStripClass"
            c:type="DzlTabStripClass"
            glib:is-gtype-struct-for="TabStrip">
      <source-position filename="src/panel/dzl-tab-strip.h" line="45"/>
      <field name="parent">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <bitfield name="TabStyle"
              glib:type-name="DzlTabStyle"
              glib:get-type="dzl_tab_style_get_type"
              c:type="DzlTabStyle">
      <member name="icons"
              value="2"
              c:identifier="DZL_TAB_ICONS"
              glib:nick="icons"
              glib:name="DZL_TAB_ICONS">
      </member>
      <member name="text"
              value="1"
              c:identifier="DZL_TAB_TEXT"
              glib:nick="text"
              glib:name="DZL_TAB_TEXT">
      </member>
      <member name="both"
              value="3"
              c:identifier="DZL_TAB_BOTH"
              glib:nick="both"
              glib:name="DZL_TAB_BOTH">
      </member>
    </bitfield>
    <class name="TaskCache"
           c:symbol-prefix="task_cache"
           c:type="DzlTaskCache"
           parent="GObject.Object"
           glib:type-name="DzlTaskCache"
           glib:get-type="dzl_task_cache_get_type"
           glib:type-struct="TaskCacheClass">
      <source-position filename="src/cache/dzl-task-cache.h" line="31"/>
      <constructor name="new"
                   c:identifier="dzl_task_cache_new"
                   introspectable="0">
        <source-position filename="src/cache/dzl-task-cache.h" line="56"/>
        <return-value transfer-ownership="full">
          <type name="TaskCache" c:type="DzlTaskCache*"/>
        </return-value>
        <parameters>
          <parameter name="key_hash_func" transfer-ownership="none">
            <type name="GLib.HashFunc" c:type="GHashFunc"/>
          </parameter>
          <parameter name="key_equal_func" transfer-ownership="none">
            <type name="GLib.EqualFunc" c:type="GEqualFunc"/>
          </parameter>
          <parameter name="key_copy_func" transfer-ownership="none">
            <type name="GObject.BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
          </parameter>
          <parameter name="key_destroy_func" transfer-ownership="none">
            <type name="GObject.BoxedFreeFunc" c:type="GBoxedFreeFunc"/>
          </parameter>
          <parameter name="value_copy_func" transfer-ownership="none">
            <type name="GObject.BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
          </parameter>
          <parameter name="value_free_func" transfer-ownership="none">
            <type name="GObject.BoxedFreeFunc" c:type="GBoxedFreeFunc"/>
          </parameter>
          <parameter name="time_to_live_msec" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="populate_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="8"
                     destroy="9">
            <type name="TaskCacheCallback" c:type="DzlTaskCacheCallback"/>
          </parameter>
          <parameter name="populate_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="populate_callback_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="evict" c:identifier="dzl_task_cache_evict">
        <source-position filename="src/cache/dzl-task-cache.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="DzlTaskCache*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="evict_all" c:identifier="dzl_task_cache_evict_all">
        <source-position filename="src/cache/dzl-task-cache.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="DzlTaskCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_async" c:identifier="dzl_task_cache_get_async">
        <source-position filename="src/cache/dzl-task-cache.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="DzlTaskCache*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="force_update" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_finish"
              c:identifier="dzl_task_cache_get_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/cache/dzl-task-cache.c"
             line="640">Finish a call to dzl_task_cache_get_async().</doc>
        <source-position filename="src/cache/dzl-task-cache.h" line="77"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/cache/dzl-task-cache.c"
               line="645">The result from the cache.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="DzlTaskCache*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values"
              c:identifier="dzl_task_cache_get_values"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/cache/dzl-task-cache.c"
             line="995">Gets all the values in the cache.

The caller owns the resulting GPtrArray, which itself owns a reference to the children.</doc>
        <source-position filename="src/cache/dzl-task-cache.h" line="89"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/cache/dzl-task-cache.c"
               line="1002">The values.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="DzlTaskCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="dzl_task_cache_peek">
        <doc xml:space="preserve"
             filename="src/cache/dzl-task-cache.c"
             line="332">Peeks to see @key is contained in the cache and returns the
matching #GObject if it does.

The reference count of the resulting #GObject is not incremented.
For that reason, it is important to remember that this function
may only be called from the main thread.</doc>
        <source-position filename="src/cache/dzl-task-cache.h" line="86"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/cache/dzl-task-cache.c"
               line="344">A #GObject or
  %NULL if the key was not found in the cache.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cache/dzl-task-cache.c"
                 line="334">An #DzlTaskCache</doc>
            <type name="TaskCache" c:type="DzlTaskCache*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/cache/dzl-task-cache.c"
                 line="335">The key for the cache</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="dzl_task_cache_set_name">
        <source-position filename="src/cache/dzl-task-cache.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="DzlTaskCache*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="key-copy-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="key-destroy-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="key-equal-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="key-hash-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="populate-callback"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="populate-callback-data"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="populate-callback-data-destroy"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="time-to-live"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="30000">
        <doc xml:space="preserve"
             filename="src/cache/dzl-task-cache.c"
             line="924">This is the number of milliseconds before an item should be evicted
from the cache.

A value of zero indicates no eviction.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="value-copy-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="value-destroy-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
    </class>
    <callback name="TaskCacheCallback" c:type="DzlTaskCacheCallback">
      <doc xml:space="preserve"
           filename="src/cache/dzl-task-cache.h"
           line="33">#DzlTaskCacheCallback is the prototype for a function to be executed to
populate an item in the cache.

This function will be executed when a fault (cache miss) occurs from
a caller requesting an item from the cache.

The callee may complete the operation asynchronously, but MUST return
either a GObject using g_task_return_pointer() or a #GError using
g_task_return_error() or g_task_return_new_error().</doc>
      <source-position filename="src/cache/dzl-task-cache.h" line="50"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/cache/dzl-task-cache.h"
               line="35">An #DzlTaskCache.</doc>
          <type name="TaskCache" c:type="DzlTaskCache*"/>
        </parameter>
        <parameter name="key"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/cache/dzl-task-cache.h"
               line="36">the key to fetch</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="task" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/cache/dzl-task-cache.h"
               line="37">the task to be completed</doc>
          <type name="Gio.Task" c:type="GTask*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/cache/dzl-task-cache.h"
               line="38">user_data registered at initialization.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TaskCacheClass"
            c:type="DzlTaskCacheClass"
            glib:is-gtype-struct-for="TaskCache">
      <source-position filename="src/cache/dzl-task-cache.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ThemeManager"
           c:symbol-prefix="theme_manager"
           c:type="DzlThemeManager"
           parent="GObject.Object"
           glib:type-name="DzlThemeManager"
           glib:get-type="dzl_theme_manager_get_type"
           glib:type-struct="ThemeManagerClass">
      <source-position filename="src/theming/dzl-theme-manager.h" line="31"/>
      <constructor name="new" c:identifier="dzl_theme_manager_new">
        <source-position filename="src/theming/dzl-theme-manager.h" line="34"/>
        <return-value transfer-ownership="full">
          <type name="ThemeManager" c:type="DzlThemeManager*"/>
        </return-value>
      </constructor>
      <method name="add_resources"
              c:identifier="dzl_theme_manager_add_resources">
        <doc xml:space="preserve"
             filename="src/theming/dzl-theme-manager.c"
             line="83">This will automatically register resources found within @resource_path.

If @resource_path starts with "resource://", embedded #GResources will be
used to locate the theme files. Otherwise, @resource_path is expected to be
a path on disk that may or may not exist.

If the @resource_path contains a directory named "themes", that directory
will be traversed for files matching the theme name and variant. For
example, if using the Adwaita theme, "themes/Adwaita.css" will be loaded. If
the dark variant is being used, "themes/Adwaita-dark.css" will be loaeded. If
no matching theme file is located, "themes/shared.css" will be loaded.

When the current theme changes, the CSS will be reloaded to adapt.

The "icons" sub-directory will be used to locate icon themes.</doc>
        <source-position filename="src/theming/dzl-theme-manager.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/theming/dzl-theme-manager.c"
                 line="85">a #DzlThemeManager</doc>
            <type name="ThemeManager" c:type="DzlThemeManager*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/theming/dzl-theme-manager.c"
                 line="86">A path to a #GResources directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_resources"
              c:identifier="dzl_theme_manager_remove_resources">
        <doc xml:space="preserve"
             filename="src/theming/dzl-theme-manager.c"
             line="173">This removes the CSS providers that were registered using @resource_path.

You must have previously called dzl_theme_manager_add_resources() for
this function to do anything.

Since icons cannot be unloaded, previously loaded icons will continue to
be available even after calling this function.</doc>
        <source-position filename="src/theming/dzl-theme-manager.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/theming/dzl-theme-manager.c"
                 line="175">a #DzlThemeManager</doc>
            <type name="ThemeManager" c:type="DzlThemeManager*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/theming/dzl-theme-manager.c"
                 line="176">A previously registered resources path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ThemeManagerClass"
            c:type="DzlThemeManagerClass"
            glib:is-gtype-struct-for="ThemeManager">
      <source-position filename="src/theming/dzl-theme-manager.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ThreeGrid"
           c:symbol-prefix="three_grid"
           c:type="DzlThreeGrid"
           parent="Gtk.Container"
           glib:type-name="DzlThreeGrid"
           glib:get-type="dzl_three_grid_get_type"
           glib:type-struct="ThreeGridClass">
      <source-position filename="src/widgets/dzl-three-grid.h" line="46"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dzl_three_grid_new">
        <source-position filename="src/widgets/dzl-three-grid.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="column-spacing"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="row-spacing"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="ThreeGridClass"
            c:type="DzlThreeGridClass"
            glib:is-gtype-struct-for="ThreeGrid">
      <source-position filename="src/widgets/dzl-three-grid.h" line="46"/>
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <enumeration name="ThreeGridColumn"
                 glib:type-name="DzlThreeGridColumn"
                 glib:get-type="dzl_three_grid_column_get_type"
                 c:type="DzlThreeGridColumn">
      <member name="left"
              value="0"
              c:identifier="DZL_THREE_GRID_COLUMN_LEFT"
              glib:nick="left"
              glib:name="DZL_THREE_GRID_COLUMN_LEFT">
      </member>
      <member name="center"
              value="1"
              c:identifier="DZL_THREE_GRID_COLUMN_CENTER"
              glib:nick="center"
              glib:name="DZL_THREE_GRID_COLUMN_CENTER">
      </member>
      <member name="right"
              value="2"
              c:identifier="DZL_THREE_GRID_COLUMN_RIGHT"
              glib:nick="right"
              glib:name="DZL_THREE_GRID_COLUMN_RIGHT">
      </member>
    </enumeration>
    <enumeration name="TitlebarAnimation"
                 glib:type-name="DzlTitlebarAnimation"
                 glib:get-type="dzl_titlebar_animation_get_type"
                 c:type="DzlTitlebarAnimation">
      <member name="hidden"
              value="0"
              c:identifier="DZL_TITLEBAR_ANIMATION_HIDDEN"
              glib:nick="hidden"
              glib:name="DZL_TITLEBAR_ANIMATION_HIDDEN">
      </member>
      <member name="showing"
              value="1"
              c:identifier="DZL_TITLEBAR_ANIMATION_SHOWING"
              glib:nick="showing"
              glib:name="DZL_TITLEBAR_ANIMATION_SHOWING">
      </member>
      <member name="shown"
              value="2"
              c:identifier="DZL_TITLEBAR_ANIMATION_SHOWN"
              glib:nick="shown"
              glib:name="DZL_TITLEBAR_ANIMATION_SHOWN">
      </member>
      <member name="hiding"
              value="3"
              c:identifier="DZL_TITLEBAR_ANIMATION_HIDING"
              glib:nick="hiding"
              glib:name="DZL_TITLEBAR_ANIMATION_HIDING">
      </member>
    </enumeration>
    <class name="Tree"
           c:symbol-prefix="tree"
           c:type="DzlTree"
           parent="Gtk.TreeView"
           glib:type-name="DzlTree"
           glib:get-type="dzl_tree_get_type"
           glib:type-struct="TreeClass">
      <source-position filename="src/tree/dzl-tree.h" line="69"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <virtual-method name="action">
        <source-position filename="src/tree/dzl-tree.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="action_group" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="populate_popup">
        <source-position filename="src/tree/dzl-tree.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_builder" c:identifier="dzl_tree_add_builder">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1515">Add a builder to the tree.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1517">A #DzlTree.</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1518">A #DzlTreeBuilder to add.</doc>
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_to_node" c:identifier="dzl_tree_expand_to_node">
        <source-position filename="src/tree/dzl-tree.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_child_node" c:identifier="dzl_tree_find_child_node">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1793">Searches through the direct children of @node for a matching child.
@find_func should return %TRUE if the child matches, otherwise %FALSE.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="107"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree.c"
               line="1803">A #DzlTreeNode or %NULL.</doc>
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1795">A #DzlTree</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1796">A #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="find_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1797">A callback to locate the child</doc>
            <type name="TreeFindFunc" c:type="DzlTreeFindFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1798">user data for @find_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_custom" c:identifier="dzl_tree_find_custom">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1658">Walks the entire tree looking for the first item that matches given
@equal_func and @key.

The first parameter to @equal_func will always be @key.
The second parameter will be the nodes #DzlTreeNode:item property.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="81"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree.c"
               line="1670">A #DzlTreeNode or %NULL.</doc>
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1660">A #DzlTree</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="equal_func" transfer-ownership="none" scope="call">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1661">A #GEqualFunc</doc>
            <type name="GLib.EqualFunc" c:type="GEqualFunc"/>
          </parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1662">the key for @equal_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_item" c:identifier="dzl_tree_find_item">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1694">Finds a #DzlTreeNode with an item property matching @item.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="78"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree.c"
               line="1701">A #DzlTreeNode or %NULL.</doc>
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1696">A #DzlTree.</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="item"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1697">A #GObject or %NULL.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context_menu"
              c:identifier="dzl_tree_get_context_menu"
              glib:get-property="context-menu">
        <source-position filename="src/tree/dzl-tree.h" line="117"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree.c"
               line="99">A #GMenuModel or %NULL.</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root"
              c:identifier="dzl_tree_get_root"
              glib:get-property="root">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1570">Retrieves the root node of the tree. The root node is not a visible node
in the self, but a placeholder for all other builders to build upon.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="94"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree.c"
               line="1576">A #DzlTreeNode or %NULL.</doc>
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected" c:identifier="dzl_tree_get_selected">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1400">Gets the currently selected node in the tree.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree.c"
               line="1406">A #DzlTreeNode.</doc>
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1402">A #DzlTree.</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_icons"
              c:identifier="dzl_tree_get_show_icons"
              glib:get-property="show-icons">
        <source-position filename="src/tree/dzl-tree.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rebuild" c:identifier="dzl_tree_rebuild">
        <source-position filename="src/tree/dzl-tree.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_builder" c:identifier="dzl_tree_remove_builder">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1541">Removes a builder from the tree.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1543">A #DzlTree.</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1544">A #DzlTreeBuilder to remove.</doc>
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_node" c:identifier="dzl_tree_scroll_to_node">
        <source-position filename="src/tree/dzl-tree.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_context_menu"
              c:identifier="dzl_tree_set_context_menu"
              glib:set-property="context-menu">
        <source-position filename="src/tree/dzl-tree.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="context_menu" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter" c:identifier="dzl_tree_set_filter">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="2009">Sets the filter function to be used to determine visability of a tree node.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="2011">A #DzlTree</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="filter_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="2012">A callback to determien visibility.</doc>
            <type name="TreeFilterFunc" c:type="DzlTreeFilterFunc"/>
          </parameter>
          <parameter name="filter_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="2013">User data for @filter_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="filter_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="2014">Destroy notify for @filter_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_root"
              c:identifier="dzl_tree_set_root"
              glib:set-property="root">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1588">Sets the root node of the #DzlTree widget. This is used to build
the items within the treeview. The item itself will not be added
to the self, but the direct children will be.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1590">A #DzlTree.</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1591">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_icons"
              c:identifier="dzl_tree_set_show_icons"
              glib:set-property="show-icons">
        <source-position filename="src/tree/dzl-tree.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
          <parameter name="show_icons" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_all" c:identifier="dzl_tree_unselect_all">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.c"
             line="1434">Unselects the currently selected node in the tree.</doc>
        <source-position filename="src/tree/dzl-tree.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree.c"
                 line="1436">A #DzlTree.</doc>
            <type name="Tree" c:type="DzlTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="always-expand"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="context-menu"
                writable="1"
                transfer-ownership="none"
                setter="set_context_menu"
                getter="get_context_menu">
        <type name="Gio.MenuModel"/>
      </property>
      <property name="root"
                writable="1"
                transfer-ownership="none"
                setter="set_root"
                getter="get_root">
        <type name="TreeNode"/>
      </property>
      <property name="selection" writable="1" transfer-ownership="none">
        <type name="TreeNode"/>
      </property>
      <property name="show-icons"
                writable="1"
                transfer-ownership="none"
                setter="set_show_icons"
                getter="get_show_icons"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.TreeView" c:type="GtkTreeView"/>
      </field>
      <glib:signal name="action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="populate-popup" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="TreeBuilder"
           c:symbol-prefix="tree_builder"
           c:type="DzlTreeBuilder"
           parent="GObject.InitiallyUnowned"
           glib:type-name="DzlTreeBuilder"
           glib:get-type="dzl_tree_builder_get_type"
           glib:type-struct="TreeBuilderClass">
      <source-position filename="src/tree/dzl-tree-builder.h" line="83"/>
      <constructor name="new" c:identifier="dzl_tree_builder_new">
        <source-position filename="src/tree/dzl-tree-builder.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
        </return-value>
      </constructor>
      <virtual-method name="added">
        <source-position filename="src/tree/dzl-tree-builder.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_children">
        <source-position filename="src/tree/dzl-tree-builder.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_node">
        <source-position filename="src/tree/dzl-tree-builder.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cell_data_func">
        <source-position filename="src/tree/dzl-tree-builder.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none">
            <type name="Gtk.CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="drag_data_get">
        <source-position filename="src/tree/dzl-tree-builder.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="drag_data_received">
        <source-position filename="src/tree/dzl-tree-builder.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="drop_node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="TreeDropPosition" c:type="DzlTreeDropPosition"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="drag_node_delete">
        <source-position filename="src/tree/dzl-tree-builder.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="drag_node_received">
        <source-position filename="src/tree/dzl-tree-builder.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="drag_node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="drop_node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="TreeDropPosition" c:type="DzlTreeDropPosition"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_activated">
        <source-position filename="src/tree/dzl-tree-builder.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_collapsed">
        <source-position filename="src/tree/dzl-tree-builder.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_draggable">
        <source-position filename="src/tree/dzl-tree-builder.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_droppable">
        <source-position filename="src/tree/dzl-tree-builder.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_expanded">
        <source-position filename="src/tree/dzl-tree-builder.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_popup">
        <source-position filename="src/tree/dzl-tree-builder.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="menu" transfer-ownership="none">
            <type name="Gio.Menu" c:type="GMenu*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_selected">
        <source-position filename="src/tree/dzl-tree-builder.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_unselected">
        <source-position filename="src/tree/dzl-tree-builder.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="removed">
        <source-position filename="src/tree/dzl-tree-builder.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_tree"
              c:identifier="dzl_tree_builder_get_tree"
              glib:get-property="tree">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-builder.c"
             line="289">Gets the tree that owns the builder.</doc>
        <source-position filename="src/tree/dzl-tree-builder.h" line="86"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-builder.c"
               line="295">A #DzlTree or %NULL.</doc>
          <type name="Tree" c:type="DzlTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-builder.c"
                 line="291">A #DzlTreeBuilder.</doc>
            <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="tree" transfer-ownership="none" getter="get_tree">
        <type name="Tree"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.InitiallyUnowned" c:type="GInitiallyUnowned"/>
      </field>
      <glib:signal name="added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tree"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="build-children" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="build-node" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-data-get" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gtk.SelectionData"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-data-received" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="TreeDropPosition"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="Gdk.DragAction"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="Gtk.SelectionData"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-node-delete" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-node-received" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="TreeDropPosition"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="Gdk.DragAction"/>
          </parameter>
          <parameter name="p3" transfer-ownership="none">
            <type name="Gtk.SelectionData"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-collapsed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-draggable" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-droppable" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gtk.SelectionData"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-expanded" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-popup" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gio.Menu"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-selected" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-unselected" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tree"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TreeBuilderClass"
            c:type="DzlTreeBuilderClass"
            glib:is-gtype-struct-for="TreeBuilder">
      <source-position filename="src/tree/dzl-tree-builder.h" line="83"/>
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
      <field name="added">
        <callback name="added">
          <source-position filename="src/tree/dzl-tree-builder.h" line="35"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed">
          <source-position filename="src/tree/dzl-tree-builder.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_node">
        <callback name="build_node">
          <source-position filename="src/tree/dzl-tree-builder.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_children">
        <callback name="build_children">
          <source-position filename="src/tree/dzl-tree-builder.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="parent" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_activated">
        <callback name="node_activated">
          <source-position filename="src/tree/dzl-tree-builder.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_selected">
        <callback name="node_selected">
          <source-position filename="src/tree/dzl-tree-builder.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_unselected">
        <callback name="node_unselected">
          <source-position filename="src/tree/dzl-tree-builder.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_popup">
        <callback name="node_popup">
          <source-position filename="src/tree/dzl-tree-builder.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
            <parameter name="menu" transfer-ownership="none">
              <type name="Gio.Menu" c:type="GMenu*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_expanded">
        <callback name="node_expanded">
          <source-position filename="src/tree/dzl-tree-builder.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_collapsed">
        <callback name="node_collapsed">
          <source-position filename="src/tree/dzl-tree-builder.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_draggable">
        <callback name="node_draggable">
          <source-position filename="src/tree/dzl-tree-builder.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_droppable">
        <callback name="node_droppable">
          <source-position filename="src/tree/dzl-tree-builder.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_data_get">
        <callback name="drag_data_get">
          <source-position filename="src/tree/dzl-tree-builder.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_node_received">
        <callback name="drag_node_received">
          <source-position filename="src/tree/dzl-tree-builder.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="drag_node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
            <parameter name="drop_node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="TreeDropPosition" c:type="DzlTreeDropPosition"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Gdk.DragAction" c:type="GdkDragAction"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_data_received">
        <callback name="drag_data_received">
          <source-position filename="src/tree/dzl-tree-builder.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="drop_node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="TreeDropPosition" c:type="DzlTreeDropPosition"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Gdk.DragAction" c:type="GdkDragAction"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_node_delete">
        <callback name="drag_node_delete">
          <source-position filename="src/tree/dzl-tree-builder.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cell_data_func">
        <callback name="cell_data_func">
          <source-position filename="src/tree/dzl-tree-builder.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree" transfer-ownership="none">
              <type name="TreeBuilder" c:type="DzlTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="DzlTreeNode*"/>
            </parameter>
            <parameter name="cell" transfer-ownership="none">
              <type name="Gtk.CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="11">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="TreeClass"
            c:type="DzlTreeClass"
            glib:is-gtype-struct-for="Tree">
      <source-position filename="src/tree/dzl-tree.h" line="69"/>
      <field name="parent_class">
        <type name="Gtk.TreeViewClass" c:type="GtkTreeViewClass"/>
      </field>
      <field name="action">
        <callback name="action">
          <source-position filename="src/tree/dzl-tree.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Tree" c:type="DzlTree*"/>
            </parameter>
            <parameter name="action_group" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="action_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="param" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="populate_popup">
        <callback name="populate_popup">
          <source-position filename="src/tree/dzl-tree.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Tree" c:type="DzlTree*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="TreeDropPosition"
                 glib:type-name="DzlTreeDropPosition"
                 glib:get-type="dzl_tree_drop_position_get_type"
                 c:type="DzlTreeDropPosition">
      <member name="into"
              value="0"
              c:identifier="DZL_TREE_DROP_INTO"
              glib:nick="into"
              glib:name="DZL_TREE_DROP_INTO">
      </member>
      <member name="before"
              value="1"
              c:identifier="DZL_TREE_DROP_BEFORE"
              glib:nick="before"
              glib:name="DZL_TREE_DROP_BEFORE">
      </member>
      <member name="after"
              value="2"
              c:identifier="DZL_TREE_DROP_AFTER"
              glib:nick="after"
              glib:name="DZL_TREE_DROP_AFTER">
      </member>
    </enumeration>
    <callback name="TreeFilterFunc" c:type="DzlTreeFilterFunc">
      <doc xml:space="preserve"
           filename="src/tree/dzl-tree.h"
           line="45">Callback to check if @node should be visible.</doc>
      <source-position filename="src/tree/dzl-tree.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.h"
             line="50">%TRUE if @node should be visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="tree" transfer-ownership="none">
          <type name="Tree" c:type="DzlTree*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TreeFindFunc" c:type="DzlTreeFindFunc">
      <doc xml:space="preserve"
           filename="src/tree/dzl-tree.h"
           line="32">Callback to check @child, a child of @node, matches a lookup
request. Returns %TRUE if @child matches, %FALSE if not.</doc>
      <source-position filename="src/tree/dzl-tree.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree.h"
             line="38">%TRUE if @child matched</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="tree" transfer-ownership="none">
          <type name="Tree" c:type="DzlTree*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TreeNode"
           c:symbol-prefix="tree_node"
           c:type="DzlTreeNode"
           parent="GObject.InitiallyUnowned"
           glib:type-name="DzlTreeNode"
           glib:get-type="dzl_tree_node_get_type"
           glib:type-struct="TreeNodeClass">
      <source-position filename="src/tree/dzl-tree-types.h" line="44"/>
      <constructor name="new" c:identifier="dzl_tree_node_new">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="83">Creates a new #DzlTreeNode instance. This is handy for situations where you
do not want to subclass #DzlTreeNode.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="29"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="89">A #DzlTreeNode</doc>
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </return-value>
      </constructor>
      <method name="add_emblem" c:identifier="dzl_tree_node_add_emblem">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="403">Adds an emplem to be rendered on top of the node.

Use dzl_tree_node_remove_emblem() to remove an emblem.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="405">An #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="emblem_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="406">the icon-name of the emblem</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append" c:identifier="dzl_tree_node_append">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="180">Appends @child to the list of children owned by @node.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="182">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="183">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_emblems" c:identifier="dzl_tree_node_clear_emblems">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="454">Removes all emblems from @self.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="collapse" c:identifier="dzl_tree_node_collapse">
        <source-position filename="src/tree/dzl-tree-node.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="expand" c:identifier="dzl_tree_node_expand">
        <source-position filename="src/tree/dzl-tree-node.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="expand_ancestors" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_area" c:identifier="dzl_tree_node_get_area">
        <source-position filename="src/tree/dzl-tree-node.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children_possible"
              c:identifier="dzl_tree_node_get_children_possible"
              glib:get-property="children-possible">
        <source-position filename="src/tree/dzl-tree-node.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expanded" c:identifier="dzl_tree_node_get_expanded">
        <source-position filename="src/tree/dzl-tree-node.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_foreground_rgba"
              c:identifier="dzl_tree_node_get_foreground_rgba"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="1347">Gets the foreground-rgba to use for row text.

If %NULL, the default foreground color should be used.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="138"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="1355">A #GdkRGBA or %NULL</doc>
          <type name="Gdk.RGBA" c:type="const GdkRGBA*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="1349">a #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gicon"
              c:identifier="dzl_tree_node_get_gicon"
              glib:get-property="gicon">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="318">Fetch the GIcon, re-render if necessary</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="323">An #GIcon or %NULL.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="dzl_tree_node_get_icon_name"
              glib:get-property="icon-name">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="361">Fetches the icon-name of the icon to display, or NULL for no icon.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item"
              c:identifier="dzl_tree_node_get_item"
              glib:get-property="item">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="605">Gets a #GObject for the node, if one was set.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="611">A #GObject or %NULL.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="607">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter" c:identifier="dzl_tree_node_get_iter">
        <source-position filename="src/tree/dzl-tree-node.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="Gtk.TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="dzl_tree_node_get_parent"
              glib:get-property="parent">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="282">Retrieves the parent #DzlTreeNode for @node.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="288">A #DzlTreeNode.</doc>
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="284">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="dzl_tree_node_get_path">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="229">Gets a #GtkTreePath for @node.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="51"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="235">A #GtkTreePath if successful; otherwise %NULL.</doc>
          <type name="Gtk.TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="231">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reset_on_collapse"
              c:identifier="dzl_tree_node_get_reset_on_collapse"
              glib:get-property="reset-on-collapse">
        <source-position filename="src/tree/dzl-tree-node.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="dzl_tree_node_get_text"
              glib:get-property="text">
        <source-position filename="src/tree/dzl-tree-node.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree"
              c:identifier="dzl_tree_node_get_tree"
              glib:get-property="tree">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="97">Fetches the #DzlTree instance that owns the node.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="103">A #DzlTree.</doc>
          <type name="Tree" c:type="DzlTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="99">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_dim_label"
              c:identifier="dzl_tree_node_get_use_dim_label"
              glib:get-property="use-dim-label">
        <source-position filename="src/tree/dzl-tree-node.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="dzl_tree_node_get_use_markup"
              glib:get-property="use-markup">
        <source-position filename="src/tree/dzl-tree-node.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_emblem" c:identifier="dzl_tree_node_has_emblem">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="471">Checks to see if @emblem_name has been added to the #DzlTreeNode.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="478">%TRUE if @emblem_name is used by @self</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="473">An #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="emblem_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="474">a string containing the emblem name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="dzl_tree_node_insert" version="3.28">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="137">Inserts @child as a child of @self at @position.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="139">a #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="140">a #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="141">the position for the child</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_sorted" c:identifier="dzl_tree_node_insert_sorted">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="158">Inserts a @child as a child of @node, sorting it among the other children.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="160">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="161">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="162">A compare func to compare nodes.</doc>
            <type name="TreeNodeCompareFunc" c:type="DzlTreeNodeCompareFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="163">user data for @compare_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="dzl_tree_node_invalidate">
        <source-position filename="src/tree/dzl-tree-node.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_root" c:identifier="dzl_tree_node_is_root">
        <source-position filename="src/tree/dzl-tree-node.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="n_children" c:identifier="dzl_tree_node_n_children">
        <source-position filename="src/tree/dzl-tree-node.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="nth_child" c:identifier="dzl_tree_node_nth_child">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="1304">Gets the @nth child of @self or %NULL if it does not exist.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="58"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/tree/dzl-tree-node.c"
               line="1311">a #DzlTreeNode or %NULL</doc>
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="1306">a #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="1307">the index of the child</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="dzl_tree_node_prepend">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="196">Prepends @child to the list of children owned by @node.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="198">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="199">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rebuild"
              c:identifier="dzl_tree_node_rebuild"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="1395">Rebuilds a node, without invalidating children nodes. If you want to
ensure that children are also rebuilt, use dzl_tree_node_invalidate().</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="1397">a #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="dzl_tree_node_remove">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="212">Removes @child from the list of children owned by @node.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="214">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="215">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_emblem" c:identifier="dzl_tree_node_remove_emblem">
        <source-position filename="src/tree/dzl-tree-node.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="emblem_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select" c:identifier="dzl_tree_node_select">
        <source-position filename="src/tree/dzl-tree-node.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_children_possible"
              c:identifier="dzl_tree_node_set_children_possible"
              glib:set-property="children-possible">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="1192">If the node has not yet been built, setting this to %TRUE will add a
dummy child node. This dummy node will be removed when when the node
is built by the registered #DzlTreeBuilder instances.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="1194">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="children_possible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="1195">If the node has children.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_emblems" c:identifier="dzl_tree_node_set_emblems">
        <source-position filename="src/tree/dzl-tree-node.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="emblems" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_foreground_rgba"
              c:identifier="dzl_tree_node_set_foreground_rgba"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="1370">Sets the foreground-rgba to be used by the row text.

If @foreground_rgba is %NULL, the value is reset to the default.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="1372">a #DzlTreeNode</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="foreground_rgba"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="1373">A #GdkRGBA or %NULL</doc>
            <type name="Gdk.RGBA" c:type="const GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gicon"
              c:identifier="dzl_tree_node_set_gicon"
              glib:set-property="gicon">
        <source-position filename="src/tree/dzl-tree-node.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="dzl_tree_node_set_icon_name"
              glib:set-property="icon-name">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="374">Sets the icon name of the node. This is displayed in the pixbuf
cell of the DzlTree.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="376">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="377">The icon name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item"
              c:identifier="dzl_tree_node_set_item"
              glib:set-property="item">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="522">An optional object to associate with the node. This is handy to save needing
to subclass the #DzlTreeNode class.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="524">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="525">A #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reset_on_collapse"
              c:identifier="dzl_tree_node_set_reset_on_collapse"
              glib:set-property="reset-on-collapse">
        <source-position filename="src/tree/dzl-tree-node.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="reset_on_collapse" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="dzl_tree_node_set_text"
              glib:set-property="text">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="560">Sets the text of the node. This is displayed in the text
cell of the DzlTree.</doc>
        <source-position filename="src/tree/dzl-tree-node.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="562">A #DzlTreeNode.</doc>
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/tree/dzl-tree-node.c"
                 line="563">The node text.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_dim_label"
              c:identifier="dzl_tree_node_set_use_dim_label"
              glib:set-property="use-dim-label">
        <source-position filename="src/tree/dzl-tree-node.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="use_dim_label" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="dzl_tree_node_set_use_markup"
              glib:set-property="use-markup">
        <source-position filename="src/tree/dzl-tree-node.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_popover" c:identifier="dzl_tree_node_show_popover">
        <source-position filename="src/tree/dzl-tree-node.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="DzlTreeNode*"/>
          </instance-parameter>
          <parameter name="popover" transfer-ownership="none">
            <type name="Gtk.Popover" c:type="GtkPopover*"/>
          </parameter>
        </parameters>
      </method>
      <property name="children-possible"
                writable="1"
                transfer-ownership="none"
                setter="set_children_possible"
                getter="get_children_possible"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="856">This property allows for more lazy loading of nodes.

When a node becomes visible, we normally build its children nodes
so that we know if we need an expansion arrow. However, that can
be expensive when rendering directories with lots of subdirectories.

Using this, you can always show an arrow without building the children
and simply hide the arrow if there were in fact no children (upon
expansion).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expanded-icon-name"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="gicon"
                writable="1"
                transfer-ownership="none"
                setter="set_gicon"
                getter="get_gicon">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="894">The cached GIcon to display.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="883">An icon-name to display on the row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="item"
                writable="1"
                transfer-ownership="none"
                setter="set_item"
                getter="get_item">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="906">An optional #GObject to associate with the node.</doc>
        <type name="GObject.Object"/>
      </property>
      <property name="parent" transfer-ownership="none" getter="get_parent">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="918">The parent of the node.</doc>
        <type name="TreeNode"/>
      </property>
      <property name="reset-on-collapse"
                version="3.28"
                writable="1"
                transfer-ownership="none"
                setter="set_reset_on_collapse"
                getter="get_reset_on_collapse"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="930">The "reset-on-collapse" property denotes that all children should be
removed from the node when it's row is collapsed. It will also set
#DzlTreeNode:needs-build to %TRUE so the next expansion rebuilds the
children. This is useful for situations where you want to ensure the nodes
are up to date (refreshed) on every expansion.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="text"
                writable="1"
                transfer-ownership="none"
                setter="set_text"
                getter="get_text"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="960">Text to display on the tree node.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tree"
                writable="1"
                transfer-ownership="none"
                getter="get_tree">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="948">The tree the node belongs to.</doc>
        <type name="Tree"/>
      </property>
      <property name="use-dim-label"
                writable="1"
                transfer-ownership="none"
                setter="set_use_dim_label"
                getter="get_use_dim_label"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-markup"
                writable="1"
                transfer-ownership="none"
                setter="set_use_markup"
                getter="get_use_markup"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/tree/dzl-tree-node.c"
             line="972">If the "text" property includes #GMarkup.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TreeNodeClass"
            c:type="DzlTreeNodeClass"
            glib:is-gtype-struct-for="TreeNode">
      <source-position filename="src/tree/dzl-tree-types.h" line="44"/>
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
    </record>
    <callback name="TreeNodeCompareFunc" c:type="DzlTreeNodeCompareFunc">
      <source-position filename="src/tree/dzl-tree-types.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="TreeNode" c:type="DzlTreeNode*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Trie"
            c:type="DzlTrie"
            opaque="1"
            glib:type-name="DzlTrie"
            glib:get-type="dzl_trie_get_type"
            c:symbol-prefix="trie">
      <source-position filename="src/search/dzl-trie.h" line="30"/>
      <constructor name="new" c:identifier="dzl_trie_new">
        <doc xml:space="preserve"
             filename="src/search/dzl-trie.c"
             line="475">Creates a new #DzlTrie. When a value is removed from the trie, @value_destroy
will be called to allow you to release any resources.</doc>
        <source-position filename="src/search/dzl-trie.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/search/dzl-trie.c"
               line="482">A newly allocated #DzlTrie that should be freed
  with dzl_trie_unref().</doc>
          <type name="Trie" c:type="DzlTrie*"/>
        </return-value>
        <parameters>
          <parameter name="value_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="477">A #GDestroyNotify, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="destroy" c:identifier="dzl_trie_destroy">
        <doc xml:space="preserve"
             filename="src/search/dzl-trie.c"
             line="820">This is an alias for dzl_trie_unref().</doc>
        <source-position filename="src/search/dzl-trie.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="822">A #DzlTrie or %NULL.</doc>
            <type name="Trie" c:type="DzlTrie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="dzl_trie_insert">
        <doc xml:space="preserve"
             filename="src/search/dzl-trie.c"
             line="498">Inserts @value into @trie located with @key.</doc>
        <source-position filename="src/search/dzl-trie.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="500">A #DzlTrie.</doc>
            <type name="Trie" c:type="DzlTrie*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="501">The key to insert.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="502">The value to insert.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="dzl_trie_lookup">
        <doc xml:space="preserve"
             filename="src/search/dzl-trie.c"
             line="531">Looks up @key in @trie and returns the value associated.</doc>
        <source-position filename="src/search/dzl-trie.h" line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/search/dzl-trie.c"
               line="538">The value inserted or %NULL.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="533">A #DzlTrie.</doc>
            <type name="Trie" c:type="DzlTrie*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="534">The key to lookup.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="dzl_trie_ref">
        <source-position filename="src/search/dzl-trie.h" line="44"/>
        <return-value transfer-ownership="full">
          <type name="Trie" c:type="DzlTrie*"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <type name="Trie" c:type="DzlTrie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="dzl_trie_remove">
        <doc xml:space="preserve"
             filename="src/search/dzl-trie.c"
             line="562">Removes @key from @trie, possibly destroying the value associated with
the key.</doc>
        <source-position filename="src/search/dzl-trie.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/search/dzl-trie.c"
               line="570">%TRUE if @key was found, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="564">A #DzlTrie.</doc>
            <type name="Trie" c:type="DzlTrie*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="565">The key to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="traverse" c:identifier="dzl_trie_traverse">
        <doc xml:space="preserve"
             filename="src/search/dzl-trie.c"
             line="733">Traverses all nodes of @trie according to the parameters. For each node
matching the traversal parameters, @func will be executed.

Only %G_PRE_ORDER and %G_POST_ORDER are supported for @order.

If @max_depth is less than zero, the entire tree will be traversed.
If max_depth is 1, then only the root will be traversed.</doc>
        <source-position filename="src/search/dzl-trie.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="735">A #DzlTrie.</doc>
            <type name="Trie" c:type="DzlTrie*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="736">The key to start traversal from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="order" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="737">The order to traverse.</doc>
            <type name="GLib.TraverseType" c:type="GTraverseType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="738">The flags for which nodes to callback.</doc>
            <type name="GLib.TraverseFlags" c:type="GTraverseFlags"/>
          </parameter>
          <parameter name="max_depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="739">the maximum depth to process.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="740">The func to execute for each matching node.</doc>
            <type name="TrieTraverseFunc" c:type="DzlTrieTraverseFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="741">User data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="dzl_trie_unref">
        <doc xml:space="preserve"
             filename="src/search/dzl-trie.c"
             line="789">Drops the reference count by one on @trie. When it reaches zero, the
structure is freed.</doc>
        <source-position filename="src/search/dzl-trie.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/search/dzl-trie.c"
                 line="791">A #DzlTrie or %NULL.</doc>
            <type name="Trie" c:type="DzlTrie*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="TrieTraverseFunc" c:type="DzlTrieTraverseFunc">
      <source-position filename="src/search/dzl-trie.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="dzl_trie" transfer-ownership="none">
          <type name="Trie" c:type="DzlTrie*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="VERSION_S" value="3.44.0" c:type="DZL_VERSION_S">
      <doc xml:space="preserve"
           filename="src/dzl-version.h"
           line="61">Dazzle version, encoded as a string, useful for printing and
concatenation.</doc>
      <source-position filename="src/dzl-version.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="WidgetActionGroup"
           c:symbol-prefix="widget_action_group"
           c:type="DzlWidgetActionGroup"
           parent="GObject.Object"
           glib:type-name="DzlWidgetActionGroup"
           glib:get-type="dzl_widget_action_group_get_type"
           glib:type-struct="WidgetActionGroupClass">
      <source-position filename="src/actions/dzl-widget-action-group.h"
                       line="31"/>
      <implements name="Gio.ActionGroup"/>
      <function name="attach" c:identifier="dzl_widget_action_group_attach">
        <doc xml:space="preserve"
             filename="src/actions/dzl-widget-action-group.c"
             line="613">Helper function to create an #DzlWidgetActionGroup and attach
it to @widget using the group name @group_name.</doc>
        <source-position filename="src/actions/dzl-widget-action-group.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-widget-action-group.c"
                 line="615">A #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="gpointer"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/actions/dzl-widget-action-group.c"
                 line="616">the group name to use for the action group</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="dzl_widget_action_group_new">
        <source-position filename="src/actions/dzl-widget-action-group.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/actions/dzl-widget-action-group.c"
               line="603">An #DzlWidgetActionGroup.</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <method name="set_action_enabled"
              c:identifier="dzl_widget_action_group_set_action_enabled">
        <source-position filename="src/actions/dzl-widget-action-group.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WidgetActionGroup" c:type="DzlWidgetActionGroup*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="widget"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
    </class>
    <record name="WidgetActionGroupClass"
            c:type="DzlWidgetActionGroupClass"
            glib:is-gtype-struct-for="WidgetActionGroup">
      <source-position filename="src/actions/dzl-widget-action-group.h"
                       line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_GraphColumnClass" c:type="_DzlGraphColumnClass">
      <source-position filename="src/graphing/dzl-graph-column.h" line="36"/>
      <field name="parent" writable="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function name="cairo_region_create_from_clip_extents"
              c:identifier="dzl_cairo_region_create_from_clip_extents">
      <doc xml:space="preserve"
           filename="src/util/dzl-cairo.c"
           line="34">@cr a cairo context
Creates a region from the extents of the context's current clip area.</doc>
      <source-position filename="src/util/dzl-cairo.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util/dzl-cairo.c"
             line="40">A #CairoRegion.</doc>
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_rounded_rectangle"
              c:identifier="dzl_cairo_rounded_rectangle">
      <doc xml:space="preserve"
           filename="src/util/dzl-cairo.c"
           line="59">Adds a rounded rectangle to @cr's current path.</doc>
      <source-position filename="src/util/dzl-cairo.h" line="31"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-cairo.c"
               line="61">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-cairo.c"
               line="62">a #GdkRectangle to draw</doc>
          <type name="Gdk.Rectangle" c:type="const GdkRectangle*"/>
        </parameter>
        <parameter name="x_radius" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-cairo.c"
               line="63">the radius of the corners on the X axis</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_radius" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-cairo.c"
               line="64">the radius of the corners on the Y axis</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="cancellable_chain"
              c:identifier="dzl_cancellable_chain"
              version="3.28">
      <doc xml:space="preserve"
           filename="src/util/dzl-cancellable.c"
           line="130">If both @self and @other are not %NULL, then the cancellation of
@other will be propagated to @self if @other is cancelled.

If @self and @other are the same, @self is returned and no additional
chaining will occur.

If @self and @other are %NULL, then %NULL is returned.
If @self is non-%NULL, it will be returned.
If @self is %NULL and @other is non-%NULL, other will be
returned. This is useful to succinctly chain cancellables like:

|[
cancellable = dzl_cancellable_chain (cancellable, self-&gt;cancellable);
]|</doc>
      <source-position filename="src/util/dzl-cancellable.h" line="28"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/util/dzl-cancellable.c"
             line="150">a #GCancellable or %NULL</doc>
        <type name="Gio.Cancellable" c:type="GCancellable*"/>
      </return-value>
      <parameters>
        <parameter name="self"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/util/dzl-cancellable.c"
               line="132">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="other"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/util/dzl-cancellable.c"
               line="133">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="clear_pointer"
                    c:identifier="dzl_clear_pointer"
                    introspectable="0">
      <source-position filename="src/util/dzl-macros.h" line="58"/>
      <parameters>
        <parameter name="pptr">
        </parameter>
        <parameter name="free_func">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="clear_weak_pointer"
                    c:identifier="dzl_clear_weak_pointer"
                    introspectable="0">
      <source-position filename="src/util/dzl-macros.h" line="43"/>
      <parameters>
        <parameter name="ptr">
        </parameter>
      </parameters>
    </function-macro>
    <function name="counter_arena_get_default"
              c:identifier="dzl_counter_arena_get_default"
              moved-to="CounterArena.get_default">
      <source-position filename="src/util/dzl-counter.h" line="283"/>
      <return-value transfer-ownership="full">
        <type name="CounterArena" c:type="DzlCounterArena*"/>
      </return-value>
    </function>
    <function name="dnd_get_uri_list"
              c:identifier="dzl_dnd_get_uri_list"
              deprecated="1">
      <doc xml:space="preserve"
           filename="src/util/dzl-dnd.c"
           line="31">Create a list of valid uri's from a uri-list drop.</doc>
      <doc-deprecated xml:space="preserve">Use gtk_selection_data_get_uris() instead; it is exactly the same.</doc-deprecated>
      <source-position filename="src/util/dzl-dnd.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util/dzl-dnd.c"
             line="37">a string array which will hold the uris or
  %NULL if there were no valid uris. g_strfreev should be used when
  the string array is no longer used</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="selection_data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-dnd.c"
               line="33">the #GtkSelectionData from drag_data_received</doc>
          <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="dzl-application">
      <doc xml:space="preserve"
           filename="src/app/dzl-application.c"
           line="26">#DzlApplication is an extension of #GtkApplication with extra features to
integrate various libdazzle subsystems with your application. We suggest
subclassing #DzlApplication.

The #DzlApplication class provides:

 - Automatic menu merging including the "app-menu".
 - Automatic Icon loading based on resources-base-path.
 - Automatic theme tracking to load CSS variants based on user themes.

The #DzlApplication class automatically manages loading alternate CSS based
on the active theme by tracking #GtkSettings:gtk-theme-name. Additionally,
it supports menu merging including the base "app-menu" as loaded by automatic
#GResources in #GApplication:resource-base-path. It will autom</doc>
    </docsection>
    <docsection name="dzl-application-window">
      <doc xml:space="preserve"
           filename="src/app/dzl-application-window.c"
           line="39">The #DzlApplicationWindow class provides a #GtkApplicationWindow subclass
that integrates well with #DzlApplication. It provides features such as:

 - Integration with the #DzlShortcutManager for capture/bubble keyboard
   input events.
 - Native support for fullscreen state by re-parenting the #GtkHeaderBar as
   necessary. #DzlApplicationWindow does expect you to use GtkHeaderBar.</doc>
    </docsection>
    <docsection name="dzl-bin">
      <doc xml:space="preserve"
           filename="src/widgets/dzl-bin.c"
           line="23">This is just a #GtkBin class that also allows for various styling with
CSS over what can be done in GtkBin directly.</doc>
    </docsection>
    <docsection name="dzl-bolding-label">
      <doc xml:space="preserve"
           filename="src/widgets/dzl-bolding-label.c"
           line="25">This is a GtkLabel widget that will allocate extra space if necessary
so that the size request will not change when the contents of the
label are bolded.

This might be useful when you want to change a label based on some
selection state without it affecting the size request or layout.

Remember that bold and non-bold variants of fonts can often be very
different in terms of styling. To reduce the chances that you see
shifts in placement, you may want to set the #GtkLabel:xalign or
#GtkLabel:halign properties to 0.0 or %GTK_ALIGN_START respectively.</doc>
    </docsection>
    <docsection name="dzl-cairo">
      <doc xml:space="preserve"
           filename="src/util/dzl-cairo.c"
           line="25">[Cairo](https://cairographics.org) is the graphics library that GTK uses to draw widgets.
This section contains functions for commonly used calculations with Cairo objects.</doc>
    </docsection>
    <docsection name="dzl-date-time">
      <doc xml:space="preserve"
           filename="src/util/dzl-date-time.c"
           line="25">This section provides a few functions to help with displaying dates and times in an
easily readable way.</doc>
    </docsection>
    <docsection name="dzl-frame-source">
      <doc xml:space="preserve"
           filename="src/animation/dzl-frame-source.c"
           line="25">If you are working with something that is not a #GtkWidget, getting
access to a frame-clock is sometimes not possible. This can be used
as a suitable fallback that approximates a frame-rate.

If you have access to a #GdkFrameClock, in most cases you'll want that
instead of using this.</doc>
    </docsection>
    <docsection name="dzl-fuzzy-mutable-index">
      <doc xml:space="preserve"
           filename="src/search/dzl-fuzzy-mutable-index.c"
           line="27">#DzlFuzzyMutableIndex provides a fulltext index that focuses around fuzzy
matching words. This version of the datastructure is focused around
in-memory storage. This makes mutability performance of adding or removing
items from the corpus simpler.

If you need mostly read-only indexes, you might consider using
#DzlFuzzyIndex and #DzlFuzzyIndexBuilder which can create a disk-based file
and mmap() a read-only version of the data set.

It is a programming error to modify #Fuzzy while holding onto an array
of #FuzzyMatch elements. The position of strings within the DzlFuzzyMutableIndexMatch
may no longer be valid.</doc>
    </docsection>
    <docsection name="dzl-pattern-spec">
      <doc xml:space="preserve"
           filename="src/search/dzl-pattern-spec.c"
           line="33">This works similar to #GPatternSpec except the query syntax is different.
It tries to match word boundaries, but with matching partial words up
to those boundaries. For example, "gtk widg" would match "gtk_widget_show".
Word boundaries include '_' and ' '. If any character is uppercase, then
case sensitivity is used.</doc>
    </docsection>
    <docsection name="dzl-properties-group">
      <doc xml:space="preserve"
           filename="src/actions/dzl-properties-group.c"
           line="26">This class is a #GActionGroup which provides stateful access to
properties in a #GObject. This can be useful when you want to
expose properties from a GObject as a #GAction, espectially with
use in GtkApplications.

Call dzl_properties_group_add_property() to setup the mappings
for action-name to property-name for the actions you'd like to
add.

Not all property types can be supported. What is current supported
are properties of type:

 %G_TYPE_INT
 %G_TYPE_UINT
 %G_TYPE_BOOLEAN
 %G_TYPE_STRING
 %G_TYPE_DOUBLE</doc>
    </docsection>
    <docsection name="dzl-recursive-file-monitor">
      <doc xml:space="preserve"
           filename="src/files/dzl-recursive-file-monitor.c"
           line="31">This works by creating a #GFileMonitor for each directory underneath a root
directory (and recursively beyond that).

This is only designed for use on Linux, where we are using a single inotify
FD. You can still hit the max watch limit, but it is much higher than the FD
limit.</doc>
    </docsection>
    <docsection name="dzl-shortcut-tooltip">
      <doc xml:space="preserve"
           filename="src/shortcuts/dzl-shortcut-tooltip.c"
           line="32">This class is used to display a fancy shortcut on a tooltip along with
information about the shortcut.

The shortcut must be registered with Dazzle using the DzlShortcutManager
and have a registered command-id.

The display text for the shortcut will match that shown in the shortcuts
window help.</doc>
    </docsection>
    <docsection name="dzl-shortcuts-group">
      <doc xml:space="preserve"
           filename="src/shortcuts/dzl-shortcuts-group.c"
           line="26">A DzlShortcutsGroup represents a group of related keyboard shortcuts
or gestures. The group has a title. It may optionally be associated with
a view of the application, which can be used to show only relevant shortcuts
depending on the application context.

This widget is only meant to be used with #DzlShortcutsWindow.</doc>
    </docsection>
    <docsection name="dzl-shortcuts-section">
      <doc xml:space="preserve"
           filename="src/shortcuts/dzl-shortcuts-section.c"
           line="27">A DzlShortcutsSection collects all the keyboard shortcuts and gestures
for a major application mode. If your application needs multiple sections,
you should give each section a unique #DzlShortcutsSection:section-name and
a #DzlShortcutsSection:title that can be shown in the section selector of
the DzlShortcutsWindow.

The #DzlShortcutsSection:max-height property can be used to influence how
the groups in the section are distributed over pages and columns.

This widget is only meant to be used with #DzlShortcutsWindow.</doc>
    </docsection>
    <docsection name="dzl-shortcuts-shortcut">
      <doc xml:space="preserve"
           filename="src/shortcuts/dzl-shortcuts-shortcut.c"
           line="27">A DzlShortcutsShortcut represents a single keyboard shortcut or gesture
with a short text. This widget is only meant to be used with #DzlShortcutsWindow.</doc>
    </docsection>
    <docsection name="dzl-shortcuts-window">
      <doc xml:space="preserve"
           filename="src/shortcuts/dzl-shortcuts-window.c"
           line="29">A DzlShortcutsWindow shows brief information about the keyboard shortcuts
and gestures of an application. The shortcuts can be grouped, and you can
have multiple sections in this window, corresponding to the major modes of
your application.

Additionally, the shortcuts can be filtered by the current view, to avoid
showing information that is not relevant in the current application context.

The recommended way to construct a DzlShortcutsWindow is with GtkBuilder,
by populating a #DzlShortcutsWindow with one or more #DzlShortcutsSection
objects, which contain #DzlShortcutsGroups that in turn contain objects of
class #DzlShortcutsShortcut.

# A simple example:

![](gedit-shortcuts.png)

This example has as single section. As you can see, the shortcut groups
are arranged in columns, and spread across several pages if there are too
many to find on a single page.

The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-gedit.ui).

# An example with multiple views:

![](clocks-shortcuts.png)

This example shows a #DzlShortcutsWindow that has been configured to show only
the shortcuts relevant to the "stopwatch" view.

The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-clocks.ui).

# An example with multiple sections:

![](builder-shortcuts.png)

This example shows a #DzlShortcutsWindow with two sections, "Editor Shortcuts"
and "Terminal Shortcuts".

The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-builder.ui).</doc>
    </docsection>
    <docsection name="dzl-trie">
      <doc xml:space="preserve"
           filename="src/search/dzl-trie.c"
           line="28">The #DzlTrie struct and its associated functions provide a DzlTrie data structure,
where nodes in the tree can contain arbitrary data.

To create a new #DzlTrie use dzl_trie_new(). You can free it with dzl_trie_free().
To insert a key and value pair into the #DzlTrie use dzl_trie_insert().
To remove a key from the #DzlTrie use dzl_trie_remove().
To traverse all children of the #DzlTrie from a given key use dzl_trie_traverse().</doc>
    </docsection>
    <docsection name="dzl-version">
      <doc xml:space="preserve"
           filename="src/dzl-version.h"
           line="26">Dazzle provides macros to check the version of the library at compile-time</doc>
    </docsection>
    <function name="file_manager_show"
              c:identifier="dzl_file_manager_show"
              throws="1">
      <source-position filename="src/util/dzl-file-manager.h" line="29"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="frame_source_add" c:identifier="dzl_frame_source_add">
      <doc xml:space="preserve"
           filename="src/animation/dzl-frame-source.c"
           line="113">Creates a new frame source that will execute when the timeout interval
for the source has elapsed. The timing will try to synchronize based
on the end time of the animation.</doc>
      <source-position filename="src/animation/dzl-frame-source.h" line="29"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/animation/dzl-frame-source.c"
             line="123">A source id that can be removed with g_source_remove().</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="frames_per_sec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/animation/dzl-frame-source.c"
               line="115">Target frames per second.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/animation/dzl-frame-source.c"
               line="116">A #GSourceFunc to execute.</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/animation/dzl-frame-source.c"
               line="117">User data for @callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="frame_source_add_full"
              c:identifier="dzl_frame_source_add_full">
      <source-position filename="src/animation/dzl-frame-source.h" line="33"/>
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="frames_per_sec" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="notified"
                   closure="3"
                   destroy="4">
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" scope="async">
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="fuzzy_highlight" c:identifier="dzl_fuzzy_highlight">
      <source-position filename="src/search/dzl-fuzzy-mutable-index.h"
                       line="73"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="query" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="case_sensitive" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_date_time_format_for_display"
              c:identifier="dzl_g_date_time_format_for_display">
      <doc xml:space="preserve"
           filename="src/util/dzl-date-time.c"
           line="34">Helper function to create a human-friendly string describing approximately
how long ago a #GDateTime is.</doc>
      <source-position filename="src/util/dzl-date-time.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util/dzl-date-time.c"
             line="41">A newly allocated string describing the
  date and time imprecisely such as "Yesterday".</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-date-time.c"
               line="36">A #GDateTime</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_time_span_to_label"
              c:identifier="dzl_g_time_span_to_label">
      <doc xml:space="preserve"
           filename="src/util/dzl-date-time.c"
           line="83">Creates a string describing the time span in hours, minutes, and seconds.
For example, a time span of three and a half minutes would be "3:30".
2 days, 3 hours, 6 minutes, and 20 seconds would be "51:06:20".</doc>
      <source-position filename="src/util/dzl-date-time.h" line="31"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util/dzl-date-time.c"
             line="91">A newly allocated string describing the time span.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="span" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-date-time.c"
               line="85">the span of time</doc>
          <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_time_span_to_label_mapping"
              c:identifier="dzl_g_time_span_to_label_mapping">
      <doc xml:space="preserve"
           filename="src/util/dzl-date-time.c"
           line="117">A #GBindingTransformFunc to transform a time span into a string label using
dzl_g_time_span_to_label().</doc>
      <source-position filename="src/util/dzl-date-time.h" line="33"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="binding" transfer-ownership="none">
          <type name="GObject.Binding" c:type="GBinding*"/>
        </parameter>
        <parameter name="from_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="to_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_variant_hash" c:identifier="dzl_g_variant_hash">
      <source-position filename="src/util/dzl-variant.h" line="29"/>
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdk_synthesize_event_key"
              c:identifier="dzl_gdk_synthesize_event_key"
              introspectable="0">
      <source-position filename="src/util/dzl-gdk.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util/dzl-gdk.c"
             line="30">A #GdkEventKey</doc>
        <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="ch" transfer-ownership="none">
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdk_synthesize_event_keyval"
              c:identifier="dzl_gdk_synthesize_event_keyval"
              introspectable="0">
      <source-position filename="src/util/dzl-gdk.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util/dzl-gdk.c"
             line="106">A #GdkEventKey</doc>
        <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="get_current_cpu"
                    c:identifier="dzl_get_current_cpu"
                    introspectable="0">
      <source-position filename="src/util/dzl-counter.h" line="163"/>
    </function-macro>
    <function name="get_current_cpu_call"
              c:identifier="dzl_get_current_cpu_call">
      <source-position filename="src/util/dzl-counter.h" line="281"/>
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="gtk_list_store_insert_sorted"
              c:identifier="dzl_gtk_list_store_insert_sorted"
              version="3.26">
      <doc xml:space="preserve"
           filename="src/util/dzl-gtk.c"
           line="511">This function will binary search the contents of @store looking for the
location to insert a new row.

@compare_column must be the index of a column that is a %G_TYPE_POINTER,
%G_TYPE_BOXED or %G_TYPE_OBJECT based column.

@compare_func will be called with @key as the first parameter and the
value from the #GtkListStore row as the second parameter. The third and
final parameter is @compare_data.</doc>
      <source-position filename="src/util/dzl-gtk.h" line="68"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="store" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="513">A #GtkListStore</doc>
          <type name="Gtk.ListStore" c:type="GtkListStore*"/>
        </parameter>
        <parameter name="iter"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="514">A location for a #GtkTextIter</doc>
          <type name="Gtk.TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="key"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="515">A key to compare to when binary searching</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="compare_column" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="516">the column containing the data to compare</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="compare_func"
                   transfer-ownership="none"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="517">A callback to compare</doc>
          <type name="GLib.CompareDataFunc" c:type="GCompareDataFunc"/>
        </parameter>
        <parameter name="compare_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="518">data for @compare_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_text_buffer_remove_tag"
              c:identifier="dzl_gtk_text_buffer_remove_tag">
      <doc xml:space="preserve"
           filename="src/util/dzl-gtk.c"
           line="254">Like gtk_text_buffer_remove_tag() but allows specifying that the tags
should be removed one at a time to avoid over-damaging the views
displaying @buffer.</doc>
      <source-position filename="src/util/dzl-gtk.h" line="62"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
        <parameter name="tag" transfer-ownership="none">
          <type name="Gtk.TextTag" c:type="GtkTextTag*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="minimal_damage" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_action" c:identifier="dzl_gtk_widget_action">
      <source-position filename="src/util/dzl-gtk.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="param" transfer-ownership="none">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_action_set"
              c:identifier="dzl_gtk_widget_action_set"
              introspectable="0">
      <source-position filename="src/util/dzl-gtk.h" line="29"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="first_property" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_action_with_string"
              c:identifier="dzl_gtk_widget_action_with_string">
      <source-position filename="src/util/dzl-gtk.h" line="40"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="param" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_add_style_class"
              c:identifier="dzl_gtk_widget_add_style_class">
      <source-position filename="src/util/dzl-gtk.h" line="53"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="class_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_find_child_typed"
              c:identifier="dzl_gtk_widget_find_child_typed">
      <doc xml:space="preserve"
           filename="src/util/dzl-gtk.c"
           line="222">Tries to locate a widget in a hierarchy given it's #GType.

There is not an efficient implementation of this method, so use it
only when the hierarchy of widgets is small.</doc>
      <source-position filename="src/util/dzl-gtk.h" line="59"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/util/dzl-gtk.c"
             line="230">A widget or %NULL</doc>
        <type name="Gtk.Widget" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_get_relative"
              c:identifier="dzl_gtk_widget_get_relative">
      <doc xml:space="preserve"
           filename="src/util/dzl-gtk.c"
           line="677">This is similar to gtk_widget_get_ancestor(), but looks for relatives
via properties such as #GtkPopover:relative-to and others.</doc>
      <source-position filename="src/util/dzl-gtk.h" line="75"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/util/dzl-gtk.c"
             line="685">A #GtkWidget or %NULL.</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="679">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="relative_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="680">the type of widget to locate</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_hide_with_fade"
              c:identifier="dzl_gtk_widget_hide_with_fade">
      <source-position filename="src/util/dzl-gtk.h" line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_is_ancestor_or_relative"
              c:identifier="dzl_gtk_widget_is_ancestor_or_relative"
              version="3.26">
      <doc xml:space="preserve"
           filename="src/util/dzl-gtk.c"
           line="643">This function is like gtk_widget_is_ancestor() except that it checks
various relative widgets that are not in the direct hierarchy of
widgets. That includes #GtkMenu:attach-widget,
#GtkPopover:relative-to, and #GtkWindow:transient-for.</doc>
      <source-position filename="src/util/dzl-gtk.h" line="78"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/util/dzl-gtk.c"
             line="653">%TRUE if @ancestor is an ancestor or relative for @widget.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="645">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="ancestor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="646">a #GtkWidget that might be an ancestor</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_mux_action_groups"
              c:identifier="dzl_gtk_widget_mux_action_groups">
      <doc xml:space="preserve"
           filename="src/util/dzl-gtk.c"
           line="393">This function will find all of the actions on @from_widget in various
groups and add them to @widget. As this just copies the action groups
over, note that it does not allow for muxing items within the same
group.

You should specify a key for @mux_key so that if the same mux key is
seen again, the previous muxings will be removed.</doc>
      <source-position filename="src/util/dzl-gtk.h" line="45"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="395">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="from_widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="396">A #GtkWidget containing the groups to copy</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="mux_key"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/util/dzl-gtk.c"
               line="397">a unique key to represent the muxing</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_remove_style_class"
              c:identifier="dzl_gtk_widget_remove_style_class">
      <source-position filename="src/util/dzl-gtk.h" line="56"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="class_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_show_with_fade"
              c:identifier="dzl_gtk_widget_show_with_fade">
      <source-position filename="src/util/dzl-gtk.h" line="51"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="heap_index"
                    c:identifier="dzl_heap_index"
                    introspectable="0">
      <source-position filename="src/util/dzl-heap.h" line="30"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="t">
        </parameter>
        <parameter name="i">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="heap_insert_val"
                    c:identifier="dzl_heap_insert_val"
                    introspectable="0">
      <source-position filename="src/util/dzl-heap.h" line="29"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="v">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="heap_peek"
                    c:identifier="dzl_heap_peek"
                    introspectable="0">
      <source-position filename="src/util/dzl-heap.h" line="31"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="t">
        </parameter>
      </parameters>
    </function-macro>
    <function name="levenshtein" c:identifier="dzl_levenshtein">
      <source-position filename="src/search/dzl-levenshtein.h" line="29"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="needle" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="haystack" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_animate"
              c:identifier="dzl_object_animate"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/animation/dzl-animation.c"
           line="1143">Animates the properties of @object. The can be set in a similar manner to g_object_set(). They
will be animated from their current value to the target value over the time period.</doc>
      <source-position filename="src/animation/dzl-animation.h" line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="1153">A #DzlAnimation.
Side effects: None.</doc>
        <type name="Animation" c:type="DzlAnimation*"/>
      </return-value>
      <parameters>
        <parameter name="object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1145">A #GObject.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1146">The animation mode.</doc>
          <type name="AnimationMode" c:type="DzlAnimationMode"/>
        </parameter>
        <parameter name="duration_msec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1147">The duration in milliseconds.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="frame_clock" transfer-ownership="none">
          <type name="Gdk.FrameClock" c:type="GdkFrameClock*"/>
        </parameter>
        <parameter name="first_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1148">The first property to animate.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="object_animate_full"
              c:identifier="dzl_object_animate_full"
              introspectable="0">
      <source-position filename="src/animation/dzl-animation.h" line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="1182">A #DzlAnimation.</doc>
        <type name="Animation" c:type="DzlAnimation*"/>
      </return-value>
      <parameters>
        <parameter name="object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <type name="AnimationMode" c:type="DzlAnimationMode"/>
        </parameter>
        <parameter name="duration_msec" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="frame_clock" transfer-ownership="none">
          <type name="Gdk.FrameClock" c:type="GdkFrameClock*"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" scope="async">
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
        <parameter name="notify_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="first_property" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="object_animatev"
              c:identifier="dzl_object_animatev"
              introspectable="0">
      <source-position filename="src/animation/dzl-animation.h" line="60"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/animation/dzl-animation.c"
             line="1035">A #DzlAnimation.</doc>
        <type name="Animation" c:type="DzlAnimation*"/>
      </return-value>
      <parameters>
        <parameter name="object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1028">A #GObject.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1029">The animation mode.</doc>
          <type name="AnimationMode" c:type="DzlAnimationMode"/>
        </parameter>
        <parameter name="duration_msec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1030">The duration in milliseconds.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="frame_clock"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1031">The #GdkFrameClock to synchronize to.</doc>
          <type name="Gdk.FrameClock" c:type="GdkFrameClock*"/>
        </parameter>
        <parameter name="first_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1032">The first property to animate.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/animation/dzl-animation.c"
               line="1033">A variadac list of arguments</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="overlay_add_child" c:identifier="dzl_overlay_add_child">
      <source-position filename="src/panel/dzl-dock-overlay.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <type name="DockOverlay" c:type="DzlDockOverlay*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_font_description_to_css"
              c:identifier="dzl_pango_font_description_to_css">
      <doc xml:space="preserve"
           filename="src/util/dzl-pango.c"
           line="43">This function will generate CSS suitable for Gtk's CSS engine
based on the properties of the #PangoFontDescription.</doc>
      <source-position filename="src/util/dzl-pango.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util/dzl-pango.c"
             line="49">A newly allocated string containing the
   CSS describing the font description.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="font_desc" transfer-ownership="none">
          <type name="Pango.FontDescription"
                c:type="const PangoFontDescription*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rgba_shade" c:identifier="dzl_rgba_shade">
      <doc xml:space="preserve"
           filename="src/util/dzl-rgba.c"
           line="192">Creates a shade of the color @rgba by multiplying its saturation and lightness by @k.

Values of @k greater than 1 will make the color brighter, while values less than 1 will make it
darker. The alpha value will remain the same.</doc>
      <source-position filename="src/util/dzl-rgba.h" line="29"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="rgba" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-rgba.c"
               line="194">a #GdkRGBA to shade</doc>
          <type name="Gdk.RGBA" c:type="const GdkRGBA*"/>
        </parameter>
        <parameter name="dst"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-rgba.c"
               line="195">the resulting shade</doc>
          <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util/dzl-rgba.c"
               line="196">the factor by which to shade the input color</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="ring_append_val"
                    c:identifier="dzl_ring_append_val"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util/dzl-ring.h"
           line="28">Appends a value to the ring buffer.  @val must be a variable as it is
referenced to.</doc>
      <source-position filename="src/util/dzl-ring.h" line="38"/>
      <parameters>
        <parameter name="ring">
          <doc xml:space="preserve"
               filename="src/util/dzl-ring.h"
               line="30">A #DzlRing.</doc>
        </parameter>
        <parameter name="val">
          <doc xml:space="preserve"
               filename="src/util/dzl-ring.h"
               line="31">A value to append to the #DzlRing.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ring_get_index"
                    c:identifier="dzl_ring_get_index"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util/dzl-ring.h"
           line="56">Retrieves the value at the given index from the #DzlRing.  The value
is cast to @type.  You may retrieve a pointer to the value within the
array by using &amp;.

[[
gdouble *v = &amp;dzl_ring_get_index(ring, gdouble, 0);
gdouble v = dzl_ring_get_index(ring, gdouble, 0);
]]</doc>
      <source-position filename="src/util/dzl-ring.h" line="73"/>
      <parameters>
        <parameter name="ring">
          <doc xml:space="preserve"
               filename="src/util/dzl-ring.h"
               line="58">A #DzlRing.</doc>
        </parameter>
        <parameter name="type">
          <doc xml:space="preserve"
               filename="src/util/dzl-ring.h"
               line="59">The type to extract.</doc>
        </parameter>
        <parameter name="i">
          <doc xml:space="preserve"
               filename="src/util/dzl-ring.h"
               line="60">The index within the #DzlRing relative to the current position.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="set_weak_pointer"
                    c:identifier="dzl_set_weak_pointer"
                    introspectable="0">
      <source-position filename="src/util/dzl-macros.h" line="44"/>
      <parameters>
        <parameter name="ptr">
        </parameter>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function name="shortcut_chord_equal"
              c:identifier="dzl_shortcut_chord_equal"
              moved-to="ShortcutChord.equal">
      <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                       line="74"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data1"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="data2"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="shortcut_chord_hash"
              c:identifier="dzl_shortcut_chord_hash"
              moved-to="ShortcutChord.hash">
      <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                       line="72"/>
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="shortcut_chord_table_get_type"
              c:identifier="dzl_shortcut_chord_table_get_type">
      <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                       line="81"/>
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="shortcut_chord_table_new"
              c:identifier="dzl_shortcut_chord_table_new"
              moved-to="ShortcutChordTable.new"
              introspectable="0">
      <source-position filename="src/shortcuts/dzl-shortcut-chord.h"
                       line="83"/>
      <return-value>
        <type name="ShortcutChordTable" c:type="DzlShortcutChordTable*"/>
      </return-value>
    </function>
  </namespace>
</repository>
