<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="HarfBuzz" version="0.0"/>
  <include name="cairo" version="1.0"/>
  <package name="pango"/>
  <c:include name="pango/pango.h"/>
  <namespace name="Pango"
             version="1.0"
             shared-library="libpango-1.0.so.0"
             c:identifier-prefixes="Pango"
             c:symbol-prefixes="pango">
    <alias name="Glyph" c:type="PangoGlyph">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="49">A `PangoGlyph` represents a single glyph in the output form of a string.</doc>
      <source-position filename="pango/pango-types.h" line="54"/>
      <type name="guint32" c:type="guint32"/>
    </alias>
    <alias name="GlyphUnit" c:type="PangoGlyphUnit">
      <doc xml:space="preserve"
           filename="pango/pango-glyph.h"
           line="37">The `PangoGlyphUnit` type is used to store dimensions within
Pango.

Dimensions are stored in 1/PANGO_SCALE of a device unit.
(A device unit might be a pixel for screen display, or
a point on a printer.) PANGO_SCALE is currently 1024, and
may change in the future (unlikely though), but you should not
depend on its exact value.

The PANGO_PIXELS() macro can be used to convert from glyph units
into device units with correct rounding.</doc>
      <source-position filename="pango/pango-glyph.h" line="52"/>
      <type name="gint32" c:type="gint32"/>
    </alias>
    <alias name="LayoutRun" c:type="PangoLayoutRun">
      <doc xml:space="preserve"
           filename="pango/pango-layout.h"
           line="36">A `PangoLayoutRun` represents a single run within a `PangoLayoutLine`.

It is simply an alternate name for [struct@Pango.GlyphItem].
See the [struct@Pango.GlyphItem] docs for details on the fields.</doc>
      <source-position filename="pango/pango-layout.h" line="44"/>
      <type name="GlyphItem" c:type="PangoGlyphItem"/>
    </alias>
    <constant name="ANALYSIS_FLAG_CENTERED_BASELINE"
              value="1"
              c:type="PANGO_ANALYSIS_FLAG_CENTERED_BASELINE"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-item.h"
           line="33">Whether the segment should be shifted to center around the baseline.

This is mainly used in vertical writing directions.</doc>
      <source-position filename="pango/pango-item.h" line="42"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ANALYSIS_FLAG_IS_ELLIPSIS"
              value="2"
              c:type="PANGO_ANALYSIS_FLAG_IS_ELLIPSIS"
              version="1.36.7">
      <doc xml:space="preserve"
           filename="pango/pango-item.h"
           line="44">Whether this run holds ellipsized text.</doc>
      <source-position filename="pango/pango-item.h" line="51"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ANALYSIS_FLAG_NEED_HYPHEN"
              value="4"
              c:type="PANGO_ANALYSIS_FLAG_NEED_HYPHEN"
              version="1.44">
      <doc xml:space="preserve"
           filename="pango/pango-item.h"
           line="53">Whether to add a hyphen at the end of the run during shaping.</doc>
      <source-position filename="pango/pango-item.h" line="60"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="ASCENT"
                    c:identifier="PANGO_ASCENT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="179">Extracts the *ascent* from a `PangoRectangle`
representing glyph extents.

The ascent is the distance from the baseline to the
highest point of the character. This is positive if the
glyph ascends above the baseline.</doc>
      <source-position filename="pango/pango-types.h" line="225"/>
      <parameters>
        <parameter name="rect">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="181">a `PangoRectangle`</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ATTR_INDEX_FROM_TEXT_BEGINNING"
              value="0"
              c:type="PANGO_ATTR_INDEX_FROM_TEXT_BEGINNING"
              version="1.24">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="270">Value for @start_index in `PangoAttribute` that indicates
the beginning of the text.</doc>
      <source-position filename="pango/pango-attributes.h" line="278"/>
      <type name="guint" c:type="guint"/>
    </constant>
    <constant name="ATTR_INDEX_TO_TEXT_END"
              value="4294967295"
              c:type="PANGO_ATTR_INDEX_TO_TEXT_END"
              version="1.24">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="280">Value for @end_index in `PangoAttribute` that indicates
the end of the text.</doc>
      <source-position filename="pango/pango-attributes.h" line="288"/>
      <type name="guint" c:type="guint"/>
    </constant>
    <enumeration name="Alignment"
                 glib:type-name="PangoAlignment"
                 glib:get-type="pango_alignment_get_type"
                 c:type="PangoAlignment">
      <doc xml:space="preserve"
           filename="pango/pango-layout.h"
           line="46">`PangoAlignment` describes how to align the lines of a `PangoLayout`
within the available space.

If the `PangoLayout` is set to justify using [method@Pango.Layout.set_justify],
this only affects partial lines.

See [method@Pango.Layout.set_auto_dir] for how text direction affects
the interpretation of `PangoAlignment` values.</doc>
      <member name="left"
              value="0"
              c:identifier="PANGO_ALIGN_LEFT"
              glib:nick="left"
              glib:name="PANGO_ALIGN_LEFT">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="48">Put all available space on the right</doc>
      </member>
      <member name="center"
              value="1"
              c:identifier="PANGO_ALIGN_CENTER"
              glib:nick="center"
              glib:name="PANGO_ALIGN_CENTER">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="49">Center the line within the available space</doc>
      </member>
      <member name="right"
              value="2"
              c:identifier="PANGO_ALIGN_RIGHT"
              glib:nick="right"
              glib:name="PANGO_ALIGN_RIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="50">Put all available space on the left</doc>
      </member>
    </enumeration>
    <record name="Analysis" c:type="PangoAnalysis">
      <doc xml:space="preserve"
           filename="pango/pango-item.h"
           line="62">The `PangoAnalysis` structure stores information about
the properties of a segment of text.</doc>
      <source-position filename="pango/pango-item.h" line="96"/>
      <field name="shape_engine" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="64">unused, reserved</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="lang_engine" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="65">unused, reserved</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="font" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="66">the font for this segment.</doc>
        <type name="Font" c:type="PangoFont*"/>
      </field>
      <field name="level" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="67">the bidirectional level for this segment.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="gravity" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="68">the glyph orientation for this segment (A `PangoGravity`).</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="69">boolean flags for this segment (Since: 1.16).</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="script" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="70">the detected script for this segment (A `PangoScript`) (Since: 1.18).</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="language" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="71">the detected language for this segment.</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </field>
      <field name="extra_attrs" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="72">extra attributes for this segment.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <record name="AttrClass" c:type="PangoAttrClass">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="336">The `PangoAttrClass` structure stores the type and operations for
a particular type of attribute.

The functions in this structure should not be called directly. Instead,
one should use the wrapper functions provided for `PangoAttribute`.</doc>
      <source-position filename="pango/pango-attributes.h" line="359"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="338">the type ID for this attribute</doc>
        <type name="AttrType" c:type="PangoAttrType"/>
      </field>
      <field name="copy">
        <callback name="copy">
          <source-position filename="pango/pango-attributes.h" line="356"/>
          <return-value transfer-ownership="full">
            <type name="Attribute" c:type="PangoAttribute*"/>
          </return-value>
          <parameters>
            <parameter name="attr" transfer-ownership="none">
              <type name="Attribute" c:type="const PangoAttribute*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <source-position filename="pango/pango-attributes.h" line="357"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="attr" transfer-ownership="none">
              <type name="Attribute" c:type="PangoAttribute*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="equal">
        <callback name="equal">
          <source-position filename="pango/pango-attributes.h" line="358"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="attr1" transfer-ownership="none">
              <type name="Attribute" c:type="const PangoAttribute*"/>
            </parameter>
            <parameter name="attr2" transfer-ownership="none">
              <type name="Attribute" c:type="const PangoAttribute*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AttrColor" c:type="PangoAttrColor">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="413">The `PangoAttrColor` structure is used to represent attributes that
are colors.</doc>
      <source-position filename="pango/pango-attributes.h" line="425"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="415">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="color" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="416">the `PangoColor` which is the value of the attribute</doc>
        <type name="Color" c:type="PangoColor"/>
      </field>
    </record>
    <callback name="AttrDataCopyFunc" c:type="PangoAttrDataCopyFunc">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="326">Type of a function that can duplicate user data for an attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="334"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="332">new copy of @user_data.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.h"
               line="328">user data to copy</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AttrFilterFunc" c:type="PangoAttrFilterFunc">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="313">Type of a function filtering a list of attributes.</doc>
      <source-position filename="pango/pango-attributes.h" line="323"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="320">%TRUE if the attribute should be selected for
  filtering, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="attribute" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.h"
               line="315">a Pango attribute</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.h"
               line="316">user data passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AttrFloat" c:type="PangoAttrFloat">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="400">The `PangoAttrFloat` structure is used to represent attributes with
a float or double value.</doc>
      <source-position filename="pango/pango-attributes.h" line="412"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="402">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="403">the value of the attribute</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="AttrFontDesc" c:type="PangoAttrFontDesc">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="470">The `PangoAttrFontDesc` structure is used to store an attribute that
sets all aspects of the font description at once.</doc>
      <source-position filename="pango/pango-attributes.h" line="482"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="472">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="desc" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="473">the font description which is the value of this attribute</doc>
        <type name="FontDescription" c:type="PangoFontDescription*"/>
      </field>
      <function name="new" c:identifier="pango_attr_font_desc_new">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="762">Create a new font description attribute.

This attribute allows setting family, style, weight, variant,
stretch, and size simultaneously.</doc>
        <source-position filename="pango/pango-attributes.h" line="543"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="771">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="764">the font description</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrFontFeatures"
            c:type="PangoAttrFontFeatures"
            version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="484">The `PangoAttrFontFeatures` structure is used to represent OpenType
font features as an attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="498"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="486">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="features" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="487">the features, as a string in CSS syntax</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <function name="new"
                c:identifier="pango_attr_font_features_new"
                version="1.38">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1206">Create a new font features tag attribute.

You can use this attribute to select OpenType font features like small-caps,
alternative glyphs, ligatures, etc. for fonts that support them.</doc>
        <source-position filename="pango/pango-attributes.h" line="583"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1216">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1208">a string with OpenType font features, with the syntax of the [CSS
font-feature-settings property](https://www.w3.org/TR/css-fonts-4/#font-rend-desc)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrInt" c:type="PangoAttrInt">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="387">The `PangoAttrInt` structure is used to represent attributes with
an integer or enumeration value.</doc>
      <source-position filename="pango/pango-attributes.h" line="399"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="389">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="390">the value of the attribute</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <record name="AttrIterator"
            c:type="PangoAttrIterator"
            opaque="1"
            glib:type-name="PangoAttrIterator"
            glib:get-type="pango_attr_iterator_get_type"
            c:symbol-prefix="attr_iterator">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="639">A `PangoAttrIterator` is used to iterate through a `PangoAttrList`.

A new iterator is created with [method@Pango.AttrList.get_iterator].
Once the iterator is created, it can be advanced through the style
changes in the text using [method@Pango.AttrIterator.next]. At each
style change, the range of the current style segment and the attributes
currently in effect can be queried.</doc>
      <source-position filename="pango/pango-attributes.h" line="635"/>
      <method name="copy" c:identifier="pango_attr_iterator_copy">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="3287">Copy a `PangoAttrIterator`.</doc>
        <source-position filename="pango/pango-attributes.h" line="728"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="3293">the newly allocated
  `PangoAttrIterator`, which should be freed with
  [method@Pango.AttrIterator.destroy]</doc>
          <type name="AttrIterator" c:type="PangoAttrIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3289">a `PangoAttrIterator`</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="pango_attr_iterator_destroy">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="3323">Destroy a `PangoAttrIterator` and free all associated memory.</doc>
        <source-position filename="pango/pango-attributes.h" line="730"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3325">a `PangoAttrIterator`</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="pango_attr_iterator_get">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="3338">Find the current attribute of a particular type
at the iterator location.

When multiple attributes of the same type overlap,
the attribute whose range starts closest to the
current location is used.</doc>
        <source-position filename="pango/pango-attributes.h" line="732"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="3350">the current
  attribute of the given type, or %NULL if no attribute
  of that type applies to the current location.</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3340">a `PangoAttrIterator`</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3341">the type of attribute to find</doc>
            <type name="AttrType" c:type="PangoAttrType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attrs"
              c:identifier="pango_attr_iterator_get_attrs"
              version="1.2">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="3552">Gets a list of all attributes at the current position of the
iterator.</doc>
        <source-position filename="pango/pango-attributes.h" line="740"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="3559">
  a list of all attributes for the current range. To free
  this value, call [method@Pango.Attribute.destroy] on each
  value and g_slist_free() on the list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Attribute"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3554">a `PangoAttrIterator`</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font" c:identifier="pango_attr_iterator_get_font">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="3376">Get the font and other attributes at the current
iterator position.</doc>
        <source-position filename="pango/pango-attributes.h" line="735"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3378">a `PangoAttrIterator`</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3379">a `PangoFontDescription` to fill in with the current
  values. The family name in this structure will be set using
  [method@Pango.FontDescription.set_family_static] using
  values from an attribute in the `PangoAttrList` associated
  with the iterator, so if you plan to keep it around, you
  must call:
  `pango_font_description_set_family (desc, pango_font_description_get_family (desc))`.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </parameter>
          <parameter name="language"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3386">location to store language tag
  for item, or %NULL if none is found.</doc>
            <type name="Language" c:type="PangoLanguage**"/>
          </parameter>
          <parameter name="extra_attrs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3388">
  location in which to store a list of non-font attributes
  at the the current position; only the highest priority
  value of each attribute will be added to this list. In
  order to free this value, you must call
  [method@Pango.Attribute.destroy] on each member.</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="Attribute"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="pango_attr_iterator_next">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="3216">Advance the iterator until the next change of style.</doc>
        <source-position filename="pango/pango-attributes.h" line="726"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="3222">%FALSE if the iterator is at the end
  of the list, otherwise %TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3218">a `PangoAttrIterator`</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="range" c:identifier="pango_attr_iterator_range">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="3190">Get the range of the current segment.

Note that the stored return values are signed, not unsigned
like the values in `PangoAttribute`. To deal with this API
oversight, stored return values that wouldn't fit into
a signed integer are clamped to %G_MAXINT.</doc>
        <source-position filename="pango/pango-attributes.h" line="722"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3192">a PangoAttrIterator</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
          <parameter name="start"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3193">location to store the start of the range</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3194">location to store the end of the range</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="AttrLanguage" c:type="PangoAttrLanguage">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="374">The `PangoAttrLanguage` structure is used to represent attributes that
are languages.</doc>
      <source-position filename="pango/pango-attributes.h" line="386"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="376">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="377">the `PangoLanguage` which is the value of the attribute</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </field>
      <function name="new" c:identifier="pango_attr_language_new">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="554">Create a new language tag attribute.</doc>
        <source-position filename="pango/pango-attributes.h" line="519"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="560">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="556">language tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrList"
            c:type="PangoAttrList"
            opaque="1"
            glib:type-name="PangoAttrList"
            glib:get-type="pango_attr_list_get_type"
            c:symbol-prefix="attr_list">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="651">A `PangoAttrList` represents a list of attributes that apply to a section
of text.

The attributes in a `PangoAttrList` are, in general, allowed to overlap in
an arbitrary fashion. However, if the attributes are manipulated only through
[method@Pango.AttrList.change], the overlap between properties will meet
stricter criteria.

Since the `PangoAttrList` structure is stored as a linear list, it is not
suitable for storing attributes for large amounts of text. In general, you
should not use a single `PangoAttrList` for more than one paragraph of text.</doc>
      <source-position filename="pango/pango-attributes.h" line="634"/>
      <constructor name="new" c:identifier="pango_attr_list_new">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1838">Create a new empty attribute list with a reference
count of one.</doc>
        <source-position filename="pango/pango-attributes.h" line="671"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1844">the newly allocated
  `PangoAttrList`, which should be freed with
  [method@Pango.AttrList.unref]</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
      </constructor>
      <method name="change" c:identifier="pango_attr_list_change">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2035">Insert the given attribute into the `PangoAttrList`.

It will replace any attributes of the same type
on that segment and be merged with any adjoining
attributes that are identical.

This function is slower than [method@Pango.AttrList.insert]
for creating an attribute list in order (potentially
much slower for large lists). However,
[method@Pango.AttrList.insert] is not suitable for
continually changing a set of attributes since it
never removes or combines existing attributes.</doc>
        <source-position filename="pango/pango-attributes.h" line="685"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2037">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2038">the attribute to insert</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_attr_list_copy">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1923">Copy @list and return an identical new list.</doc>
        <source-position filename="pango/pango-attributes.h" line="677"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1929">the newly allocated
  `PangoAttrList`, with a reference count of one,
  which should be freed with [method@Pango.AttrList.unref].
  Returns %NULL if @list was %NULL.</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1925">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="pango_attr_list_equal" version="1.46">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2415">Checks whether @list and @other_list contain the same
attributes and whether those attributes apply to the
same ranges.

Beware that this will return wrong values if any list
contains duplicates.</doc>
        <source-position filename="pango/pango-attributes.h" line="707"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="2427">%TRUE if the lists are equal, %FALSE if
  they aren't</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2417">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="other_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2418">the other `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter"
              c:identifier="pango_attr_list_filter"
              version="1.2">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2493">Given a `PangoAttrList` and callback function, removes
any elements of @list for which @func returns %TRUE and
inserts them into a new list.</doc>
        <source-position filename="pango/pango-attributes.h" line="699"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="2504">the new
  `PangoAttrList` or %NULL if no attributes of the
  given types were found</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2495">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2496">callback function;
  returns %TRUE if an attribute should be filtered out</doc>
            <type name="AttrFilterFunc" c:type="PangoAttrFilterFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2498">Data to be passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attributes"
              c:identifier="pango_attr_list_get_attributes"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2381">Gets a list of all attributes in @list.</doc>
        <source-position filename="pango/pango-attributes.h" line="704"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="2387">
  a list of all attributes in @list. To free this value,
  call [method@Pango.Attribute.destroy] on each value and
  g_slist_free() on the list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Attribute"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2383">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iterator" c:identifier="pango_attr_list_get_iterator">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="3165">Create a iterator initialized to the beginning of the list.

@list must not be modified until this iterator is freed.</doc>
        <source-position filename="pango/pango-attributes.h" line="719"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="3173">the newly allocated
  `PangoAttrIterator`, which should be freed with
  [method@Pango.AttrIterator.destroy]</doc>
          <type name="AttrIterator" c:type="PangoAttrIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="3167">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="pango_attr_list_insert">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1995">Insert the given attribute into the `PangoAttrList`.

It will be inserted after all other attributes with a
matching @start_index.</doc>
        <source-position filename="pango/pango-attributes.h" line="679"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1997">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1998">the attribute to insert</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_before"
              c:identifier="pango_attr_list_insert_before">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2015">Insert the given attribute into the `PangoAttrList`.

It will be inserted before all other attributes with a
matching @start_index.</doc>
        <source-position filename="pango/pango-attributes.h" line="682"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2017">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2018">the attribute to insert</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="pango_attr_list_ref" version="1.10">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1858">Increase the reference count of the given attribute
list by one.</doc>
        <source-position filename="pango/pango-attributes.h" line="673"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1865">The attribute list passed in</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1860">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="splice" c:identifier="pango_attr_list_splice">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2281">This function opens up a hole in @list, fills it
in with attributes from the left, and then merges
@other on top of the hole.

This operation is equivalent to stretching every attribute
that applies at position @pos in @list by an amount @len,
and then calling [method@Pango.AttrList.change] with a copy
of each attribute in @other in sequence (offset in position
by @pos, and limited in length to @len).

This operation proves useful for, for instance, inserting
a pre-edit string in the middle of an edit buffer.

For backwards compatibility, the function behaves differently
when @len is 0. In this case, the attributes from @other are
not imited to @len, and are just overlayed on top of @list.

This mode is useful for merging two lists of attributes together.</doc>
        <source-position filename="pango/pango-attributes.h" line="688"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2283">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2284">another `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2285">the position in @list at which to insert @other</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2286">the length of the spliced segment. (Note that this
  must be specified since the attributes in @other may only
  be present at some subsection of this range)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="pango_attr_list_to_string"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2686">Serializes a `PangoAttrList` to a string.

In the resulting string, serialized attributes are separated by newlines or commas.
Individual attributes are serialized to a string of the form

  START END TYPE VALUE

Where START and END are the indices (with -1 being accepted in place
of MAXUINT), TYPE is the nickname of the attribute value type, e.g.
_weight_ or _stretch_, and the value is serialized according to its type:

- enum values as nick or numeric value
- boolean values as _true_ or _false_
- integers and floats as numbers
- strings as string, optionally quoted
- font features as quoted string
- PangoLanguage as string
- PangoFontDescription as serialized by [method@Pango.FontDescription.to_string], quoted
- PangoColor as serialized by [method@Pango.Color.to_string]

Examples:

```
0 10 foreground red, 5 15 weight bold, 0 200 font-desc "Sans 10"
```

```
0 -1 weight 700
0 100 family Times
```

To parse the returned value, use [func@Pango.AttrList.from_string].

Note that shape attributes can not be serialized.</doc>
        <source-position filename="pango/pango-attributes.h" line="711"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="2725">a newly allocated string</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2688">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="pango_attr_list_unref">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1898">Decrease the reference count of the given attribute
list by one.

If the result is zero, free the attribute list
and the attributes it contains.</doc>
        <source-position filename="pango/pango-attributes.h" line="675"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1900">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update"
              c:identifier="pango_attr_list_update"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2198">Update indices of attributes in @list for a change in the
text they refer to.

The change that this function applies is removing @remove
bytes at position @pos and inserting @add bytes instead.

Attributes that fall entirely in the (@pos, @pos + @remove)
range are removed.

Attributes that start or end inside the (@pos, @pos + @remove)
range are shortened to reflect the removal.

Attributes start and end positions are updated if they are
behind @pos + @remove.</doc>
        <source-position filename="pango/pango-attributes.h" line="693"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2200">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2201">the position of the change</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="remove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2202">the number of removed bytes</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="add" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2203">the number of added bytes</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <function name="from_string"
                c:identifier="pango_attr_list_from_string"
                version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2801">Deserializes a `PangoAttrList` from a string.

This is the counterpart to [method@Pango.AttrList.to_string].
See that functions for details about the format.</doc>
        <source-position filename="pango/pango-attributes.h" line="713"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="2810">a new `PangoAttrList`</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="2803">a string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrShape" c:type="PangoAttrShape">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="447">The `PangoAttrShape` structure is used to represent attributes which
impose shape restrictions.</doc>
      <source-position filename="pango/pango-attributes.h" line="468"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="449">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="ink_rect" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="450">the ink rectangle to restrict to</doc>
        <type name="Rectangle" c:type="PangoRectangle"/>
      </field>
      <field name="logical_rect" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="451">the logical rectangle to restrict to</doc>
        <type name="Rectangle" c:type="PangoRectangle"/>
      </field>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="452">user data set (see [func@Pango.AttrShape.new_with_data])</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="copy_func" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="453">copy function for the user data</doc>
        <type name="AttrDataCopyFunc" c:type="PangoAttrDataCopyFunc"/>
      </field>
      <field name="destroy_func" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="454">destroy function for the user data</doc>
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <function name="new" c:identifier="pango_attr_shape_new">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1127">Create a new shape attribute.

A shape is used to impose a particular ink and logical
rectangle on the result of shaping a particular glyph.
This might be used, for instance, for embedding a picture
or a widget inside a `PangoLayout`.</doc>
        <source-position filename="pango/pango-attributes.h" line="570"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1139">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="ink_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1129">ink rectangle to assign to each character</doc>
            <type name="Rectangle" c:type="const PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1130">logical rectangle to assign to each character</doc>
            <type name="Rectangle" c:type="const PangoRectangle*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_with_data"
                c:identifier="pango_attr_shape_new_with_data"
                version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1074">Creates a new shape attribute.

Like [func@Pango.AttrShape.new], but a user data pointer
is also provided; this pointer can be accessed when later
rendering the glyph.</doc>
        <source-position filename="pango/pango-attributes.h" line="573"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1091">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="ink_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1076">ink rectangle to assign to each character</doc>
            <type name="Rectangle" c:type="const PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1077">logical rectangle to assign to each character</doc>
            <type name="Rectangle" c:type="const PangoRectangle*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1078">user data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="copy_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1079">function to copy @data when the
  attribute is copied. If %NULL, @data is simply copied
  as a pointer</doc>
            <type name="AttrDataCopyFunc" c:type="PangoAttrDataCopyFunc"/>
          </parameter>
          <parameter name="destroy_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1082">function to free @data when the
  attribute is freed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrSize" c:type="PangoAttrSize">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="427">The `PangoAttrSize` structure is used to represent attributes which
set font size.</doc>
      <source-position filename="pango/pango-attributes.h" line="445"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="429">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="size" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="430">size of font, in units of 1/%PANGO_SCALE of a point (for
  %PANGO_ATTR_SIZE) or of a device unit (for %PANGO_ATTR_ABSOLUTE_SIZE)</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="absolute" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="432">whether the font size is in device units or points.
  This field is only present for compatibility with Pango-1.8.0
  (%PANGO_ATTR_ABSOLUTE_SIZE was added in 1.8.1); and always will
  be %FALSE for %PANGO_ATTR_SIZE and %TRUE for %PANGO_ATTR_ABSOLUTE_SIZE.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <function name="new" c:identifier="pango_attr_size_new">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="637">Create a new font-size attribute in fractional points.</doc>
        <source-position filename="pango/pango-attributes.h" line="531"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="643">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="639">the font size, in %PANGO_SCALE-ths of a point</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_absolute"
                c:identifier="pango_attr_size_new_absolute"
                version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="653">Create a new font-size attribute in device units.</doc>
        <source-position filename="pango/pango-attributes.h" line="533"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="659">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="655">the font size, in %PANGO_SCALE-ths of a device unit</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrString" c:type="PangoAttrString">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="361">The `PangoAttrString` structure is used to represent attributes with
a string value.</doc>
      <source-position filename="pango/pango-attributes.h" line="373"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="363">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="364">the string which is the value of the attribute</doc>
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <enumeration name="AttrType"
                 glib:type-name="PangoAttrType"
                 glib:get-type="pango_attr_type_get_type"
                 c:type="PangoAttrType">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="45">The `PangoAttrType` distinguishes between different types of attributes.

Along with the predefined values, it is possible to allocate additional
values for custom attributes using [func@AttrType.register]. The predefined
values are given below. The type of structure used to store the attribute is
listed in parentheses after the description.</doc>
      <member name="invalid"
              value="0"
              c:identifier="PANGO_ATTR_INVALID"
              glib:nick="invalid"
              glib:name="PANGO_ATTR_INVALID">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="47">does not happen</doc>
      </member>
      <member name="language"
              value="1"
              c:identifier="PANGO_ATTR_LANGUAGE"
              glib:nick="language"
              glib:name="PANGO_ATTR_LANGUAGE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="48">language ([struct@Pango.AttrLanguage])</doc>
      </member>
      <member name="family"
              value="2"
              c:identifier="PANGO_ATTR_FAMILY"
              glib:nick="family"
              glib:name="PANGO_ATTR_FAMILY">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="49">font family name list ([struct@Pango.AttrString])</doc>
      </member>
      <member name="style"
              value="3"
              c:identifier="PANGO_ATTR_STYLE"
              glib:nick="style"
              glib:name="PANGO_ATTR_STYLE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="50">font slant style ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="weight"
              value="4"
              c:identifier="PANGO_ATTR_WEIGHT"
              glib:nick="weight"
              glib:name="PANGO_ATTR_WEIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="51">font weight ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="variant"
              value="5"
              c:identifier="PANGO_ATTR_VARIANT"
              glib:nick="variant"
              glib:name="PANGO_ATTR_VARIANT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="52">font variant (normal or small caps) ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="stretch"
              value="6"
              c:identifier="PANGO_ATTR_STRETCH"
              glib:nick="stretch"
              glib:name="PANGO_ATTR_STRETCH">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="53">font stretch ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="size"
              value="7"
              c:identifier="PANGO_ATTR_SIZE"
              glib:nick="size"
              glib:name="PANGO_ATTR_SIZE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="54">font size in points scaled by %PANGO_SCALE ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="font_desc"
              value="8"
              c:identifier="PANGO_ATTR_FONT_DESC"
              glib:nick="font-desc"
              glib:name="PANGO_ATTR_FONT_DESC">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="55">font description ([struct@Pango.AttrFontDesc])</doc>
      </member>
      <member name="foreground"
              value="9"
              c:identifier="PANGO_ATTR_FOREGROUND"
              glib:nick="foreground"
              glib:name="PANGO_ATTR_FOREGROUND">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="56">foreground color ([struct@Pango.AttrColor])</doc>
      </member>
      <member name="background"
              value="10"
              c:identifier="PANGO_ATTR_BACKGROUND"
              glib:nick="background"
              glib:name="PANGO_ATTR_BACKGROUND">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="57">background color ([struct@Pango.AttrColor])</doc>
      </member>
      <member name="underline"
              value="11"
              c:identifier="PANGO_ATTR_UNDERLINE"
              glib:nick="underline"
              glib:name="PANGO_ATTR_UNDERLINE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="58">whether the text has an underline ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="strikethrough"
              value="12"
              c:identifier="PANGO_ATTR_STRIKETHROUGH"
              glib:nick="strikethrough"
              glib:name="PANGO_ATTR_STRIKETHROUGH">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="59">whether the text is struck-through ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="rise"
              value="13"
              c:identifier="PANGO_ATTR_RISE"
              glib:nick="rise"
              glib:name="PANGO_ATTR_RISE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="60">baseline displacement ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="shape"
              value="14"
              c:identifier="PANGO_ATTR_SHAPE"
              glib:nick="shape"
              glib:name="PANGO_ATTR_SHAPE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="61">shape ([struct@Pango.AttrShape])</doc>
      </member>
      <member name="scale"
              value="15"
              c:identifier="PANGO_ATTR_SCALE"
              glib:nick="scale"
              glib:name="PANGO_ATTR_SCALE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="62">font size scale factor ([struct@Pango.AttrFloat])</doc>
      </member>
      <member name="fallback"
              value="16"
              c:identifier="PANGO_ATTR_FALLBACK"
              glib:nick="fallback"
              glib:name="PANGO_ATTR_FALLBACK">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="63">whether fallback is enabled ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="letter_spacing"
              value="17"
              c:identifier="PANGO_ATTR_LETTER_SPACING"
              glib:nick="letter-spacing"
              glib:name="PANGO_ATTR_LETTER_SPACING">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="64">letter spacing ([struct@PangoAttrInt])</doc>
      </member>
      <member name="underline_color"
              value="18"
              c:identifier="PANGO_ATTR_UNDERLINE_COLOR"
              glib:nick="underline-color"
              glib:name="PANGO_ATTR_UNDERLINE_COLOR">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="65">underline color ([struct@Pango.AttrColor])</doc>
      </member>
      <member name="strikethrough_color"
              value="19"
              c:identifier="PANGO_ATTR_STRIKETHROUGH_COLOR"
              glib:nick="strikethrough-color"
              glib:name="PANGO_ATTR_STRIKETHROUGH_COLOR">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="66">strikethrough color ([struct@Pango.AttrColor])</doc>
      </member>
      <member name="absolute_size"
              value="20"
              c:identifier="PANGO_ATTR_ABSOLUTE_SIZE"
              glib:nick="absolute-size"
              glib:name="PANGO_ATTR_ABSOLUTE_SIZE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="67">font size in pixels scaled by %PANGO_SCALE ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="gravity"
              value="21"
              c:identifier="PANGO_ATTR_GRAVITY"
              glib:nick="gravity"
              glib:name="PANGO_ATTR_GRAVITY">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="68">base text gravity ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="gravity_hint"
              value="22"
              c:identifier="PANGO_ATTR_GRAVITY_HINT"
              glib:nick="gravity-hint"
              glib:name="PANGO_ATTR_GRAVITY_HINT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="69">gravity hint ([struct@Pango.AttrInt])</doc>
      </member>
      <member name="font_features"
              value="23"
              c:identifier="PANGO_ATTR_FONT_FEATURES"
              glib:nick="font-features"
              glib:name="PANGO_ATTR_FONT_FEATURES">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="70">OpenType font features ([struct@Pango.AttrFontFeatures]). Since 1.38</doc>
      </member>
      <member name="foreground_alpha"
              value="24"
              c:identifier="PANGO_ATTR_FOREGROUND_ALPHA"
              glib:nick="foreground-alpha"
              glib:name="PANGO_ATTR_FOREGROUND_ALPHA">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="71">foreground alpha ([struct@Pango.AttrInt]). Since 1.38</doc>
      </member>
      <member name="background_alpha"
              value="25"
              c:identifier="PANGO_ATTR_BACKGROUND_ALPHA"
              glib:nick="background-alpha"
              glib:name="PANGO_ATTR_BACKGROUND_ALPHA">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="72">background alpha ([struct@Pango.AttrInt]). Since 1.38</doc>
      </member>
      <member name="allow_breaks"
              value="26"
              c:identifier="PANGO_ATTR_ALLOW_BREAKS"
              glib:nick="allow-breaks"
              glib:name="PANGO_ATTR_ALLOW_BREAKS">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="73">whether breaks are allowed ([struct@Pango.AttrInt]). Since 1.44</doc>
      </member>
      <member name="show"
              value="27"
              c:identifier="PANGO_ATTR_SHOW"
              glib:nick="show"
              glib:name="PANGO_ATTR_SHOW">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="74">how to render invisible characters ([struct@Pango.AttrInt]). Since 1.44</doc>
      </member>
      <member name="insert_hyphens"
              value="28"
              c:identifier="PANGO_ATTR_INSERT_HYPHENS"
              glib:nick="insert-hyphens"
              glib:name="PANGO_ATTR_INSERT_HYPHENS">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="75">whether to insert hyphens at intra-word line breaks ([struct@Pango.AttrInt]). Since 1.44</doc>
      </member>
      <member name="overline"
              value="29"
              c:identifier="PANGO_ATTR_OVERLINE"
              glib:nick="overline"
              glib:name="PANGO_ATTR_OVERLINE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="76">whether the text has an overline ([struct@Pango.AttrInt]). Since 1.46</doc>
      </member>
      <member name="overline_color"
              value="30"
              c:identifier="PANGO_ATTR_OVERLINE_COLOR"
              glib:nick="overline-color"
              glib:name="PANGO_ATTR_OVERLINE_COLOR">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="77">overline color ([struct@Pango.AttrColor]). Since 1.46</doc>
      </member>
      <member name="line_height"
              value="31"
              c:identifier="PANGO_ATTR_LINE_HEIGHT"
              glib:nick="line-height"
              glib:name="PANGO_ATTR_LINE_HEIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="78">line height factor ([struct@Pango.AttrFloat]). Since: 1.50</doc>
      </member>
      <member name="absolute_line_height"
              value="32"
              c:identifier="PANGO_ATTR_ABSOLUTE_LINE_HEIGHT"
              glib:nick="absolute-line-height"
              glib:name="PANGO_ATTR_ABSOLUTE_LINE_HEIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="79">line height ([struct@Pango.AttrInt]). Since: 1.50</doc>
      </member>
      <member name="text_transform"
              value="33"
              c:identifier="PANGO_ATTR_TEXT_TRANSFORM"
              glib:nick="text-transform"
              glib:name="PANGO_ATTR_TEXT_TRANSFORM">
      </member>
      <member name="word"
              value="34"
              c:identifier="PANGO_ATTR_WORD"
              glib:nick="word"
              glib:name="PANGO_ATTR_WORD">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="80">override segmentation to classify the range of the attribute as a single word ([struct@Pango.AttrInt]). Since 1.50</doc>
      </member>
      <member name="sentence"
              value="35"
              c:identifier="PANGO_ATTR_SENTENCE"
              glib:nick="sentence"
              glib:name="PANGO_ATTR_SENTENCE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="81">override segmentation to classify the range of the attribute as a single sentence ([struct@Pango.AttrInt]). Since 1.50</doc>
      </member>
      <member name="baseline_shift"
              value="36"
              c:identifier="PANGO_ATTR_BASELINE_SHIFT"
              glib:nick="baseline-shift"
              glib:name="PANGO_ATTR_BASELINE_SHIFT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="82">baseline displacement ([struct@Pango.AttrInt]). Since 1.50</doc>
      </member>
      <member name="font_scale"
              value="37"
              c:identifier="PANGO_ATTR_FONT_SCALE"
              glib:nick="font-scale"
              glib:name="PANGO_ATTR_FONT_SCALE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="83">font-relative size change ([struct@Pango.AttrInt]). Since 1.50</doc>
      </member>
      <function name="get_name"
                c:identifier="pango_attr_type_get_name"
                version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="69">Fetches the attribute type name.

The attribute type name is the string passed in
when registering the type using
[func@Pango.AttrType.register].

The returned value is an interned string (see
g_intern_string() for what that means) that should
not be modified or freed.</doc>
        <source-position filename="pango/pango-attributes.h" line="506"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="83">the type ID name (which
  may be %NULL), or %NULL if @type is a built-in Pango
  attribute type or invalid.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="71">an attribute type ID to fetch the name for</doc>
            <type name="AttrType" c:type="PangoAttrType"/>
          </parameter>
        </parameters>
      </function>
      <function name="register" c:identifier="pango_attr_type_register">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="35">Allocate a new attribute type ID.

The attribute type name can be accessed later
by using [func@Pango.AttrType.get_name].</doc>
        <source-position filename="pango/pango-attributes.h" line="504"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="44">the new type ID.</doc>
          <type name="AttrType" c:type="PangoAttrType"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="37">an identifier for the type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="Attribute"
            c:type="PangoAttribute"
            glib:type-name="PangoAttribute"
            glib:get-type="pango_attribute_get_type"
            c:symbol-prefix="attribute">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="290">The `PangoAttribute` structure represents the common portions of all
attributes.

Particular types of attributes include this structure as their initial
portion. The common portion of the attribute holds the range to which
the value in the type-specific part of the attribute applies and should
be initialized using [method@Pango.Attribute.init]. By default, an attribute
will have an all-inclusive range of [0,%G_MAXUINT].</doc>
      <source-position filename="pango/pango-attributes.h" line="311"/>
      <field name="klass" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="292">the class structure holding information about the type of the attribute</doc>
        <type name="AttrClass" c:type="const PangoAttrClass*"/>
      </field>
      <field name="start_index" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="293">the start index of the range (in bytes).</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="end_index" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="294">end index of the range (in bytes). The character at this index
  is not included in the range.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <method name="as_color"
              c:identifier="pango_attribute_as_color"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1690">Returns the attribute cast to `PangoAttrColor`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="624"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1698">The attribute as `PangoAttrColor`,
  or %NULL if it's not a color attribute</doc>
          <type name="AttrColor" c:type="PangoAttrColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1692">A `PangoAttribute` such as foreground</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="as_float"
              c:identifier="pango_attribute_as_float"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1610">Returns the attribute cast to `PangoAttrFloat`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="622"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1618">The attribute as `PangoAttrFloat`,
  or %NULL if it's not a floating point attribute</doc>
          <type name="AttrFloat" c:type="PangoAttrFloat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1612">A `PangoAttribute` such as scale</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="as_font_desc"
              c:identifier="pango_attribute_as_font_desc"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1720">Returns the attribute cast to `PangoAttrFontDesc`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="626"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1728">The attribute as `PangoAttrFontDesc`,
  or %NULL if it's not a font description attribute</doc>
          <type name="AttrFontDesc" c:type="PangoAttrFontDesc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1722">A `PangoAttribute` representing a font description</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="as_font_features"
              c:identifier="pango_attribute_as_font_features"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1746">Returns the attribute cast to `PangoAttrFontFeatures`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="630"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1754">The attribute as `PangoAttrFontFeatures`,
  or %NULL if it's not a font features attribute</doc>
          <type name="AttrFontFeatures" c:type="PangoAttrFontFeatures*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1748">A `PangoAttribute` representing font features</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="as_int"
              c:identifier="pango_attribute_as_int"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1562">Returns the attribute cast to `PangoAttrInt`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="618"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1570">The attribute as `PangoAttrInt`,
  or %NULL if it's not an integer attribute</doc>
          <type name="AttrInt" c:type="PangoAttrInt*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1564">A `PangoAttribute` such as weight</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="as_language"
              c:identifier="pango_attribute_as_language"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1772">Returns the attribute cast to `PangoAttrLanguage`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="616"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1780">The attribute as `PangoAttrLanguage`,
  or %NULL if it's not a language attribute</doc>
          <type name="AttrLanguage" c:type="PangoAttrLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1774">A `PangoAttribute` representing a language</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="as_shape"
              c:identifier="pango_attribute_as_shape"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1798">Returns the attribute cast to `PangoAttrShape`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="628"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1806">The attribute as `PangoAttrShape`,
  or %NULL if it's not a shape attribute</doc>
          <type name="AttrShape" c:type="PangoAttrShape*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1800">A `PangoAttribute` representing a shape</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="as_size"
              c:identifier="pango_attribute_as_size"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1663">Returns the attribute cast to `PangoAttrSize`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="620"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1671">The attribute as `PangoAttrSize`,
  or NULL if it's not a size attribute</doc>
          <type name="AttrSize" c:type="PangoAttrSize*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1665">A `PangoAttribute` representing a size</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="as_string"
              c:identifier="pango_attribute_as_string"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1637">Returns the attribute cast to `PangoAttrString`.

This is mainly useful for language bindings.</doc>
        <source-position filename="pango/pango-attributes.h" line="614"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1645">The attribute as `PangoAttrString`,
  or %NULL if it's not a string attribute</doc>
          <type name="AttrString" c:type="PangoAttrString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="1639">A `PangoAttribute` such as family</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_attribute_copy">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="128">Make a copy of an attribute.</doc>
        <source-position filename="pango/pango-attributes.h" line="511"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="134">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy].</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="130">a `PangoAttribute`</doc>
            <type name="Attribute" c:type="const PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="pango_attribute_destroy">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="152">Destroy a `PangoAttribute` and free all associated memory.</doc>
        <source-position filename="pango/pango-attributes.h" line="513"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="154">a `PangoAttribute`.</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="pango_attribute_equal">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="170">Compare two attributes for equality.

This compares only the actual value of the two
attributes and not the ranges that the attributes
apply to.</doc>
        <source-position filename="pango/pango-attributes.h" line="515"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="181">%TRUE if the two attributes have the same value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="172">a `PangoAttribute`</doc>
            <type name="Attribute" c:type="const PangoAttribute*"/>
          </instance-parameter>
          <parameter name="attr2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="173">another `PangoAttribute`</doc>
            <type name="Attribute" c:type="const PangoAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="pango_attribute_init" version="1.20">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="104">Initializes @attr's klass to @klass, it's start_index to
%PANGO_ATTR_INDEX_FROM_TEXT_BEGINNING and end_index to
%PANGO_ATTR_INDEX_TO_TEXT_END such that the attribute applies
to the entire text by default.</doc>
        <source-position filename="pango/pango-attributes.h" line="508"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="106">a `PangoAttribute`</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-attributes.c"
                 line="107">a `PangoAttrClass`</doc>
            <type name="AttrClass" c:type="const PangoAttrClass*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="BaselineShift"
                 version="1.50"
                 glib:type-name="PangoBaselineShift"
                 glib:get-type="pango_baseline_shift_get_type"
                 c:type="PangoBaselineShift">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="233">An enumeration that affects baseline shifts between runs.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_BASELINE_SHIFT_NONE"
              glib:nick="none"
              glib:name="PANGO_BASELINE_SHIFT_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="235">Leave the baseline unchanged</doc>
      </member>
      <member name="superscript"
              value="1"
              c:identifier="PANGO_BASELINE_SHIFT_SUPERSCRIPT"
              glib:nick="superscript"
              glib:name="PANGO_BASELINE_SHIFT_SUPERSCRIPT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="236">Shift the baseline to the superscript position,
  relative to the previous run</doc>
      </member>
      <member name="subscript"
              value="2"
              c:identifier="PANGO_BASELINE_SHIFT_SUBSCRIPT"
              glib:nick="subscript"
              glib:name="PANGO_BASELINE_SHIFT_SUBSCRIPT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="238">Shift the baseline to the subscript position,
  relative to the previous run</doc>
      </member>
    </enumeration>
    <enumeration name="BidiType"
                 version="1.22"
                 deprecated="1"
                 deprecated-version="1.44"
                 glib:type-name="PangoBidiType"
                 glib:get-type="pango_bidi_type_get_type"
                 c:type="PangoBidiType">
      <doc xml:space="preserve"
           filename="pango/pango-bidi-type.h"
           line="33">`PangoBidiType` represents the bidirectional character
type of a Unicode character.

The values in this enumeration are specified by the
[Unicode bidirectional algorithm](http://www.unicode.org/reports/tr9/).</doc>
      <doc-deprecated xml:space="preserve">Use fribidi for this information</doc-deprecated>
      <member name="l"
              value="0"
              c:identifier="PANGO_BIDI_TYPE_L"
              glib:nick="l"
              glib:name="PANGO_BIDI_TYPE_L">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="35">Left-to-Right</doc>
      </member>
      <member name="lre"
              value="1"
              c:identifier="PANGO_BIDI_TYPE_LRE"
              glib:nick="lre"
              glib:name="PANGO_BIDI_TYPE_LRE">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="36">Left-to-Right Embedding</doc>
      </member>
      <member name="lro"
              value="2"
              c:identifier="PANGO_BIDI_TYPE_LRO"
              glib:nick="lro"
              glib:name="PANGO_BIDI_TYPE_LRO">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="37">Left-to-Right Override</doc>
      </member>
      <member name="r"
              value="3"
              c:identifier="PANGO_BIDI_TYPE_R"
              glib:nick="r"
              glib:name="PANGO_BIDI_TYPE_R">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="38">Right-to-Left</doc>
      </member>
      <member name="al"
              value="4"
              c:identifier="PANGO_BIDI_TYPE_AL"
              glib:nick="al"
              glib:name="PANGO_BIDI_TYPE_AL">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="39">Right-to-Left Arabic</doc>
      </member>
      <member name="rle"
              value="5"
              c:identifier="PANGO_BIDI_TYPE_RLE"
              glib:nick="rle"
              glib:name="PANGO_BIDI_TYPE_RLE">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="40">Right-to-Left Embedding</doc>
      </member>
      <member name="rlo"
              value="6"
              c:identifier="PANGO_BIDI_TYPE_RLO"
              glib:nick="rlo"
              glib:name="PANGO_BIDI_TYPE_RLO">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="41">Right-to-Left Override</doc>
      </member>
      <member name="pdf"
              value="7"
              c:identifier="PANGO_BIDI_TYPE_PDF"
              glib:nick="pdf"
              glib:name="PANGO_BIDI_TYPE_PDF">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="42">Pop Directional Format</doc>
      </member>
      <member name="en"
              value="8"
              c:identifier="PANGO_BIDI_TYPE_EN"
              glib:nick="en"
              glib:name="PANGO_BIDI_TYPE_EN">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="43">European Number</doc>
      </member>
      <member name="es"
              value="9"
              c:identifier="PANGO_BIDI_TYPE_ES"
              glib:nick="es"
              glib:name="PANGO_BIDI_TYPE_ES">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="44">European Number Separator</doc>
      </member>
      <member name="et"
              value="10"
              c:identifier="PANGO_BIDI_TYPE_ET"
              glib:nick="et"
              glib:name="PANGO_BIDI_TYPE_ET">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="45">European Number Terminator</doc>
      </member>
      <member name="an"
              value="11"
              c:identifier="PANGO_BIDI_TYPE_AN"
              glib:nick="an"
              glib:name="PANGO_BIDI_TYPE_AN">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="46">Arabic Number</doc>
      </member>
      <member name="cs"
              value="12"
              c:identifier="PANGO_BIDI_TYPE_CS"
              glib:nick="cs"
              glib:name="PANGO_BIDI_TYPE_CS">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="47">Common Number Separator</doc>
      </member>
      <member name="nsm"
              value="13"
              c:identifier="PANGO_BIDI_TYPE_NSM"
              glib:nick="nsm"
              glib:name="PANGO_BIDI_TYPE_NSM">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="48">Nonspacing Mark</doc>
      </member>
      <member name="bn"
              value="14"
              c:identifier="PANGO_BIDI_TYPE_BN"
              glib:nick="bn"
              glib:name="PANGO_BIDI_TYPE_BN">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="49">Boundary Neutral</doc>
      </member>
      <member name="b"
              value="15"
              c:identifier="PANGO_BIDI_TYPE_B"
              glib:nick="b"
              glib:name="PANGO_BIDI_TYPE_B">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="50">Paragraph Separator</doc>
      </member>
      <member name="s"
              value="16"
              c:identifier="PANGO_BIDI_TYPE_S"
              glib:nick="s"
              glib:name="PANGO_BIDI_TYPE_S">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="51">Segment Separator</doc>
      </member>
      <member name="ws"
              value="17"
              c:identifier="PANGO_BIDI_TYPE_WS"
              glib:nick="ws"
              glib:name="PANGO_BIDI_TYPE_WS">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="52">Whitespace</doc>
      </member>
      <member name="on"
              value="18"
              c:identifier="PANGO_BIDI_TYPE_ON"
              glib:nick="on"
              glib:name="PANGO_BIDI_TYPE_ON">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="53">Other Neutrals</doc>
      </member>
      <member name="lri"
              value="19"
              c:identifier="PANGO_BIDI_TYPE_LRI"
              glib:nick="lri"
              glib:name="PANGO_BIDI_TYPE_LRI">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="54">Left-to-Right isolate. Since 1.48.6</doc>
      </member>
      <member name="rli"
              value="20"
              c:identifier="PANGO_BIDI_TYPE_RLI"
              glib:nick="rli"
              glib:name="PANGO_BIDI_TYPE_RLI">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="55">Right-to-Left isolate. Since 1.48.6</doc>
      </member>
      <member name="fsi"
              value="21"
              c:identifier="PANGO_BIDI_TYPE_FSI"
              glib:nick="fsi"
              glib:name="PANGO_BIDI_TYPE_FSI">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="56">First strong isolate. Since 1.48.6</doc>
      </member>
      <member name="pdi"
              value="22"
              c:identifier="PANGO_BIDI_TYPE_PDI"
              glib:nick="pdi"
              glib:name="PANGO_BIDI_TYPE_PDI">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.h"
             line="57">Pop directional isolate. Since 1.48.6</doc>
      </member>
      <function name="for_unichar"
                c:identifier="pango_bidi_type_for_unichar"
                version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.c"
             line="34">Determines the bidirectional type of a character.

The bidirectional type is specified in the Unicode Character Database.

A simplified version of this function is available as [func@unichar_direction].</doc>
        <source-position filename="pango/pango-bidi-type.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-bidi-type.c"
               line="44">the bidirectional character type, as used in the
Unicode bidirectional algorithm.</doc>
          <type name="BidiType" c:type="PangoBidiType"/>
        </return-value>
        <parameters>
          <parameter name="ch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-bidi-type.c"
                 line="36">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function-macro name="CONTEXT"
                    c:identifier="PANGO_CONTEXT"
                    introspectable="0">
      <source-position filename="pango/pango-context.h" line="36"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_CLASS"
                    c:identifier="PANGO_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-context.h" line="37"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_GET_CLASS"
                    c:identifier="PANGO_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-context.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Color"
            c:type="PangoColor"
            glib:type-name="PangoColor"
            glib:get-type="pango_color_get_type"
            c:symbol-prefix="color">
      <doc xml:space="preserve"
           filename="pango/pango-color.h"
           line="33">The `PangoColor` structure is used to
represent a color in an uncalibrated RGB color-space.</doc>
      <source-position filename="pango/pango-color.h" line="47"/>
      <field name="red" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-color.h"
             line="35">value of red component</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="green" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-color.h"
             line="36">value of green component</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="blue" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-color.h"
             line="37">value of blue component</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <method name="copy" c:identifier="pango_color_copy">
        <doc xml:space="preserve"
             filename="pango/pango-color.c"
             line="35">Creates a copy of @src.

The copy should be freed with [method@Pango.Color.free].
Primarily used by language bindings, not that useful
otherwise (since colors can just be copied by assignment
in C).</doc>
        <source-position filename="pango/pango-color.h" line="55"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-color.c"
               line="46">the newly allocated `PangoColor`,
  which should be freed with [method@Pango.Color.free]</doc>
          <type name="Color" c:type="PangoColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-color.c"
                 line="37">color to copy</doc>
            <type name="Color" c:type="const PangoColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_color_free">
        <doc xml:space="preserve"
             filename="pango/pango-color.c"
             line="64">Frees a color allocated by [method@Pango.Color.copy].</doc>
        <source-position filename="pango/pango-color.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-color.c"
                 line="66">an allocated `PangoColor`</doc>
            <type name="Color" c:type="PangoColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse" c:identifier="pango_color_parse">
        <doc xml:space="preserve"
             filename="pango/pango-color.c"
             line="324">Fill in the fields of a color from a string specification.

The string can either one of a large set of standard names.
(Taken from the CSS Color [specification](https://www.w3.org/TR/css-color-4/#named-colors),
or it can be a value in the form `#rgb`, `#rrggbb`,
`#rrrgggbbb` or `#rrrrggggbbbb`, where `r`, `g` and `b`
are hex digits of the red, green, and blue components
of the color, respectively. (White in the four forms is
`#fff`, `#ffffff`, `#fffffffff` and `#ffffffffffff`.)</doc>
        <source-position filename="pango/pango-color.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-color.c"
               line="340">%TRUE if parsing of the specifier succeeded,
  otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="color"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-color.c"
                 line="326">a `PangoColor` structure in which
  to store the result</doc>
            <type name="Color" c:type="PangoColor*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-color.c"
                 line="328">a string specifying the new color</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_with_alpha"
              c:identifier="pango_color_parse_with_alpha"
              version="1.46">
        <doc xml:space="preserve"
             filename="pango/pango-color.c"
             line="213">Fill in the fields of a color from a string specification.

The string can either one of a large set of standard names.
(Taken from the CSS Color [specification](https://www.w3.org/TR/css-color-4/#named-colors),
or it can be a hexadecimal value in the form `#rgb`,
`#rrggbb`, `#rrrgggbbb` or `#rrrrggggbbbb` where `r`, `g`
and `b` are hex digits of the red, green, and blue components
of the color, respectively. (White in the four forms is
`#fff`, `#ffffff`, `#fffffffff` and `#ffffffffffff`.)

Additionally, parse strings of the form `#rgba`, `#rrggbbaa`,
`#rrrrggggbbbbaaaa`, if @alpha is not %NULL, and set @alpha
to the value specified by the hex digits for `a`. If no alpha
component is found in @spec, @alpha is set to 0xffff (for a
solid color).</doc>
        <source-position filename="pango/pango-color.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-color.c"
               line="236">%TRUE if parsing of the specifier succeeded,
  otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="color"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-color.c"
                 line="215">a `PangoColor` structure in which
  to store the result</doc>
            <type name="Color" c:type="PangoColor*"/>
          </instance-parameter>
          <parameter name="alpha"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-color.c"
                 line="217">return location for alpha</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
          <parameter name="spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-color.c"
                 line="218">a string specifying the new color</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="pango_color_to_string"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-color.c"
             line="79">Returns a textual specification of @color.

The string is in the hexadecimal form `#rrrrggggbbbb`,
where `r`, `g` and `b` are hex digits representing the
red, green, and blue components respectively.</doc>
        <source-position filename="pango/pango-color.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-color.c"
               line="89">a newly-allocated text string that must
  be freed with g_free().</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-color.c"
                 line="81">a `PangoColor`</doc>
            <type name="Color" c:type="const PangoColor*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Context"
           c:symbol-prefix="context"
           c:type="PangoContext"
           parent="GObject.Object"
           glib:type-name="PangoContext"
           glib:get-type="pango_context_get_type"
           glib:type-struct="ContextClass">
      <doc xml:space="preserve"
           filename="pango/pango-context.c"
           line="37">A `PangoContext` stores global information used to control the
itemization process.

The information stored by `PangoContext` includes the fontmap used
to look up fonts, and default values such as the default language,
default gravity, or default font.

To obtain a `PangoContext`, use [method@Pango.FontMap.create_context].</doc>
      <source-position filename="pango/pango-context.h" line="33"/>
      <constructor name="new" c:identifier="pango_context_new">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="111">Creates a new `PangoContext` initialized to default values.

This function is not particularly useful as it should always
be followed by a [method@Pango.Context.set_font_map] call, and the
function [method@Pango.FontMap.create_context] does these two steps
together and hence users are recommended to use that.

If you are using Pango as part of a higher-level system,
that system may have it's own way of create a `PangoContext`.
For instance, the GTK toolkit has, among others,
`gtk_widget_get_pango_context()`. Use those instead.</doc>
        <source-position filename="pango/pango-context.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="126">the newly allocated `PangoContext`, which should
  be freed with g_object_unref().</doc>
          <type name="Context" c:type="PangoContext*"/>
        </return-value>
      </constructor>
      <method name="changed"
              c:identifier="pango_context_changed"
              version="1.32.4">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="747">Forces a change in the context, which will cause any `PangoLayout`
using this context to re-layout.

This function is only useful when implementing a new backend
for Pango, something applications won't do. Backends should
call this function if they have attached extra data to the context
and such data is changed.</doc>
        <source-position filename="pango/pango-context.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="749">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_dir" c:identifier="pango_context_get_base_dir">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="447">Retrieves the base direction for the context.

See [method@Pango.Context.set_base_dir].</doc>
        <source-position filename="pango/pango-context.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="455">the base direction for the context.</doc>
          <type name="Direction" c:type="PangoDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="449">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_gravity"
              c:identifier="pango_context_get_base_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="490">Retrieves the base gravity for the context.

See [method@Pango.Context.set_base_gravity].</doc>
        <source-position filename="pango/pango-context.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="498">the base gravity for the context.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="492">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_description"
              c:identifier="pango_context_get_font_description">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="362">Retrieve the default font description for the context.</doc>
        <source-position filename="pango/pango-context.h" line="78"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="368">a pointer to the context's default font
  description. This value must not be modified or freed.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="364">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_map"
              c:identifier="pango_context_get_font_map"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="242">Gets the `PangoFontMap` used to look up fonts for this context.</doc>
        <source-position filename="pango/pango-context.h" line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="248">the font map for the.
  `PangoContext` This value is owned by Pango and should not be
  unreferenced.</doc>
          <type name="FontMap" c:type="PangoFontMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="244">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gravity"
              c:identifier="pango_context_get_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="510">Retrieves the gravity for the context.

This is similar to [method@Pango.Context.get_base_gravity],
except for when the base gravity is %PANGO_GRAVITY_AUTO for
which [func@Pango.Gravity.get_for_matrix] is used to return the
gravity from the current context matrix.</doc>
        <source-position filename="pango/pango-context.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="521">the resolved gravity for the context.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="512">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gravity_hint"
              c:identifier="pango_context_get_gravity_hint"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="559">Retrieves the gravity hint for the context.

See [method@Pango.Context.set_gravity_hint] for details.</doc>
        <source-position filename="pango/pango-context.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="567">the gravity hint for the context.</doc>
          <type name="GravityHint" c:type="PangoGravityHint"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="561">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language" c:identifier="pango_context_get_language">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="405">Retrieves the global language tag for the context.</doc>
        <source-position filename="pango/pango-context.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="411">the global language tag.</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="407">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matrix"
              c:identifier="pango_context_get_matrix"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="184">Gets the transformation matrix that will be applied when
rendering with this context.

See [method@Pango.Context.set_matrix].</doc>
        <source-position filename="pango/pango-context.h" line="106"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="193">the matrix, or %NULL if no
  matrix has been set (which is the same as the identity matrix).
  The returned matrix is owned by Pango and must not be modified
  or freed.</doc>
          <type name="Matrix" c:type="const PangoMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="186">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metrics" c:identifier="pango_context_get_metrics">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="663">Get overall metric information for a particular font description.

Since the metrics may be substantially different for different scripts,
a language tag can be provided to indicate that the metrics should be
retrieved that correspond to the script(s) used by that language.

The `PangoFontDescription` is interpreted in the same way as by [func@itemize],
and the family name may be a comma separated list of names. If characters
from multiple of these families would be used to render the string, then
the returned fonts would be a composite of the metrics for the fonts loaded
for the individual families.</doc>
        <source-position filename="pango/pango-context.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="686">a `PangoFontMetrics` object. The caller must call
  [method@Pango.FontMetrics.unref] when finished using the object.</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="665">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="desc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="666">a `PangoFontDescription` structure. %NULL means that the
  font description from the context will be used.</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="668">language tag used to determine which script to get
  the metrics for. %NULL means that the language tag from the context
  will be used. If no language tag is set on the context, metrics
  for the default language (as determined by [func@Pango.Language.get_default]
  will be returned.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_round_glyph_positions"
              c:identifier="pango_context_get_round_glyph_positions"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="837">Returns whether font rendering with this context should
round glyph positions and widths.</doc>
        <source-position filename="pango/pango-context.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="839">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="pango_context_get_serial"
              version="1.32.4">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="781">Returns the current serial number of @context.

The serial number is initialized to an small number larger than zero
when a new context is created and is increased whenever the context
is changed using any of the setter functions, or the `PangoFontMap` it
uses to find fonts has changed. The serial may wrap, but will never
have the value 0. Since it can wrap, never compare it with "less than",
always use "not equals".

This can be used to automatically detect changes to a `PangoContext`,
and is only useful when implementing objects that need update when their
`PangoContext` changes, like `PangoLayout`.</doc>
        <source-position filename="pango/pango-context.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="798">The current serial number of @context.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="783">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_families" c:identifier="pango_context_list_families">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="262">List all families for a context.</doc>
        <source-position filename="pango/pango-context.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="264">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="265">location
  to store a pointer to an array of `PangoFontFamily`. This array should
  be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFamily***">
              <type name="FontFamily" c:type="PangoFontFamily**"/>
            </array>
          </parameter>
          <parameter name="n_families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="268">location to store the number of elements in @descs</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_font" c:identifier="pango_context_load_font">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="295">Loads the font in one of the fontmaps in the context
that is the closest match for @desc.</doc>
        <source-position filename="pango/pango-context.h" line="62"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="303">the newly allocated `PangoFont`
  that was loaded, or %NULL if no font matched.</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="297">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="298">a `PangoFontDescription` describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_fontset" c:identifier="pango_context_load_fontset">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="316">Load a set of fonts in the context that can be used to render
a font matching @desc.</doc>
        <source-position filename="pango/pango-context.h" line="65"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-context.c"
               line="325">the newly allocated
  `PangoFontset` loaded, or %NULL if no font matched.</doc>
          <type name="Fontset" c:type="PangoFontset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="318">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="319">a `PangoFontDescription` describing the fonts to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="320">a `PangoLanguage` the fonts will be used for</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_dir" c:identifier="pango_context_set_base_dir">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="421">Sets the base direction for the context.

The base direction is used in applying the Unicode bidirectional
algorithm; if the @direction is %PANGO_DIRECTION_LTR or
%PANGO_DIRECTION_RTL, then the value will be used as the paragraph
direction in the Unicode bidirectional algorithm. A value of
%PANGO_DIRECTION_WEAK_LTR or %PANGO_DIRECTION_WEAK_RTL is used only
for paragraphs that do not contain any strong characters themselves.</doc>
        <source-position filename="pango/pango-context.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="423">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="424">the new base direction</doc>
            <type name="Direction" c:type="PangoDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_gravity"
              c:identifier="pango_context_set_base_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="465">Sets the base gravity for the context.

The base gravity is used in laying vertical text out.</doc>
        <source-position filename="pango/pango-context.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="467">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="468">the new base gravity</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_description"
              c:identifier="pango_context_set_font_description">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="338">Set the default font description for the context</doc>
        <source-position filename="pango/pango-context.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="340">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="desc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="341">the new pango font description</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_map" c:identifier="pango_context_set_font_map">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="208">Sets the font map to be searched when fonts are looked-up
in this context.

This is only for internal use by Pango backends, a `PangoContext`
obtained via one of the recommended methods should already have a
suitable font map.</doc>
        <source-position filename="pango/pango-context.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="210">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="font_map"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="211">the `PangoFontMap` to set.</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gravity_hint"
              c:identifier="pango_context_set_gravity_hint"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="533">Sets the gravity hint for the context.

The gravity hint is used in laying vertical text out, and
is only relevant if gravity of the context as returned by
[method@Pango.Context.get_gravity] is set to %PANGO_GRAVITY_EAST
or %PANGO_GRAVITY_WEST.</doc>
        <source-position filename="pango/pango-context.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="535">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="536">the new gravity hint</doc>
            <type name="GravityHint" c:type="PangoGravityHint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language" c:identifier="pango_context_set_language">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="379">Sets the global language tag for the context.

The default language for the locale of the running process
can be found using [func@Pango.Language.get_default].</doc>
        <source-position filename="pango/pango-context.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="381">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="382">the new language tag.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_matrix"
              c:identifier="pango_context_set_matrix"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="148">Sets the transformation matrix that will be applied when rendering
with this context.

Note that reported metrics are in the user space coordinates before
the application of the matrix, not device-space coordinates after the
application of the matrix. So, they don't scale with the matrix, though
they may change slightly for different matrices, depending on how the
text is fit to the pixel grid.</doc>
        <source-position filename="pango/pango-context.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="150">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="matrix"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="151">a `PangoMatrix`, or %NULL to unset any existing
matrix. (No matrix set is the same as setting the identity matrix.)</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_round_glyph_positions"
              c:identifier="pango_context_set_round_glyph_positions"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-context.c"
             line="809">Sets whether font rendering with this context should
round glyph positions and widths to integral positions,
in device units.

This is useful when the renderer can't handle subpixel
positioning of glyphs.

The default value is to round glyph positions, to remain
compatible with previous Pango behavior.</doc>
        <source-position filename="pango/pango-context.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="811">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="round_positions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-context.c"
                 line="812">whether to round glyph positions</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ContextClass"
            c:type="PangoContextClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Context">
      <source-position filename="pango/pango-context.h" line="33"/>
    </record>
    <class name="Coverage"
           c:symbol-prefix="coverage"
           c:type="PangoCoverage"
           parent="GObject.Object"
           glib:type-name="PangoCoverage"
           glib:get-type="pango_coverage_get_type">
      <doc xml:space="preserve"
           filename="pango/pango-coverage.h"
           line="32">A `PangoCoverage` structure is a map from Unicode characters
to [enum@Pango.CoverageLevel] values.

It is often necessary in Pango to determine if a particular
font can represent a particular character, and also how well
it can represent that character. The `PangoCoverage` is a data
structure that is used to represent that information. It is an
opaque structure with no public fields.</doc>
      <constructor name="new" c:identifier="pango_coverage_new">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="107">Create a new `PangoCoverage`</doc>
        <source-position filename="pango/pango-coverage.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-coverage.c"
               line="112">the newly allocated `PangoCoverage`, initialized
  to %PANGO_COVERAGE_NONE with a reference count of one, which
  should be freed with [method@Pango.Coverage.unref].</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
      </constructor>
      <function name="from_bytes"
                c:identifier="pango_coverage_from_bytes"
                deprecated="1"
                deprecated-version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="239">Convert data generated from [method@Pango.Coverage.to_bytes]
back to a `PangoCoverage`.</doc>
        <doc-deprecated xml:space="preserve">This returns %NULL</doc-deprecated>
        <source-position filename="pango/pango-coverage.h" line="101"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-coverage.c"
               line="248">a newly allocated `PangoCoverage`</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="241">binary data
  representing a `PangoCoverage`</doc>
            <array length="1" zero-terminated="0" c:type="guchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="n_bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="243">the size of @bytes in bytes</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <method name="copy" c:identifier="pango_coverage_copy">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="122">Copy an existing `PangoCoverage`.</doc>
        <source-position filename="pango/pango-coverage.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-coverage.c"
               line="128">the newly allocated `PangoCoverage`,
  with a reference count of one, which should be freed with
  [method@Pango.Coverage.unref].</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="124">a `PangoCoverage`</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="pango_coverage_get">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="170">Determine whether a particular index is covered by @coverage.</doc>
        <source-position filename="pango/pango-coverage.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-coverage.c"
               line="177">the coverage level of @coverage for character @index_.</doc>
          <type name="CoverageLevel" c:type="PangoCoverageLevel"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="172">a `PangoCoverage`</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="173">the index to check</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="max"
              c:identifier="pango_coverage_max"
              deprecated="1"
              deprecated-version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="202">Set the coverage for each index in @coverage to be the max (better)
value of the current coverage for the index and the coverage for
the corresponding index in @other.</doc>
        <doc-deprecated xml:space="preserve">This function does nothing</doc-deprecated>
        <source-position filename="pango/pango-coverage.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="204">a `PangoCoverage`</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="205">another `PangoCoverage`</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="pango_coverage_ref"
              deprecated="1"
              deprecated-version="1.52">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="138">Increase the reference count on the `PangoCoverage` by one.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_ref instead</doc-deprecated>
        <source-position filename="pango/pango-coverage.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-coverage.c"
               line="144">@coverage</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="140">a `PangoCoverage`</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="pango_coverage_set">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="186">Modify a particular index within @coverage</doc>
        <source-position filename="pango/pango-coverage.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="188">a `PangoCoverage`</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="189">the index to modify</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="190">the new level for @index_</doc>
            <type name="CoverageLevel" c:type="PangoCoverageLevel"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_bytes"
              c:identifier="pango_coverage_to_bytes"
              deprecated="1"
              deprecated-version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="219">Convert a `PangoCoverage` structure into a flat binary format.</doc>
        <doc-deprecated xml:space="preserve">This returns %NULL</doc-deprecated>
        <source-position filename="pango/pango-coverage.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="221">a `PangoCoverage`</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
          <parameter name="bytes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="222">
  location to store result (must be freed with g_free())</doc>
            <array length="1" zero-terminated="0" c:type="guchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="n_bytes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="224">location to store size of result</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="pango_coverage_unref"
              deprecated="1"
              deprecated-version="1.52">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.c"
             line="154">Decrease the reference count on the `PangoCoverage` by one.

If the result is zero, free the coverage and all associated memory.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_unref instead</doc-deprecated>
        <source-position filename="pango/pango-coverage.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-coverage.c"
                 line="156">a `PangoCoverage`</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="CoverageLevel"
                 glib:type-name="PangoCoverageLevel"
                 glib:get-type="pango_coverage_level_get_type"
                 c:type="PangoCoverageLevel">
      <doc xml:space="preserve"
           filename="pango/pango-coverage.h"
           line="46">`PangoCoverageLevel` is used to indicate how well a font can
represent a particular Unicode character for a particular script.

Since 1.44, only %PANGO_COVERAGE_NONE and %PANGO_COVERAGE_EXACT
will be returned.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_COVERAGE_NONE"
              glib:nick="none"
              glib:name="PANGO_COVERAGE_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.h"
             line="48">The character is not representable with
  the font.</doc>
      </member>
      <member name="fallback"
              value="1"
              c:identifier="PANGO_COVERAGE_FALLBACK"
              glib:nick="fallback"
              glib:name="PANGO_COVERAGE_FALLBACK">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.h"
             line="50">The character is represented in a
  way that may be comprehensible but is not the correct
  graphical form. For instance, a Hangul character represented
  as a a sequence of Jamos, or a Latin transliteration of a
  Cyrillic word.</doc>
      </member>
      <member name="approximate"
              value="2"
              c:identifier="PANGO_COVERAGE_APPROXIMATE"
              glib:nick="approximate"
              glib:name="PANGO_COVERAGE_APPROXIMATE">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.h"
             line="55">The character is represented as
  basically the correct graphical form, but with a stylistic
  variant inappropriate for the current script.</doc>
      </member>
      <member name="exact"
              value="3"
              c:identifier="PANGO_COVERAGE_EXACT"
              glib:nick="exact"
              glib:name="PANGO_COVERAGE_EXACT">
        <doc xml:space="preserve"
             filename="pango/pango-coverage.h"
             line="58">The character is represented as the
  correct graphical form.</doc>
      </member>
    </enumeration>
    <function-macro name="DESCENT"
                    c:identifier="PANGO_DESCENT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="190">Extracts the *descent* from a `PangoRectangle`
representing glyph extents.

The descent is the distance from the baseline to the
lowest point of the character. This is positive if the
glyph descends below the baseline.</doc>
      <source-position filename="pango/pango-types.h" line="226"/>
      <parameters>
        <parameter name="rect">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="192">a `PangoRectangle`</doc>
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="Direction"
                 glib:type-name="PangoDirection"
                 glib:get-type="pango_direction_get_type"
                 c:type="PangoDirection">
      <doc xml:space="preserve"
           filename="pango/pango-direction.h"
           line="29">`PangoDirection` represents a direction in the Unicode bidirectional
algorithm.

Not every value in this enumeration makes sense for every usage of
`PangoDirection`; for example, the return value of [func@unichar_direction]
and [func@find_base_dir] cannot be `PANGO_DIRECTION_WEAK_LTR` or
`PANGO_DIRECTION_WEAK_RTL`, since every character is either neutral
or has a strong direction; on the other hand `PANGO_DIRECTION_NEUTRAL`
doesn't make sense to pass to [func@itemize_with_base_dir].

The `PANGO_DIRECTION_TTB_LTR`, `PANGO_DIRECTION_TTB_RTL` values come from
an earlier interpretation of this enumeration as the writing direction
of a block of text and are no longer used. See `PangoGravity` for how
vertical text is handled in Pango.

If you are interested in text direction, you should really use fribidi
directly. `PangoDirection` is only retained because it is used in some
public apis.</doc>
      <member name="ltr"
              value="0"
              c:identifier="PANGO_DIRECTION_LTR"
              glib:nick="ltr"
              glib:name="PANGO_DIRECTION_LTR">
        <doc xml:space="preserve"
             filename="pango/pango-direction.h"
             line="31">A strong left-to-right direction</doc>
      </member>
      <member name="rtl"
              value="1"
              c:identifier="PANGO_DIRECTION_RTL"
              glib:nick="rtl"
              glib:name="PANGO_DIRECTION_RTL">
        <doc xml:space="preserve"
             filename="pango/pango-direction.h"
             line="32">A strong right-to-left direction</doc>
      </member>
      <member name="ttb_ltr"
              value="2"
              c:identifier="PANGO_DIRECTION_TTB_LTR"
              glib:nick="ttb-ltr"
              glib:name="PANGO_DIRECTION_TTB_LTR">
        <doc xml:space="preserve"
             filename="pango/pango-direction.h"
             line="33">Deprecated value; treated the
  same as `PANGO_DIRECTION_RTL`.</doc>
      </member>
      <member name="ttb_rtl"
              value="3"
              c:identifier="PANGO_DIRECTION_TTB_RTL"
              glib:nick="ttb-rtl"
              glib:name="PANGO_DIRECTION_TTB_RTL">
        <doc xml:space="preserve"
             filename="pango/pango-direction.h"
             line="35">Deprecated value; treated the
  same as `PANGO_DIRECTION_LTR`</doc>
      </member>
      <member name="weak_ltr"
              value="4"
              c:identifier="PANGO_DIRECTION_WEAK_LTR"
              glib:nick="weak-ltr"
              glib:name="PANGO_DIRECTION_WEAK_LTR">
        <doc xml:space="preserve"
             filename="pango/pango-direction.h"
             line="37">A weak left-to-right direction</doc>
      </member>
      <member name="weak_rtl"
              value="5"
              c:identifier="PANGO_DIRECTION_WEAK_RTL"
              glib:nick="weak-rtl"
              glib:name="PANGO_DIRECTION_WEAK_RTL">
        <doc xml:space="preserve"
             filename="pango/pango-direction.h"
             line="38">A weak right-to-left direction</doc>
      </member>
      <member name="neutral"
              value="6"
              c:identifier="PANGO_DIRECTION_NEUTRAL"
              glib:nick="neutral"
              glib:name="PANGO_DIRECTION_NEUTRAL">
        <doc xml:space="preserve"
             filename="pango/pango-direction.h"
             line="39">No direction specified</doc>
      </member>
    </enumeration>
    <enumeration name="EllipsizeMode"
                 glib:type-name="PangoEllipsizeMode"
                 glib:get-type="pango_ellipsize_mode_get_type"
                 c:type="PangoEllipsizeMode">
      <doc xml:space="preserve"
           filename="pango/pango-layout.h"
           line="88">`PangoEllipsizeMode` describes what sort of ellipsization
should be applied to text.

In the ellipsization process characters are removed from the
text in order to make it fit to a given width and replaced
with an ellipsis.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_ELLIPSIZE_NONE"
              glib:nick="none"
              glib:name="PANGO_ELLIPSIZE_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="90">No ellipsization</doc>
      </member>
      <member name="start"
              value="1"
              c:identifier="PANGO_ELLIPSIZE_START"
              glib:nick="start"
              glib:name="PANGO_ELLIPSIZE_START">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="91">Omit characters at the start of the text</doc>
      </member>
      <member name="middle"
              value="2"
              c:identifier="PANGO_ELLIPSIZE_MIDDLE"
              glib:nick="middle"
              glib:name="PANGO_ELLIPSIZE_MIDDLE">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="92">Omit characters in the middle of the text</doc>
      </member>
      <member name="end"
              value="3"
              c:identifier="PANGO_ELLIPSIZE_END"
              glib:nick="end"
              glib:name="PANGO_ELLIPSIZE_END">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="93">Omit characters at the end of the text</doc>
      </member>
    </enumeration>
    <function-macro name="FONT" c:identifier="PANGO_FONT" introspectable="0">
      <source-position filename="pango/pango-font.h" line="541"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONTSET"
                    c:identifier="PANGO_FONTSET"
                    introspectable="0">
      <source-position filename="pango/pango-fontset.h" line="37"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONTSET_CLASS"
                    c:identifier="PANGO_FONTSET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-fontset.h" line="39"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONTSET_GET_CLASS"
                    c:identifier="PANGO_FONTSET_GET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-fontset.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONTSET_SIMPLE"
                    c:identifier="PANGO_FONTSET_SIMPLE"
                    introspectable="0">
      <source-position filename="pango/pango-fontset-simple.h" line="43"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_CLASS"
                    c:identifier="PANGO_FONT_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="543"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FACE"
                    c:identifier="PANGO_FONT_FACE"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="474"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FACE_CLASS"
                    c:identifier="PANGO_FONT_FACE_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="476"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FACE_GET_CLASS"
                    c:identifier="PANGO_FONT_FACE_GET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="478"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FAMILY"
                    c:identifier="PANGO_FONT_FAMILY"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="399"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FAMILY_CLASS"
                    c:identifier="PANGO_FONT_FAMILY_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="401"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FAMILY_GET_CLASS"
                    c:identifier="PANGO_FONT_FAMILY_GET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="403"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_GET_CLASS"
                    c:identifier="PANGO_FONT_GET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="545"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_MAP"
                    c:identifier="PANGO_FONT_MAP"
                    introspectable="0">
      <source-position filename="pango/pango-fontmap.h" line="32"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_MAP_CLASS"
                    c:identifier="PANGO_FONT_MAP_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-fontmap.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_MAP_GET_CLASS"
                    c:identifier="PANGO_FONT_MAP_GET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-fontmap.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Font"
           c:symbol-prefix="font"
           c:type="PangoFont"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFont"
           glib:get-type="pango_font_get_type"
           glib:type-struct="FontClass">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="550">A `PangoFont` is used to represent a font in a
rendering-system-independent manner.</doc>
      <source-position filename="pango/pango-font.h" line="584"/>
      <function name="descriptions_free"
                c:identifier="pango_font_descriptions_free">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="986">Frees an array of font descriptions.</doc>
        <source-position filename="pango/pango-font.h" line="263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="descs"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="988">a pointer
  to an array of `PangoFontDescription`, may be %NULL</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="PangoFontDescription**">
              <type name="FontDescription" c:type="PangoFontDescription*"/>
            </array>
          </parameter>
          <parameter name="n_descs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="990">number of font descriptions in @descs</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="deserialize"
                c:identifier="pango_font_deserialize"
                version="1.50"
                throws="1">
        <doc xml:space="preserve"
             filename="pango/serializer.c"
             line="1767">Loads data previously created via [method@Pango.Font.serialize].

For a discussion of the supported format, see that function.

Note: to verify that the returned font is identical to
the one that was serialized, you can compare @bytes to the
result of serializing the font again.</doc>
        <source-position filename="pango/pango-font.h" line="636"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/serializer.c"
               line="1781">a new `PangoFont`</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1769">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1770">the bytes containing the data</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="create_hb_font">
        <source-position filename="pango/pango-font.h" line="583"/>
        <return-value transfer-ownership="full">
          <type name="HarfBuzz.font_t" c:type="hb_font_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="describe" invoker="describe">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1801">Returns a description of the font, with font size set in points.

Use [method@Pango.Font.describe_with_absolute_size] if you want
the font size in device units.</doc>
        <source-position filename="pango/pango-font.h" line="568"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1810">a newly-allocated `PangoFontDescription` object.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1803">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="describe_absolute">
        <source-position filename="pango/pango-font.h" line="578"/>
        <return-value transfer-ownership="full">
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_coverage" invoker="get_coverage">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1847">Computes the coverage map for a given font and language tag.</doc>
        <source-position filename="pango/pango-font.h" line="569"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1854">a newly-allocated `PangoCoverage`
  object.</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1849">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1850">the language tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_features"
                      invoker="get_features"
                      version="1.44">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2777">Obtain the OpenType features that are provided by the font.

These are passed to the rendering system, together with features
that have been explicitly set via attributes.

Note that this does not include OpenType features which the
rendering system enables by default.</doc>
        <source-position filename="pango/pango-font.h" line="579"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2779">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="features"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2780">Array to features in</doc>
            <array length="1" zero-terminated="0" c:type="hb_feature_t*">
              <type name="HarfBuzz.feature_t" c:type="hb_feature_t"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2781">the length of @features</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="num_features"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2782">the number of used items in @features</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_font_map"
                      invoker="get_font_map"
                      version="1.10">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1976">Gets the font map for which the font was created.

Note that the font maintains a *weak* reference to
the font map, so if all references to font map are
dropped, the font map will be finalized even if there
are fonts created with the font map that are still alive.
In that case this function will return %NULL.

It is the responsibility of the user to ensure that the
font map is kept alive. In most uses this is not an issue
as a `PangoContext` holds a reference to the font map.</doc>
        <source-position filename="pango/pango-font.h" line="577"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1992">the `PangoFontMap`
  for the font</doc>
          <type name="FontMap" c:type="PangoFontMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1978">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_glyph_extents" invoker="get_glyph_extents">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1886">Gets the logical and ink extents of a glyph within a font.

The coordinate system for each rectangle has its origin at the
base line and horizontal origin of the character with increasing
coordinates extending to the right and down. The macros PANGO_ASCENT(),
PANGO_DESCENT(), PANGO_LBEARING(), and PANGO_RBEARING() can be used to convert
from the extents rectangle to more traditional font metrics. The units
of the rectangles are in 1/PANGO_SCALE of a device unit.

If @font is %NULL, this function gracefully sets some sane values in the
output variables and returns.</doc>
        <source-position filename="pango/pango-font.h" line="571"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1888">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="glyph" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1889">the glyph index</doc>
            <type name="Glyph" c:type="PangoGlyph"/>
          </parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1890">rectangle used to store the extents of the glyph as drawn</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1891">rectangle used to store the logical extents of the glyph</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metrics" invoker="get_metrics">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1933">Gets overall metric information for a font.

Since the metrics may be substantially different for different scripts,
a language tag can be provided to indicate that the metrics should be
retrieved that correspond to the script(s) used by that language.

If @font is %NULL, this function gracefully sets some sane values in the
output variables and returns.</doc>
        <source-position filename="pango/pango-font.h" line="575"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1949">a `PangoFontMetrics` object. The caller must call
  [method@Pango.FontMetrics.unref] when finished using the object.</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1935">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1936">language tag used to determine which script
  to get the metrics for, or %NULL to indicate to get the metrics for
  the entire font.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="describe" c:identifier="pango_font_describe">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1801">Returns a description of the font, with font size set in points.

Use [method@Pango.Font.describe_with_absolute_size] if you want
the font size in device units.</doc>
        <source-position filename="pango/pango-font.h" line="592"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1810">a newly-allocated `PangoFontDescription` object.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1803">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="describe_with_absolute_size"
              c:identifier="pango_font_describe_with_absolute_size"
              version="1.14">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1820">Returns a description of the font, with absolute font size set
in device units.

Use [method@Pango.Font.describe] if you want the font size in points.</doc>
        <source-position filename="pango/pango-font.h" line="594"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1829">a newly-allocated `PangoFontDescription` object.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1822">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_coverage" c:identifier="pango_font_get_coverage">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1847">Computes the coverage map for a given font and language tag.</doc>
        <source-position filename="pango/pango-font.h" line="596"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1854">a newly-allocated `PangoCoverage`
  object.</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1849">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1850">the language tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_face"
              c:identifier="pango_font_get_face"
              version="1.46">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2009">Gets the `PangoFontFace` to which @font belongs.</doc>
        <source-position filename="pango/pango-font.h" line="616"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2015">the `PangoFontFace`</doc>
          <type name="FontFace" c:type="PangoFontFace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2011">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_features"
              c:identifier="pango_font_get_features"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2777">Obtain the OpenType features that are provided by the font.

These are passed to the rendering system, together with features
that have been explicitly set via attributes.

Note that this does not include OpenType features which the
rendering system enables by default.</doc>
        <source-position filename="pango/pango-font.h" line="622"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2779">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="features"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2780">Array to features in</doc>
            <array length="1" zero-terminated="0" c:type="hb_feature_t*">
              <type name="HarfBuzz.feature_t" c:type="hb_feature_t"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2781">the length of @features</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="num_features"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2782">the number of used items in @features</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_font_map"
              c:identifier="pango_font_get_font_map"
              version="1.10">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1976">Gets the font map for which the font was created.

Note that the font maintains a *weak* reference to
the font map, so if all references to font map are
dropped, the font map will be finalized even if there
are fonts created with the font map that are still alive.
In that case this function will return %NULL.

It is the responsibility of the user to ensure that the
font map is kept alive. In most uses this is not an issue
as a `PangoContext` holds a reference to the font map.</doc>
        <source-position filename="pango/pango-font.h" line="613"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1992">the `PangoFontMap`
  for the font</doc>
          <type name="FontMap" c:type="PangoFontMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1978">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_glyph_extents"
              c:identifier="pango_font_get_glyph_extents">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1886">Gets the logical and ink extents of a glyph within a font.

The coordinate system for each rectangle has its origin at the
base line and horizontal origin of the character with increasing
coordinates extending to the right and down. The macros PANGO_ASCENT(),
PANGO_DESCENT(), PANGO_LBEARING(), and PANGO_RBEARING() can be used to convert
from the extents rectangle to more traditional font metrics. The units
of the rectangles are in 1/PANGO_SCALE of a device unit.

If @font is %NULL, this function gracefully sets some sane values in the
output variables and returns.</doc>
        <source-position filename="pango/pango-font.h" line="608"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1888">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="glyph" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1889">the glyph index</doc>
            <type name="Glyph" c:type="PangoGlyph"/>
          </parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1890">rectangle used to store the extents of the glyph as drawn</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1891">rectangle used to store the logical extents of the glyph</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hb_font"
              c:identifier="pango_font_get_hb_font"
              version="1.44"
              introspectable="0">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2027">Get a `hb_font_t` object backing this font.

Note that the objects returned by this function are cached
and immutable. If you need to make changes to the `hb_font_t`,
use [hb_font_create_sub_font()](https://harfbuzz.github.io/harfbuzz-hb-font.html#hb-font-create-sub-font).</doc>
        <source-position filename="pango/pango-font.h" line="627"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2037">the `hb_font_t` object
  backing the font</doc>
          <type name="HarfBuzz.font_t" c:type="hb_font_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2029">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages"
              c:identifier="pango_font_get_languages"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2804">Returns the languages that are supported by @font.

If the font backend does not provide this information,
%NULL is returned. For the fontconfig backend, this
corresponds to the FC_LANG member of the FcPattern.

The returned array is only valid as long as the font
and its fontmap are valid.</doc>
        <source-position filename="pango/pango-font.h" line="630"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2817">an array of `PangoLanguage`</doc>
          <array c:type="PangoLanguage**">
            <type name="Language"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2806">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metrics" c:identifier="pango_font_get_metrics">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1933">Gets overall metric information for a font.

Since the metrics may be substantially different for different scripts,
a language tag can be provided to indicate that the metrics should be
retrieved that correspond to the script(s) used by that language.

If @font is %NULL, this function gracefully sets some sane values in the
output variables and returns.</doc>
        <source-position filename="pango/pango-font.h" line="605"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1949">a `PangoFontMetrics` object. The caller must call
  [method@Pango.FontMetrics.unref] when finished using the object.</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1935">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1936">language tag used to determine which script
  to get the metrics for, or %NULL to indicate to get the metrics for
  the entire font.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_char"
              c:identifier="pango_font_has_char"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2757">Returns whether the font provides a glyph for this character.</doc>
        <source-position filename="pango/pango-font.h" line="619"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2764">`TRUE` if @font can render @wc</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2759">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="wc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2760">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize"
              c:identifier="pango_font_serialize"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/serializer.c"
             line="1726">Serializes the @font in a way that can be uniquely identified.

There are no guarantees about the format of the output across different
versions of Pango.

The intended use of this function is testing, benchmarking and debugging.
The format is not meant as a permanent storage format.

To recreate a font from its serialized form, use [func@Pango.Font.deserialize].</doc>
        <source-position filename="pango/pango-font.h" line="633"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/serializer.c"
               line="1740">a `GBytes` containing the serialized form of @font</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1728">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontClass"
            c:type="PangoFontClass"
            glib:is-gtype-struct-for="Font">
      <source-position filename="pango/pango-font.h" line="584"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="describe">
        <callback name="describe">
          <source-position filename="pango/pango-font.h" line="568"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1810">a newly-allocated `PangoFontDescription` object.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1803">a `PangoFont`</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_coverage">
        <callback name="get_coverage">
          <source-position filename="pango/pango-font.h" line="569"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1854">a newly-allocated `PangoCoverage`
  object.</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1849">a `PangoFont`</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1850">the language tag</doc>
              <type name="Language" c:type="PangoLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_glyph_extents">
        <callback name="get_glyph_extents">
          <source-position filename="pango/pango-font.h" line="571"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="font"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1888">a `PangoFont`</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="glyph" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1889">the glyph index</doc>
              <type name="Glyph" c:type="PangoGlyph"/>
            </parameter>
            <parameter name="ink_rect"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1890">rectangle used to store the extents of the glyph as drawn</doc>
              <type name="Rectangle" c:type="PangoRectangle*"/>
            </parameter>
            <parameter name="logical_rect"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1891">rectangle used to store the logical extents of the glyph</doc>
              <type name="Rectangle" c:type="PangoRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metrics">
        <callback name="get_metrics">
          <source-position filename="pango/pango-font.h" line="575"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1949">a `PangoFontMetrics` object. The caller must call
  [method@Pango.FontMetrics.unref] when finished using the object.</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </return-value>
          <parameters>
            <parameter name="font"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1935">a `PangoFont`</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="language"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1936">language tag used to determine which script
  to get the metrics for, or %NULL to indicate to get the metrics for
  the entire font.</doc>
              <type name="Language" c:type="PangoLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_font_map">
        <callback name="get_font_map">
          <source-position filename="pango/pango-font.h" line="577"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1992">the `PangoFontMap`
  for the font</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </return-value>
          <parameters>
            <parameter name="font"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="1978">a `PangoFont`</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="describe_absolute">
        <callback name="describe_absolute">
          <source-position filename="pango/pango-font.h" line="578"/>
          <return-value transfer-ownership="full">
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_features">
        <callback name="get_features">
          <source-position filename="pango/pango-font.h" line="579"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2779">a `PangoFont`</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="features"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2780">Array to features in</doc>
              <array length="2" zero-terminated="0" c:type="hb_feature_t*">
                <type name="HarfBuzz.feature_t" c:type="hb_feature_t"/>
              </array>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2781">the length of @features</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="num_features"
                       direction="inout"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2782">the number of used items in @features</doc>
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_hb_font">
        <callback name="create_hb_font">
          <source-position filename="pango/pango-font.h" line="583"/>
          <return-value transfer-ownership="full">
            <type name="HarfBuzz.font_t" c:type="hb_font_t*"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FontDescription"
            c:type="PangoFontDescription"
            opaque="1"
            glib:type-name="PangoFontDescription"
            glib:get-type="pango_font_description_get_type"
            c:symbol-prefix="font_description">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="33">A `PangoFontDescription` describes a font in an implementation-independent
manner.

`PangoFontDescription` structures are used both to list what fonts are
available on the system and also for specifying the characteristics of
a font to load.</doc>
      <source-position filename="pango/pango-font.h" line="43"/>
      <constructor name="new" c:identifier="pango_font_description_new">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="76">Creates a new font description structure with all fields unset.</doc>
        <source-position filename="pango/pango-font.h" line="250"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="81">the newly allocated `PangoFontDescription`,
  which should be freed using [method@Pango.FontDescription.free].</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
      </constructor>
      <method name="better_match"
              c:identifier="pango_font_description_better_match">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="767">Determines if the style attributes of @new_match are a closer match
for @desc than those of @old_match are, or if @old_match is %NULL,
determines if @new_match is a match at all.

Approximate matching is done for weight and style; other style attributes
must match exactly. Style attributes are all attributes other than family
and size-related attributes. Approximate matching for style considers
%PANGO_STYLE_OBLIQUE and %PANGO_STYLE_ITALIC as matches, but not as good
a match as when the styles are equal.

Note that @old_match must match @desc.</doc>
        <source-position filename="pango/pango-font.h" line="335"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="785">%TRUE if @new_match is a better match</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="769">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="old_match"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="770">a `PangoFontDescription`, or %NULL</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="new_match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="771">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_font_description_copy">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="809">Make a copy of a `PangoFontDescription`.</doc>
        <source-position filename="pango/pango-font.h" line="252"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="815">the newly allocated `PangoFontDescription`,
  which should be freed with [method@Pango.FontDescription.free],
  or %NULL if @desc was %NULL.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="811">a `PangoFontDescription`, may be %NULL</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_static"
              c:identifier="pango_font_description_copy_static">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="843">Make a copy of a `PangoFontDescription`, but don't duplicate
allocated fields.

This is like [method@Pango.FontDescription.copy], but only a shallow
copy is made of the family name and other allocated fields. The result
can only be used until @desc is modified or freed. This is meant
to be used when the copy is only needed temporarily.</doc>
        <source-position filename="pango/pango-font.h" line="254"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="855">the newly allocated `PangoFontDescription`,
  which should be freed with [method@Pango.FontDescription.free],
  or %NULL if @desc was %NULL.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="845">a `PangoFontDescription`, may be %NULL</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="pango_font_description_equal">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="880">Compares two font descriptions for equality.

Two font descriptions are considered equal if the fonts they describe
are provably identical. This means that their masks do not have to match,
as long as other fields are all the same. (Two font descriptions may
result in identical fonts being loaded, but still compare %FALSE.)</doc>
        <source-position filename="pango/pango-font.h" line="258"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="892">%TRUE if the two font descriptions are identical,
  %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="882">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="desc2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="883">another `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_font_description_free">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="965">Frees a font description.</doc>
        <source-position filename="pango/pango-font.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="967">a `PangoFontDescription`, may be %NULL</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family"
              c:identifier="pango_font_description_get_family">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="157">Gets the family name field of a font description.

See [method@Pango.FontDescription.set_family].</doc>
        <source-position filename="pango/pango-font.h" line="273"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="165">the family name field for the
  font description, or %NULL if not previously set. This has the same
  life-time as the font description itself and should not be freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="159">a `PangoFontDescription`.</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gravity"
              c:identifier="pango_font_description_get_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="482">Gets the gravity field of a font description.

See [method@Pango.FontDescription.set_gravity].</doc>
        <source-position filename="pango/pango-font.h" line="308"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="490">the gravity field for the font description.
  Use [method@Pango.FontDescription.get_set_fields] to find out
  if the field was explicitly set or not.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="484">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_set_fields"
              c:identifier="pango_font_description_get_set_fields">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="603">Determines which fields in a font description have been set.</doc>
        <source-position filename="pango/pango-font.h" line="320"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="609">a bitmask with bits set corresponding to the
  fields in @desc that have been set.</doc>
          <type name="FontMask" c:type="PangoFontMask"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="605">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="pango_font_description_get_size">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="374">Gets the size field of a font description.

See [method@Pango.FontDescription.set_size].</doc>
        <source-position filename="pango/pango-font.h" line="298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="382">the size field for the font description in points
  or device units. You must call
  [method@Pango.FontDescription.get_size_is_absolute] to find out
  which is the case. Returns 0 if the size field has not previously
  been set or it has been set to 0 explicitly.
  Use [method@Pango.FontDescription.get_set_fields] to find out
  if the field was explicitly set or not.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="376">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size_is_absolute"
              c:identifier="pango_font_description_get_size_is_absolute"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="424">Determines whether the size of the font is in points (not absolute)
or device units (absolute).

See [method@Pango.FontDescription.set_size]
and [method@Pango.FontDescription.set_absolute_size].</doc>
        <source-position filename="pango/pango-font.h" line="303"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="434">whether the size for the font description is in
  points or device units. Use [method@Pango.FontDescription.get_set_fields]
  to find out if the size field of the font description was explicitly
  set or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="426">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stretch"
              c:identifier="pango_font_description_get_stretch">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="325">Gets the stretch field of a font description.

See [method@Pango.FontDescription.set_stretch].</doc>
        <source-position filename="pango/pango-font.h" line="293"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="333">the stretch field for the font description.
  Use [method@Pango.FontDescription.get_set_fields] to find
  out if the field was explicitly set or not.</doc>
          <type name="Stretch" c:type="PangoStretch"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="327">a `PangoFontDescription`.</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style" c:identifier="pango_font_description_get_style">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="203">Gets the style field of a `PangoFontDescription`.

See [method@Pango.FontDescription.set_style].</doc>
        <source-position filename="pango/pango-font.h" line="278"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="211">the style field for the font description.
  Use [method@Pango.FontDescription.get_set_fields] to
  find out if the field was explicitly set or not.</doc>
          <type name="Style" c:type="PangoStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="205">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_variant"
              c:identifier="pango_font_description_get_variant">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="243">Gets the variant field of a `PangoFontDescription`.

See [method@Pango.FontDescription.set_variant].</doc>
        <source-position filename="pango/pango-font.h" line="283"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="251">the variant field for the font description.
  Use [method@Pango.FontDescription.get_set_fields] to find
  out if the field was explicitly set or not.</doc>
          <type name="Variant" c:type="PangoVariant"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="245">a `PangoFontDescription`.</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_variations"
              c:identifier="pango_font_description_get_variations"
              version="1.42">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="581">Gets the variations field of a font description.

See [method@Pango.FontDescription.set_variations].</doc>
        <source-position filename="pango/pango-font.h" line="317"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="589">the variations field for the font
  description, or %NULL if not previously set. This has the same
  life-time as the font description itself and should not be freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="583">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_weight"
              c:identifier="pango_font_description_get_weight">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="285">Gets the weight field of a font description.

See [method@Pango.FontDescription.set_weight].</doc>
        <source-position filename="pango/pango-font.h" line="288"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="293">the weight field for the font description.
  Use [method@Pango.FontDescription.get_set_fields] to find
  out if the field was explicitly set or not.</doc>
          <type name="Weight" c:type="PangoWeight"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="287">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="pango_font_description_hash">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="932">Computes a hash of a `PangoFontDescription` structure.

This is suitable to be used, for example, as an argument
to g_hash_table_new(). The hash value is independent of @desc-&gt;mask.</doc>
        <source-position filename="pango/pango-font.h" line="256"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="941">the hash value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="934">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="pango_font_description_merge">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="645">Merges the fields that are set in @desc_to_merge into the fields in
@desc.

If @replace_existing is %FALSE, only fields in @desc that
are not already set are affected. If %TRUE, then fields that are
already set will be replaced as well.

If @desc_to_merge is %NULL, this function performs nothing.</doc>
        <source-position filename="pango/pango-font.h" line="326"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="647">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="desc_to_merge"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="648">the `PangoFontDescription` to merge from,
  or %NULL</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="replace_existing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="650">if %TRUE, replace fields in @desc with the
  corresponding values from @desc_to_merge, even if they
  are already exist.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge_static"
              c:identifier="pango_font_description_merge_static">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="694">Merges the fields that are set in @desc_to_merge into the fields in
@desc, without copying allocated fields.

This is like [method@Pango.FontDescription.merge], but only a shallow copy
is made of the family name and other allocated fields. @desc can only
be used until @desc_to_merge is modified or freed. This is meant to
be used when the merged font description is only needed temporarily.</doc>
        <source-position filename="pango/pango-font.h" line="330"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="696">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="desc_to_merge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="697">the `PangoFontDescription` to merge from</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="replace_existing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="698">if %TRUE, replace fields in @desc with the
  corresponding values from @desc_to_merge, even if they
  are already exist.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_absolute_size"
              c:identifier="pango_font_description_set_absolute_size"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="398">Sets the size field of a font description, in device units.

This is mutually exclusive with [method@Pango.FontDescription.set_size]
which sets the font size in points.</doc>
        <source-position filename="pango/pango-font.h" line="300"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="400">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="401">the new size, in Pango units. There are %PANGO_SCALE Pango units
  in one device unit. For an output backend where a device unit is a pixel,
  a @size value of 10 * PANGO_SCALE gives a 10 pixel font.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_family"
              c:identifier="pango_font_description_set_family">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="94">Sets the family name field of a font description.

The family
name represents a family of related font styles, and will
resolve to a particular `PangoFontFamily`. In some uses of
`PangoFontDescription`, it is also possible to use a comma
separated list of family names for this field.</doc>
        <source-position filename="pango/pango-font.h" line="267"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="96">a `PangoFontDescription`.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="97">a string representing the family name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_family_static"
              c:identifier="pango_font_description_set_family_static">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="118">Sets the family name field of a font description, without copying the string.

This is like [method@Pango.FontDescription.set_family], except that no
copy of @family is made. The caller must make sure that the
string passed in stays around until @desc has been freed or the
name is set again. This function can be used if @family is a static
string such as a C string literal, or if @desc is only needed temporarily.</doc>
        <source-position filename="pango/pango-font.h" line="270"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="120">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="121">a string representing the family name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gravity"
              c:identifier="pango_font_description_set_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="449">Sets the gravity field of a font description.

The gravity field
specifies how the glyphs should be rotated. If @gravity is
%PANGO_GRAVITY_AUTO, this actually unsets the gravity mask on
the font description.

This function is seldom useful to the user. Gravity should normally
be set on a `PangoContext`.</doc>
        <source-position filename="pango/pango-font.h" line="305"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="451">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="452">the gravity for the font description.</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="pango_font_description_set_size">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="345">Sets the size field of a font description in fractional points.

This is mutually exclusive with
[method@Pango.FontDescription.set_absolute_size].</doc>
        <source-position filename="pango/pango-font.h" line="295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="347">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="348">the size of the font in points, scaled by %PANGO_SCALE.
  (That is, a @size value of 10 * PANGO_SCALE is a 10 point font.
  The conversion factor between points and device units depends on
  system configuration and the output device. For screen display, a
  logical DPI of 96 is common, in which case a 10 point font corresponds
  to a 10 * (96 / 72) = 13.3 pixel font.
  Use [method@Pango.FontDescription.set_absolute_size] if you need
  a particular size in device units.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stretch"
              c:identifier="pango_font_description_set_stretch">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="305">Sets the stretch field of a font description.

The [enum@Pango.Stretch] field specifies how narrow or
wide the font should be.</doc>
        <source-position filename="pango/pango-font.h" line="290"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="307">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="stretch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="308">the stretch for the font description</doc>
            <type name="Stretch" c:type="PangoStretch"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style" c:identifier="pango_font_description_set_style">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="177">Sets the style field of a `PangoFontDescription`.

The [enum@Pango.Style] enumeration describes whether the font is
slanted and the manner in which it is slanted; it can be either
%PANGO_STYLE_NORMAL, %PANGO_STYLE_ITALIC, or %PANGO_STYLE_OBLIQUE.

Most fonts will either have a italic style or an oblique style,
but not both, and font matching in Pango will match italic
specifications with oblique fonts and vice-versa if an exact
match is not found.</doc>
        <source-position filename="pango/pango-font.h" line="275"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="179">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="180">the style for the font description</doc>
            <type name="Style" c:type="PangoStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variant"
              c:identifier="pango_font_description_set_variant">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="223">Sets the variant field of a font description.

The [enum@Pango.Variant] can either be %PANGO_VARIANT_NORMAL
or %PANGO_VARIANT_SMALL_CAPS.</doc>
        <source-position filename="pango/pango-font.h" line="280"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="225">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="226">the variant type for the font description.</doc>
            <type name="Variant" c:type="PangoVariant"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variations"
              c:identifier="pango_font_description_set_variations"
              version="1.42">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="546">Sets the variations field of a font description.

OpenType font variations allow to select a font instance by
specifying values for a number of axes, such as width or weight.

The format of the variations string is

    AXIS1=VALUE,AXIS2=VALUE...

with each AXIS a 4 character tag that identifies a font axis,
and each VALUE a floating point number. Unknown axes are ignored,
and values are clamped to their allowed range.

Pango does not currently have a way to find supported axes of
a font. Both harfbuzz and freetype have API for this. See
for example [hb_ot_var_get_axis_infos](https://harfbuzz.github.io/harfbuzz-hb-ot-var.html#hb-ot-var-get-axis-infos).</doc>
        <source-position filename="pango/pango-font.h" line="314"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="548">a `PangoFontDescription`.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="variations"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="549">a string representing the variations</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variations_static"
              c:identifier="pango_font_description_set_variations_static"
              version="1.42">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="504">Sets the variations field of a font description.

This is like [method@Pango.FontDescription.set_variations], except
that no copy of @variations is made. The caller must make sure that
the string passed in stays around until @desc has been freed
or the name is set again. This function can be used if
@variations is a static string such as a C string literal,
or if @desc is only needed temporarily.</doc>
        <source-position filename="pango/pango-font.h" line="311"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="506">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="variations" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="507">a string representing the variations</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_weight"
              c:identifier="pango_font_description_set_weight">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="263">Sets the weight field of a font description.

The weight field
specifies how bold or light the font should be. In addition
to the values of the [enum@Pango.Weight] enumeration, other
intermediate numeric values are possible.</doc>
        <source-position filename="pango/pango-font.h" line="285"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="265">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="weight" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="266">the weight for the font description.</doc>
            <type name="Weight" c:type="PangoWeight"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_filename"
              c:identifier="pango_font_description_to_filename">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1506">Creates a filename representation of a font description.

The filename is identical to the result from calling
[method@Pango.FontDescription.to_string], but with underscores
instead of characters that are untypical in filenames, and in
lower case only.</doc>
        <source-position filename="pango/pango-font.h" line="344"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1517">a new string that must be freed with g_free().</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1508">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="pango_font_description_to_string">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1422">Creates a string representation of a font description.

See [func@Pango.FontDescription.from_string] for a description
of the format of the string representation. The family list in
the string description will only have a terminating comma if
the last word of the list is a valid style option.</doc>
        <source-position filename="pango/pango-font.h" line="342"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1433">a new string that must be freed with g_free().</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1424">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unset_fields"
              c:identifier="pango_font_description_unset_fields">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="620">Unsets some of the fields in a `PangoFontDescription`.

The unset fields will get back to their default values.</doc>
        <source-position filename="pango/pango-font.h" line="322"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="622">a `PangoFontDescription`</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="to_unset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="623">bitmask of fields in the @desc to unset.</doc>
            <type name="FontMask" c:type="PangoFontMask"/>
          </parameter>
        </parameters>
      </method>
      <function name="from_string"
                c:identifier="pango_font_description_from_string">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1252">Creates a new font description from a string representation.

The string must have the form

    "\[FAMILY-LIST] \[STYLE-OPTIONS] \[SIZE] \[VARIATIONS]",

where FAMILY-LIST is a comma-separated list of families optionally
terminated by a comma, STYLE_OPTIONS is a whitespace-separated list
of words where each word describes one of style, variant, weight,
stretch, or gravity, and SIZE is a decimal number (size in points)
or optionally followed by the unit modifier "px" for absolute size.
VARIATIONS is a comma-separated list of font variation
specifications of the form "\@axis=value" (the = sign is optional).

The following words are understood as styles:
"Normal", "Roman", "Oblique", "Italic".

The following words are understood as variants:
"Small-Caps", "All-Small-Caps", "Petite-Caps", "All-Petite-Caps",
"Unicase", "Title-Caps".

The following words are understood as weights:
"Thin", "Ultra-Light", "Extra-Light", "Light", "Semi-Light",
"Demi-Light", "Book", "Regular", "Medium", "Semi-Bold", "Demi-Bold",
"Bold", "Ultra-Bold", "Extra-Bold", "Heavy", "Black", "Ultra-Black",
"Extra-Black".

The following words are understood as stretch values:
"Ultra-Condensed", "Extra-Condensed", "Condensed", "Semi-Condensed",
"Semi-Expanded", "Expanded", "Extra-Expanded", "Ultra-Expanded".

The following words are understood as gravity values:
"Not-Rotated", "South", "Upside-Down", "North", "Rotated-Left",
"East", "Rotated-Right", "West".

Any one of the options may be absent. If FAMILY-LIST is absent, then
the family_name field of the resulting font description will be
initialized to %NULL. If STYLE-OPTIONS is missing, then all style
options will be set to the default values. If SIZE is missing, the
size in the resulting font description will be set to 0.

A typical example:

    "Cantarell Italic Light 15 \@wght=200"</doc>
        <source-position filename="pango/pango-font.h" line="340"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1301">a new `PangoFontDescription`.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="1254">string representation of a font description.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="FontFace"
           c:symbol-prefix="font_face"
           c:type="PangoFontFace"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFontFace"
           glib:get-type="pango_font_face_get_type"
           glib:type-struct="FontFaceClass">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="484">A `PangoFontFace` is used to represent a group of fonts with
the same family, slant, weight, and width, but varying sizes.</doc>
      <source-position filename="pango/pango-font.h" line="514"/>
      <virtual-method name="describe" invoker="describe">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2633">Returns a font description that matches the face.

The resulting font description will have the family, style,
variant, weight and stretch of the face, but its size field
will be unset.</doc>
        <source-position filename="pango/pango-font.h" line="502"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2643">a newly-created `PangoFontDescription` structure
  holding the description of the face. Use [method@Pango.FontDescription.free]
  to free the result.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2635">a `PangoFontFace`</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_face_name" invoker="get_face_name">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2680">Gets a name representing the style of this face.

Note that a font family may contain multiple faces
with the same name (e.g. a variable and a non-variable
face for the same style).</doc>
        <source-position filename="pango/pango-font.h" line="501"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2690">the face name for the face. This string is
  owned by the face object and must not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2682">a `PangoFontFace`.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_family" invoker="get_family" version="1.46">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2739">Gets the `PangoFontFamily` that @face belongs to.</doc>
        <source-position filename="pango/pango-font.h" line="507"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2745">the `PangoFontFamily`</doc>
          <type name="FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2741">a `PangoFontFace`</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_synthesized"
                      invoker="is_synthesized"
                      version="1.18">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2655">Returns whether a `PangoFontFace` is synthesized.

This will be the case if the underlying font rendering engine
creates this face from another face, by shearing, emboldening,
lightening or modifying it in some other way.</doc>
        <source-position filename="pango/pango-font.h" line="506"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2665">whether @face is synthesized</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2657">a `PangoFontFace`</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_sizes" invoker="list_sizes" version="1.4">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2701">List the available sizes for a font.

This is only applicable to bitmap fonts. For scalable fonts, stores
%NULL at the location pointed to by @sizes and 0 at the location pointed
to by @n_sizes. The sizes returned are in Pango units and are sorted
in ascending order.</doc>
        <source-position filename="pango/pango-font.h" line="503"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2703">a `PangoFontFace`.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
          <parameter name="sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2704">
  location to store a pointer to an array of int. This array
  should be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="int**">
              <type name="gint" c:type="int*"/>
            </array>
          </parameter>
          <parameter name="n_sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2707">location to store the number of elements in @sizes</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="describe" c:identifier="pango_font_face_describe">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2633">Returns a font description that matches the face.

The resulting font description will have the family, style,
variant, weight and stretch of the face, but its size field
will be unset.</doc>
        <source-position filename="pango/pango-font.h" line="522"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2643">a newly-created `PangoFontDescription` structure
  holding the description of the face. Use [method@Pango.FontDescription.free]
  to free the result.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2635">a `PangoFontFace`</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_face_name"
              c:identifier="pango_font_face_get_face_name">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2680">Gets a name representing the style of this face.

Note that a font family may contain multiple faces
with the same name (e.g. a variable and a non-variable
face for the same style).</doc>
        <source-position filename="pango/pango-font.h" line="524"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2690">the face name for the face. This string is
  owned by the face object and must not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2682">a `PangoFontFace`.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family"
              c:identifier="pango_font_face_get_family"
              version="1.46">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2739">Gets the `PangoFontFamily` that @face belongs to.</doc>
        <source-position filename="pango/pango-font.h" line="533"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2745">the `PangoFontFamily`</doc>
          <type name="FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2741">a `PangoFontFace`</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_synthesized"
              c:identifier="pango_font_face_is_synthesized"
              version="1.18">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2655">Returns whether a `PangoFontFace` is synthesized.

This will be the case if the underlying font rendering engine
creates this face from another face, by shearing, emboldening,
lightening or modifying it in some other way.</doc>
        <source-position filename="pango/pango-font.h" line="530"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2665">whether @face is synthesized</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2657">a `PangoFontFace`</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_sizes"
              c:identifier="pango_font_face_list_sizes"
              version="1.4">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2701">List the available sizes for a font.

This is only applicable to bitmap fonts. For scalable fonts, stores
%NULL at the location pointed to by @sizes and 0 at the location pointed
to by @n_sizes. The sizes returned are in Pango units and are sorted
in ascending order.</doc>
        <source-position filename="pango/pango-font.h" line="526"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2703">a `PangoFontFace`.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
          <parameter name="sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2704">
  location to store a pointer to an array of int. This array
  should be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="int**">
              <type name="gint" c:type="int*"/>
            </array>
          </parameter>
          <parameter name="n_sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2707">location to store the number of elements in @sizes</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontFaceClass"
            c:type="PangoFontFaceClass"
            glib:is-gtype-struct-for="FontFace">
      <source-position filename="pango/pango-font.h" line="514"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_face_name">
        <callback name="get_face_name">
          <source-position filename="pango/pango-font.h" line="501"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2690">the face name for the face. This string is
  owned by the face object and must not be modified or freed.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2682">a `PangoFontFace`.</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="describe">
        <callback name="describe">
          <source-position filename="pango/pango-font.h" line="502"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2643">a newly-created `PangoFontDescription` structure
  holding the description of the face. Use [method@Pango.FontDescription.free]
  to free the result.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2635">a `PangoFontFace`</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_sizes">
        <callback name="list_sizes">
          <source-position filename="pango/pango-font.h" line="503"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2703">a `PangoFontFace`.</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
            <parameter name="sizes"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2704">
  location to store a pointer to an array of int. This array
  should be freed with g_free().</doc>
              <array length="2" zero-terminated="0" c:type="int**">
                <type name="gint" c:type="int*"/>
              </array>
            </parameter>
            <parameter name="n_sizes"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2707">location to store the number of elements in @sizes</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_synthesized">
        <callback name="is_synthesized">
          <source-position filename="pango/pango-font.h" line="506"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2665">whether @face is synthesized</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2657">a `PangoFontFace`</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_family">
        <callback name="get_family">
          <source-position filename="pango/pango-font.h" line="507"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2745">the `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2741">a `PangoFontFace`</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pango_reserved3" introspectable="0">
        <callback name="_pango_reserved3">
          <source-position filename="pango/pango-font.h" line="512"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved4" introspectable="0">
        <callback name="_pango_reserved4">
          <source-position filename="pango/pango-font.h" line="513"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="FontFamily"
           c:symbol-prefix="font_family"
           c:type="PangoFontFamily"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFontFamily"
           glib:get-type="pango_font_family_get_type"
           glib:type-struct="FontFamilyClass">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="411">A `PangoFontFamily` is used to represent a family of related
font faces.

The font faces in a family share a common design, but differ in
slant, weight, width or other aspects.</doc>
      <source-position filename="pango/pango-font.h" line="446"/>
      <implements name="Gio.ListModel"/>
      <virtual-method name="get_face" invoker="get_face" version="1.46">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2541">Gets the `PangoFontFace` of @family with the given name.</doc>
        <source-position filename="pango/pango-font.h" line="438"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2550">the `PangoFontFace`,
  or %NULL if no face with the given name exists.</doc>
          <type name="FontFace" c:type="PangoFontFace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2543">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2544">the name of a face. If the name is %NULL,
  the family's default face (fontconfig calls it "Regular")
  will be returned.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2457">Gets the name of the family.

The name is unique among all fonts for the font backend and can
be used in a `PangoFontDescription` to specify that a face from
this family is desired.</doc>
        <source-position filename="pango/pango-font.h" line="434"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2467">the name of the family. This string is owned
  by the family object and must not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2459">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_monospace" invoker="is_monospace" version="1.4">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2564">A monospace font is a font designed for text display where the the
characters form a regular grid.

For Western languages this would
mean that the advance width of all characters are the same, but
this categorization also includes Asian fonts which include
double-width characters: characters that occupy two grid cells.
g_unichar_iswide() returns a result that indicates whether a
character is typically double-width in a monospace font.

The best way to find out the grid-cell size is to call
[method@Pango.FontMetrics.get_approximate_digit_width], since the
results of [method@Pango.FontMetrics.get_approximate_char_width] may
be affected by double-width characters.</doc>
        <source-position filename="pango/pango-font.h" line="435"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2583">%TRUE if the family is monospace.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2566">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_variable" invoker="is_variable" version="1.44">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2595">A variable font is a font which has axes that can be modified to
produce different faces.

Such axes are also known as _variations_; see
[method@Pango.FontDescription.set_variations] for more information.</doc>
        <source-position filename="pango/pango-font.h" line="436"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2605">%TRUE if the family is variable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2597">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_faces" invoker="list_faces">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2478">Lists the different font faces that make up @family.

The faces in a family share a common design, but differ in slant, weight,
width and other aspects.

Note that the returned faces are not in any particular order, and
multiple faces may have the same name or characteristics.

`PangoFontFamily` also implemented the [iface@Gio.ListModel] interface
for enumerating faces.</doc>
        <source-position filename="pango/pango-font.h" line="431"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2480">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
          <parameter name="faces"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2481">
  location to store an array of pointers to `PangoFontFace` objects,
  or %NULL. This array should be freed with g_free() when it is no
  longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFace***">
              <type name="FontFace" c:type="PangoFontFace**"/>
            </array>
          </parameter>
          <parameter name="n_faces"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2485">location to store number of elements in @faces.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_face"
              c:identifier="pango_font_family_get_face"
              version="1.46">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2541">Gets the `PangoFontFace` of @family with the given name.</doc>
        <source-position filename="pango/pango-font.h" line="465"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2550">the `PangoFontFace`,
  or %NULL if no face with the given name exists.</doc>
          <type name="FontFace" c:type="PangoFontFace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2543">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2544">the name of a face. If the name is %NULL,
  the family's default face (fontconfig calls it "Regular")
  will be returned.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="pango_font_family_get_name">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2457">Gets the name of the family.

The name is unique among all fonts for the font backend and can
be used in a `PangoFontDescription` to specify that a face from
this family is desired.</doc>
        <source-position filename="pango/pango-font.h" line="458"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2467">the name of the family. This string is owned
  by the family object and must not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2459">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_monospace"
              c:identifier="pango_font_family_is_monospace"
              version="1.4">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2564">A monospace font is a font designed for text display where the the
characters form a regular grid.

For Western languages this would
mean that the advance width of all characters are the same, but
this categorization also includes Asian fonts which include
double-width characters: characters that occupy two grid cells.
g_unichar_iswide() returns a result that indicates whether a
character is typically double-width in a monospace font.

The best way to find out the grid-cell size is to call
[method@Pango.FontMetrics.get_approximate_digit_width], since the
results of [method@Pango.FontMetrics.get_approximate_char_width] may
be affected by double-width characters.</doc>
        <source-position filename="pango/pango-font.h" line="460"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2583">%TRUE if the family is monospace.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2566">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_variable"
              c:identifier="pango_font_family_is_variable"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2595">A variable font is a font which has axes that can be modified to
produce different faces.

Such axes are also known as _variations_; see
[method@Pango.FontDescription.set_variations] for more information.</doc>
        <source-position filename="pango/pango-font.h" line="462"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2605">%TRUE if the family is variable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2597">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_faces" c:identifier="pango_font_family_list_faces">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2478">Lists the different font faces that make up @family.

The faces in a family share a common design, but differ in slant, weight,
width and other aspects.

Note that the returned faces are not in any particular order, and
multiple faces may have the same name or characteristics.

`PangoFontFamily` also implemented the [iface@Gio.ListModel] interface
for enumerating faces.</doc>
        <source-position filename="pango/pango-font.h" line="454"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2480">a `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
          <parameter name="faces"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2481">
  location to store an array of pointers to `PangoFontFace` objects,
  or %NULL. This array should be freed with g_free() when it is no
  longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFace***">
              <type name="FontFace" c:type="PangoFontFace**"/>
            </array>
          </parameter>
          <parameter name="n_faces"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2485">location to store number of elements in @faces.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <property name="item-type" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2429">The type of items contained in this list.</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <property name="n-items" transfer-ownership="none" default-value="0">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2438">The number of items contained in this list.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontFamilyClass"
            c:type="PangoFontFamilyClass"
            glib:is-gtype-struct-for="FontFamily">
      <source-position filename="pango/pango-font.h" line="446"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="list_faces">
        <callback name="list_faces">
          <source-position filename="pango/pango-font.h" line="431"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2480">a `PangoFontFamily`</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
            <parameter name="faces"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="container"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2481">
  location to store an array of pointers to `PangoFontFace` objects,
  or %NULL. This array should be freed with g_free() when it is no
  longer needed.</doc>
              <array length="2" zero-terminated="0" c:type="PangoFontFace***">
                <type name="FontFace" c:type="PangoFontFace**"/>
              </array>
            </parameter>
            <parameter name="n_faces"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2485">location to store number of elements in @faces.</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="pango/pango-font.h" line="434"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2467">the name of the family. This string is owned
  by the family object and must not be modified or freed.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2459">a `PangoFontFamily`</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_monospace">
        <callback name="is_monospace">
          <source-position filename="pango/pango-font.h" line="435"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2583">%TRUE if the family is monospace.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2566">a `PangoFontFamily`</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_variable">
        <callback name="is_variable">
          <source-position filename="pango/pango-font.h" line="436"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2605">%TRUE if the family is variable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2597">a `PangoFontFamily`</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_face">
        <callback name="get_face">
          <source-position filename="pango/pango-font.h" line="438"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2550">the `PangoFontFace`,
  or %NULL if no face with the given name exists.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2543">a `PangoFontFamily`</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
            <parameter name="name"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/fonts.c"
                   line="2544">the name of a face. If the name is %NULL,
  the family's default face (fontconfig calls it "Regular")
  will be returned.</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pango_reserved2" introspectable="0">
        <callback name="_pango_reserved2">
          <source-position filename="pango/pango-font.h" line="445"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="FontMap"
           c:symbol-prefix="font_map"
           c:type="PangoFontMap"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFontMap"
           glib:get-type="pango_font_map_get_type"
           glib:type-struct="FontMapClass">
      <doc xml:space="preserve"
           filename="pango/pango-fontmap.h"
           line="40">A `PangoFontMap` represents the set of fonts available for a
particular rendering system.

This is a virtual object with implementations being specific to
particular rendering systems.</doc>
      <source-position filename="pango/pango-fontmap.h" line="99"/>
      <implements name="Gio.ListModel"/>
      <virtual-method name="changed" invoker="changed" version="1.34">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="419">Forces a change in the context, which will cause any `PangoContext`
using this fontmap to change.

This function is only useful when implementing a new backend
for Pango, something applications won't do. Backends should
call this function if they have attached extra data to the
context and such data is changed.</doc>
        <source-position filename="pango/pango-fontmap.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="421">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_face" introspectable="0">
        <source-position filename="pango/pango-fontmap.h" line="97"/>
        <return-value>
          <type name="FontFace" c:type="PangoFontFace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_family" invoker="get_family" version="1.46">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="469">Gets a font family by name.</doc>
        <source-position filename="pango/pango-fontmap.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="476">the `PangoFontFamily`</doc>
          <type name="FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="471">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="472">a family name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_serial" invoker="get_serial" version="1.32.4">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="373">Returns the current serial number of @fontmap.

The serial number is initialized to an small number larger than zero
when a new fontmap is created and is increased whenever the fontmap
is changed. It may wrap, but will never have the value 0. Since it can
wrap, never compare it with "less than", always use "not equals".

The fontmap can only be changed using backend-specific API, like changing
fontmap resolution.

This can be used to automatically detect changes to a `PangoFontMap`,
like in `PangoContext`.</doc>
        <source-position filename="pango/pango-fontmap.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="390">The current serial number of @fontmap.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="375">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_families" invoker="list_families">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="175">List all families for a fontmap.

Note that the returned families are not in any particular order.

`PangoFontMap` also implemented the [iface@Gio.ListModel] interface
for enumerating families.</doc>
        <source-position filename="pango/pango-fontmap.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="177">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="178">location to
  store a pointer to an array of `PangoFontFamily` *.
  This array should be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFamily***">
              <type name="FontFamily" c:type="PangoFontFamily**"/>
            </array>
          </parameter>
          <parameter name="n_families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="181">location to store the number of elements in @families</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_font" invoker="load_font">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="154">Load the font in the fontmap that is the closest match for @desc.</doc>
        <source-position filename="pango/pango-fontmap.h" line="78"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="162">the newly allocated `PangoFont`
  loaded, or %NULL if no font matched.</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="156">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="157">the `PangoContext` the font will be used with</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="158">a `PangoFontDescription` describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_fontset" invoker="load_fontset">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="204">Load a set of fonts in the fontmap that can be used to render
a font matching @desc.</doc>
        <source-position filename="pango/pango-fontmap.h" line="84"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="214">the newly allocated
  `PangoFontset` loaded, or %NULL if no font matched.</doc>
          <type name="Fontset" c:type="PangoFontset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="206">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="207">the `PangoContext` the font will be used with</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="208">a `PangoFontDescription` describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="209">a `PangoLanguage` the fonts will be used for</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="changed"
              c:identifier="pango_font_map_changed"
              version="1.34">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="419">Forces a change in the context, which will cause any `PangoContext`
using this fontmap to change.

This function is only useful when implementing a new backend
for Pango, something applications won't do. Backends should
call this function if they have attached extra data to the
context and such data is changed.</doc>
        <source-position filename="pango/pango-fontmap.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="421">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_context"
              c:identifier="pango_font_map_create_context"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="122">Creates a `PangoContext` connected to @fontmap.

This is equivalent to [ctor@Pango.Context.new] followed by
[method@Pango.Context.set_font_map].

If you are using Pango as part of a higher-level system,
that system may have it's own way of create a `PangoContext`.
For instance, the GTK toolkit has, among others,
gtk_widget_get_pango_context(). Use those instead.</doc>
        <source-position filename="pango/pango-fontmap.h" line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="136">the newly allocated `PangoContext`,
  which should be freed with g_object_unref().</doc>
          <type name="Context" c:type="PangoContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="124">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family"
              c:identifier="pango_font_map_get_family"
              version="1.46">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="469">Gets a font family by name.</doc>
        <source-position filename="pango/pango-fontmap.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="476">the `PangoFontFamily`</doc>
          <type name="FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="471">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="472">a family name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="pango_font_map_get_serial"
              version="1.32.4">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="373">Returns the current serial number of @fontmap.

The serial number is initialized to an small number larger than zero
when a new fontmap is created and is increased whenever the fontmap
is changed. It may wrap, but will never have the value 0. Since it can
wrap, never compare it with "less than", always use "not equals".

The fontmap can only be changed using backend-specific API, like changing
fontmap resolution.

This can be used to automatically detect changes to a `PangoFontMap`,
like in `PangoContext`.</doc>
        <source-position filename="pango/pango-fontmap.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="390">The current serial number of @fontmap.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="375">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_families" c:identifier="pango_font_map_list_families">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="175">List all families for a fontmap.

Note that the returned families are not in any particular order.

`PangoFontMap` also implemented the [iface@Gio.ListModel] interface
for enumerating families.</doc>
        <source-position filename="pango/pango-fontmap.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="177">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="178">location to
  store a pointer to an array of `PangoFontFamily` *.
  This array should be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFamily***">
              <type name="FontFamily" c:type="PangoFontFamily**"/>
            </array>
          </parameter>
          <parameter name="n_families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="181">location to store the number of elements in @families</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_font" c:identifier="pango_font_map_load_font">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="154">Load the font in the fontmap that is the closest match for @desc.</doc>
        <source-position filename="pango/pango-fontmap.h" line="106"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="162">the newly allocated `PangoFont`
  loaded, or %NULL if no font matched.</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="156">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="157">the `PangoContext` the font will be used with</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="158">a `PangoFontDescription` describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_fontset" c:identifier="pango_font_map_load_fontset">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="204">Load a set of fonts in the fontmap that can be used to render
a font matching @desc.</doc>
        <source-position filename="pango/pango-fontmap.h" line="110"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-fontmap.c"
               line="214">the newly allocated
  `PangoFontset` loaded, or %NULL if no font matched.</doc>
          <type name="Fontset" c:type="PangoFontset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="206">a `PangoFontMap`</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="207">the `PangoContext` the font will be used with</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="208">a `PangoFontDescription` describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="209">a `PangoLanguage` the fonts will be used for</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="item-type" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="96">The type of items contained in this list.</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <property name="n-items" transfer-ownership="none" default-value="0">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.c"
             line="105">The number of items contained in this list.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontMapClass"
            c:type="PangoFontMapClass"
            glib:is-gtype-struct-for="FontMap">
      <doc xml:space="preserve"
           filename="pango/pango-fontmap.h"
           line="54">The `PangoFontMapClass` structure holds the virtual functions for
a particular `PangoFontMap` implementation.</doc>
      <source-position filename="pango/pango-fontmap.h" line="99"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.h"
             line="56">parent `GObjectClass`</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="load_font">
        <callback name="load_font">
          <source-position filename="pango/pango-fontmap.h" line="78"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="162">the newly allocated `PangoFont`
  loaded, or %NULL if no font matched.</doc>
            <type name="Font" c:type="PangoFont*"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="156">a `PangoFontMap`</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="157">the `PangoContext` the font will be used with</doc>
              <type name="Context" c:type="PangoContext*"/>
            </parameter>
            <parameter name="desc" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="158">a `PangoFontDescription` describing the font to load</doc>
              <type name="FontDescription"
                    c:type="const PangoFontDescription*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_families">
        <callback name="list_families">
          <source-position filename="pango/pango-fontmap.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="177">a `PangoFontMap`</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="families"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="container">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="178">location to
  store a pointer to an array of `PangoFontFamily` *.
  This array should be freed with g_free().</doc>
              <array length="2"
                     zero-terminated="0"
                     c:type="PangoFontFamily***">
                <type name="FontFamily" c:type="PangoFontFamily**"/>
              </array>
            </parameter>
            <parameter name="n_families"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="181">location to store the number of elements in @families</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_fontset">
        <callback name="load_fontset">
          <source-position filename="pango/pango-fontmap.h" line="84"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="214">the newly allocated
  `PangoFontset` loaded, or %NULL if no font matched.</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="206">a `PangoFontMap`</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="207">the `PangoContext` the font will be used with</doc>
              <type name="Context" c:type="PangoContext*"/>
            </parameter>
            <parameter name="desc" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="208">a `PangoFontDescription` describing the font to load</doc>
              <type name="FontDescription"
                    c:type="const PangoFontDescription*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="209">a `PangoLanguage` the fonts will be used for</doc>
              <type name="Language" c:type="PangoLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="shape_engine_type">
        <doc xml:space="preserve"
             filename="pango/pango-fontmap.h"
             line="63">the type of rendering-system-dependent engines that
can handle fonts of this fonts loaded with this fontmap.</doc>
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="get_serial">
        <callback name="get_serial">
          <source-position filename="pango/pango-fontmap.h" line="91"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="390">The current serial number of @fontmap.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="375">a `PangoFontMap`</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="pango/pango-fontmap.h" line="92"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="421">a `PangoFontMap`</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_family">
        <callback name="get_family">
          <source-position filename="pango/pango-fontmap.h" line="94"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontmap.c"
                 line="476">the `PangoFontFamily`</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="471">a `PangoFontMap`</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontmap.c"
                   line="472">a family name</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_face" introspectable="0">
        <callback name="get_face" introspectable="0">
          <source-position filename="pango/pango-fontmap.h" line="97"/>
          <return-value>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="font" transfer-ownership="none">
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <bitfield name="FontMask"
              glib:type-name="PangoFontMask"
              glib:get-type="pango_font_mask_get_type"
              c:type="PangoFontMask">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="172">The bits in a `PangoFontMask` correspond to the set fields in a
`PangoFontDescription`.</doc>
      <member name="family"
              value="1"
              c:identifier="PANGO_FONT_MASK_FAMILY"
              glib:nick="family"
              glib:name="PANGO_FONT_MASK_FAMILY">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="174">the font family is specified.</doc>
      </member>
      <member name="style"
              value="2"
              c:identifier="PANGO_FONT_MASK_STYLE"
              glib:nick="style"
              glib:name="PANGO_FONT_MASK_STYLE">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="175">the font style is specified.</doc>
      </member>
      <member name="variant"
              value="4"
              c:identifier="PANGO_FONT_MASK_VARIANT"
              glib:nick="variant"
              glib:name="PANGO_FONT_MASK_VARIANT">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="176">the font variant is specified.</doc>
      </member>
      <member name="weight"
              value="8"
              c:identifier="PANGO_FONT_MASK_WEIGHT"
              glib:nick="weight"
              glib:name="PANGO_FONT_MASK_WEIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="177">the font weight is specified.</doc>
      </member>
      <member name="stretch"
              value="16"
              c:identifier="PANGO_FONT_MASK_STRETCH"
              glib:nick="stretch"
              glib:name="PANGO_FONT_MASK_STRETCH">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="178">the font stretch is specified.</doc>
      </member>
      <member name="size"
              value="32"
              c:identifier="PANGO_FONT_MASK_SIZE"
              glib:nick="size"
              glib:name="PANGO_FONT_MASK_SIZE">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="179">the font size is specified.</doc>
      </member>
      <member name="gravity"
              value="64"
              c:identifier="PANGO_FONT_MASK_GRAVITY"
              glib:nick="gravity"
              glib:name="PANGO_FONT_MASK_GRAVITY">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="180">the font gravity is specified (Since: 1.16.)</doc>
      </member>
      <member name="variations"
              value="128"
              c:identifier="PANGO_FONT_MASK_VARIATIONS"
              glib:nick="variations"
              glib:name="PANGO_FONT_MASK_VARIATIONS">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="181">OpenType font variations are specified (Since: 1.42)</doc>
      </member>
    </bitfield>
    <record name="FontMetrics"
            c:type="PangoFontMetrics"
            glib:type-name="PangoFontMetrics"
            glib:get-type="pango_font_metrics_get_type"
            c:symbol-prefix="font_metrics">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="45">A `PangoFontMetrics` structure holds the overall metric information
for a font.

The information in a `PangoFontMetrics` structure may be restricted
to a script. The fields of this structure are private to implementations
of a font backend. See the documentation of the corresponding getters
for documentation of their meaning.

For an overview of the most important metrics, see:

&lt;picture&gt;
  &lt;source srcset="fontmetrics-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img alt="Font metrics" src="fontmetrics-light.png"&gt;
&lt;/picture&gt;</doc>
      <source-position filename="pango/pango-font.h" line="366"/>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ascent" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="descent" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="height" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="approximate_char_width" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="approximate_digit_width" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="underline_position" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="underline_thickness" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="strikethrough_position" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="strikethrough_thickness" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <method name="get_approximate_char_width"
              c:identifier="pango_font_metrics_get_approximate_char_width">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2187">Gets the approximate character width for a font metrics structure.

This is merely a representative value useful, for example, for
determining the initial size for a window. Actual characters in
text will be wider and narrower than this.</doc>
        <source-position filename="pango/pango-font.h" line="381"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2197">the character width, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2189">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_approximate_digit_width"
              c:identifier="pango_font_metrics_get_approximate_digit_width">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2207">Gets the approximate digit width for a font metrics structure.

This is merely a representative value useful, for example, for
determining the initial size for a window. Actual digits in
text can be wider or narrower than this, though this value
is generally somewhat more accurate than the result of
pango_font_metrics_get_approximate_char_width() for digits.</doc>
        <source-position filename="pango/pango-font.h" line="383"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2219">the digit width, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2209">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ascent" c:identifier="pango_font_metrics_get_ascent">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2122">Gets the ascent from a font metrics structure.

The ascent is the distance from the baseline to the logical top
of a line of text. (The logical top may be above or below the top
of the actual drawn ink. It is necessary to lay out the text to
figure where the ink will be.)</doc>
        <source-position filename="pango/pango-font.h" line="375"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2133">the ascent, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2124">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_descent" c:identifier="pango_font_metrics_get_descent">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2143">Gets the descent from a font metrics structure.

The descent is the distance from the baseline to the logical bottom
of a line of text. (The logical bottom may be above or below the
bottom of the actual drawn ink. It is necessary to lay out the text
to figure where the ink will be.)</doc>
        <source-position filename="pango/pango-font.h" line="377"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2154">the descent, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2145">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="pango_font_metrics_get_height"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2164">Gets the line height from a font metrics structure.

The line height is the recommended distance between successive
baselines in wrapped text using this font.

If the line height is not available, 0 is returned.</doc>
        <source-position filename="pango/pango-font.h" line="379"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2175">the height, in Pango units</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2166">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strikethrough_position"
              c:identifier="pango_font_metrics_get_strikethrough_position"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2269">Gets the suggested position to draw the strikethrough.

The value returned is the distance *above* the
baseline of the top of the strikethrough.</doc>
        <source-position filename="pango/pango-font.h" line="389"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2278">the suggested strikethrough position, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2271">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strikethrough_thickness"
              c:identifier="pango_font_metrics_get_strikethrough_thickness"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2290">Gets the suggested thickness to draw for the strikethrough.</doc>
        <source-position filename="pango/pango-font.h" line="391"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2296">the suggested strikethrough thickness, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2292">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_underline_position"
              c:identifier="pango_font_metrics_get_underline_position"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2229">Gets the suggested position to draw the underline.

The value returned is the distance *above* the baseline of the top
of the underline. Since most fonts have underline positions beneath
the baseline, this value is typically negative.</doc>
        <source-position filename="pango/pango-font.h" line="385"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2239">the suggested underline position, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2231">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_underline_thickness"
              c:identifier="pango_font_metrics_get_underline_thickness"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2251">Gets the suggested thickness to draw for the underline.</doc>
        <source-position filename="pango/pango-font.h" line="387"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2257">the suggested underline thickness, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2253">a `PangoFontMetrics` structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="pango_font_metrics_ref">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2083">Increase the reference count of a font metrics structure by one.</doc>
        <source-position filename="pango/pango-font.h" line="371"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="2089">@metrics</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2085">a `PangoFontMetrics` structure, may be %NULL</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="pango_font_metrics_unref">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="2102">Decrease the reference count of a font metrics structure by one.

If the result is zero, frees the structure and any associated memory.</doc>
        <source-position filename="pango/pango-font.h" line="373"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/fonts.c"
                 line="2104">a `PangoFontMetrics` structure, may be %NULL</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="FontScale"
                 version="1.50"
                 glib:type-name="PangoFontScale"
                 glib:get-type="pango_font_scale_get_type"
                 c:type="PangoFontScale">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="251">An enumeration that affects font sizes for superscript
and subscript positioning and for (emulated) Small Caps.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_FONT_SCALE_NONE"
              glib:nick="none"
              glib:name="PANGO_FONT_SCALE_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="253">Leave the font size unchanged</doc>
      </member>
      <member name="superscript"
              value="1"
              c:identifier="PANGO_FONT_SCALE_SUPERSCRIPT"
              glib:nick="superscript"
              glib:name="PANGO_FONT_SCALE_SUPERSCRIPT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="254">Change the font to a size suitable for superscripts</doc>
      </member>
      <member name="subscript"
              value="2"
              c:identifier="PANGO_FONT_SCALE_SUBSCRIPT"
              glib:nick="subscript"
              glib:name="PANGO_FONT_SCALE_SUBSCRIPT">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="255">Change the font to a size suitable for subscripts</doc>
      </member>
      <member name="small_caps"
              value="3"
              c:identifier="PANGO_FONT_SCALE_SMALL_CAPS"
              glib:nick="small-caps"
              glib:name="PANGO_FONT_SCALE_SMALL_CAPS">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="256">Change the font to a size suitable for Small Caps</doc>
      </member>
    </enumeration>
    <class name="Fontset"
           c:symbol-prefix="fontset"
           c:type="PangoFontset"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFontset"
           glib:get-type="pango_fontset_get_type"
           glib:type-struct="FontsetClass">
      <doc xml:space="preserve"
           filename="pango/pango-fontset.h"
           line="68">A `PangoFontset` represents a set of `PangoFont` to use when rendering text.

A `PangoFontset` is the result of resolving a `PangoFontDescription`
against a particular `PangoContext`. It has operations for finding the
component font for a particular Unicode character, and for finding a
composite set of metrics for the entire fontset.</doc>
      <source-position filename="pango/pango-fontset.h" line="119"/>
      <virtual-method name="foreach" invoker="foreach" version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-fontset.c"
             line="86">Iterates through all the fonts in a fontset, calling @func for
each one.

If @func returns %TRUE, that stops the iteration.</doc>
        <source-position filename="pango/pango-fontset.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="88">a `PangoFontset`</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="89">Callback function</doc>
            <type name="FontsetForeachFunc" c:type="PangoFontsetForeachFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="90">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_font" invoker="get_font">
        <doc xml:space="preserve"
             filename="pango/pango-fontset.c"
             line="50">Returns the font in the fontset that contains the best
glyph for a Unicode character.</doc>
        <source-position filename="pango/pango-fontset.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-fontset.c"
               line="58">a `PangoFont`</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="52">a `PangoFontset`</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
          <parameter name="wc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="53">a Unicode character</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_language">
        <source-position filename="pango/pango-fontset.h" line="107"/>
        <return-value transfer-ownership="full">
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metrics" invoker="get_metrics">
        <doc xml:space="preserve"
             filename="pango/pango-fontset.c"
             line="70">Get overall metric information for the fonts in the fontset.</doc>
        <source-position filename="pango/pango-fontset.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-fontset.c"
               line="76">a `PangoFontMetrics` object</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="72">a `PangoFontset`</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="foreach"
              c:identifier="pango_fontset_foreach"
              version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-fontset.c"
             line="86">Iterates through all the fonts in a fontset, calling @func for
each one.

If @func returns %TRUE, that stops the iteration.</doc>
        <source-position filename="pango/pango-fontset.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="88">a `PangoFontset`</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="89">Callback function</doc>
            <type name="FontsetForeachFunc" c:type="PangoFontsetForeachFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="90">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_font" c:identifier="pango_fontset_get_font">
        <doc xml:space="preserve"
             filename="pango/pango-fontset.c"
             line="50">Returns the font in the fontset that contains the best
glyph for a Unicode character.</doc>
        <source-position filename="pango/pango-fontset.h" line="122"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-fontset.c"
               line="58">a `PangoFont`</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="52">a `PangoFontset`</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
          <parameter name="wc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="53">a Unicode character</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metrics" c:identifier="pango_fontset_get_metrics">
        <doc xml:space="preserve"
             filename="pango/pango-fontset.c"
             line="70">Get overall metric information for the fonts in the fontset.</doc>
        <source-position filename="pango/pango-fontset.h" line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-fontset.c"
               line="76">a `PangoFontMetrics` object</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="72">a `PangoFontset`</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontsetClass"
            c:type="PangoFontsetClass"
            glib:is-gtype-struct-for="Fontset">
      <doc xml:space="preserve"
           filename="pango/pango-fontset.h"
           line="83">The `PangoFontsetClass` structure holds the virtual functions for
a particular `PangoFontset` implementation.</doc>
      <source-position filename="pango/pango-fontset.h" line="119"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="pango/pango-fontset.h"
             line="85">parent `GObjectClass`</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_font">
        <callback name="get_font">
          <source-position filename="pango/pango-fontset.h" line="103"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="58">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </return-value>
          <parameters>
            <parameter name="fontset" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontset.c"
                   line="52">a `PangoFontset`</doc>
              <type name="Fontset" c:type="PangoFontset*"/>
            </parameter>
            <parameter name="wc" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontset.c"
                   line="53">a Unicode character</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metrics">
        <callback name="get_metrics">
          <source-position filename="pango/pango-fontset.h" line="106"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset.c"
                 line="76">a `PangoFontMetrics` object</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </return-value>
          <parameters>
            <parameter name="fontset" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontset.c"
                   line="72">a `PangoFontset`</doc>
              <type name="Fontset" c:type="PangoFontset*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_language">
        <callback name="get_language">
          <source-position filename="pango/pango-fontset.h" line="107"/>
          <return-value transfer-ownership="full">
            <type name="Language" c:type="PangoLanguage*"/>
          </return-value>
          <parameters>
            <parameter name="fontset" transfer-ownership="none">
              <type name="Fontset" c:type="PangoFontset*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="foreach">
        <callback name="foreach">
          <source-position filename="pango/pango-fontset.h" line="108"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fontset" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-fontset.c"
                   line="88">a `PangoFontset`</doc>
              <type name="Fontset" c:type="PangoFontset*"/>
            </parameter>
            <parameter name="func"
                       transfer-ownership="none"
                       scope="call"
                       closure="2">
              <doc xml:space="preserve"
                   filename="pango/pango-fontset.c"
                   line="89">Callback function</doc>
              <type name="FontsetForeachFunc"
                    c:type="PangoFontsetForeachFunc"/>
            </parameter>
            <parameter name="data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/pango-fontset.c"
                   line="90">data to pass to the callback function</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pango_reserved1" introspectable="0">
        <callback name="_pango_reserved1">
          <source-position filename="pango/pango-fontset.h" line="115"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved2" introspectable="0">
        <callback name="_pango_reserved2">
          <source-position filename="pango/pango-fontset.h" line="116"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved3" introspectable="0">
        <callback name="_pango_reserved3">
          <source-position filename="pango/pango-fontset.h" line="117"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved4" introspectable="0">
        <callback name="_pango_reserved4">
          <source-position filename="pango/pango-fontset.h" line="118"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="FontsetForeachFunc"
              c:type="PangoFontsetForeachFunc"
              version="1.4">
      <doc xml:space="preserve"
           filename="pango/pango-fontset.h"
           line="50">Callback used when enumerating fonts in a fontset.

See [method@Pango.Fontset.foreach].</doc>
      <source-position filename="pango/pango-fontset.h" line="64"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-fontset.h"
             line="60">if %TRUE, stop iteration and return immediately.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="fontset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-fontset.h"
               line="52">a `PangoFontset`</doc>
          <type name="Fontset" c:type="PangoFontset*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-fontset.h"
               line="53">a font from @fontset</doc>
          <type name="Font" c:type="PangoFont*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="pango/pango-fontset.h"
               line="54">callback data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="FontsetSimple"
           c:symbol-prefix="fontset_simple"
           c:type="PangoFontsetSimple"
           parent="Fontset"
           glib:type-name="PangoFontsetSimple"
           glib:get-type="pango_fontset_simple_get_type"
           glib:type-struct="FontsetSimpleClass">
      <doc xml:space="preserve"
           filename="pango/pango-fontset-simple.h"
           line="33">`PangoFontsetSimple` is a implementation of the abstract
`PangoFontset` base class as an array of fonts.

When creating a `PangoFontsetSimple`, you have to provide
the array of fonts that make up the fontset.</doc>
      <source-position filename="pango/pango-fontset-simple.h" line="47"/>
      <constructor name="new" c:identifier="pango_fontset_simple_new">
        <doc xml:space="preserve"
             filename="pango/pango-fontset-simple.c"
             line="134">Creates a new `PangoFontsetSimple` for the given language.</doc>
        <source-position filename="pango/pango-fontset-simple.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-fontset-simple.c"
               line="140">the newly allocated `PangoFontsetSimple`</doc>
          <type name="FontsetSimple" c:type="PangoFontsetSimple*"/>
        </return-value>
        <parameters>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset-simple.c"
                 line="136">a `PangoLanguage` tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append" c:identifier="pango_fontset_simple_append">
        <doc xml:space="preserve"
             filename="pango/pango-fontset-simple.c"
             line="153">Adds a font to the fontset.

The fontset takes ownership of @font.</doc>
        <source-position filename="pango/pango-fontset-simple.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset-simple.c"
                 line="155">a `PangoFontsetSimple`.</doc>
            <type name="FontsetSimple" c:type="PangoFontsetSimple*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset-simple.c"
                 line="156">a `PangoFont`.</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="pango_fontset_simple_size">
        <doc xml:space="preserve"
             filename="pango/pango-fontset-simple.c"
             line="169">Returns the number of fonts in the fontset.</doc>
        <source-position filename="pango/pango-fontset-simple.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-fontset-simple.c"
               line="175">the size of @fontset</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-fontset-simple.c"
                 line="171">a `PangoFontsetSimple`.</doc>
            <type name="FontsetSimple" c:type="PangoFontsetSimple*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="FontsetSimpleClass"
            c:type="PangoFontsetSimpleClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="FontsetSimple">
      <source-position filename="pango/pango-fontset-simple.h" line="47"/>
    </record>
    <function-macro name="GET_UNKNOWN_GLYPH"
                    c:identifier="PANGO_GET_UNKNOWN_GLYPH"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="670">The way this unknown glyphs are rendered is backend specific. For example,
a box with the hexadecimal Unicode code-point of the character written in it
is what is done in the most common backends.</doc>
      <source-position filename="pango/pango-font.h" line="683"/>
      <parameters>
        <parameter name="wc">
          <doc xml:space="preserve"
               filename="pango/pango-font.h"
               line="672">a Unicode character</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="GLYPH_EMPTY" value="268435455" c:type="PANGO_GLYPH_EMPTY">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="640">A `PangoGlyph` value that indicates a zero-width empty glpyh.

This is useful for example in shaper modules, to use as the glyph for
various zero-width Unicode characters (those passing [func@is_zero_width]).</doc>
      <source-position filename="pango/pango-font.h" line="680"/>
      <type name="Glyph" c:type="PangoGlyph"/>
    </constant>
    <constant name="GLYPH_INVALID_INPUT"
              value="4294967295"
              c:type="PANGO_GLYPH_INVALID_INPUT"
              version="1.20">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="649">A `PangoGlyph` value for invalid input.

`PangoLayout` produces one such glyph per invalid input UTF-8 byte and such
a glyph is rendered as a crossed box.

Note that this value is defined such that it has the %PANGO_GLYPH_UNKNOWN_FLAG
set.</doc>
      <source-position filename="pango/pango-font.h" line="681"/>
      <type name="Glyph" c:type="PangoGlyph"/>
    </constant>
    <constant name="GLYPH_UNKNOWN_FLAG"
              value="268435456"
              c:type="PANGO_GLYPH_UNKNOWN_FLAG">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="662">Flag used in `PangoGlyph` to turn a `gunichar` value of a valid Unicode
character into an unknown-character glyph for that `gunichar`.

Such unknown-character glyphs may be rendered as a 'hex box'.</doc>
      <source-position filename="pango/pango-font.h" line="682"/>
      <type name="Glyph" c:type="PangoGlyph"/>
    </constant>
    <function-macro name="GRAVITY_IS_IMPROPER"
                    c:identifier="PANGO_GRAVITY_IS_IMPROPER"
                    version="1.32"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-gravity.h"
           line="101">Whether a `PangoGravity` represents a gravity that results in reversal
of text direction.</doc>
      <source-position filename="pango/pango-gravity.h" line="113"/>
      <parameters>
        <parameter name="gravity">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.h"
               line="103">the `PangoGravity` to check</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GRAVITY_IS_VERTICAL"
                    c:identifier="PANGO_GRAVITY_IS_VERTICAL"
                    version="1.16"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-gravity.h"
           line="87">Whether a `PangoGravity` represents vertical writing directions.</doc>
      <source-position filename="pango/pango-gravity.h" line="98"/>
      <parameters>
        <parameter name="gravity">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.h"
               line="89">the `PangoGravity` to check</doc>
        </parameter>
      </parameters>
    </function-macro>
    <record name="GlyphGeometry" c:type="PangoGlyphGeometry">
      <doc xml:space="preserve"
           filename="pango/pango-glyph.h"
           line="56">The `PangoGlyphGeometry` structure contains width and positioning
information for a single glyph.

Note that @width is not guaranteed to be the same as the glyph
extents. Kerning and other positioning applied during shaping will
affect both the @width and the @x_offset for the glyphs in the
glyph string that results from shaping.

The information in this struct is intended for rendering the glyphs,
as follows:

1. Assume the current point is (x, y)
2. Render the current glyph at (x + x_offset, y + y_offset),
3. Advance the current point to (x + width, y)
4. Render the next glyph</doc>
      <source-position filename="pango/pango-glyph.h" line="83"/>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="58">the logical width to use for the the character.</doc>
        <type name="GlyphUnit" c:type="PangoGlyphUnit"/>
      </field>
      <field name="x_offset" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="59">horizontal offset from nominal character position.</doc>
        <type name="GlyphUnit" c:type="PangoGlyphUnit"/>
      </field>
      <field name="y_offset" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="60">vertical offset from nominal character position.</doc>
        <type name="GlyphUnit" c:type="PangoGlyphUnit"/>
      </field>
    </record>
    <record name="GlyphInfo" c:type="PangoGlyphInfo">
      <doc xml:space="preserve"
           filename="pango/pango-glyph.h"
           line="111">A `PangoGlyphInfo` structure represents a single glyph with
positioning information and visual attributes.</doc>
      <source-position filename="pango/pango-glyph.h" line="125"/>
      <field name="glyph" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="113">the glyph itself.</doc>
        <type name="Glyph" c:type="PangoGlyph"/>
      </field>
      <field name="geometry" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="114">the positional information about the glyph.</doc>
        <type name="GlyphGeometry" c:type="PangoGlyphGeometry"/>
      </field>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="115">the visual attributes of the glyph.</doc>
        <type name="GlyphVisAttr" c:type="PangoGlyphVisAttr"/>
      </field>
    </record>
    <record name="GlyphItem"
            c:type="PangoGlyphItem"
            glib:type-name="PangoGlyphItem"
            glib:get-type="pango_glyph_item_get_type"
            c:symbol-prefix="glyph_item">
      <doc xml:space="preserve"
           filename="pango/pango-glyph-item.h"
           line="32">A `PangoGlyphItem` is a pair of a `PangoItem` and the glyphs
resulting from shaping the items text.

As an example of the usage of `PangoGlyphItem`, the results
of shaping text with `PangoLayout` is a list of `PangoLayoutLine`,
each of which contains a list of `PangoGlyphItem`.</doc>
      <source-position filename="pango/pango-glyph-item.h" line="59"/>
      <field name="item" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.h"
             line="34">corresponding `PangoItem`</doc>
        <type name="Item" c:type="PangoItem*"/>
      </field>
      <field name="glyphs" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.h"
             line="35">corresponding `PangoGlyphString`</doc>
        <type name="GlyphString" c:type="PangoGlyphString*"/>
      </field>
      <field name="y_offset" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.h"
             line="36">shift of the baseline, relative to the baseline
  of the containing line. Positive values shift upwards</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="start_x_offset" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.h"
             line="38">horizontal displacement to apply before the
  glyph item. Positive values shift right</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="end_x_offset" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.h"
             line="40">horizontal displacement to apply after th
  glyph item. Positive values shift right</doc>
        <type name="gint" c:type="int"/>
      </field>
      <method name="apply_attrs"
              c:identifier="pango_glyph_item_apply_attrs"
              version="1.2">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="561">Splits a shaped item (`PangoGlyphItem`) into multiple items based
on an attribute list.

The idea is that if you have attributes that don't affect shaping,
such as color or underline, to avoid affecting shaping, you filter
them out ([method@Pango.AttrList.filter]), apply the shaping process
and then reapply them to the result using this function.

All attributes that start or end inside a cluster are applied
to that cluster; for instance, if half of a cluster is underlined
and the other-half strikethrough, then the cluster will end
up with both underline and strikethrough attributes. In these
cases, it may happen that @item-&gt;extra_attrs for some of the
result items can have multiple attributes of the same type.

This function takes ownership of @glyph_item; it will be reused
as one of the elements in the list.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-glyph-item.c"
               line="585">a
  list of glyph items resulting from splitting @glyph_item. Free
  the elements using [method@Pango.GlyphItem.free], the list using
  g_slist_free().</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="GlyphItem"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="563">a shaped item</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="564">text that @list applies to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="565">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_glyph_item_copy" version="1.20">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="139">Make a deep copy of an existing `PangoGlyphItem` structure.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="71"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-glyph-item.c"
               line="145">the newly allocated `PangoGlyphItem`</doc>
          <type name="GlyphItem" c:type="PangoGlyphItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="141">a `PangoGlyphItem`</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_glyph_item_free" version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="168">Frees a `PangoGlyphItem` and resources to which it points.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyph_item"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="170">a `PangoGlyphItem`</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_widths"
              c:identifier="pango_glyph_item_get_logical_widths"
              version="1.26">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="803">Given a `PangoGlyphItem` and the corresponding text, determine the
width corresponding to each character.

When multiple characters compose a single cluster, the width of the
entire cluster is divided equally among the characters.

See also [method@Pango.GlyphString.get_logical_widths].</doc>
        <source-position filename="pango/pango-glyph-item.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="805">a `PangoGlyphItem`</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="806">text that @glyph_item corresponds to
  (glyph_item-&gt;item-&gt;offset is an offset from the
  start of @text)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="logical_widths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="809">an array whose length is the number of
  characters in glyph_item (equal to glyph_item-&gt;item-&gt;num_chars)
  to be filled in with the resulting character widths.</doc>
            <array zero-terminated="0" c:type="int*">
              <type name="gint" c:type="int"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="letter_space"
              c:identifier="pango_glyph_item_letter_space"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="721">Adds spacing between the graphemes of @glyph_item to
give the effect of typographic letter spacing.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="723">a `PangoGlyphItem`</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="724">text that @glyph_item corresponds to
  (glyph_item-&gt;item-&gt;offset is an offset from the
  start of @text)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="log_attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="727">logical attributes for the item
  (the first logical attribute refers to the position
  before the first character in the item)</doc>
            <array zero-terminated="0" c:type="PangoLogAttr*">
              <type name="LogAttr" c:type="PangoLogAttr"/>
            </array>
          </parameter>
          <parameter name="letter_spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="730">amount of letter spacing to add
  in Pango units. May be negative, though too large
  negative values will give ugly results.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="split" c:identifier="pango_glyph_item_split" version="1.2">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="31">Modifies @orig to cover only the text after @split_index, and
returns a new item that covers the text before @split_index that
used to be in @orig.

You can think of @split_index as the length of the returned item.
@split_index may not be 0, and it may not be greater than or equal
to the length of @orig (that is, there must be at least one byte
assigned to each item, you can't create a zero-length item).

This function is similar in function to pango_item_split() (and uses
it internally.)</doc>
        <source-position filename="pango/pango-glyph-item.h" line="67"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-glyph-item.c"
               line="50">the newly allocated item
  representing text before @split_index, which should be freed
  with pango_glyph_item_free().</doc>
          <type name="GlyphItem" c:type="PangoGlyphItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="33">a `PangoItem`</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="34">text to which positions in @orig apply</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="split_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="35">byte index of position to split item, relative to the
  start of the item</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="GlyphItemIter"
            c:type="PangoGlyphItemIter"
            version="1.22"
            glib:type-name="PangoGlyphItemIter"
            glib:get-type="pango_glyph_item_iter_get_type"
            c:symbol-prefix="glyph_item_iter">
      <doc xml:space="preserve"
           filename="pango/pango-glyph-item.h"
           line="89">A `PangoGlyphItemIter` is an iterator over the clusters in a
`PangoGlyphItem`.

The *forward direction* of the iterator is the logical direction of text.
That is, with increasing @start_index and @start_char values. If @glyph_item
is right-to-left (that is, if `glyph_item-&gt;item-&gt;analysis.level` is odd),
then @start_glyph decreases as the iterator moves forward.  Moreover,
in right-to-left cases, @start_glyph is greater than @end_glyph.

An iterator should be initialized using either
pango_glyph_item_iter_init_start() or
pango_glyph_item_iter_init_end(), for forward and backward iteration
respectively, and walked over using any desired mixture of
pango_glyph_item_iter_next_cluster() and
pango_glyph_item_iter_prev_cluster().

A common idiom for doing a forward iteration over the clusters is:

```
PangoGlyphItemIter cluster_iter;
gboolean have_cluster;

for (have_cluster = pango_glyph_item_iter_init_start (&amp;cluster_iter,
                                                      glyph_item, text);
     have_cluster;
     have_cluster = pango_glyph_item_iter_next_cluster (&amp;cluster_iter))
{
  ...
}
```

Note that @text is the start of the text for layout, which is then
indexed by `glyph_item-&gt;item-&gt;offset` to get to the text of @glyph_item.
The @start_index and @end_index values can directly index into @text. The
@start_glyph, @end_glyph, @start_char, and @end_char values however are
zero-based for the @glyph_item.  For each cluster, the item pointed at by
the start variables is included in the cluster while the one pointed at by
end variables is not.

None of the members of a `PangoGlyphItemIter` should be modified manually.</doc>
      <source-position filename="pango/pango-glyph-item.h" line="149"/>
      <field name="glyph_item" writable="1">
        <type name="GlyphItem" c:type="PangoGlyphItem*"/>
      </field>
      <field name="text" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="start_glyph" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="start_index" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="start_char" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="end_glyph" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="end_index" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="end_char" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <method name="copy"
              c:identifier="pango_glyph_item_iter_copy"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="195">Make a shallow copy of an existing `PangoGlyphItemIter` structure.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="156"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-glyph-item.c"
               line="201">the newly allocated `PangoGlyphItemIter`</doc>
          <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="197">a `PangoGlyphItem`Iter</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="pango_glyph_item_iter_free"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="220">Frees a `PangoGlyphItem`Iter.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="222">a `PangoGlyphItemIter`</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_end"
              c:identifier="pango_glyph_item_iter_init_end"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="464">Initializes a `PangoGlyphItemIter` structure to point to the
last cluster in a glyph item.

See `PangoGlyphItemIter` for details of cluster orders.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-glyph-item.c"
               line="475">%FALSE if there are no clusters in the glyph item</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="466">a `PangoGlyphItemIter`</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
          <parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="467">the glyph item to iterate over</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="468">text corresponding to the glyph item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_start"
              c:identifier="pango_glyph_item_iter_init_start"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="425">Initializes a `PangoGlyphItemIter` structure to point to the
first cluster in a glyph item.

See `PangoGlyphItemIter` for details of cluster orders.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-glyph-item.c"
               line="436">%FALSE if there are no clusters in the glyph item</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="427">a `PangoGlyphItemIter`</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
          <parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="428">the glyph item to iterate over</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="429">text corresponding to the glyph item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_cluster"
              c:identifier="pango_glyph_item_iter_next_cluster"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="241">Advances the iterator to the next cluster in the glyph item.

See `PangoGlyphItemIter` for details of cluster orders.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-glyph-item.c"
               line="249">%TRUE if the iterator was advanced,
  %FALSE if we were already on the  last cluster.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="243">a `PangoGlyphItemIter`</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prev_cluster"
              c:identifier="pango_glyph_item_iter_prev_cluster"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-glyph-item.c"
             line="332">Moves the iterator to the preceding cluster in the glyph item.
See `PangoGlyphItemIter` for details of cluster orders.</doc>
        <source-position filename="pango/pango-glyph-item.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-glyph-item.c"
               line="339">%TRUE if the iterator was moved,
  %FALSE if we were already on the first cluster.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-glyph-item.c"
                 line="334">a `PangoGlyphItemIter`</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="GlyphString"
            c:type="PangoGlyphString"
            glib:type-name="PangoGlyphString"
            glib:get-type="pango_glyph_string_get_type"
            c:symbol-prefix="glyph_string">
      <doc xml:space="preserve"
           filename="pango/pango-glyph.h"
           line="127">A `PangoGlyphString` is used to store strings of glyphs with geometry
and visual attribute information.

The storage for the glyph information is owned by the structure
which simplifies memory management.</doc>
      <source-position filename="pango/pango-glyph.h" line="148"/>
      <field name="num_glyphs" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="129">number of glyphs in this glyph string</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="glyphs" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="130">array of glyph information</doc>
        <array length="0" zero-terminated="0" c:type="PangoGlyphInfo*">
          <type name="GlyphInfo" c:type="PangoGlyphInfo"/>
        </array>
      </field>
      <field name="log_clusters" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="131">logical cluster info, indexed by the byte index
  within the text corresponding to the glyph string</doc>
        <type name="gint" c:type="int*"/>
      </field>
      <field name="space" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <constructor name="new" c:identifier="pango_glyph_string_new">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="30">Create a new `PangoGlyphString`.</doc>
        <source-position filename="pango/pango-glyph.h" line="156"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/glyphstring.c"
               line="35">the newly allocated `PangoGlyphString`, which
  should be freed with [method@Pango.GlyphString.free].</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="pango_glyph_string_copy">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="100">Copy a glyph string and associated storage.</doc>
        <source-position filename="pango/pango-glyph.h" line="162"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/glyphstring.c"
               line="106">the newly allocated `PangoGlyphString`</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="string"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="102">a `PangoGlyphString`</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="extents" c:identifier="pango_glyph_string_extents">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="261">Compute the logical and ink extents of a glyph string.

See the documentation for [method@Pango.Font.get_glyph_extents] for details
about the interpretation of the rectangles.

Examples of logical (red) and ink (green) rects:

![](rects1.png) ![](rects2.png)</doc>
        <source-position filename="pango/pango-glyph.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="263">a `PangoGlyphString`</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="264">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="265">rectangle used to store the extents of the glyph string as drawn</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="266">rectangle used to store the logical extents of the glyph string</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="extents_range"
              c:identifier="pango_glyph_string_extents_range">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="145">Computes the extents of a sub-portion of a glyph string.

The extents are relative to the start of the glyph string range
(the origin of their coordinate system is at the start of the range,
not at the start of the entire glyph string).</doc>
        <source-position filename="pango/pango-glyph.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="147">a `PangoGlyphString`</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="148">start index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="149">end index (the range is the set of bytes with
  indices such that start &lt;= index &lt; end)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="151">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="152">rectangle used to
  store the extents of the glyph string range as drawn</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="154">rectangle used to
  store the logical extents of the glyph string range</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_glyph_string_free">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="128">Free a glyph string and associated storage.</doc>
        <source-position filename="pango/pango-glyph.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="string"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="130">a `PangoGlyphString`, may be %NULL</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_widths"
              c:identifier="pango_glyph_string_get_logical_widths">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="314">Given a `PangoGlyphString` and corresponding text, determine the width
corresponding to each character.

When multiple characters compose a single cluster, the width of the
entire cluster is divided equally among the characters.

See also [method@Pango.GlyphItem.get_logical_widths].</doc>
        <source-position filename="pango/pango-glyph.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="316">a `PangoGlyphString`</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="317">the text corresponding to the glyphs</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="318">the length of @text, in bytes</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="embedding_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="319">the embedding level of the string</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="logical_widths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="320">an array whose length is the number of
  characters in text (equal to `g_utf8_strlen (text, length)` unless
  text has `NUL` bytes) to be filled in with the resulting character widths.</doc>
            <array zero-terminated="0" c:type="int*">
              <type name="gint" c:type="int"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="pango_glyph_string_get_width"
              version="1.14">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="287">Computes the logical width of the glyph string.

This can also be computed using [method@Pango.GlyphString.extents].
However, since this only computes the width, it's much faster. This
is in fact only a convenience function that computes the sum of
@geometry.width for each glyph in the @glyphs.</doc>
        <source-position filename="pango/pango-glyph.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/glyphstring.c"
               line="298">the logical width of the glyph string.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="289">a `PangoGlyphString`</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="index_to_x" c:identifier="pango_glyph_string_index_to_x">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="359">Converts from character position to x position.

The X position is measured from the left edge of the run.
Character positions are obtained using font metrics for ligatures
where available, and computed by dividing up each cluster
into equal portions, otherwise.

&lt;picture&gt;
  &lt;source srcset="glyphstring-positions-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img alt="Glyph positions" src="glyphstring-positions-light.png"&gt;
&lt;/picture&gt;</doc>
        <source-position filename="pango/pango-glyph.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="361">the glyphs return from [func@shape]</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="362">the text for the run</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="363">the number of bytes (not characters) in @text.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="analysis" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="364">the analysis information return from [func@itemize]</doc>
            <type name="Analysis" c:type="PangoAnalysis*"/>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="365">the byte index within @text</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="366">whether we should compute the result for the beginning (%FALSE)
  or end (%TRUE) of the character.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="x_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="368">location to store result</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_to_x_full"
              c:identifier="pango_glyph_string_index_to_x_full"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="399">Converts from character position to x position.

This variant of [method@Pango.GlyphString.index_to_x] additionally
accepts a `PangoLogAttr` array. The grapheme boundary information
in it can be used to disambiguate positioning inside some complex
clusters.</doc>
        <source-position filename="pango/pango-glyph.h" line="207"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="401">the glyphs return from [func@shape]</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="402">the text for the run</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="403">the number of bytes (not characters) in @text.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="analysis" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="404">the analysis information return from [func@itemize]</doc>
            <type name="Analysis" c:type="PangoAnalysis*"/>
          </parameter>
          <parameter name="attrs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="405">`PangoLogAttr` array for @text</doc>
            <type name="LogAttr" c:type="PangoLogAttr*"/>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="406">the byte index within @text</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="407">whether we should compute the result for the beginning (%FALSE)
  or end (%TRUE) of the character.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="x_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="409">location to store result</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="pango_glyph_string_set_size">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="51">Resize a glyph string to the given length.</doc>
        <source-position filename="pango/pango-glyph.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="53">a `PangoGlyphString`.</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="new_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="54">the new length of the string</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="x_to_index" c:identifier="pango_glyph_string_x_to_index">
        <doc xml:space="preserve"
             filename="pango/glyphstring.c"
             line="625">Convert from x offset to character position.

Character positions are computed by dividing up each cluster into
equal portions. In scripts where positioning within a cluster is
not allowed (such as Thai), the returned value may not be a valid
cursor position; the caller must combine the result with the logical
attributes for the text to compute the valid cursor position.</doc>
        <source-position filename="pango/pango-glyph.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="627">the glyphs returned from [func@shape]</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="628">the text for the run</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="629">the number of bytes (not characters) in text.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="analysis" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="630">the analysis information return from [func@itemize]</doc>
            <type name="Analysis" c:type="PangoAnalysis*"/>
          </parameter>
          <parameter name="x_pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="631">the x offset (in Pango units)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="index_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="632">location to store calculated byte index within @text</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/glyphstring.c"
                 line="633">location to store a boolean indicating whether the
  user clicked on the leading or trailing edge of the character</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="GlyphVisAttr" c:type="PangoGlyphVisAttr">
      <doc xml:space="preserve"
           filename="pango/pango-glyph.h"
           line="87">A `PangoGlyphVisAttr` structure communicates information between
the shaping and rendering phases.

Currently, it contains cluster start and color information.
More attributes may be added in the future.

Clusters are stored in visual order, within the cluster, glyphs
are always ordered in logical order, since visual order is meaningless;
that is, in Arabic text, accent glyphs follow the glyphs for the
base character.</doc>
      <source-position filename="pango/pango-glyph.h" line="107"/>
      <field name="is_cluster_start" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="89">set for the first logical glyph in each cluster.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_color" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="90">set if the the font will render this glyph with color. Since 1.50</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <enumeration name="Gravity"
                 version="1.16"
                 glib:type-name="PangoGravity"
                 glib:get-type="pango_gravity_get_type"
                 c:type="PangoGravity">
      <doc xml:space="preserve"
           filename="pango/pango-gravity.h"
           line="29">`PangoGravity` represents the orientation of glyphs in a segment
of text.

This is useful when rendering vertical text layouts. In those situations,
the layout is rotated using a non-identity [struct@Pango.Matrix], and then
glyph orientation is controlled using `PangoGravity`.

Not every value in this enumeration makes sense for every usage of
`PangoGravity`; for example, %PANGO_GRAVITY_AUTO only can be passed to
[method@Pango.Context.set_base_gravity] and can only be returned by
[method@Pango.Context.get_base_gravity].

See also: [enum@Pango.GravityHint]</doc>
      <member name="south"
              value="0"
              c:identifier="PANGO_GRAVITY_SOUTH"
              glib:nick="south"
              glib:name="PANGO_GRAVITY_SOUTH">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.h"
             line="31">Glyphs stand upright (default) &lt;img align="right" valign="center" src="m-south.png"&gt;</doc>
      </member>
      <member name="east"
              value="1"
              c:identifier="PANGO_GRAVITY_EAST"
              glib:nick="east"
              glib:name="PANGO_GRAVITY_EAST">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.h"
             line="32">Glyphs are rotated 90 degrees counter-clockwise. &lt;img align="right" valign="center" src="m-east.png"&gt;</doc>
      </member>
      <member name="north"
              value="2"
              c:identifier="PANGO_GRAVITY_NORTH"
              glib:nick="north"
              glib:name="PANGO_GRAVITY_NORTH">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.h"
             line="33">Glyphs are upside-down. &lt;img align="right" valign="cener" src="m-north.png"&gt;</doc>
      </member>
      <member name="west"
              value="3"
              c:identifier="PANGO_GRAVITY_WEST"
              glib:nick="west"
              glib:name="PANGO_GRAVITY_WEST">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.h"
             line="34">Glyphs are rotated 90 degrees clockwise. &lt;img align="right" valign="center" src="m-west.png"&gt;</doc>
      </member>
      <member name="auto"
              value="4"
              c:identifier="PANGO_GRAVITY_AUTO"
              glib:nick="auto"
              glib:name="PANGO_GRAVITY_AUTO">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.h"
             line="35">Gravity is resolved from the context matrix</doc>
      </member>
      <function name="get_for_matrix"
                c:identifier="pango_gravity_get_for_matrix"
                version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.c"
             line="62">Finds the gravity that best matches the rotation component
in a `PangoMatrix`.</doc>
        <source-position filename="pango/pango-gravity.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="69">the gravity of @matrix, which will never be
%PANGO_GRAVITY_AUTO, or %PANGO_GRAVITY_SOUTH if @matrix is %NULL</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <parameter name="matrix"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="64">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_for_script"
                c:identifier="pango_gravity_get_for_script"
                version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.c"
             line="351">Returns the gravity to use in laying out a `PangoItem`.

The gravity is determined based on the script, base gravity, and hint.

If @base_gravity is %PANGO_GRAVITY_AUTO, it is first replaced with the
preferred gravity of @script.  To get the preferred gravity of a script,
pass %PANGO_GRAVITY_AUTO and %PANGO_GRAVITY_HINT_STRONG in.</doc>
        <source-position filename="pango/pango-gravity.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="365">resolved gravity suitable to use for a run of text
with @script</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="353">`PangoScript` to query</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
          <parameter name="base_gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="354">base gravity of the paragraph</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="355">orientation hint</doc>
            <type name="GravityHint" c:type="PangoGravityHint"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_for_script_and_width"
                c:identifier="pango_gravity_get_for_script_and_width"
                version="1.26">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.c"
             line="381">Returns the gravity to use in laying out a single character
or `PangoItem`.

The gravity is determined based on the script, East Asian width,
base gravity, and hint,

This function is similar to [func@Pango.Gravity.get_for_script] except
that this function makes a distinction between narrow/half-width and
wide/full-width characters also. Wide/full-width characters always
stand *upright*, that is, they always take the base gravity,
whereas narrow/full-width characters are always rotated in vertical
context.

If @base_gravity is %PANGO_GRAVITY_AUTO, it is first replaced with the
preferred gravity of @script.</doc>
        <source-position filename="pango/pango-gravity.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="404">resolved gravity suitable to use for a run of text
with @script and @wide.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="383">`PangoScript` to query</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
          <parameter name="wide" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="384">%TRUE for wide characters as returned by g_unichar_iswide()</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="base_gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="385">base gravity of the paragraph</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="386">orientation hint</doc>
            <type name="GravityHint" c:type="PangoGravityHint"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_rotation"
                c:identifier="pango_gravity_to_rotation"
                version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.c"
             line="28">Converts a `PangoGravity` value to its natural rotation in radians.

Note that [method@Pango.Matrix.rotate] takes angle in degrees, not radians.
So, to call [method@Pango.Matrix,rotate] with the output of this function
you should multiply it by (180. / G_PI).</doc>
        <source-position filename="pango/pango-gravity.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="38">the rotation value corresponding to @gravity.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-gravity.c"
                 line="30">gravity to query, should not be %PANGO_GRAVITY_AUTO</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="GravityHint"
                 version="1.16"
                 glib:type-name="PangoGravityHint"
                 glib:get-type="pango_gravity_hint_get_type"
                 c:type="PangoGravityHint">
      <doc xml:space="preserve"
           filename="pango/pango-gravity.h"
           line="61">`PangoGravityHint` defines how horizontal scripts should behave in a
vertical context.

That is, English excerpts in a vertical paragraph for example.

See also [enum@Pango.Gravity]</doc>
      <member name="natural"
              value="0"
              c:identifier="PANGO_GRAVITY_HINT_NATURAL"
              glib:nick="natural"
              glib:name="PANGO_GRAVITY_HINT_NATURAL">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.h"
             line="63">scripts will take their natural gravity based
  on the base gravity and the script.  This is the default.</doc>
      </member>
      <member name="strong"
              value="1"
              c:identifier="PANGO_GRAVITY_HINT_STRONG"
              glib:nick="strong"
              glib:name="PANGO_GRAVITY_HINT_STRONG">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.h"
             line="65">always use the base gravity set, regardless of
  the script.</doc>
      </member>
      <member name="line"
              value="2"
              c:identifier="PANGO_GRAVITY_HINT_LINE"
              glib:nick="line"
              glib:name="PANGO_GRAVITY_HINT_LINE">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.h"
             line="67">for scripts not in their natural direction (eg.
  Latin in East gravity), choose per-script gravity such that every script
  respects the line progression. This means, Latin and Arabic will take
  opposite gravities and both flow top-to-bottom for example.</doc>
      </member>
    </enumeration>
    <function-macro name="IS_CONTEXT"
                    c:identifier="PANGO_IS_CONTEXT"
                    introspectable="0">
      <source-position filename="pango/pango-context.h" line="38"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTEXT_CLASS"
                    c:identifier="PANGO_IS_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-context.h" line="39"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT"
                    c:identifier="PANGO_IS_FONT"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="542"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONTSET"
                    c:identifier="PANGO_IS_FONTSET"
                    introspectable="0">
      <source-position filename="pango/pango-fontset.h" line="38"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONTSET_CLASS"
                    c:identifier="PANGO_IS_FONTSET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-fontset.h" line="40"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONTSET_SIMPLE"
                    c:identifier="PANGO_IS_FONTSET_SIMPLE"
                    introspectable="0">
      <source-position filename="pango/pango-fontset-simple.h" line="44"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_CLASS"
                    c:identifier="PANGO_IS_FONT_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="544"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_FACE"
                    c:identifier="PANGO_IS_FONT_FACE"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="475"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_FACE_CLASS"
                    c:identifier="PANGO_IS_FONT_FACE_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="477"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_FAMILY"
                    c:identifier="PANGO_IS_FONT_FAMILY"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="400"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_FAMILY_CLASS"
                    c:identifier="PANGO_IS_FONT_FAMILY_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-font.h" line="402"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_MAP"
                    c:identifier="PANGO_IS_FONT_MAP"
                    introspectable="0">
      <source-position filename="pango/pango-fontmap.h" line="33"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_MAP_CLASS"
                    c:identifier="PANGO_IS_FONT_MAP_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-fontmap.h" line="35"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LAYOUT"
                    c:identifier="PANGO_IS_LAYOUT"
                    introspectable="0">
      <source-position filename="pango/pango-layout.h" line="139"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LAYOUT_CLASS"
                    c:identifier="PANGO_IS_LAYOUT_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-layout.h" line="140"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_RENDERER"
                    c:identifier="PANGO_IS_RENDERER"
                    introspectable="0">
      <source-position filename="pango/pango-renderer.h" line="30"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_RENDERER_CLASS"
                    c:identifier="PANGO_IS_RENDERER_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-renderer.h" line="32"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Item"
            c:type="PangoItem"
            glib:type-name="PangoItem"
            glib:get-type="pango_item_get_type"
            c:symbol-prefix="item">
      <doc xml:space="preserve"
           filename="pango/pango-item.h"
           line="98">The `PangoItem` structure stores information about a segment of text.

You typically obtain `PangoItems` by itemizing a piece of text
with [func@itemize].</doc>
      <source-position filename="pango/pango-item.h" line="117"/>
      <field name="offset" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="100">byte offset of the start of this item in text.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="101">length of this item in bytes.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="num_chars" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="102">number of Unicode characters in the item.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="analysis" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-item.h"
             line="104">analysis results for the item.</doc>
        <type name="Analysis" c:type="PangoAnalysis"/>
      </field>
      <constructor name="new" c:identifier="pango_item_new">
        <doc xml:space="preserve"
             filename="pango/pango-item.c"
             line="27">Creates a new `PangoItem` structure initialized to default values.</doc>
        <source-position filename="pango/pango-item.h" line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-item.c"
               line="32">the newly allocated `PangoItem`, which should
  be freed with [method@Pango.Item.free].</doc>
          <type name="Item" c:type="PangoItem*"/>
        </return-value>
      </constructor>
      <method name="apply_attrs"
              c:identifier="pango_item_apply_attrs"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-item.c"
             line="211">Add attributes to a `PangoItem`.

The idea is that you have attributes that don't affect itemization,
such as font features, so you filter them out using
[method@Pango.AttrList.filter], itemize your text, then reapply the
attributes to the resulting items using this function.

The @iter should be positioned before the range of the item,
and will be advanced past it. This function is meant to be called
in a loop over the items resulting from itemization, while passing
the iter to each call.</doc>
        <source-position filename="pango/pango-item.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-item.c"
                 line="213">a `PangoItem`</doc>
            <type name="Item" c:type="PangoItem*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-item.c"
                 line="214">a `PangoAttrIterator`</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_item_copy">
        <doc xml:space="preserve"
             filename="pango/pango-item.c"
             line="45">Copy an existing `PangoItem` structure.</doc>
        <source-position filename="pango/pango-item.h" line="127"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-item.c"
               line="51">the newly allocated `PangoItem`</doc>
          <type name="Item" c:type="PangoItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-item.c"
                 line="47">a `PangoItem`</doc>
            <type name="Item" c:type="PangoItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_item_free">
        <doc xml:space="preserve"
             filename="pango/pango-item.c"
             line="90">Free a `PangoItem` and all associated memory.</doc>
        <source-position filename="pango/pango-item.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-item.c"
                 line="92">a `PangoItem`, may be %NULL</doc>
            <type name="Item" c:type="PangoItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="split" c:identifier="pango_item_split">
        <doc xml:space="preserve"
             filename="pango/pango-item.c"
             line="124">Modifies @orig to cover only the text after @split_index, and
returns a new item that covers the text before @split_index that
used to be in @orig.

You can think of @split_index as the length of the returned item.
@split_index may not be 0, and it may not be greater than or equal
to the length of @orig (that is, there must be at least one byte
assigned to each item, you can't create a zero-length item).
@split_offset is the length of the first item in chars, and must be
provided because the text used to generate the item isn't available,
so `pango_item_split()` can't count the char length of the split items
itself.</doc>
        <source-position filename="pango/pango-item.h" line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-item.c"
               line="144">new item representing text before @split_index, which
  should be freed with [method@Pango.Item.free].</doc>
          <type name="Item" c:type="PangoItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-item.c"
                 line="126">a `PangoItem`</doc>
            <type name="Item" c:type="PangoItem*"/>
          </instance-parameter>
          <parameter name="split_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-item.c"
                 line="127">byte index of position to split item, relative to the
  start of the item</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="split_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-item.c"
                 line="129">number of chars between start of @orig and @split_index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="LAYOUT"
                    c:identifier="PANGO_LAYOUT"
                    introspectable="0">
      <source-position filename="pango/pango-layout.h" line="137"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LAYOUT_CLASS"
                    c:identifier="PANGO_LAYOUT_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-layout.h" line="138"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LAYOUT_GET_CLASS"
                    c:identifier="PANGO_LAYOUT_GET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-layout.h" line="141"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LBEARING"
                    c:identifier="PANGO_LBEARING"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="201">Extracts the *left bearing* from a `PangoRectangle`
representing glyph extents.

The left bearing is the distance from the horizontal
origin to the farthest left point of the character.
This is positive for characters drawn completely to
the right of the glyph origin.</doc>
      <source-position filename="pango/pango-types.h" line="227"/>
      <parameters>
        <parameter name="rect">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="203">a `PangoRectangle`</doc>
        </parameter>
      </parameters>
    </function-macro>
    <record name="Language"
            c:type="PangoLanguage"
            opaque="1"
            glib:type-name="PangoLanguage"
            glib:get-type="pango_language_get_type"
            c:symbol-prefix="language">
      <doc xml:space="preserve"
           filename="pango/pango-language.c"
           line="136">The `PangoLanguage` structure is used to
represent a language.

`PangoLanguage` pointers can be efficiently
copied and compared with each other.</doc>
      <source-position filename="pango/pango-types.h" line="46"/>
      <method name="get_sample_string"
              c:identifier="pango_language_get_sample_string">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="563">Get a string that is representative of the characters needed to
render a particular language.

The sample text may be a pangram, but is not necessarily. It is chosen
to be demonstrative of normal text in the language, as well as exposing
font feature requirements unique to the language. It is suitable for use
as sample text in a font selection dialog.

If @language is %NULL, the default language as found by
[func@Pango.Language.get_default] is used.

If Pango does not have a sample string for @language, the classic
"The quick brown fox..." is returned.  This can be detected by
comparing the returned pointer value to that returned for (non-existent)
language code "xx".  That is, compare to:

```
pango_language_get_sample_string (pango_language_from_string ("xx"))
```</doc>
        <source-position filename="pango/pango-language.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="587">the sample string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="language"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="565">a `PangoLanguage`</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scripts"
              c:identifier="pango_language_get_scripts"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="617">Determines the scripts used to to write @language.

If nothing is known about the language tag @language,
or if @language is %NULL, then %NULL is returned.
The list of scripts returned starts with the script that the
language uses most and continues to the one it uses least.

The value @num_script points at will be set to the number
of scripts in the returned array (or zero if %NULL is returned).

Most languages use only one script for writing, but there are
some that use two (Latin and Cyrillic for example), and a few
use three (Japanese for example). Applications should not make
any assumptions on the maximum number of scripts returned
though, except that it is positive if the return value is not
%NULL, and it is a small number.

The [method@Pango.Language.includes_script] function uses this
function internally.

Note: while the return value is declared as `PangoScript`, the
returned values are from the `GUnicodeScript` enumeration, which
may have more values. Callers need to handle unknown values.</doc>
        <source-position filename="pango/pango-language.h" line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="646">
  An array of `PangoScript` values, with the number of entries in
  the array stored in @num_scripts, or %NULL if Pango does not have
  any information about this particular language tag (also the case
  if @language is %NULL).</doc>
          <array length="0" zero-terminated="0" c:type="const PangoScript*">
            <type name="Script" c:type="PangoScript"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="language"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="619">a `PangoLanguage`</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
          <parameter name="num_scripts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="620">location to return number of scripts</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="includes_script"
              c:identifier="pango_language_includes_script"
              version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="687">Determines if @script is one of the scripts used to
write @language.

The returned value is conservative; if nothing is known about
the language tag @language, %TRUE will be returned, since, as
far as Pango knows, @script might be used to write @language.

This routine is used in Pango's itemization process when
determining if a supplied language tag is relevant to
a particular section of text. It probably is not useful
for applications in most circumstances.

This function uses [method@Pango.Language.get_scripts] internally.</doc>
        <source-position filename="pango/pango-language.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="706">%TRUE if @script is one of the scripts used
  to write @language or if nothing is known about @language
  (including the case that @language is %NULL), %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="language"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="689">a `PangoLanguage`</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="690">a `PangoScript`</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
        </parameters>
      </method>
      <method name="matches" c:identifier="pango_language_matches">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="388">Checks if a language tag matches one of the elements in a list of
language ranges.

A language tag is considered to match a range in the list if the
range is '*', the range is exactly the tag, or the range is a prefix
of the tag, and the character after it in the tag is '-'.</doc>
        <source-position filename="pango/pango-language.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="404">%TRUE if a match was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="language"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="390">a language tag (see [func@Pango.Language.from_string]),
  %NULL is allowed and matches nothing but '*'</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
          <parameter name="range_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="392">a list of language ranges, separated by ';', ':',
  ',', or space characters.
  Each element must either be '*', or a RFC 3066 language range
  canonicalized as by [func@Pango.Language.from_string]</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="pango_language_to_string">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="374">Gets the RFC-3066 format string representing the given language tag.

Returns (transfer none): a string representing the language tag</doc>
        <source-position filename="pango/pango-language.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="376">a language tag.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_string" c:identifier="pango_language_from_string">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="310">Convert a language tag to a `PangoLanguage`.

The language tag must be in a RFC-3066 format. `PangoLanguage` pointers
can be efficiently copied (copy the pointer) and compared with other
language tags (compare the pointer.)

This function first canonicalizes the string by converting it to
lowercase, mapping '_' to '-', and stripping all characters other
than letters and '-'.

Use [func@Pango.Language.get_default] if you want to get the
`PangoLanguage` for the current locale of the process.</doc>
        <source-position filename="pango/pango-language.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="327">a `PangoLanguage`</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
        <parameters>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="312">a string representing a language tag</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_default"
                c:identifier="pango_language_get_default"
                version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="251">Returns the `PangoLanguage` for the current locale of the process.

On Unix systems, this is the return value is derived from
`setlocale (LC_CTYPE, NULL)`, and the user can
affect this through the environment variables LC_ALL, LC_CTYPE or
LANG (checked in that order). The locale string typically is in
the form lang_COUNTRY, where lang is an ISO-639 language code, and
COUNTRY is an ISO-3166 country code. For instance, sv_FI for
Swedish as written in Finland or pt_BR for Portuguese as written in
Brazil.

On Windows, the C library does not use any such environment
variables, and setting them won't affect the behavior of functions
like ctime(). The user sets the locale through the Regional Options
in the Control Panel. The C library (in the setlocale() function)
does not use country and language codes, but country and language
names spelled out in English.
However, this function does check the above environment
variables, and does return a Unix-style locale string based on
either said environment variables or the thread's current locale.

Your application should call `setlocale(LC_ALL, "")` for the user
settings to take effect. GTK does this in its initialization
functions automatically (by calling gtk_set_locale()).
See the setlocale() manpage for more details.

Note that the default language can change over the life of an application.

Also note that this function will not do the right thing if you
use per-thread locales with uselocale(). In that case, you should
just call pango_language_from_string() yourself.</doc>
        <source-position filename="pango/pango-language.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="286">the default language as a `PangoLanguage`</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
      </function>
      <function name="get_preferred"
                c:identifier="pango_language_get_preferred"
                version="1.48">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="840">Returns the list of languages that the user prefers.

The list is specified by the `PANGO_LANGUAGE` or `LANGUAGE`
environment variables, in order of preference. Note that this
list does not necessarily include the language returned by
[func@Pango.Language.get_default].

When choosing language-specific resources, such as the sample
text returned by [method@Pango.Language.get_sample_string],
you should first try the default language, followed by the
languages returned by this function.</doc>
        <source-position filename="pango/pango-language.h" line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="855">a %NULL-terminated array
  of `PangoLanguage`*</doc>
          <array c:type="PangoLanguage**">
            <type name="Language" c:type="PangoLanguage*"/>
          </array>
        </return-value>
      </function>
    </record>
    <class name="Layout"
           c:symbol-prefix="layout"
           c:type="PangoLayout"
           parent="GObject.Object"
           glib:type-name="PangoLayout"
           glib:get-type="pango_layout_get_type"
           glib:type-struct="LayoutClass">
      <doc xml:space="preserve"
           filename="pango/pango-layout.c"
           line="22">A `PangoLayout` structure represents an entire paragraph of text.

While complete access to the layout capabilities of Pango is provided
using the detailed interfaces for itemization and shaping, using
that functionality directly involves writing a fairly large amount
of code. `PangoLayout` provides a high-level driver for formatting
entire paragraphs of text at once. This includes paragraph-level
functionality such as line breaking, justification, alignment and
ellipsization.

A `PangoLayout` is initialized with a `PangoContext`, UTF-8 string
and set of attributes for that string. Once that is done, the set of
formatted lines can be extracted from the object, the layout can be
rendered, and conversion between logical character positions within
the layout's text, and the physical position of the resulting glyphs
can be made.

There are a number of parameters to adjust the formatting of a
`PangoLayout`. The following image shows adjustable parameters
(on the left) and font metrics (on the right):

&lt;picture&gt;
  &lt;source srcset="layout-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img alt="Pango Layout Parameters" src="layout-light.png"&gt;
&lt;/picture&gt;

The following images demonstrate the effect of alignment and
justification on the layout of text:

| | |
| --- | --- |
| ![align=left](align-left.png) | ![align=left, justify](align-left-justify.png) |
| ![align=center](align-center.png) | ![align=center, justify](align-center-justify.png) |
| ![align=right](align-right.png) | ![align=right, justify](align-right-justify.png) |


It is possible, as well, to ignore the 2-D setup,
and simply treat the results of a `PangoLayout` as a list of lines.</doc>
      <source-position filename="pango/pango-layout.h" line="33"/>
      <constructor name="new" c:identifier="pango_layout_new">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="276">Create a new `PangoLayout` object with attributes initialized to
default values for a particular `PangoContext`.</doc>
        <source-position filename="pango/pango-layout.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="283">the newly allocated `PangoLayout`</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="278">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="deserialize"
                c:identifier="pango_layout_deserialize"
                version="1.50"
                throws="1">
        <doc xml:space="preserve"
             filename="pango/serializer.c"
             line="1663">Loads data previously created via [method@Pango.Layout.serialize].

For a discussion of the supported format, see that function.

Note: to verify that the returned layout is identical to
the one that was serialized, you can compare @bytes to the
result of serializing the layout again.</doc>
        <source-position filename="pango/pango-layout.h" line="424"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/serializer.c"
               line="1678">a new `PangoLayout`</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1665">a `PangoContext`</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1667">the bytes containing the data</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1666">`PangoLayoutDeserializeFlags`</doc>
            <type name="LayoutDeserializeFlags"
                  c:type="PangoLayoutDeserializeFlags"/>
          </parameter>
        </parameters>
      </function>
      <method name="context_changed"
              c:identifier="pango_layout_context_changed">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1492">Forces recomputation of any state in the `PangoLayout` that
might depend on the layout's context.

This function should be called if you make changes to the context
subsequent to creating the layout.</doc>
        <source-position filename="pango/pango-layout.h" line="273"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1494">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_layout_copy">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="301">Creates a deep copy-by-value of the layout.

The attribute list, tab array, and text from the original layout
are all copied by value.</doc>
        <source-position filename="pango/pango-layout.h" line="152"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="310">the newly allocated `PangoLayout`</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="303">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_alignment" c:identifier="pango_layout_get_alignment">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="992">Gets the alignment for the layout: how partial lines are
positioned within the horizontal space available.</doc>
        <source-position filename="pango/pango-layout.h" line="243"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="999">the alignment</doc>
          <type name="Alignment" c:type="PangoAlignment"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="994">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attributes" c:identifier="pango_layout_get_attributes">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="737">Gets the attribute list for the layout, if any.</doc>
        <source-position filename="pango/pango-layout.h" line="161"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="743">a `PangoAttrList`</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="739">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auto_dir"
              c:identifier="pango_layout_get_auto_dir"
              version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="947">Gets whether to calculate the base direction for the layout
according to its contents.

See [method@Pango.Layout.set_auto_dir].</doc>
        <source-position filename="pango/pango-layout.h" line="238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="956">%TRUE if the bidirectional base direction
  is computed from the layout's contents, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="949">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_baseline"
              c:identifier="pango_layout_get_baseline"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="3203">Gets the Y position of baseline of the first line in @layout.</doc>
        <source-position filename="pango/pango-layout.h" line="339"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="3209">baseline of first line, from top of @layout</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3205">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_caret_pos"
              c:identifier="pango_layout_get_caret_pos"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="2669">Given an index within a layout, determines the positions that of the
strong and weak cursors if the insertion point is at that index.

This is a variant of [method@Pango.Layout.get_cursor_pos] that applies
font metric information about caret slope and offset to the positions
it returns.

&lt;picture&gt;
  &lt;source srcset="caret-metrics-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img alt="Caret metrics" src="caret-metrics-light.png"&gt;
&lt;/picture&gt;</doc>
        <source-position filename="pango/pango-layout.h" line="303"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2671">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2672">the byte index of the cursor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="strong_pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2673">location to store the strong cursor position</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="weak_pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2674">location to store the weak cursor position</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_character_count"
              c:identifier="pango_layout_get_character_count"
              version="1.30">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1315">Returns the number of Unicode characters in the
the text of @layout.</doc>
        <source-position filename="pango/pango-layout.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1322">the number of Unicode characters
  in the text of @layout</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1317">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context" c:identifier="pango_layout_get_context">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="339">Retrieves the `PangoContext` used for this layout.</doc>
        <source-position filename="pango/pango-layout.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="345">the `PangoContext` for the layout</doc>
          <type name="Context" c:type="PangoContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="341">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cursor_pos" c:identifier="pango_layout_get_cursor_pos">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="2546">Given an index within a layout, determines the positions that of the
strong and weak cursors if the insertion point is at that index.

The position of each cursor is stored as a zero-width rectangle
with the height of the run extents.

&lt;picture&gt;
  &lt;source srcset="cursor-positions-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img alt="Cursor positions" src="cursor-positions-light.png"&gt;
&lt;/picture&gt;

The strong cursor location is the location where characters of the
directionality equal to the base direction of the layout are inserted.
The weak cursor location is the location where characters of the
directionality opposite to the base direction of the layout are inserted.

The following example shows text with both a strong and a weak cursor.

&lt;picture&gt;
  &lt;source srcset="split-cursor-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img alt="Strong and weak cursors" src="split-cursor-light.png"&gt;
&lt;/picture&gt;

The strong cursor has a little arrow pointing to the right, the weak
cursor to the left. Typing a 'c' in this situation will insert the
character after the 'b', and typing another Hebrew character, like 'ג',
will insert it at the end.</doc>
        <source-position filename="pango/pango-layout.h" line="297"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2548">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2549">the byte index of the cursor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="strong_pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2550">location to store the strong cursor position</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="weak_pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2551">location to store the weak cursor position</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_direction"
              c:identifier="pango_layout_get_direction"
              version="1.46">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="2521">Gets the text direction at the given character position in @layout.</doc>
        <source-position filename="pango/pango-layout.h" line="269"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="2528">the text direction at @index</doc>
          <type name="Direction" c:type="PangoDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2523">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2524">the byte index of the char</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ellipsize"
              c:identifier="pango_layout_get_ellipsize"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1159">Gets the type of ellipsization being performed for @layout.

See [method@Pango.Layout.set_ellipsize].

Use [method@Pango.Layout.is_ellipsized] to query whether any
paragraphs were actually ellipsized.</doc>
        <source-position filename="pango/pango-layout.h" line="261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1170">the current ellipsization mode for @layout</doc>
          <type name="EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1161">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extents" c:identifier="pango_layout_get_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="3092">Computes the logical and ink extents of @layout.

Logical extents are usually what you want for positioning things. Note
that both extents may have non-zero x and y. You may want to use those
to offset where you render the layout. Not doing that is a very typical
bug that shows up as right-to-left layouts not being correctly positioned
in a layout with a set width.

The extents are given in layout coordinates and in Pango units; layout
coordinates begin at the top left corner of the layout.</doc>
        <source-position filename="pango/pango-layout.h" line="323"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3094">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3095">rectangle used to store the extents of the
  layout as drawn</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3097">rectangle used to store the logical
  extents of the layout</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_font_description"
              c:identifier="pango_layout_get_font_description"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="783">Gets the font description for the layout, if any.</doc>
        <source-position filename="pango/pango-layout.h" line="190"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="789">a pointer to the
  layout's font description, or %NULL if the font description
  from the layout's context is inherited.</doc>
          <type name="FontDescription" c:type="const PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="785">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="pango_layout_get_height"
              version="1.20">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="452">Gets the height of layout used for ellipsization.

See [method@Pango.Layout.set_height] for details.</doc>
        <source-position filename="pango/pango-layout.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="460">the height, in Pango units if positive,
  or number of lines if negative.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="454">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indent" c:identifier="pango_layout_get_indent">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="574">Gets the paragraph indent width in Pango units.

A negative value indicates a hanging indentation.</doc>
        <source-position filename="pango/pango-layout.h" line="213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="582">the indent in Pango units</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="576">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter" c:identifier="pango_layout_get_iter">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7183">Returns an iterator to iterate over the visual extents of the layout.</doc>
        <source-position filename="pango/pango-layout.h" line="486"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7189">the new `PangoLayoutIter`</doc>
          <type name="LayoutIter" c:type="PangoLayoutIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7185">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_justify" c:identifier="pango_layout_get_justify">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="843">Gets whether each complete line should be stretched to fill the entire
width of the layout.</doc>
        <source-position filename="pango/pango-layout.h" line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="850">the justify value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="845">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_justify_last_line"
              c:identifier="pango_layout_get_justify_last_line"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="889">Gets whether the last line should be stretched
to fill the entire width of the layout.</doc>
        <source-position filename="pango/pango-layout.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="896">the justify value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="891">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line" c:identifier="pango_layout_get_line">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1689">Retrieves a particular line from a `PangoLayout`.

Use the faster [method@Pango.Layout.get_line_readonly] if you do not
plan to modify the contents of the line (glyphs, glyph widths, etc.).</doc>
        <source-position filename="pango/pango-layout.h" line="344"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1700">the requested `PangoLayoutLine`,
  or %NULL if the index is out of range. This layout line can be ref'ed
  and retained, but will become invalid if changes are made to the
  `PangoLayout`.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1691">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1692">the index of a line, which must be between 0 and
  `pango_layout_get_line_count(layout) - 1`, inclusive.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_count" c:identifier="pango_layout_get_line_count">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1612">Retrieves the count of lines for the @layout.</doc>
        <source-position filename="pango/pango-layout.h" line="342"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1618">the line count</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1614">`PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_readonly"
              c:identifier="pango_layout_get_line_readonly"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1730">Retrieves a particular line from a `PangoLayout`.

This is a faster alternative to [method@Pango.Layout.get_line],
but the user is not expected to modify the contents of the line
(glyphs, glyph widths, etc.).</doc>
        <source-position filename="pango/pango-layout.h" line="347"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1742">the requested `PangoLayoutLine`,
  or %NULL if the index is out of range. This layout line can be ref'ed
  and retained, but will become invalid if changes are made to the
  `PangoLayout`. No changes should be made to the line.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1732">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1733">the index of a line, which must be between 0 and
  `pango_layout_get_line_count(layout) - 1`, inclusive.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_spacing"
              c:identifier="pango_layout_get_line_spacing"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="678">Gets the line spacing factor of @layout.

See [method@Pango.Layout.set_line_spacing].</doc>
        <source-position filename="pango/pango-layout.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="680">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lines" c:identifier="pango_layout_get_lines">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1629">Returns the lines of the @layout as a list.

Use the faster [method@Pango.Layout.get_lines_readonly] if you do not
plan to modify the contents of the lines (glyphs, glyph widths, etc.).</doc>
        <source-position filename="pango/pango-layout.h" line="350"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1638">a `GSList`
  containing the lines in the layout. This points to internal data of the
  `PangoLayout` and must be used with care. It will become invalid on any
  change to the layout's text or properties.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="LayoutLine"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1631">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lines_readonly"
              c:identifier="pango_layout_get_lines_readonly"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1663">Returns the lines of the @layout as a list.

This is a faster alternative to [method@Pango.Layout.get_lines],
but the user is not expected to modify the contents of the lines
(glyphs, glyph widths, etc.).</doc>
        <source-position filename="pango/pango-layout.h" line="352"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1673">a `GSList`
  containing the lines in the layout. This points to internal data of the
  `PangoLayout` and must be used with care. It will become invalid on any
  change to the layout's text or properties. No changes should be made to
  the lines.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="LayoutLine"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1665">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_log_attrs" c:identifier="pango_layout_get_log_attrs">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1539">Retrieves an array of logical attributes for each character in
the @layout.</doc>
        <source-position filename="pango/pango-layout.h" line="278"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1541">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="attrs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1542">
  location to store a pointer to an array of logical attributes.
  This value must be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="PangoLogAttr**">
              <type name="LogAttr" c:type="PangoLogAttr*"/>
            </array>
          </parameter>
          <parameter name="n_attrs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1545">location to store the number of the attributes in the
  array. (The stored value will be one more than the total number
  of characters in the layout, since there need to be attributes
  corresponding to both the position before the first character
  and the position after the last character.)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_log_attrs_readonly"
              c:identifier="pango_layout_get_log_attrs_readonly"
              version="1.30">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1573">Retrieves an array of logical attributes for each character in
the @layout.

This is a faster alternative to [method@Pango.Layout.get_log_attrs].
The returned array is part of @layout and must not be modified.
Modifying the layout will invalidate the returned array.

The number of attributes returned in @n_attrs will be one more
than the total number of characters in the layout, since there
need to be attributes corresponding to both the position before
the first character and the position after the last character.</doc>
        <source-position filename="pango/pango-layout.h" line="283"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1591">an array of logical attributes</doc>
          <array length="0" zero-terminated="0" c:type="const PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1575">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="n_attrs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1576">location to store the number of the attributes in
  the array</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixel_extents"
              c:identifier="pango_layout_get_pixel_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="3121">Computes the logical and ink extents of @layout in device units.

This function just calls [method@Pango.Layout.get_extents] followed by
two [func@extents_to_pixels] calls, rounding @ink_rect and @logical_rect
such that the rounded rectangles fully contain the unrounded one (that is,
passes them as first argument to [func@Pango.extents_to_pixels]).</doc>
        <source-position filename="pango/pango-layout.h" line="327"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3123">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3124">rectangle used to store the extents of the
  layout as drawn</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3126">rectangle used to store the logical
  extents of the layout</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixel_size" c:identifier="pango_layout_get_pixel_size">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="3174">Determines the logical width and height of a `PangoLayout` in device
units.

[method@Pango.Layout.get_size] returns the width and height
scaled by %PANGO_SCALE. This is simply a convenience function
around [method@Pango.Layout.get_pixel_extents].</doc>
        <source-position filename="pango/pango-layout.h" line="335"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3176">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3177">location to store the logical width</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3178">location to store the logical height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="pango_layout_get_serial"
              version="1.32.4">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1511">Returns the current serial number of @layout.

The serial number is initialized to an small number larger than zero
when a new layout is created and is increased whenever the layout is
changed using any of the setter functions, or the `PangoContext` it
uses has changed. The serial may wrap, but will never have the value 0.
Since it can wrap, never compare it with "less than", always use "not equals".

This can be used to automatically detect changes to a `PangoLayout`,
and is useful for example to decide whether a layout needs redrawing.
To force the serial to be increased, use
[method@Pango.Layout.context_changed].</doc>
        <source-position filename="pango/pango-layout.h" line="275"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1528">The current serial number of @layout.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1513">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_single_paragraph_mode"
              c:identifier="pango_layout_get_single_paragraph_mode">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1102">Obtains whether @layout is in single paragraph mode.

See [method@Pango.Layout.set_single_paragraph_mode].</doc>
        <source-position filename="pango/pango-layout.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1110">%TRUE if the layout does not break paragraphs
  at paragraph separator characters, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1104">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="pango_layout_get_size">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="3148">Determines the logical width and height of a `PangoLayout` in Pango
units.

This is simply a convenience function around [method@Pango.Layout.get_extents].</doc>
        <source-position filename="pango/pango-layout.h" line="331"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3150">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3151">location to store the logical width</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="3152">location to store the logical height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_spacing" c:identifier="pango_layout_get_spacing">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="626">Gets the amount of spacing between the lines of the layout.</doc>
        <source-position filename="pango/pango-layout.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="632">the spacing in Pango units</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="628">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tabs" c:identifier="pango_layout_get_tabs">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1049">Gets the current `PangoTabArray` used by this layout.

If no `PangoTabArray` has been set, then the default tabs are
in use and %NULL is returned. Default tabs are every 8 spaces.

The return value should be freed with [method@Pango.TabArray.free].</doc>
        <source-position filename="pango/pango-layout.h" line="249"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1060">a copy of the tabs for this layout</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1051">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="pango_layout_get_text">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1292">Gets the text in the layout.

The returned text should not be freed or modified.</doc>
        <source-position filename="pango/pango-layout.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1300">the text in the @layout</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1294">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unknown_glyphs_count"
              c:identifier="pango_layout_get_unknown_glyphs_count"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1415">Counts the number of unknown glyphs in @layout.

This function can be used to determine if there are any fonts
available to render all characters in a certain string, or when
used in combination with %PANGO_ATTR_FALLBACK, to check if a
certain font supports all the characters in the string.</doc>
        <source-position filename="pango/pango-layout.h" line="266"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1426">The number of unknown glyphs in @layout</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1417">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="pango_layout_get_width">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="382">Gets the width to which the lines of the `PangoLayout` should wrap.</doc>
        <source-position filename="pango/pango-layout.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="388">the width in Pango units, or -1 if no width set.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="384">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wrap" c:identifier="pango_layout_get_wrap">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="500">Gets the wrap mode for the layout.

Use [method@Pango.Layout.is_wrapped] to query whether
any paragraphs were actually wrapped.</doc>
        <source-position filename="pango/pango-layout.h" line="206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="509">active wrap mode.</doc>
          <type name="WrapMode" c:type="PangoWrapMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="502">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="index_to_line_x"
              c:identifier="pango_layout_index_to_line_x">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1950">Converts from byte @index_ within the @layout to line and X position.

The X position is measured from the left edge of the line.</doc>
        <source-position filename="pango/pango-layout.h" line="291"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1952">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1953">the byte index of a grapheme within the layout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1954">an integer indicating the edge of the grapheme to retrieve the
  position of. If &gt; 0, the trailing edge of the grapheme, if 0,
  the leading of the grapheme</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="line"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1957">location to store resulting line index. (which will
  between 0 and pango_layout_get_line_count(layout) - 1)</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="x_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1959">location to store resulting position within line
  (%PANGO_SCALE units per device unit)</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_to_pos" c:identifier="pango_layout_index_to_pos">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="2379">Converts from an index within a `PangoLayout` to the onscreen position
corresponding to the grapheme at that index.

The returns is represented as rectangle. Note that `pos-&gt;x` is
always the leading edge of the grapheme and `pos-&gt;x + pos-&gt;width` the
trailing edge of the grapheme. If the directionality of the grapheme
is right-to-left, then `pos-&gt;width` will be negative.</doc>
        <source-position filename="pango/pango-layout.h" line="287"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2381">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2382">byte index within @layout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2383">rectangle in which to store the position of the grapheme</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ellipsized"
              c:identifier="pango_layout_is_ellipsized"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1182">Queries whether the layout had to ellipsize any paragraphs.

This returns %TRUE if the ellipsization mode for @layout
is not %PANGO_ELLIPSIZE_NONE, a positive width is set on @layout,
and there are paragraphs exceeding that width that have to be
ellipsized.</doc>
        <source-position filename="pango/pango-layout.h" line="263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="1193">%TRUE if any paragraphs had to be ellipsized,
  %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1184">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_wrapped"
              c:identifier="pango_layout_is_wrapped"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="519">Queries whether the layout had to wrap any paragraphs.

This returns %TRUE if a positive width is set on @layout,
ellipsization mode of @layout is set to %PANGO_ELLIPSIZE_NONE,
and there are paragraphs exceeding the layout width that have
to be wrapped.</doc>
        <source-position filename="pango/pango-layout.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="530">%TRUE if any paragraphs had to be wrapped, %FALSE
  otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="521">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_cursor_visually"
              c:identifier="pango_layout_move_cursor_visually">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="2065">Computes a new cursor position from an old position and a direction.

If @direction is positive, then the new position will cause the strong
or weak cursor to be displayed one position to right of where it was
with the old cursor position. If @direction is negative, it will be
moved to the left.

In the presence of bidirectional text, the correspondence between
logical and visual order will depend on the direction of the current
run, and there may be jumps when the cursor is moved off of the end
of a run.

Motion here is in cursor positions, not in characters, so a single
call to this function may move the cursor over multiple characters
when multiple characters combine to form a single grapheme.</doc>
        <source-position filename="pango/pango-layout.h" line="309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2067">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="strong" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2068">whether the moving cursor is the strong cursor or the
  weak cursor. The strong cursor is the cursor corresponding
  to text insertion in the base direction for the layout.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="old_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2071">the byte index of the current cursor position</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="old_trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2072">if 0, the cursor was at the leading edge of the
  grapheme indicated by @old_index, if &gt; 0, the cursor
  was at the trailing edge.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2075">direction to move cursor. A negative
  value indicates motion to the left</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="new_index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2077">location to store the new cursor byte index.
  A value of -1 indicates that the cursor has been moved off the
  beginning of the layout. A value of %G_MAXINT indicates that
  the cursor has been moved off the end of the layout.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="new_trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2081">number of characters to move forward from
  the location returned for @new_index to get the position where
  the cursor should be displayed. This allows distinguishing the
  position at the beginning of one line from the position at the
  end of the preceding line. @new_index is always on the line where
  the cursor should be displayed.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize"
              c:identifier="pango_layout_serialize"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/serializer.c"
             line="1574">Serializes the @layout for later deserialization via [func@Pango.Layout.deserialize].

There are no guarantees about the format of the output across different
versions of Pango and [func@Pango.Layout.deserialize] will reject data
that it cannot parse.

The intended use of this function is testing, benchmarking and debugging.
The format is not meant as a permanent storage format.</doc>
        <source-position filename="pango/pango-layout.h" line="373"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/serializer.c"
               line="1588">a `GBytes` containing the serialized form of @layout</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1576">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1577">`PangoLayoutSerializeFlags`</doc>
            <type name="LayoutSerializeFlags"
                  c:type="PangoLayoutSerializeFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alignment" c:identifier="pango_layout_set_alignment">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="969">Sets the alignment for the layout: how partial lines are
positioned within the horizontal space available.

The default alignment is %PANGO_ALIGN_LEFT.</doc>
        <source-position filename="pango/pango-layout.h" line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="971">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="alignment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="972">the alignment</doc>
            <type name="Alignment" c:type="PangoAlignment"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes" c:identifier="pango_layout_set_attributes">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="695">Sets the text attributes for a layout object.

References @attrs, so the caller can unref its reference.</doc>
        <source-position filename="pango/pango-layout.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="697">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="attrs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="698">a `PangoAttrList`</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auto_dir"
              c:identifier="pango_layout_set_auto_dir"
              version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="907">Sets whether to calculate the base direction
for the layout according to its contents.

When this flag is on (the default), then paragraphs in @layout that
begin with strong right-to-left characters (Arabic and Hebrew principally),
will have right-to-left layout, paragraphs with letters from other scripts
will have left-to-right layout. Paragraphs with only neutral characters
get their direction from the surrounding paragraphs.

When %FALSE, the choice between left-to-right and right-to-left
layout is done according to the base direction of the layout's
`PangoContext`. (See [method@Pango.Context.set_base_dir]).

When the auto-computed direction of a paragraph differs from the
base direction of the context, the interpretation of
%PANGO_ALIGN_LEFT and %PANGO_ALIGN_RIGHT are swapped.</doc>
        <source-position filename="pango/pango-layout.h" line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="909">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="auto_dir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="910">if %TRUE, compute the bidirectional base direction
  from the layout's contents</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ellipsize"
              c:identifier="pango_layout_set_ellipsize"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1121">Sets the type of ellipsization being performed for @layout.

Depending on the ellipsization mode @ellipsize text is
removed from the start, middle, or end of text so they
fit within the width and height of layout set with
[method@Pango.Layout.set_width] and [method@Pango.Layout.set_height].

If the layout contains characters such as newlines that
force it to be layed out in multiple paragraphs, then whether
each paragraph is ellipsized separately or the entire layout
is ellipsized as a whole depends on the set height of the layout.

The default value is %PANGO_ELLIPSIZE_NONE.

See [method@Pango.Layout.set_height] for details.</doc>
        <source-position filename="pango/pango-layout.h" line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1123">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="ellipsize" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1124">the new ellipsization mode for @layout</doc>
            <type name="EllipsizeMode" c:type="PangoEllipsizeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_description"
              c:identifier="pango_layout_set_font_description">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="753">Sets the default font description for the layout.

If no font description is set on the layout, the
font description from the layout's context is used.</doc>
        <source-position filename="pango/pango-layout.h" line="186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="755">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="desc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="756">the new `PangoFontDescription`
  to unset the current font description</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_height"
              c:identifier="pango_layout_set_height"
              version="1.20">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="397">Sets the height to which the `PangoLayout` should be ellipsized at.

There are two different behaviors, based on whether @height is positive
or negative.

If @height is positive, it will be the maximum height of the layout. Only
lines would be shown that would fit, and if there is any text omitted,
an ellipsis added. At least one line is included in each paragraph regardless
of how small the height value is. A value of zero will render exactly one
line for the entire layout.

If @height is negative, it will be the (negative of) maximum number of lines
per paragraph. That is, the total number of lines shown may well be more than
this value if the layout contains multiple paragraphs of text.
The default value of -1 means that the first line of each paragraph is ellipsized.
This behavior may be changed in the future to act per layout instead of per
paragraph. File a bug against pango at
[https://gitlab.gnome.org/gnome/pango](https://gitlab.gnome.org/gnome/pango)
if your code relies on this behavior.

Height setting only has effect if a positive width is set on
@layout and ellipsization mode of @layout is not %PANGO_ELLIPSIZE_NONE.
The behavior is undefined if a height other than -1 is set and
ellipsization mode is set to %PANGO_ELLIPSIZE_NONE, and may change in the
future.</doc>
        <source-position filename="pango/pango-layout.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="399">a `PangoLayout`.</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="400">the desired height of the layout in Pango units if positive,
  or desired number of lines if negative.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indent" c:identifier="pango_layout_set_indent">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="545">Sets the width in Pango units to indent each paragraph.

A negative value of @indent will produce a hanging indentation.
That is, the first line will have the full width, and subsequent
lines will be indented by the absolute value of @indent.

The indent setting is ignored if layout alignment is set to
%PANGO_ALIGN_CENTER.

The default value is 0.</doc>
        <source-position filename="pango/pango-layout.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="547">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="indent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="548">the amount by which to indent</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_justify" c:identifier="pango_layout_set_justify">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="803">Sets whether each complete line should be stretched to fill the
entire width of the layout.

Stretching is typically done by adding whitespace, but for some scripts
(such as Arabic), the justification may be done in more complex ways,
like extending the characters.

Note that this setting is not implemented and so is ignored in
Pango older than 1.18.

Note that tabs and justification conflict with each other:
Justification will move content away from its tab-aligned
positions.

The default value is %FALSE.

Also see [method@Pango.Layout.set_justify_last_line].</doc>
        <source-position filename="pango/pango-layout.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="805">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="justify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="806">whether the lines in the layout should be justified</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_justify_last_line"
              c:identifier="pango_layout_set_justify_last_line"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="859">Sets whether the last line should be stretched to fill the
entire width of the layout.

This only has an effect if [method@Pango.Layout.set_justify] has
been called as well.

The default value is %FALSE.</doc>
        <source-position filename="pango/pango-layout.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="861">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="justify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="862">whether the last line in the layout should be justified</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line_spacing"
              c:identifier="pango_layout_set_line_spacing"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="641">Sets a factor for line spacing.

Typical values are: 0, 1, 1.5, 2. The default values is 0.

If @factor is non-zero, lines are placed so that

    baseline2 = baseline1 + factor * height2

where height2 is the line height of the second line
(as determined by the font(s)). In this case, the spacing
set with [method@Pango.Layout.set_spacing] is ignored.

If @factor is zero (the default), spacing is applied as before.

Note: for semantics that are closer to the CSS line-height
property, see [func@Pango.attr_line_height_new].</doc>
        <source-position filename="pango/pango-layout.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="643">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="644">the new line spacing factor</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup" c:identifier="pango_layout_set_markup">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1335">Sets the layout text and attribute list from marked-up text.

See [Pango Markup](pango_markup.html)).

Replaces the current text and attribute list.

This is the same as [method@Pango.Layout.set_markup_with_accel],
but the markup text isn't scanned for accelerators.</doc>
        <source-position filename="pango/pango-layout.h" line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1337">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1338">marked-up text</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1339">length of marked-up text in bytes, or -1 if @markup is
  `NUL`-terminated</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup_with_accel"
              c:identifier="pango_layout_set_markup_with_accel">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1359">Sets the layout text and attribute list from marked-up text.

See [Pango Markup](pango_markup.html)).

Replaces the current text and attribute list.

If @accel_marker is nonzero, the given character will mark the
character following it as an accelerator. For example, @accel_marker
might be an ampersand or underscore. All characters marked
as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
and the first character so marked will be returned in @accel_char.
Two @accel_marker characters following each other produce a single
literal @accel_marker character.</doc>
        <source-position filename="pango/pango-layout.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1361">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1362">marked-up text (see [Pango Markup](pango_markup.html))</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1363">length of marked-up text in bytes, or -1 if @markup is
  `NUL`-terminated</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="accel_marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1365">marker for accelerators in the text</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
          <parameter name="accel_char"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1366">return location
  for first located accelerator</doc>
            <type name="gunichar" c:type="gunichar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_single_paragraph_mode"
              c:identifier="pango_layout_set_single_paragraph_mode">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1073">Sets the single paragraph mode of @layout.

If @setting is %TRUE, do not treat newlines and similar characters
as paragraph separators; instead, keep all text in a single paragraph,
and display a glyph for paragraph separator characters. Used when
you want to allow editing of newlines on a single text line.

The default value is %FALSE.</doc>
        <source-position filename="pango/pango-layout.h" line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1075">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1076">new setting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing" c:identifier="pango_layout_set_spacing">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="591">Sets the amount of spacing in Pango units between
the lines of the layout.

When placing lines with spacing, Pango arranges things so that

    line2.top = line1.bottom + spacing

The default value is 0.

Note: Since 1.44, Pango is using the line height (as determined
by the font) for placing lines when the line spacing factor is set
to a non-zero value with [method@Pango.Layout.set_line_spacing].
In that case, the @spacing set with this function is ignored.

Note: for semantics that are closer to the CSS line-height
property, see [func@Pango.attr_line_height_new].</doc>
        <source-position filename="pango/pango-layout.h" line="215"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="593">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="594">the amount of spacing</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tabs" c:identifier="pango_layout_set_tabs">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1009">Sets the tabs to use for @layout, overriding the default tabs.

`PangoLayout` will place content at the next tab position
whenever it meets a Tab character (U+0009).

By default, tabs are every 8 spaces. If @tabs is %NULL, the
default tabs are reinstated. @tabs is copied into the layout;
you must free your copy of @tabs yourself.

Note that tabs and justification conflict with each other:
Justification will move content away from its tab-aligned
positions. The same is true for alignments other than
%PANGO_ALIGN_LEFT.</doc>
        <source-position filename="pango/pango-layout.h" line="246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1011">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="tabs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1012">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="pango_layout_set_text">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1208">Sets the text of the layout.

This function validates @text and renders invalid UTF-8
with a placeholder glyph.

Note that if you have used [method@Pango.Layout.set_markup] or
[method@Pango.Layout.set_markup_with_accel] on @layout before, you
may want to call [method@Pango.Layout.set_attributes] to clear the
attributes set on the layout from the markup as this function does
not clear attributes.</doc>
        <source-position filename="pango/pango-layout.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1210">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1211">the text</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1212">maximum length of @text, in bytes. -1 indicates that
  the string is nul-terminated and the length should be calculated.
  The text will also be truncated on encountering a nul-termination
  even when @length is positive.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width" c:identifier="pango_layout_set_width">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="355">Sets the width to which the lines of the `PangoLayout` should wrap or
ellipsized.

The default value is -1: no width set.</doc>
        <source-position filename="pango/pango-layout.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="357">a `PangoLayout`.</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="358">the desired width in Pango units, or -1 to indicate that no
  wrapping or ellipsization should be performed.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wrap" c:identifier="pango_layout_set_wrap">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="472">Sets the wrap mode.

The wrap mode only has effect if a width is set on the layout
with [method@Pango.Layout.set_width]. To turn off wrapping,
set the width to -1.

The default value is %PANGO_WRAP_WORD.</doc>
        <source-position filename="pango/pango-layout.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="474">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="wrap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="475">the wrap mode</doc>
            <type name="WrapMode" c:type="PangoWrapMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_file"
              c:identifier="pango_layout_write_to_file"
              version="1.50"
              throws="1">
        <doc xml:space="preserve"
             filename="pango/serializer.c"
             line="1618">A convenience method to serialize a layout to a file.

It is equivalent to calling [method@Pango.Layout.serialize]
followed by [func@GLib.file_set_contents].

See those two functions for details on the arguments.

It is mostly intended for use inside a debugger to quickly dump
a layout to a file for later inspection.</doc>
        <source-position filename="pango/pango-layout.h" line="377"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/serializer.c"
               line="1635">%TRUE if saving was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1620">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1621">`PangoLayoutSerializeFlags`</doc>
            <type name="LayoutSerializeFlags"
                  c:type="PangoLayoutSerializeFlags"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/serializer.c"
                 line="1622">the file to save it to</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xy_to_index" c:identifier="pango_layout_xy_to_index">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="2273">Converts from X and Y position within a layout to the byte index to the
character at that logical position.

If the Y position is not inside the layout, the closest position is
chosen (the position will be clamped inside the layout). If the X position
is not within the layout, then the start or the end of the line is
chosen as described for [method@Pango.LayoutLine.x_to_index]. If either
the X or Y positions were not inside the layout, then the function returns
%FALSE; on an exact hit, it returns %TRUE.</doc>
        <source-position filename="pango/pango-layout.h" line="317"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="2294">%TRUE if the coordinates were inside text, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2275">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2276">the X offset (in Pango units) from the left edge of the layout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2277">the Y offset (in Pango units) from the top edge of the layout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="index_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2278">location to store calculated byte index</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="2279">location to store a integer indicating where
  in the grapheme the user clicked. It will either be zero, or the
  number of characters in the grapheme. 0 represents the leading edge
  of the grapheme.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="LayoutClass"
            c:type="PangoLayoutClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Layout">
      <source-position filename="pango/pango-layout.h" line="33"/>
    </record>
    <enumeration name="LayoutDeserializeError"
                 version="1.50"
                 glib:type-name="PangoLayoutDeserializeError"
                 glib:get-type="pango_layout_deserialize_error_get_type"
                 c:type="PangoLayoutDeserializeError"
                 glib:error-domain="pango-layout-deserialize-error-quark">
      <doc xml:space="preserve"
           filename="pango/pango-layout.h"
           line="385">Errors that can be returned by [func@Pango.Layout.deserialize].</doc>
      <member name="invalid"
              value="0"
              c:identifier="PANGO_LAYOUT_DESERIALIZE_INVALID"
              glib:nick="invalid"
              glib:name="PANGO_LAYOUT_DESERIALIZE_INVALID">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="387">Unspecified error</doc>
      </member>
      <member name="invalid_value"
              value="1"
              c:identifier="PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE"
              glib:nick="invalid-value"
              glib:name="PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="388">A JSon value could not be
  interpreted</doc>
      </member>
      <member name="missing_value"
              value="2"
              c:identifier="PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE"
              glib:nick="missing-value"
              glib:name="PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="390">A required JSon member was
  not found</doc>
      </member>
      <function name="quark"
                c:identifier="pango_layout_deserialize_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="LayoutDeserializeFlags"
              version="1.50"
              glib:type-name="PangoLayoutDeserializeFlags"
              glib:get-type="pango_layout_deserialize_flags_get_type"
              c:type="PangoLayoutDeserializeFlags">
      <doc xml:space="preserve"
           filename="pango/pango-layout.h"
           line="406">Flags that influence the behavior of [func@Pango.Layout.deserialize].

New members may be added to this enumeration over time.</doc>
      <member name="default"
              value="0"
              c:identifier="PANGO_LAYOUT_DESERIALIZE_DEFAULT"
              glib:nick="default"
              glib:name="PANGO_LAYOUT_DESERIALIZE_DEFAULT">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="408">Default behavior</doc>
      </member>
      <member name="context"
              value="1"
              c:identifier="PANGO_LAYOUT_DESERIALIZE_CONTEXT"
              glib:nick="context"
              glib:name="PANGO_LAYOUT_DESERIALIZE_CONTEXT">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="409">Apply context information
  from the serialization to the `PangoContext`</doc>
      </member>
    </bitfield>
    <record name="LayoutIter"
            c:type="PangoLayoutIter"
            opaque="1"
            glib:type-name="PangoLayoutIter"
            glib:get-type="pango_layout_iter_get_type"
            c:symbol-prefix="layout_iter">
      <doc xml:space="preserve"
           filename="pango/pango-layout.c"
           line="65">A `PangoLayoutIter` can be used to iterate over the visual
extents of a `PangoLayout`.

To obtain a `PangoLayoutIter`, use [method@Pango.Layout.get_iter].

The `PangoLayoutIter` structure is opaque, and has no user-visible fields.</doc>
      <source-position filename="pango/pango-layout.h" line="478"/>
      <method name="at_last_line"
              c:identifier="pango_layout_iter_at_last_line">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7424">Determines whether @iter is on the last line of the layout.</doc>
        <source-position filename="pango/pango-layout.h" line="503"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7430">%TRUE if @iter is on the last line</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7426">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_layout_iter_copy" version="1.20">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7123">Copies a `PangoLayoutIter`.</doc>
        <source-position filename="pango/pango-layout.h" line="488"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7129">the newly allocated `PangoLayoutIter`</doc>
          <type name="LayoutIter" c:type="PangoLayoutIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7125">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_layout_iter_free">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7268">Frees an iterator that's no longer in use.</doc>
        <source-position filename="pango/pango-layout.h" line="490"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7270">a `PangoLayoutIter`, may be %NULL</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_baseline"
              c:identifier="pango_layout_iter_get_baseline">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7987">Gets the Y position of the current line's baseline, in layout
coordinates.

Layout coordinates have the origin at the top left of the entire layout.</doc>
        <source-position filename="pango/pango-layout.h" line="543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7996">baseline of current line</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7989">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_char_extents"
              c:identifier="pango_layout_iter_get_char_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7714">Gets the extents of the current character, in layout coordinates.

Layout coordinates have the origin at the top left of the entire layout.

Only logical extents can sensibly be obtained for characters;
ink extents make sense only down to the level of clusters.</doc>
        <source-position filename="pango/pango-layout.h" line="517"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7716">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7717">rectangle to fill with
  logical extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cluster_extents"
              c:identifier="pango_layout_iter_get_cluster_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7767">Gets the extents of the current cluster, in layout coordinates.

Layout coordinates have the origin at the top left of the entire layout.</doc>
        <source-position filename="pango/pango-layout.h" line="520"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7769">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7770">rectangle to fill with ink extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7771">rectangle to fill with logical extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index" c:identifier="pango_layout_iter_get_index">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7284">Gets the current byte index.

Note that iterating forward by char moves in visual order,
not logical order, so indexes may not be sequential. Also,
the index may be equal to the length of the text in the
layout, if on the %NULL run (see [method@Pango.LayoutIter.get_run]).</doc>
        <source-position filename="pango/pango-layout.h" line="493"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7295">current byte index</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7286">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout"
              c:identifier="pango_layout_iter_get_layout"
              version="1.20">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7441">Gets the layout associated with a `PangoLayoutIter`.</doc>
        <source-position filename="pango/pango-layout.h" line="505"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7447">the layout associated with @iter</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7443">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout_extents"
              c:identifier="pango_layout_iter_get_layout_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="8033">Obtains the extents of the `PangoLayout` being iterated over.</doc>
        <source-position filename="pango/pango-layout.h" line="539"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="8035">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="8036">rectangle to fill with ink extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="8037">rectangle to fill with logical extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line" c:identifier="pango_layout_iter_get_line">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7377">Gets the current line.

Use the faster [method@Pango.LayoutIter.get_line_readonly] if
you do not plan to modify the contents of the line (glyphs,
glyph widths, etc.).</doc>
        <source-position filename="pango/pango-layout.h" line="499"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7387">the current line</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7379">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_extents"
              c:identifier="pango_layout_iter_get_line_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7891">Obtains the extents of the current line.

Extents are in layout coordinates (origin is the top-left corner
of the entire `PangoLayout`). Thus the extents returned by this
function will be the same width/height but not at the same x/y
as the extents returned from [method@Pango.LayoutLine.get_extents].</doc>
        <source-position filename="pango/pango-layout.h" line="528"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7893">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7894">rectangle to fill with ink extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7895">rectangle to fill with logical extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_readonly"
              c:identifier="pango_layout_iter_get_line_readonly"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7400">Gets the current line for read-only access.

This is a faster alternative to [method@Pango.LayoutIter.get_line],
but the user is not expected to modify the contents of the line
(glyphs, glyph widths, etc.).</doc>
        <source-position filename="pango/pango-layout.h" line="501"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7410">the current line, that should not be
  modified</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7402">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_yrange"
              c:identifier="pango_layout_iter_get_line_yrange">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7930">Divides the vertical space in the `PangoLayout` being iterated over
between the lines in the layout, and returns the space belonging to
the current line.

A line's range includes the line's logical extents. plus half of the
spacing above and below the line, if [method@Pango.Layout.set_spacing]
has been called to set layout spacing. The Y positions are in layout
coordinates (origin at top left of the entire layout).

Note: Since 1.44, Pango uses line heights for placing lines, and there
may be gaps between the ranges returned by this function.</doc>
        <source-position filename="pango/pango-layout.h" line="535"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7932">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="y0_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7933">start of line</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y1_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7934">end of line</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_run" c:identifier="pango_layout_iter_get_run">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7306">Gets the current run.

When iterating by run, at the end of each line, there's a position
with a %NULL run, so this function can return %NULL. The %NULL run
at the end of each line ensures that all lines have at least one run,
even lines consisting of only a newline.

Use the faster [method@Pango.LayoutIter.get_run_readonly] if you do not
plan to modify the contents of the run (glyphs, glyph widths, etc.).</doc>
        <source-position filename="pango/pango-layout.h" line="495"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7320">the current run</doc>
          <type name="LayoutRun" c:type="PangoLayoutRun*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7308">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_baseline"
              c:identifier="pango_layout_iter_get_run_baseline"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="8007">Gets the Y position of the current run's baseline, in layout
coordinates.

Layout coordinates have the origin at the top left of the entire layout.

The run baseline can be different from the line baseline, for
example due to superscript or subscript positioning.</doc>
        <source-position filename="pango/pango-layout.h" line="545"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="8009">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_extents"
              c:identifier="pango_layout_iter_get_run_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7817">Gets the extents of the current run in layout coordinates.

Layout coordinates have the origin at the top left of the entire layout.</doc>
        <source-position filename="pango/pango-layout.h" line="524"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7819">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7820">rectangle to fill with ink extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7821">rectangle to fill with logical extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_run_readonly"
              c:identifier="pango_layout_iter_get_run_readonly"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7333">Gets the current run for read-only access.

When iterating by run, at the end of each line, there's a position
with a %NULL run, so this function can return %NULL. The %NULL run
at the end of each line ensures that all lines have at least one run,
even lines consisting of only a newline.

This is a faster alternative to [method@Pango.LayoutIter.get_run],
but the user is not expected to modify the contents of the run (glyphs,
glyph widths, etc.).</doc>
        <source-position filename="pango/pango-layout.h" line="497"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7348">the current run, that
  should not be modified</doc>
          <type name="LayoutRun" c:type="PangoLayoutRun*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7335">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_char" c:identifier="pango_layout_iter_next_char">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7563">Moves @iter forward to the next character in visual order.

If @iter was already at the end of the layout, returns %FALSE.</doc>
        <source-position filename="pango/pango-layout.h" line="508"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7571">whether motion was possible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7565">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_cluster"
              c:identifier="pango_layout_iter_next_cluster">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7608">Moves @iter forward to the next cluster in visual order.

If @iter was already at the end of the layout, returns %FALSE.</doc>
        <source-position filename="pango/pango-layout.h" line="510"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7616">whether motion was possible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7610">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_line" c:identifier="pango_layout_iter_next_line">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7669">Moves @iter forward to the start of the next line.

If @iter is already on the last line, returns %FALSE.</doc>
        <source-position filename="pango/pango-layout.h" line="514"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7677">whether motion was possible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7671">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_run" c:identifier="pango_layout_iter_next_run">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="7624">Moves @iter forward to the next run in visual order.

If @iter was already at the end of the layout, returns %FALSE.</doc>
        <source-position filename="pango/pango-layout.h" line="512"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="7632">whether motion was possible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="7626">a `PangoLayoutIter`</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="LayoutLine"
            c:type="PangoLayoutLine"
            glib:type-name="PangoLayoutLine"
            glib:get-type="pango_layout_line_get_type"
            c:symbol-prefix="layout_line">
      <doc xml:space="preserve"
           filename="pango/pango-layout.h"
           line="109">A `PangoLayoutLine` represents one of the lines resulting from laying
out a paragraph via `PangoLayout`.

`PangoLayoutLine` structures are obtained by calling
[method@Pango.Layout.get_line] and are only valid until the text,
attributes, or settings of the parent `PangoLayout` are modified.</doc>
      <source-position filename="pango/pango-layout.h" line="134"/>
      <field name="layout" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="111">the layout this line belongs to, might be %NULL</doc>
        <type name="Layout" c:type="PangoLayout*"/>
      </field>
      <field name="start_index" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="112">start of line as byte index into layout-&gt;text</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="113">length of line in bytes</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="runs" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="114">list of runs in the
  line, from left to right</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="LayoutRun"/>
        </type>
      </field>
      <field name="is_paragraph_start" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="116">#TRUE if this is the first line of the paragraph</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="resolved_dir" writable="1" bits="3">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="117">#Resolved PangoDirection of line</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <method name="get_extents" c:identifier="pango_layout_line_get_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5897">Computes the logical and ink extents of a layout line.

See [method@Pango.Font.get_glyph_extents] for details
about the interpretation of the rectangles.</doc>
        <source-position filename="pango/pango-layout.h" line="466"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5899">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5900">rectangle used to store the extents of
  the glyph string as drawn</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5902">rectangle used to store the logical
  extents of the glyph string</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="pango_layout_line_get_height"
              version="1.44">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5918">Computes the height of the line, as the maximum of the heights
of fonts used in this line.

Note that the actual baseline-to-baseline distance between lines
of text is influenced by other factors, such as
[method@Pango.Layout.set_spacing] and
[method@Pango.Layout.set_line_spacing].</doc>
        <source-position filename="pango/pango-layout.h" line="470"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5920">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5921">return location for the line height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length"
              c:identifier="pango_layout_line_get_length"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5054">Returns the length of the line, in bytes.</doc>
        <source-position filename="pango/pango-layout.h" line="443"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="5060">the length of the line</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5056">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixel_extents"
              c:identifier="pango_layout_line_get_pixel_extents">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5957">Computes the logical and ink extents of @layout_line in device units.

This function just calls [method@Pango.LayoutLine.get_extents] followed by
two [func@extents_to_pixels] calls, rounding @ink_rect and @logical_rect
such that the rounded rectangles fully contain the unrounded one (that is,
passes them as first argument to [func@extents_to_pixels]).</doc>
        <source-position filename="pango/pango-layout.h" line="474"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout_line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5959">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5960">rectangle used to store the extents of
  the glyph string as drawn</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5962">rectangle used to store the logical
  extents of the glyph string</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_resolved_direction"
              c:identifier="pango_layout_line_get_resolved_direction"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5086">Returns the resolved direction of the line.</doc>
        <source-position filename="pango/pango-layout.h" line="447"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="5092">the resolved direction of the line</doc>
          <type name="Direction" c:type="PangoDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5088">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_index"
              c:identifier="pango_layout_line_get_start_index"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5037">Returns the start index of the line, as byte index
into the text of the layout.</doc>
        <source-position filename="pango/pango-layout.h" line="441"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="5044">the start index of the line</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5039">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_x_ranges"
              c:identifier="pango_layout_line_get_x_ranges">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5321">Gets a list of visual ranges corresponding to a given logical range.

This list is not necessarily minimal - there may be consecutive
ranges which are adjacent. The ranges will be sorted from left to
right. The ranges are with respect to the left edge of the entire
layout, not with respect to the line.</doc>
        <source-position filename="pango/pango-layout.h" line="460"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5323">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="start_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5324">Start byte index of the logical range. If this value
  is less than the start index for the line, then the first range
  will extend all the way to the leading edge of the layout. Otherwise,
  it will start at the leading edge of the first character.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="end_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5328">Ending byte index of the logical range. If this value is
  greater than the end index for the line, then the last range will
  extend all the way to the trailing edge of the layout. Otherwise,
  it will end at the trailing edge of the last character.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="ranges"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5332">location to
  store a pointer to an array of ranges. The array will be of length
  `2*n_ranges`, with each range starting at `(*ranges)[2*n]` and of
  width `(*ranges)[2*n + 1] - (*ranges)[2*n]`. This array must be freed
  with g_free(). The coordinates are relative to the layout and are in
  Pango units.</doc>
            <array length="3" zero-terminated="0" c:type="int**">
              <type name="gint" c:type="int*"/>
            </array>
          </parameter>
          <parameter name="n_ranges"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5338">The number of ranges stored in @ranges</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_to_x" c:identifier="pango_layout_line_index_to_x">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="1772">Converts an index within a line to a X position.</doc>
        <source-position filename="pango/pango-layout.h" line="455"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1774">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1775">byte offset of a grapheme within the layout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1776">an integer indicating the edge of the grapheme to retrieve
  the position of. If &gt; 0, the trailing edge of the grapheme,
  if 0, the leading of the grapheme</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="x_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="1779">location to store the x_offset (in Pango units)</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_paragraph_start"
              c:identifier="pango_layout_line_is_paragraph_start"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5070">Returns whether this is the first line of the paragraph.</doc>
        <source-position filename="pango/pango-layout.h" line="445"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="5076">%TRUE if this is the first line</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5072">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="pango_layout_line_ref" version="1.10">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="4983">Increase the reference count of a `PangoLayoutLine` by one.</doc>
        <source-position filename="pango/pango-layout.h" line="436"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="4989">the line passed in.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="line"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="4985">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="pango_layout_line_unref">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5006">Decrease the reference count of a `PangoLayoutLine` by one.

If the result is zero, the line and all associated memory
will be freed.</doc>
        <source-position filename="pango/pango-layout.h" line="438"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5008">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="x_to_index" c:identifier="pango_layout_line_x_to_index">
        <doc xml:space="preserve"
             filename="pango/pango-layout.c"
             line="5102">Converts from x offset to the byte index of the corresponding character
within the text of the layout.

If @x_pos is outside the line, @index_ and @trailing will point to the very
first or very last position in the line. This determination is based on the
resolved direction of the paragraph; for example, if the resolved direction
is right-to-left, then an X position to the right of the line (after it)
results in 0 being stored in @index_ and @trailing. An X position to the
left of the line results in @index_ pointing to the (logical) last grapheme
in the line and @trailing being set to the number of characters in that
grapheme. The reverse is true for a left-to-right line.</doc>
        <source-position filename="pango/pango-layout.h" line="450"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-layout.c"
               line="5124">%FALSE if @x_pos was outside the line, %TRUE if inside</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5104">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="x_pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5105">the X offset (in Pango units) from the left edge of the line.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="index_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5106">location to store calculated byte index for the grapheme
  in which the user clicked</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-layout.c"
                 line="5108">location to store an integer indicating where in the
  grapheme the user clicked. It will either be zero, or the number of
  characters in the grapheme. 0 represents the leading edge of the grapheme.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="LayoutSerializeFlags"
              version="1.50"
              glib:type-name="PangoLayoutSerializeFlags"
              glib:get-type="pango_layout_serialize_flags_get_type"
              c:type="PangoLayoutSerializeFlags">
      <doc xml:space="preserve"
           filename="pango/pango-layout.h"
           line="354">Flags that influence the behavior of [method@Pango.Layout.serialize].

New members may be added to this enumeration over time.</doc>
      <member name="default"
              value="0"
              c:identifier="PANGO_LAYOUT_SERIALIZE_DEFAULT"
              glib:nick="default"
              glib:name="PANGO_LAYOUT_SERIALIZE_DEFAULT">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="356">Default behavior</doc>
      </member>
      <member name="context"
              value="1"
              c:identifier="PANGO_LAYOUT_SERIALIZE_CONTEXT"
              glib:nick="context"
              glib:name="PANGO_LAYOUT_SERIALIZE_CONTEXT">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="357">Include context information</doc>
      </member>
      <member name="output"
              value="2"
              c:identifier="PANGO_LAYOUT_SERIALIZE_OUTPUT"
              glib:nick="output"
              glib:name="PANGO_LAYOUT_SERIALIZE_OUTPUT">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="358">Include information about the formatted output</doc>
      </member>
    </bitfield>
    <record name="LogAttr" c:type="PangoLogAttr">
      <doc xml:space="preserve"
           filename="pango/pango-break.h"
           line="33">The `PangoLogAttr` structure stores information about the attributes of a
single character.</doc>
      <source-position filename="pango/pango-break.h" line="102"/>
      <field name="is_line_break" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="35">if set, can break line in front of character</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_mandatory_break" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="36">if set, must break line in front of character</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_char_break" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="37">if set, can break here when doing character wrapping</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_white" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="38">is whitespace character</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_cursor_position" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="39">if set, cursor can appear in front of character.
  i.e. this is a grapheme boundary, or the first character in the text.
  This flag implements Unicode's
  [Grapheme Cluster Boundaries](http://www.unicode.org/reports/tr29/)
  semantics.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_word_start" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="44">is first character in a word</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_word_end" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="45">is first non-word char after a word
  Note that in degenerate cases, you could have both @is_word_start
  and @is_word_end set for some character.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_sentence_boundary" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="48">is a sentence boundary.
  There are two ways to divide sentences. The first assigns all
  inter-sentence whitespace/control/format chars to some sentence,
  so all chars are in some sentence; @is_sentence_boundary denotes
  the boundaries there. The second way doesn't assign
  between-sentence spaces, etc. to any sentence, so
  @is_sentence_start/@is_sentence_end mark the boundaries of those sentences.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_sentence_start" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="55">is first character in a sentence</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_sentence_end" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="56">is first char after a sentence.
  Note that in degenerate cases, you could have both @is_sentence_start
  and @is_sentence_end set for some character. (e.g. no space after a
  period, so the next sentence starts right away)</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="backspace_deletes_character" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="60">if set, backspace deletes one character
  rather than the entire grapheme cluster. This field is only meaningful
  on grapheme boundaries (where @is_cursor_position is set). In some languages,
  the full grapheme (e.g. letter + diacritics) is considered a unit, while in
  others, each decomposed character in the grapheme is a unit. In the default
  implementation of [func@break], this bit is set on all grapheme boundaries
  except those following Latin, Cyrillic or Greek base characters.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_expandable_space" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="67">is a whitespace character that can possibly be
  expanded for justification purposes. (Since: 1.18)</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_word_boundary" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="69">is a word boundary, as defined by UAX#29.
  More specifically, means that this is not a position in the middle of a word.
  For example, both sides of a punctuation mark are considered word boundaries.
  This flag is particularly useful when selecting text word-by-word. This flag
  implements Unicode's [Word Boundaries](http://www.unicode.org/reports/tr29/)
  semantics. (Since: 1.22)</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="break_inserts_hyphen" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="75">when breaking lines before this char, insert a hyphen.
  Since: 1.50</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="break_removes_preceding" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="pango/pango-break.h"
             line="77">when breaking lines before this char, remove the
  preceding char. Since 1.50</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="reserved" writable="1" bits="17">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="Matrix"
            c:type="PangoMatrix"
            version="1.6"
            glib:type-name="PangoMatrix"
            glib:get-type="pango_matrix_get_type"
            c:symbol-prefix="matrix">
      <doc xml:space="preserve"
           filename="pango/pango-matrix.h"
           line="32">A `PangoMatrix` specifies a transformation between user-space
and device coordinates.

The transformation is given by

```
x_device = x_user * matrix-&gt;xx + y_user * matrix-&gt;xy + matrix-&gt;x0;
y_device = x_user * matrix-&gt;yx + y_user * matrix-&gt;yy + matrix-&gt;y0;
```</doc>
      <source-position filename="pango/pango-matrix.h" line="61"/>
      <field name="xx" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.h"
             line="34">1st component of the transformation matrix</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="xy" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.h"
             line="35">2nd component of the transformation matrix</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="yx" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.h"
             line="36">3rd component of the transformation matrix</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="yy" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.h"
             line="37">4th component of the transformation matrix</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x0" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.h"
             line="38">x translation</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y0" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.h"
             line="39">y translation</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <method name="concat" c:identifier="pango_matrix_concat" version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="158">Changes the transformation represented by @matrix to be the
transformation given by first applying transformation
given by @new_matrix then applying the original transformation.</doc>
        <source-position filename="pango/pango-matrix.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="160">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
          <parameter name="new_matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="161">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_matrix_copy" version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="33">Copies a `PangoMatrix`.</doc>
        <source-position filename="pango/pango-matrix.h" line="87"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-matrix.c"
               line="39">the newly allocated `PangoMatrix`</doc>
          <type name="Matrix" c:type="PangoMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="35">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_matrix_free" version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="58">Free a `PangoMatrix`.</doc>
        <source-position filename="pango/pango-matrix.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="60">a `PangoMatrix`, may be %NULL</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_scale_factor"
              c:identifier="pango_matrix_get_font_scale_factor"
              version="1.12">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="187">Returns the scale factor of a matrix on the height of the font.

That is, the scale factor in the direction perpendicular to the
vector that the X coordinate is mapped to.  If the scale in the X
coordinate is needed as well, use [method@Pango.Matrix.get_font_scale_factors].</doc>
        <source-position filename="pango/pango-matrix.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-matrix.c"
               line="197">the scale factor of @matrix on the height of the font,
  or 1.0 if @matrix is %NULL.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="189">a `PangoMatrix`, may be %NULL</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_scale_factors"
              c:identifier="pango_matrix_get_font_scale_factors"
              version="1.38">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="210">Calculates the scale factor of a matrix on the width and height of the font.

That is, @xscale is the scale factor in the direction of the X coordinate,
and @yscale is the scale factor in the direction perpendicular to the
vector that the X coordinate is mapped to.

Note that output numbers will always be non-negative.</doc>
        <source-position filename="pango/pango-matrix.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="212">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="xscale"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="213">output scale factor in the x direction</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="yscale"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="214">output scale factor perpendicular to the x direction</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_slant_ratio"
              c:identifier="pango_matrix_get_slant_ratio"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="265">Gets the slant ratio of a matrix.

For a simple shear matrix in the form:

    1 λ
    0 1

this is simply λ.</doc>
        <source-position filename="pango/pango-matrix.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-matrix.c"
               line="278">the slant ratio of @matrix</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="267">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rotate" c:identifier="pango_matrix_rotate" version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="124">Changes the transformation represented by @matrix to be the
transformation given by first rotating by @degrees degrees
counter-clockwise then applying the original transformation.</doc>
        <source-position filename="pango/pango-matrix.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="126">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
          <parameter name="degrees" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="127">degrees to rotate counter-clockwise</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="pango_matrix_scale" version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="98">Changes the transformation represented by @matrix to be the
transformation given by first scaling by @sx in the X direction
and @sy in the Y direction then applying the original
transformation.</doc>
        <source-position filename="pango/pango-matrix.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="100">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="101">amount to scale by in X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="102">amount to scale by in Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_distance"
              c:identifier="pango_matrix_transform_distance"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="299">Transforms the distance vector (@dx,@dy) by @matrix.

This is similar to [method@Pango.Matrix.transform_point],
except that the translation components of the transformation
are ignored. The calculation of the returned vector is as follows:

```
dx2 = dx1 * xx + dy1 * xy;
dy2 = dx1 * yx + dy1 * yy;
```

Affine transformations are position invariant, so the same vector
always transforms to the same vector. If (@x1,@y1) transforms
to (@x2,@y2) then (@x1+@dx1,@y1+@dy1) will transform to
(@x1+@dx2,@y1+@dy2) for all values of @x1 and @x2.</doc>
        <source-position filename="pango/pango-matrix.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="301">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="dx"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="302">in/out X component of a distance vector</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="dy"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="303">in/out Y component of a distance vector</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_pixel_rectangle"
              c:identifier="pango_matrix_transform_pixel_rectangle"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="444">First transforms the @rect using @matrix, then calculates the bounding box
of the transformed rectangle.

This function is useful for example when you want to draw a rotated
@PangoLayout to an image buffer, and want to know how large the image
should be and how much you should shift the layout when rendering.

For better accuracy, you should use [method@Pango.Matrix.transform_rectangle]
on original rectangle in Pango units and convert to pixels afterward
using [func@extents_to_pixels]'s first argument.</doc>
        <source-position filename="pango/pango-matrix.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="446">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="rect"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="447">in/out bounding box in device units</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_point"
              c:identifier="pango_matrix_transform_point"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="340">Transforms the point (@x, @y) by @matrix.</doc>
        <source-position filename="pango/pango-matrix.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="342">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="343">in/out X position</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="344">in/out Y position</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_rectangle"
              c:identifier="pango_matrix_transform_rectangle"
              version="1.16">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="364">First transforms @rect using @matrix, then calculates the bounding box
of the transformed rectangle.

This function is useful for example when you want to draw a rotated
@PangoLayout to an image buffer, and want to know how large the image
should be and how much you should shift the layout when rendering.

If you have a rectangle in device units (pixels), use
[method@Pango.Matrix.transform_pixel_rectangle].

If you have the rectangle in Pango units and want to convert to
transformed pixel bounding box, it is more accurate to transform it first
(using this function) and pass the result to pango_extents_to_pixels(),
first argument, for an inclusive rounded rectangle.
However, there are valid reasons that you may want to convert
to pixels first and then transform, for example when the transformed
coordinates may overflow in Pango units (large matrix translation for
example).</doc>
        <source-position filename="pango/pango-matrix.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="366">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="rect"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="367">in/out bounding box in Pango units</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="translate"
              c:identifier="pango_matrix_translate"
              version="1.6">
        <doc xml:space="preserve"
             filename="pango/pango-matrix.c"
             line="75">Changes the transformation represented by @matrix to be the
transformation given by first translating by (@tx, @ty)
then applying the original transformation.</doc>
        <source-position filename="pango/pango-matrix.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="77">a `PangoMatrix`</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
          <parameter name="tx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="78">amount to translate in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="ty" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-matrix.c"
                 line="79">amount to translate in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="Overline"
                 version="1.46"
                 glib:type-name="PangoOverline"
                 glib:get-type="pango_overline_get_type"
                 c:type="PangoOverline">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="178">The `PangoOverline` enumeration is used to specify whether text
should be overlined, and if so, the type of line.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_OVERLINE_NONE"
              glib:nick="none"
              glib:name="PANGO_OVERLINE_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="180">no overline should be drawn</doc>
      </member>
      <member name="single"
              value="1"
              c:identifier="PANGO_OVERLINE_SINGLE"
              glib:nick="single"
              glib:name="PANGO_OVERLINE_SINGLE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="181">Draw a single line above the ink
  extents of the text being underlined.</doc>
      </member>
    </enumeration>
    <function-macro name="PIXELS"
                    c:identifier="PANGO_PIXELS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="70">Converts a dimension to device units by rounding.</doc>
      <source-position filename="pango/pango-types.h" line="97"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="72">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXELS_CEIL"
                    c:identifier="PANGO_PIXELS_CEIL"
                    version="1.14"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="87">Converts a dimension to device units by ceiling.</doc>
      <source-position filename="pango/pango-types.h" line="99"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="89">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXELS_FLOOR"
                    c:identifier="PANGO_PIXELS_FLOOR"
                    version="1.14"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="78">Converts a dimension to device units by flooring.</doc>
      <source-position filename="pango/pango-types.h" line="98"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="80">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RBEARING"
                    c:identifier="PANGO_RBEARING"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="213">Extracts the *right bearing* from a `PangoRectangle`
representing glyph extents.

The right bearing is the distance from the horizontal
origin to the farthest right point of the character.
This is positive except for characters drawn completely
to the left of the horizontal origin.</doc>
      <source-position filename="pango/pango-types.h" line="228"/>
      <parameters>
        <parameter name="rect">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="215">a `PangoRectangle`</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RENDERER"
                    c:identifier="PANGO_RENDERER"
                    introspectable="0">
      <source-position filename="pango/pango-renderer.h" line="29"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RENDERER_CLASS"
                    c:identifier="PANGO_RENDERER_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-renderer.h" line="31"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RENDERER_GET_CLASS"
                    c:identifier="PANGO_RENDERER_GET_CLASS"
                    introspectable="0">
      <source-position filename="pango/pango-renderer.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Rectangle" c:type="PangoRectangle">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="156">The `PangoRectangle` structure represents a rectangle.

`PangoRectangle` is frequently used to represent the logical or ink
extents of a single glyph or section of text. (See, for instance,
[method@Pango.Font.get_glyph_extents].)</doc>
      <source-position filename="pango/pango-types.h" line="175"/>
      <field name="x" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-types.h"
             line="158">X coordinate of the left side of the rectangle.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-types.h"
             line="159">Y coordinate of the the top side of the rectangle.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-types.h"
             line="160">width of the rectangle.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve"
             filename="pango/pango-types.h"
             line="161">height of the rectangle.</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <enumeration name="RenderPart"
                 version="1.8"
                 glib:type-name="PangoRenderPart"
                 glib:get-type="pango_render_part_get_type"
                 c:type="PangoRenderPart">
      <doc xml:space="preserve"
           filename="pango/pango-renderer.h"
           line="39">`PangoRenderPart` defines different items to render for such
purposes as setting colors.</doc>
      <member name="foreground"
              value="0"
              c:identifier="PANGO_RENDER_PART_FOREGROUND"
              glib:nick="foreground"
              glib:name="PANGO_RENDER_PART_FOREGROUND">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.h"
             line="41">the text itself</doc>
      </member>
      <member name="background"
              value="1"
              c:identifier="PANGO_RENDER_PART_BACKGROUND"
              glib:nick="background"
              glib:name="PANGO_RENDER_PART_BACKGROUND">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.h"
             line="42">the area behind the text</doc>
      </member>
      <member name="underline"
              value="2"
              c:identifier="PANGO_RENDER_PART_UNDERLINE"
              glib:nick="underline"
              glib:name="PANGO_RENDER_PART_UNDERLINE">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.h"
             line="43">underlines</doc>
      </member>
      <member name="strikethrough"
              value="3"
              c:identifier="PANGO_RENDER_PART_STRIKETHROUGH"
              glib:nick="strikethrough"
              glib:name="PANGO_RENDER_PART_STRIKETHROUGH">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.h"
             line="44">strikethrough lines</doc>
      </member>
      <member name="overline"
              value="4"
              c:identifier="PANGO_RENDER_PART_OVERLINE"
              glib:nick="overline"
              glib:name="PANGO_RENDER_PART_OVERLINE">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.h"
             line="45">overlines</doc>
      </member>
    </enumeration>
    <class name="Renderer"
           c:symbol-prefix="renderer"
           c:type="PangoRenderer"
           version="1.8"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoRenderer"
           glib:get-type="pango_renderer_get_type"
           glib:type-struct="RendererClass">
      <doc xml:space="preserve"
           filename="pango/pango-renderer.h"
           line="62">`PangoRenderer` is a base class for objects that can render text
provided as `PangoGlyphString` or `PangoLayout`.

By subclassing `PangoRenderer` and overriding operations such as
@draw_glyphs and @draw_rectangle, renderers for particular font
backends and destinations can be created.</doc>
      <source-position filename="pango/pango-renderer.h" line="195"/>
      <virtual-method name="begin">
        <source-position filename="pango/pango-renderer.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_error_underline"
                      invoker="draw_error_underline"
                      version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1015">Draw a squiggly line that approximately covers the given rectangle
in the style of an underline used to indicate a spelling error.

The width of the underline is rounded to an integer number
of up/down segments and the resulting rectangle is centered
in the original rectangle.

This should be called while @renderer is already active.
Use [method@Pango.Renderer.activate] to activate a renderer.</doc>
        <source-position filename="pango/pango-renderer.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1017">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1018">X coordinate of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1019">Y coordinate of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1020">width of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1021">height of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_glyph" invoker="draw_glyph" version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1210">Draws a single glyph with coordinates in device space.</doc>
        <source-position filename="pango/pango-renderer.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1212">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1213">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="glyph" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1214">the glyph index of a single glyph</doc>
            <type name="Glyph" c:type="PangoGlyph"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1215">X coordinate of left edge of baseline of glyph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1216">Y coordinate of left edge of baseline of glyph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_glyph_item"
                      invoker="draw_glyph_item"
                      version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="805">Draws the glyphs in @glyph_item with the specified `PangoRenderer`,
embedding the text associated with the glyphs in the output if the
output format supports it.

This is useful for rendering text in PDF.

Note that this method does not handle attributes in @glyph_item.
If you want colors, shapes and lines handled automatically according
to those attributes, you need to use pango_renderer_draw_layout_line()
or pango_renderer_draw_layout().

Note that @text is the start of the text for layout, which is then
indexed by `glyph_item-&gt;item-&gt;offset`.

If @text is %NULL, this simply calls [method@Pango.Renderer.draw_glyphs].

The default implementation of this method simply falls back to
[method@Pango.Renderer.draw_glyphs].</doc>
        <source-position filename="pango/pango-renderer.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="807">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="808">the UTF-8 text that @glyph_item refers to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="809">a `PangoGlyphItem`</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="810">X position of left edge of baseline, in user space coordinates
  in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="812">Y position of left edge of baseline, in user space coordinates
  in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_glyphs" invoker="draw_glyphs" version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="749">Draws the glyphs in @glyphs with the specified `PangoRenderer`.</doc>
        <source-position filename="pango/pango-renderer.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="751">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="752">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="753">a `PangoGlyphString`</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="754">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="756">Y position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_rectangle"
                      invoker="draw_rectangle"
                      version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="874">Draws an axis-aligned rectangle in user space coordinates with the
specified `PangoRenderer`.

This should be called while @renderer is already active.
Use [method@Pango.Renderer.activate] to activate a renderer.</doc>
        <source-position filename="pango/pango-renderer.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="876">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="877">type of object this rectangle is part of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="878">X position at which to draw rectangle, in user space coordinates
  in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="880">Y position at which to draw rectangle, in user space coordinates
  in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="882">width of rectangle in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="883">height of rectangle in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_shape">
        <source-position filename="pango/pango-renderer.h" line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="AttrShape" c:type="PangoAttrShape*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_trapezoid"
                      invoker="draw_trapezoid"
                      version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1175">Draws a trapezoid with the parallel sides aligned with the X axis
using the given `PangoRenderer`; coordinates are in device space.</doc>
        <source-position filename="pango/pango-renderer.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1177">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1178">type of object this trapezoid is part of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="y1_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1179">Y coordinate of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x11" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1180">X coordinate of left end of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x21" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1181">X coordinate of right end of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1182">Y coordinate of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x12" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1183">X coordinate of left end of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x22" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1184">X coordinate of right end of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="end">
        <source-position filename="pango/pango-renderer.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="part_changed" invoker="part_changed" version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1412">Informs Pango that the way that the rendering is done
for @part has changed.

This should be called if the rendering changes in a way that would
prevent multiple pieces being joined together into one drawing call.
For instance, if a subclass of `PangoRenderer` was to add a stipple
option for drawing underlines, it needs to call

```
pango_renderer_part_changed (render, PANGO_RENDER_PART_UNDERLINE);
```

When the stipple changes or underlines with different stipples
might be joined together. Pango automatically calls this for
changes to colors. (See [method@Pango.Renderer.set_color])</doc>
        <source-position filename="pango/pango-renderer.h" line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1414">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1415">the part for which rendering has changed.</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_run">
        <source-position filename="pango/pango-renderer.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="run" transfer-ownership="none">
            <type name="LayoutRun" c:type="PangoLayoutRun*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate"
              c:identifier="pango_renderer_activate"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1239">Does initial setup before rendering operations on @renderer.

[method@Pango.Renderer.deactivate] should be called when done drawing.
Calls such as [method@Pango.Renderer.draw_layout] automatically
activate the layout before drawing on it.

Calls to [method@Pango.Renderer.activate] and
[method@Pango.Renderer.deactivate] can be nested and the
renderer will only be initialized and deinitialized once.</doc>
        <source-position filename="pango/pango-renderer.h" line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1241">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deactivate"
              c:identifier="pango_renderer_deactivate"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1268">Cleans up after rendering operations on @renderer.

See docs for [method@Pango.Renderer.activate].</doc>
        <source-position filename="pango/pango-renderer.h" line="254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1270">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="draw_error_underline"
              c:identifier="pango_renderer_draw_error_underline"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1015">Draw a squiggly line that approximately covers the given rectangle
in the style of an underline used to indicate a spelling error.

The width of the underline is rounded to an integer number
of up/down segments and the resulting rectangle is centered
in the original rectangle.

This should be called while @renderer is already active.
Use [method@Pango.Renderer.activate] to activate a renderer.</doc>
        <source-position filename="pango/pango-renderer.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1017">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1018">X coordinate of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1019">Y coordinate of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1020">width of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1021">height of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_glyph"
              c:identifier="pango_renderer_draw_glyph"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1210">Draws a single glyph with coordinates in device space.</doc>
        <source-position filename="pango/pango-renderer.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1212">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1213">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="glyph" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1214">the glyph index of a single glyph</doc>
            <type name="Glyph" c:type="PangoGlyph"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1215">X coordinate of left edge of baseline of glyph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1216">Y coordinate of left edge of baseline of glyph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_glyph_item"
              c:identifier="pango_renderer_draw_glyph_item"
              version="1.22">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="805">Draws the glyphs in @glyph_item with the specified `PangoRenderer`,
embedding the text associated with the glyphs in the output if the
output format supports it.

This is useful for rendering text in PDF.

Note that this method does not handle attributes in @glyph_item.
If you want colors, shapes and lines handled automatically according
to those attributes, you need to use pango_renderer_draw_layout_line()
or pango_renderer_draw_layout().

Note that @text is the start of the text for layout, which is then
indexed by `glyph_item-&gt;item-&gt;offset`.

If @text is %NULL, this simply calls [method@Pango.Renderer.draw_glyphs].

The default implementation of this method simply falls back to
[method@Pango.Renderer.draw_glyphs].</doc>
        <source-position filename="pango/pango-renderer.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="807">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="808">the UTF-8 text that @glyph_item refers to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="809">a `PangoGlyphItem`</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="810">X position of left edge of baseline, in user space coordinates
  in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="812">Y position of left edge of baseline, in user space coordinates
  in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_glyphs"
              c:identifier="pango_renderer_draw_glyphs"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="749">Draws the glyphs in @glyphs with the specified `PangoRenderer`.</doc>
        <source-position filename="pango/pango-renderer.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="751">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="752">a `PangoFont`</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="753">a `PangoGlyphString`</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="754">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="756">Y position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_layout"
              c:identifier="pango_renderer_draw_layout"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="149">Draws @layout with the specified `PangoRenderer`.

This is equivalent to drawing the lines of the layout, at their
respective positions relative to @x, @y.</doc>
        <source-position filename="pango/pango-renderer.h" line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="151">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="152">a `PangoLayout`</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="153">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="155">Y position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_layout_line"
              c:identifier="pango_renderer_draw_layout_line"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="553">Draws @line with the specified `PangoRenderer`.

This draws the glyph items that make up the line, as well as
shapes, backgrounds and lines that are specified by the attributes
of those items.</doc>
        <source-position filename="pango/pango-renderer.h" line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="555">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="556">a `PangoLayoutLine`</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="557">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="559">Y position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_rectangle"
              c:identifier="pango_renderer_draw_rectangle"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="874">Draws an axis-aligned rectangle in user space coordinates with the
specified `PangoRenderer`.

This should be called while @renderer is already active.
Use [method@Pango.Renderer.activate] to activate a renderer.</doc>
        <source-position filename="pango/pango-renderer.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="876">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="877">type of object this rectangle is part of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="878">X position at which to draw rectangle, in user space coordinates
  in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="880">Y position at which to draw rectangle, in user space coordinates
  in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="882">width of rectangle in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="883">height of rectangle in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_trapezoid"
              c:identifier="pango_renderer_draw_trapezoid"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1175">Draws a trapezoid with the parallel sides aligned with the X axis
using the given `PangoRenderer`; coordinates are in device space.</doc>
        <source-position filename="pango/pango-renderer.h" line="236"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1177">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1178">type of object this trapezoid is part of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="y1_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1179">Y coordinate of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x11" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1180">X coordinate of left end of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x21" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1181">X coordinate of right end of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1182">Y coordinate of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x12" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1183">X coordinate of left end of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x22" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1184">X coordinate of right end of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_alpha"
              c:identifier="pango_renderer_get_alpha"
              version="1.38">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1389">Gets the current alpha for the specified part.</doc>
        <source-position filename="pango/pango-renderer.h" line="273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-renderer.c"
               line="1396">the alpha for the specified part,
  or 0 if it hasn't been set and should be
  inherited from the environment.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1391">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1392">the part to get the alpha for</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color"
              c:identifier="pango_renderer_get_color"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1332">Gets the current rendering color for the specified part.</doc>
        <source-position filename="pango/pango-renderer.h" line="265"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-renderer.c"
               line="1339">the color for the
  specified part, or %NULL if it hasn't been set and should be
  inherited from the environment.</doc>
          <type name="Color" c:type="PangoColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1334">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1335">the part to get the color for</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_layout"
              c:identifier="pango_renderer_get_layout"
              version="1.20">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1600">Gets the layout currently being rendered using @renderer.

Calling this function only makes sense from inside a subclass's
methods, like in its draw_shape vfunc, for example.

The returned layout should not be modified while still being
rendered.</doc>
        <source-position filename="pango/pango-renderer.h" line="283"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-renderer.c"
               line="1612">the layout, or %NULL if
  no layout is being rendered using @renderer at this time.</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1602">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout_line"
              c:identifier="pango_renderer_get_layout_line"
              version="1.20">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1626">Gets the layout line currently being rendered using @renderer.

Calling this function only makes sense from inside a subclass's
methods, like in its draw_shape vfunc, for example.

The returned layout line should not be modified while still being
rendered.</doc>
        <source-position filename="pango/pango-renderer.h" line="285"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-renderer.c"
               line="1638">the layout line, or %NULL
  if no layout line is being rendered using @renderer at this time.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1628">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matrix"
              c:identifier="pango_renderer_get_matrix"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1577">Gets the transformation matrix that will be applied when
rendering.

See [method@Pango.Renderer.set_matrix].</doc>
        <source-position filename="pango/pango-renderer.h" line="280"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-renderer.c"
               line="1586">the matrix, or %NULL if no matrix has
  been set (which is the same as the identity matrix). The returned
  matrix is owned by Pango and must not be modified or freed.</doc>
          <type name="Matrix" c:type="const PangoMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1579">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="part_changed"
              c:identifier="pango_renderer_part_changed"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1412">Informs Pango that the way that the rendering is done
for @part has changed.

This should be called if the rendering changes in a way that would
prevent multiple pieces being joined together into one drawing call.
For instance, if a subclass of `PangoRenderer` was to add a stipple
option for drawing underlines, it needs to call

```
pango_renderer_part_changed (render, PANGO_RENDER_PART_UNDERLINE);
```

When the stipple changes or underlines with different stipples
might be joined together. Pango automatically calls this for
changes to colors. (See [method@Pango.Renderer.set_color])</doc>
        <source-position filename="pango/pango-renderer.h" line="257"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1414">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1415">the part for which rendering has changed.</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alpha"
              c:identifier="pango_renderer_set_alpha"
              version="1.38">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1358">Sets the alpha for part of the rendering.

Note that the alpha may only be used if a color is
specified for @part as well.</doc>
        <source-position filename="pango/pango-renderer.h" line="269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1360">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1361">the part to set the alpha for</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1362">an alpha value between 1 and 65536, or 0 to unset the alpha</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color"
              c:identifier="pango_renderer_set_color"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1292">Sets the color for part of the rendering.

Also see [method@Pango.Renderer.set_alpha].</doc>
        <source-position filename="pango/pango-renderer.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1294">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1295">the part to change the color of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="color"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1296">the new color or %NULL to unset the current color</doc>
            <type name="Color" c:type="const PangoColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_matrix"
              c:identifier="pango_renderer_set_matrix"
              version="1.8">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.c"
             line="1557">Sets the transformation matrix that will be applied when rendering.</doc>
        <source-position filename="pango/pango-renderer.h" line="277"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1559">a `PangoRenderer`</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="matrix"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-renderer.c"
                 line="1560">a `PangoMatrix`, or %NULL to unset any existing matrix
 (No matrix set is the same as setting the identity matrix.)</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="underline" readable="0" private="1">
        <type name="Underline" c:type="PangoUnderline"/>
      </field>
      <field name="strikethrough" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="active_count" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="matrix">
        <doc xml:space="preserve"
             filename="pango/pango-renderer.h"
             line="64">the current transformation matrix for
  the Renderer; may be %NULL, which should be treated the
  same as the identity matrix.</doc>
        <type name="Matrix" c:type="PangoMatrix*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RendererPrivate" c:type="PangoRendererPrivate*"/>
      </field>
    </class>
    <record name="RendererClass"
            c:type="PangoRendererClass"
            glib:is-gtype-struct-for="Renderer"
            version="1.8">
      <doc xml:space="preserve"
           filename="pango/pango-renderer.h"
           line="93">Class structure for `PangoRenderer`.

The following vfuncs take user space coordinates in Pango units
and have default implementations:
- draw_glyphs
- draw_rectangle
- draw_error_underline
- draw_shape
- draw_glyph_item

The default draw_shape implementation draws nothing.

The following vfuncs take device space coordinates as doubles
and must be implemented:
- draw_trapezoid
- draw_glyph</doc>
      <source-position filename="pango/pango-renderer.h" line="195"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="draw_glyphs">
        <callback name="draw_glyphs">
          <source-position filename="pango/pango-renderer.h" line="139"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="751">a `PangoRenderer`</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="752">a `PangoFont`</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="glyphs" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="753">a `PangoGlyphString`</doc>
              <type name="GlyphString" c:type="PangoGlyphString*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="754">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="756">Y position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_rectangle">
        <callback name="draw_rectangle">
          <source-position filename="pango/pango-renderer.h" line="144"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="876">a `PangoRenderer`</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="part" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="877">type of object this rectangle is part of</doc>
              <type name="RenderPart" c:type="PangoRenderPart"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="878">X position at which to draw rectangle, in user space coordinates
  in Pango units</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="880">Y position at which to draw rectangle, in user space coordinates
  in Pango units</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="882">width of rectangle in Pango units</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="883">height of rectangle in Pango units</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_error_underline">
        <callback name="draw_error_underline">
          <source-position filename="pango/pango-renderer.h" line="150"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1017">a `PangoRenderer`</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1018">X coordinate of underline, in Pango units in user coordinate system</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1019">Y coordinate of underline, in Pango units in user coordinate system</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1020">width of underline, in Pango units in user coordinate system</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1021">height of underline, in Pango units in user coordinate system</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_shape">
        <callback name="draw_shape">
          <source-position filename="pango/pango-renderer.h" line="155"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="attr" transfer-ownership="none">
              <type name="AttrShape" c:type="PangoAttrShape*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_trapezoid">
        <callback name="draw_trapezoid">
          <source-position filename="pango/pango-renderer.h" line="160"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1177">a `PangoRenderer`</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="part" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1178">type of object this trapezoid is part of</doc>
              <type name="RenderPart" c:type="PangoRenderPart"/>
            </parameter>
            <parameter name="y1_" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1179">Y coordinate of top of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x11" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1180">X coordinate of left end of top of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x21" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1181">X coordinate of right end of top of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y2" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1182">Y coordinate of bottom of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x12" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1183">X coordinate of left end of bottom of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x22" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1184">X coordinate of right end of bottom of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_glyph">
        <callback name="draw_glyph">
          <source-position filename="pango/pango-renderer.h" line="168"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1212">a `PangoRenderer`</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1213">a `PangoFont`</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="glyph" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1214">the glyph index of a single glyph</doc>
              <type name="Glyph" c:type="PangoGlyph"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1215">X coordinate of left edge of baseline of glyph</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1216">Y coordinate of left edge of baseline of glyph</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="part_changed">
        <callback name="part_changed">
          <source-position filename="pango/pango-renderer.h" line="174"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1414">a `PangoRenderer`</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="part" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="1415">the part for which rendering has changed.</doc>
              <type name="RenderPart" c:type="PangoRenderPart"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin">
        <callback name="begin">
          <source-position filename="pango/pango-renderer.h" line="177"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end">
        <callback name="end">
          <source-position filename="pango/pango-renderer.h" line="178"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_run">
        <callback name="prepare_run">
          <source-position filename="pango/pango-renderer.h" line="180"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="run" transfer-ownership="none">
              <type name="LayoutRun" c:type="PangoLayoutRun*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_glyph_item">
        <callback name="draw_glyph_item">
          <source-position filename="pango/pango-renderer.h" line="183"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="807">a `PangoRenderer`</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="text"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="808">the UTF-8 text that @glyph_item refers to</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="glyph_item" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="809">a `PangoGlyphItem`</doc>
              <type name="GlyphItem" c:type="PangoGlyphItem*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="810">X position of left edge of baseline, in user space coordinates
  in Pango units</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="pango/pango-renderer.c"
                   line="812">Y position of left edge of baseline, in user space coordinates
  in Pango units</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pango_reserved2" introspectable="0">
        <callback name="_pango_reserved2">
          <source-position filename="pango/pango-renderer.h" line="192"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved3" introspectable="0">
        <callback name="_pango_reserved3">
          <source-position filename="pango/pango-renderer.h" line="193"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved4" introspectable="0">
        <callback name="_pango_reserved4">
          <source-position filename="pango/pango-renderer.h" line="194"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RendererPrivate"
            c:type="PangoRendererPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="pango/pango-renderer.h" line="37"/>
    </record>
    <constant name="SCALE" value="1024" c:type="PANGO_SCALE">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="58">The scale between dimensions used for Pango distances and device units.

The definition of device units is dependent on the output device; it will
typically be pixels for a screen, and points for a printer. %PANGO_SCALE is
currently 1024, but this may be changed in the future.

When setting font sizes, device units are always considered to be
points (as in "12 point font"), rather than pixels.</doc>
      <source-position filename="pango/pango-types.h" line="96"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="Script"
                 glib:type-name="PangoScript"
                 glib:get-type="pango_script_get_type"
                 c:type="PangoScript">
      <doc xml:space="preserve"
           filename="pango/pango-script.h"
           line="37">The `PangoScript` enumeration identifies different writing
systems.

The values correspond to the names as defined in the Unicode standard. See
[Unicode Standard Annex 24: Script names](http://www.unicode.org/reports/tr24/)

Note that this enumeration is deprecated and will not be updated to include values
in newer versions of the Unicode standard. Applications should use the
[enum@GLib.UnicodeScript] enumeration instead,
whose values are interchangeable with `PangoScript`.</doc>
      <member name="invalid_code"
              value="-1"
              c:identifier="PANGO_SCRIPT_INVALID_CODE"
              glib:nick="invalid-code"
              glib:name="PANGO_SCRIPT_INVALID_CODE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="39">a value never returned from pango_script_for_unichar()</doc>
      </member>
      <member name="common"
              value="0"
              c:identifier="PANGO_SCRIPT_COMMON"
              glib:nick="common"
              glib:name="PANGO_SCRIPT_COMMON">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="40">a character used by multiple different scripts</doc>
      </member>
      <member name="inherited"
              value="1"
              c:identifier="PANGO_SCRIPT_INHERITED"
              glib:nick="inherited"
              glib:name="PANGO_SCRIPT_INHERITED">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="41">a mark glyph that takes its script from the
base glyph to which it is attached</doc>
      </member>
      <member name="arabic"
              value="2"
              c:identifier="PANGO_SCRIPT_ARABIC"
              glib:nick="arabic"
              glib:name="PANGO_SCRIPT_ARABIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="43">Arabic</doc>
      </member>
      <member name="armenian"
              value="3"
              c:identifier="PANGO_SCRIPT_ARMENIAN"
              glib:nick="armenian"
              glib:name="PANGO_SCRIPT_ARMENIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="44">Armenian</doc>
      </member>
      <member name="bengali"
              value="4"
              c:identifier="PANGO_SCRIPT_BENGALI"
              glib:nick="bengali"
              glib:name="PANGO_SCRIPT_BENGALI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="45">Bengali</doc>
      </member>
      <member name="bopomofo"
              value="5"
              c:identifier="PANGO_SCRIPT_BOPOMOFO"
              glib:nick="bopomofo"
              glib:name="PANGO_SCRIPT_BOPOMOFO">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="46">Bopomofo</doc>
      </member>
      <member name="cherokee"
              value="6"
              c:identifier="PANGO_SCRIPT_CHEROKEE"
              glib:nick="cherokee"
              glib:name="PANGO_SCRIPT_CHEROKEE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="47">Cherokee</doc>
      </member>
      <member name="coptic"
              value="7"
              c:identifier="PANGO_SCRIPT_COPTIC"
              glib:nick="coptic"
              glib:name="PANGO_SCRIPT_COPTIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="48">Coptic</doc>
      </member>
      <member name="cyrillic"
              value="8"
              c:identifier="PANGO_SCRIPT_CYRILLIC"
              glib:nick="cyrillic"
              glib:name="PANGO_SCRIPT_CYRILLIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="49">Cyrillic</doc>
      </member>
      <member name="deseret"
              value="9"
              c:identifier="PANGO_SCRIPT_DESERET"
              glib:nick="deseret"
              glib:name="PANGO_SCRIPT_DESERET">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="50">Deseret</doc>
      </member>
      <member name="devanagari"
              value="10"
              c:identifier="PANGO_SCRIPT_DEVANAGARI"
              glib:nick="devanagari"
              glib:name="PANGO_SCRIPT_DEVANAGARI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="51">Devanagari</doc>
      </member>
      <member name="ethiopic"
              value="11"
              c:identifier="PANGO_SCRIPT_ETHIOPIC"
              glib:nick="ethiopic"
              glib:name="PANGO_SCRIPT_ETHIOPIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="52">Ethiopic</doc>
      </member>
      <member name="georgian"
              value="12"
              c:identifier="PANGO_SCRIPT_GEORGIAN"
              glib:nick="georgian"
              glib:name="PANGO_SCRIPT_GEORGIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="53">Georgian</doc>
      </member>
      <member name="gothic"
              value="13"
              c:identifier="PANGO_SCRIPT_GOTHIC"
              glib:nick="gothic"
              glib:name="PANGO_SCRIPT_GOTHIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="54">Gothic</doc>
      </member>
      <member name="greek"
              value="14"
              c:identifier="PANGO_SCRIPT_GREEK"
              glib:nick="greek"
              glib:name="PANGO_SCRIPT_GREEK">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="55">Greek</doc>
      </member>
      <member name="gujarati"
              value="15"
              c:identifier="PANGO_SCRIPT_GUJARATI"
              glib:nick="gujarati"
              glib:name="PANGO_SCRIPT_GUJARATI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="56">Gujarati</doc>
      </member>
      <member name="gurmukhi"
              value="16"
              c:identifier="PANGO_SCRIPT_GURMUKHI"
              glib:nick="gurmukhi"
              glib:name="PANGO_SCRIPT_GURMUKHI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="57">Gurmukhi</doc>
      </member>
      <member name="han"
              value="17"
              c:identifier="PANGO_SCRIPT_HAN"
              glib:nick="han"
              glib:name="PANGO_SCRIPT_HAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="58">Han</doc>
      </member>
      <member name="hangul"
              value="18"
              c:identifier="PANGO_SCRIPT_HANGUL"
              glib:nick="hangul"
              glib:name="PANGO_SCRIPT_HANGUL">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="59">Hangul</doc>
      </member>
      <member name="hebrew"
              value="19"
              c:identifier="PANGO_SCRIPT_HEBREW"
              glib:nick="hebrew"
              glib:name="PANGO_SCRIPT_HEBREW">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="60">Hebrew</doc>
      </member>
      <member name="hiragana"
              value="20"
              c:identifier="PANGO_SCRIPT_HIRAGANA"
              glib:nick="hiragana"
              glib:name="PANGO_SCRIPT_HIRAGANA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="61">Hiragana</doc>
      </member>
      <member name="kannada"
              value="21"
              c:identifier="PANGO_SCRIPT_KANNADA"
              glib:nick="kannada"
              glib:name="PANGO_SCRIPT_KANNADA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="62">Kannada</doc>
      </member>
      <member name="katakana"
              value="22"
              c:identifier="PANGO_SCRIPT_KATAKANA"
              glib:nick="katakana"
              glib:name="PANGO_SCRIPT_KATAKANA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="63">Katakana</doc>
      </member>
      <member name="khmer"
              value="23"
              c:identifier="PANGO_SCRIPT_KHMER"
              glib:nick="khmer"
              glib:name="PANGO_SCRIPT_KHMER">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="64">Khmer</doc>
      </member>
      <member name="lao"
              value="24"
              c:identifier="PANGO_SCRIPT_LAO"
              glib:nick="lao"
              glib:name="PANGO_SCRIPT_LAO">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="65">Lao</doc>
      </member>
      <member name="latin"
              value="25"
              c:identifier="PANGO_SCRIPT_LATIN"
              glib:nick="latin"
              glib:name="PANGO_SCRIPT_LATIN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="66">Latin</doc>
      </member>
      <member name="malayalam"
              value="26"
              c:identifier="PANGO_SCRIPT_MALAYALAM"
              glib:nick="malayalam"
              glib:name="PANGO_SCRIPT_MALAYALAM">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="67">Malayalam</doc>
      </member>
      <member name="mongolian"
              value="27"
              c:identifier="PANGO_SCRIPT_MONGOLIAN"
              glib:nick="mongolian"
              glib:name="PANGO_SCRIPT_MONGOLIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="68">Mongolian</doc>
      </member>
      <member name="myanmar"
              value="28"
              c:identifier="PANGO_SCRIPT_MYANMAR"
              glib:nick="myanmar"
              glib:name="PANGO_SCRIPT_MYANMAR">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="69">Myanmar</doc>
      </member>
      <member name="ogham"
              value="29"
              c:identifier="PANGO_SCRIPT_OGHAM"
              glib:nick="ogham"
              glib:name="PANGO_SCRIPT_OGHAM">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="70">Ogham</doc>
      </member>
      <member name="old_italic"
              value="30"
              c:identifier="PANGO_SCRIPT_OLD_ITALIC"
              glib:nick="old-italic"
              glib:name="PANGO_SCRIPT_OLD_ITALIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="71">Old Italic</doc>
      </member>
      <member name="oriya"
              value="31"
              c:identifier="PANGO_SCRIPT_ORIYA"
              glib:nick="oriya"
              glib:name="PANGO_SCRIPT_ORIYA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="72">Oriya</doc>
      </member>
      <member name="runic"
              value="32"
              c:identifier="PANGO_SCRIPT_RUNIC"
              glib:nick="runic"
              glib:name="PANGO_SCRIPT_RUNIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="73">Runic</doc>
      </member>
      <member name="sinhala"
              value="33"
              c:identifier="PANGO_SCRIPT_SINHALA"
              glib:nick="sinhala"
              glib:name="PANGO_SCRIPT_SINHALA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="74">Sinhala</doc>
      </member>
      <member name="syriac"
              value="34"
              c:identifier="PANGO_SCRIPT_SYRIAC"
              glib:nick="syriac"
              glib:name="PANGO_SCRIPT_SYRIAC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="75">Syriac</doc>
      </member>
      <member name="tamil"
              value="35"
              c:identifier="PANGO_SCRIPT_TAMIL"
              glib:nick="tamil"
              glib:name="PANGO_SCRIPT_TAMIL">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="76">Tamil</doc>
      </member>
      <member name="telugu"
              value="36"
              c:identifier="PANGO_SCRIPT_TELUGU"
              glib:nick="telugu"
              glib:name="PANGO_SCRIPT_TELUGU">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="77">Telugu</doc>
      </member>
      <member name="thaana"
              value="37"
              c:identifier="PANGO_SCRIPT_THAANA"
              glib:nick="thaana"
              glib:name="PANGO_SCRIPT_THAANA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="78">Thaana</doc>
      </member>
      <member name="thai"
              value="38"
              c:identifier="PANGO_SCRIPT_THAI"
              glib:nick="thai"
              glib:name="PANGO_SCRIPT_THAI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="79">Thai</doc>
      </member>
      <member name="tibetan"
              value="39"
              c:identifier="PANGO_SCRIPT_TIBETAN"
              glib:nick="tibetan"
              glib:name="PANGO_SCRIPT_TIBETAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="80">Tibetan</doc>
      </member>
      <member name="canadian_aboriginal"
              value="40"
              c:identifier="PANGO_SCRIPT_CANADIAN_ABORIGINAL"
              glib:nick="canadian-aboriginal"
              glib:name="PANGO_SCRIPT_CANADIAN_ABORIGINAL">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="81">Canadian Aboriginal</doc>
      </member>
      <member name="yi"
              value="41"
              c:identifier="PANGO_SCRIPT_YI"
              glib:nick="yi"
              glib:name="PANGO_SCRIPT_YI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="82">Yi</doc>
      </member>
      <member name="tagalog"
              value="42"
              c:identifier="PANGO_SCRIPT_TAGALOG"
              glib:nick="tagalog"
              glib:name="PANGO_SCRIPT_TAGALOG">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="83">Tagalog</doc>
      </member>
      <member name="hanunoo"
              value="43"
              c:identifier="PANGO_SCRIPT_HANUNOO"
              glib:nick="hanunoo"
              glib:name="PANGO_SCRIPT_HANUNOO">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="84">Hanunoo</doc>
      </member>
      <member name="buhid"
              value="44"
              c:identifier="PANGO_SCRIPT_BUHID"
              glib:nick="buhid"
              glib:name="PANGO_SCRIPT_BUHID">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="85">Buhid</doc>
      </member>
      <member name="tagbanwa"
              value="45"
              c:identifier="PANGO_SCRIPT_TAGBANWA"
              glib:nick="tagbanwa"
              glib:name="PANGO_SCRIPT_TAGBANWA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="86">Tagbanwa</doc>
      </member>
      <member name="braille"
              value="46"
              c:identifier="PANGO_SCRIPT_BRAILLE"
              glib:nick="braille"
              glib:name="PANGO_SCRIPT_BRAILLE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="87">Braille</doc>
      </member>
      <member name="cypriot"
              value="47"
              c:identifier="PANGO_SCRIPT_CYPRIOT"
              glib:nick="cypriot"
              glib:name="PANGO_SCRIPT_CYPRIOT">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="88">Cypriot</doc>
      </member>
      <member name="limbu"
              value="48"
              c:identifier="PANGO_SCRIPT_LIMBU"
              glib:nick="limbu"
              glib:name="PANGO_SCRIPT_LIMBU">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="89">Limbu</doc>
      </member>
      <member name="osmanya"
              value="49"
              c:identifier="PANGO_SCRIPT_OSMANYA"
              glib:nick="osmanya"
              glib:name="PANGO_SCRIPT_OSMANYA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="90">Osmanya</doc>
      </member>
      <member name="shavian"
              value="50"
              c:identifier="PANGO_SCRIPT_SHAVIAN"
              glib:nick="shavian"
              glib:name="PANGO_SCRIPT_SHAVIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="91">Shavian</doc>
      </member>
      <member name="linear_b"
              value="51"
              c:identifier="PANGO_SCRIPT_LINEAR_B"
              glib:nick="linear-b"
              glib:name="PANGO_SCRIPT_LINEAR_B">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="92">Linear B</doc>
      </member>
      <member name="tai_le"
              value="52"
              c:identifier="PANGO_SCRIPT_TAI_LE"
              glib:nick="tai-le"
              glib:name="PANGO_SCRIPT_TAI_LE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="93">Tai Le</doc>
      </member>
      <member name="ugaritic"
              value="53"
              c:identifier="PANGO_SCRIPT_UGARITIC"
              glib:nick="ugaritic"
              glib:name="PANGO_SCRIPT_UGARITIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="94">Ugaritic</doc>
      </member>
      <member name="new_tai_lue"
              value="54"
              c:identifier="PANGO_SCRIPT_NEW_TAI_LUE"
              glib:nick="new-tai-lue"
              glib:name="PANGO_SCRIPT_NEW_TAI_LUE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="95">New Tai Lue. Since 1.10</doc>
      </member>
      <member name="buginese"
              value="55"
              c:identifier="PANGO_SCRIPT_BUGINESE"
              glib:nick="buginese"
              glib:name="PANGO_SCRIPT_BUGINESE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="96">Buginese. Since 1.10</doc>
      </member>
      <member name="glagolitic"
              value="56"
              c:identifier="PANGO_SCRIPT_GLAGOLITIC"
              glib:nick="glagolitic"
              glib:name="PANGO_SCRIPT_GLAGOLITIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="97">Glagolitic. Since 1.10</doc>
      </member>
      <member name="tifinagh"
              value="57"
              c:identifier="PANGO_SCRIPT_TIFINAGH"
              glib:nick="tifinagh"
              glib:name="PANGO_SCRIPT_TIFINAGH">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="98">Tifinagh. Since 1.10</doc>
      </member>
      <member name="syloti_nagri"
              value="58"
              c:identifier="PANGO_SCRIPT_SYLOTI_NAGRI"
              glib:nick="syloti-nagri"
              glib:name="PANGO_SCRIPT_SYLOTI_NAGRI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="99">Syloti Nagri. Since 1.10</doc>
      </member>
      <member name="old_persian"
              value="59"
              c:identifier="PANGO_SCRIPT_OLD_PERSIAN"
              glib:nick="old-persian"
              glib:name="PANGO_SCRIPT_OLD_PERSIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="100">Old Persian. Since 1.10</doc>
      </member>
      <member name="kharoshthi"
              value="60"
              c:identifier="PANGO_SCRIPT_KHAROSHTHI"
              glib:nick="kharoshthi"
              glib:name="PANGO_SCRIPT_KHAROSHTHI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="101">Kharoshthi. Since 1.10</doc>
      </member>
      <member name="unknown"
              value="61"
              c:identifier="PANGO_SCRIPT_UNKNOWN"
              glib:nick="unknown"
              glib:name="PANGO_SCRIPT_UNKNOWN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="102">an unassigned code point. Since 1.14</doc>
      </member>
      <member name="balinese"
              value="62"
              c:identifier="PANGO_SCRIPT_BALINESE"
              glib:nick="balinese"
              glib:name="PANGO_SCRIPT_BALINESE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="103">Balinese. Since 1.14</doc>
      </member>
      <member name="cuneiform"
              value="63"
              c:identifier="PANGO_SCRIPT_CUNEIFORM"
              glib:nick="cuneiform"
              glib:name="PANGO_SCRIPT_CUNEIFORM">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="104">Cuneiform. Since 1.14</doc>
      </member>
      <member name="phoenician"
              value="64"
              c:identifier="PANGO_SCRIPT_PHOENICIAN"
              glib:nick="phoenician"
              glib:name="PANGO_SCRIPT_PHOENICIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="105">Phoenician. Since 1.14</doc>
      </member>
      <member name="phags_pa"
              value="65"
              c:identifier="PANGO_SCRIPT_PHAGS_PA"
              glib:nick="phags-pa"
              glib:name="PANGO_SCRIPT_PHAGS_PA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="106">Phags-pa. Since 1.14</doc>
      </member>
      <member name="nko"
              value="66"
              c:identifier="PANGO_SCRIPT_NKO"
              glib:nick="nko"
              glib:name="PANGO_SCRIPT_NKO">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="107">N'Ko. Since 1.14</doc>
      </member>
      <member name="kayah_li"
              value="67"
              c:identifier="PANGO_SCRIPT_KAYAH_LI"
              glib:nick="kayah-li"
              glib:name="PANGO_SCRIPT_KAYAH_LI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="108">Kayah Li. Since 1.20.1</doc>
      </member>
      <member name="lepcha"
              value="68"
              c:identifier="PANGO_SCRIPT_LEPCHA"
              glib:nick="lepcha"
              glib:name="PANGO_SCRIPT_LEPCHA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="109">Lepcha. Since 1.20.1</doc>
      </member>
      <member name="rejang"
              value="69"
              c:identifier="PANGO_SCRIPT_REJANG"
              glib:nick="rejang"
              glib:name="PANGO_SCRIPT_REJANG">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="110">Rejang. Since 1.20.1</doc>
      </member>
      <member name="sundanese"
              value="70"
              c:identifier="PANGO_SCRIPT_SUNDANESE"
              glib:nick="sundanese"
              glib:name="PANGO_SCRIPT_SUNDANESE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="111">Sundanese. Since 1.20.1</doc>
      </member>
      <member name="saurashtra"
              value="71"
              c:identifier="PANGO_SCRIPT_SAURASHTRA"
              glib:nick="saurashtra"
              glib:name="PANGO_SCRIPT_SAURASHTRA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="112">Saurashtra. Since 1.20.1</doc>
      </member>
      <member name="cham"
              value="72"
              c:identifier="PANGO_SCRIPT_CHAM"
              glib:nick="cham"
              glib:name="PANGO_SCRIPT_CHAM">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="113">Cham. Since 1.20.1</doc>
      </member>
      <member name="ol_chiki"
              value="73"
              c:identifier="PANGO_SCRIPT_OL_CHIKI"
              glib:nick="ol-chiki"
              glib:name="PANGO_SCRIPT_OL_CHIKI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="114">Ol Chiki. Since 1.20.1</doc>
      </member>
      <member name="vai"
              value="74"
              c:identifier="PANGO_SCRIPT_VAI"
              glib:nick="vai"
              glib:name="PANGO_SCRIPT_VAI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="115">Vai. Since 1.20.1</doc>
      </member>
      <member name="carian"
              value="75"
              c:identifier="PANGO_SCRIPT_CARIAN"
              glib:nick="carian"
              glib:name="PANGO_SCRIPT_CARIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="116">Carian. Since 1.20.1</doc>
      </member>
      <member name="lycian"
              value="76"
              c:identifier="PANGO_SCRIPT_LYCIAN"
              glib:nick="lycian"
              glib:name="PANGO_SCRIPT_LYCIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="117">Lycian. Since 1.20.1</doc>
      </member>
      <member name="lydian"
              value="77"
              c:identifier="PANGO_SCRIPT_LYDIAN"
              glib:nick="lydian"
              glib:name="PANGO_SCRIPT_LYDIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="118">Lydian. Since 1.20.1</doc>
      </member>
      <member name="batak"
              value="78"
              c:identifier="PANGO_SCRIPT_BATAK"
              glib:nick="batak"
              glib:name="PANGO_SCRIPT_BATAK">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="119">Batak. Since 1.32</doc>
      </member>
      <member name="brahmi"
              value="79"
              c:identifier="PANGO_SCRIPT_BRAHMI"
              glib:nick="brahmi"
              glib:name="PANGO_SCRIPT_BRAHMI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="120">Brahmi. Since 1.32</doc>
      </member>
      <member name="mandaic"
              value="80"
              c:identifier="PANGO_SCRIPT_MANDAIC"
              glib:nick="mandaic"
              glib:name="PANGO_SCRIPT_MANDAIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="121">Mandaic. Since 1.32</doc>
      </member>
      <member name="chakma"
              value="81"
              c:identifier="PANGO_SCRIPT_CHAKMA"
              glib:nick="chakma"
              glib:name="PANGO_SCRIPT_CHAKMA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="122">Chakma. Since: 1.32</doc>
      </member>
      <member name="meroitic_cursive"
              value="82"
              c:identifier="PANGO_SCRIPT_MEROITIC_CURSIVE"
              glib:nick="meroitic-cursive"
              glib:name="PANGO_SCRIPT_MEROITIC_CURSIVE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="123">Meroitic Cursive. Since: 1.32</doc>
      </member>
      <member name="meroitic_hieroglyphs"
              value="83"
              c:identifier="PANGO_SCRIPT_MEROITIC_HIEROGLYPHS"
              glib:nick="meroitic-hieroglyphs"
              glib:name="PANGO_SCRIPT_MEROITIC_HIEROGLYPHS">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="124">Meroitic Hieroglyphs. Since: 1.32</doc>
      </member>
      <member name="miao"
              value="84"
              c:identifier="PANGO_SCRIPT_MIAO"
              glib:nick="miao"
              glib:name="PANGO_SCRIPT_MIAO">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="125">Miao. Since: 1.32</doc>
      </member>
      <member name="sharada"
              value="85"
              c:identifier="PANGO_SCRIPT_SHARADA"
              glib:nick="sharada"
              glib:name="PANGO_SCRIPT_SHARADA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="126">Sharada. Since: 1.32</doc>
      </member>
      <member name="sora_sompeng"
              value="86"
              c:identifier="PANGO_SCRIPT_SORA_SOMPENG"
              glib:nick="sora-sompeng"
              glib:name="PANGO_SCRIPT_SORA_SOMPENG">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="127">Sora Sompeng. Since: 1.32</doc>
      </member>
      <member name="takri"
              value="87"
              c:identifier="PANGO_SCRIPT_TAKRI"
              glib:nick="takri"
              glib:name="PANGO_SCRIPT_TAKRI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="128">Takri. Since: 1.32</doc>
      </member>
      <member name="bassa_vah"
              value="88"
              c:identifier="PANGO_SCRIPT_BASSA_VAH"
              glib:nick="bassa-vah"
              glib:name="PANGO_SCRIPT_BASSA_VAH">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="129">Bassa. Since: 1.40</doc>
      </member>
      <member name="caucasian_albanian"
              value="89"
              c:identifier="PANGO_SCRIPT_CAUCASIAN_ALBANIAN"
              glib:nick="caucasian-albanian"
              glib:name="PANGO_SCRIPT_CAUCASIAN_ALBANIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="130">Caucasian Albanian. Since: 1.40</doc>
      </member>
      <member name="duployan"
              value="90"
              c:identifier="PANGO_SCRIPT_DUPLOYAN"
              glib:nick="duployan"
              glib:name="PANGO_SCRIPT_DUPLOYAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="131">Duployan. Since: 1.40</doc>
      </member>
      <member name="elbasan"
              value="91"
              c:identifier="PANGO_SCRIPT_ELBASAN"
              glib:nick="elbasan"
              glib:name="PANGO_SCRIPT_ELBASAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="132">Elbasan. Since: 1.40</doc>
      </member>
      <member name="grantha"
              value="92"
              c:identifier="PANGO_SCRIPT_GRANTHA"
              glib:nick="grantha"
              glib:name="PANGO_SCRIPT_GRANTHA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="133">Grantha. Since: 1.40</doc>
      </member>
      <member name="khojki"
              value="93"
              c:identifier="PANGO_SCRIPT_KHOJKI"
              glib:nick="khojki"
              glib:name="PANGO_SCRIPT_KHOJKI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="134">Kjohki. Since: 1.40</doc>
      </member>
      <member name="khudawadi"
              value="94"
              c:identifier="PANGO_SCRIPT_KHUDAWADI"
              glib:nick="khudawadi"
              glib:name="PANGO_SCRIPT_KHUDAWADI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="135">Khudawadi, Sindhi. Since: 1.40</doc>
      </member>
      <member name="linear_a"
              value="95"
              c:identifier="PANGO_SCRIPT_LINEAR_A"
              glib:nick="linear-a"
              glib:name="PANGO_SCRIPT_LINEAR_A">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="136">Linear A. Since: 1.40</doc>
      </member>
      <member name="mahajani"
              value="96"
              c:identifier="PANGO_SCRIPT_MAHAJANI"
              glib:nick="mahajani"
              glib:name="PANGO_SCRIPT_MAHAJANI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="137">Mahajani. Since: 1.40</doc>
      </member>
      <member name="manichaean"
              value="97"
              c:identifier="PANGO_SCRIPT_MANICHAEAN"
              glib:nick="manichaean"
              glib:name="PANGO_SCRIPT_MANICHAEAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="138">Manichaean. Since: 1.40</doc>
      </member>
      <member name="mende_kikakui"
              value="98"
              c:identifier="PANGO_SCRIPT_MENDE_KIKAKUI"
              glib:nick="mende-kikakui"
              glib:name="PANGO_SCRIPT_MENDE_KIKAKUI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="139">Mende Kikakui. Since: 1.40</doc>
      </member>
      <member name="modi"
              value="99"
              c:identifier="PANGO_SCRIPT_MODI"
              glib:nick="modi"
              glib:name="PANGO_SCRIPT_MODI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="140">Modi. Since: 1.40</doc>
      </member>
      <member name="mro"
              value="100"
              c:identifier="PANGO_SCRIPT_MRO"
              glib:nick="mro"
              glib:name="PANGO_SCRIPT_MRO">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="141">Mro. Since: 1.40</doc>
      </member>
      <member name="nabataean"
              value="101"
              c:identifier="PANGO_SCRIPT_NABATAEAN"
              glib:nick="nabataean"
              glib:name="PANGO_SCRIPT_NABATAEAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="142">Nabataean. Since: 1.40</doc>
      </member>
      <member name="old_north_arabian"
              value="102"
              c:identifier="PANGO_SCRIPT_OLD_NORTH_ARABIAN"
              glib:nick="old-north-arabian"
              glib:name="PANGO_SCRIPT_OLD_NORTH_ARABIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="143">Old North Arabian. Since: 1.40</doc>
      </member>
      <member name="old_permic"
              value="103"
              c:identifier="PANGO_SCRIPT_OLD_PERMIC"
              glib:nick="old-permic"
              glib:name="PANGO_SCRIPT_OLD_PERMIC">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="144">Old Permic. Since: 1.40</doc>
      </member>
      <member name="pahawh_hmong"
              value="104"
              c:identifier="PANGO_SCRIPT_PAHAWH_HMONG"
              glib:nick="pahawh-hmong"
              glib:name="PANGO_SCRIPT_PAHAWH_HMONG">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="145">Pahawh Hmong. Since: 1.40</doc>
      </member>
      <member name="palmyrene"
              value="105"
              c:identifier="PANGO_SCRIPT_PALMYRENE"
              glib:nick="palmyrene"
              glib:name="PANGO_SCRIPT_PALMYRENE">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="146">Palmyrene. Since: 1.40</doc>
      </member>
      <member name="pau_cin_hau"
              value="106"
              c:identifier="PANGO_SCRIPT_PAU_CIN_HAU"
              glib:nick="pau-cin-hau"
              glib:name="PANGO_SCRIPT_PAU_CIN_HAU">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="147">Pau Cin Hau. Since: 1.40</doc>
      </member>
      <member name="psalter_pahlavi"
              value="107"
              c:identifier="PANGO_SCRIPT_PSALTER_PAHLAVI"
              glib:nick="psalter-pahlavi"
              glib:name="PANGO_SCRIPT_PSALTER_PAHLAVI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="148">Psalter Pahlavi. Since: 1.40</doc>
      </member>
      <member name="siddham"
              value="108"
              c:identifier="PANGO_SCRIPT_SIDDHAM"
              glib:nick="siddham"
              glib:name="PANGO_SCRIPT_SIDDHAM">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="149">Siddham. Since: 1.40</doc>
      </member>
      <member name="tirhuta"
              value="109"
              c:identifier="PANGO_SCRIPT_TIRHUTA"
              glib:nick="tirhuta"
              glib:name="PANGO_SCRIPT_TIRHUTA">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="150">Tirhuta. Since: 1.40</doc>
      </member>
      <member name="warang_citi"
              value="110"
              c:identifier="PANGO_SCRIPT_WARANG_CITI"
              glib:nick="warang-citi"
              glib:name="PANGO_SCRIPT_WARANG_CITI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="151">Warang Citi. Since: 1.40</doc>
      </member>
      <member name="ahom"
              value="111"
              c:identifier="PANGO_SCRIPT_AHOM"
              glib:nick="ahom"
              glib:name="PANGO_SCRIPT_AHOM">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="152">Ahom. Since: 1.40</doc>
      </member>
      <member name="anatolian_hieroglyphs"
              value="112"
              c:identifier="PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS"
              glib:nick="anatolian-hieroglyphs"
              glib:name="PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="153">Anatolian Hieroglyphs. Since: 1.40</doc>
      </member>
      <member name="hatran"
              value="113"
              c:identifier="PANGO_SCRIPT_HATRAN"
              glib:nick="hatran"
              glib:name="PANGO_SCRIPT_HATRAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="154">Hatran. Since: 1.40</doc>
      </member>
      <member name="multani"
              value="114"
              c:identifier="PANGO_SCRIPT_MULTANI"
              glib:nick="multani"
              glib:name="PANGO_SCRIPT_MULTANI">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="155">Multani. Since: 1.40</doc>
      </member>
      <member name="old_hungarian"
              value="115"
              c:identifier="PANGO_SCRIPT_OLD_HUNGARIAN"
              glib:nick="old-hungarian"
              glib:name="PANGO_SCRIPT_OLD_HUNGARIAN">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="156">Old Hungarian. Since: 1.40</doc>
      </member>
      <member name="signwriting"
              value="116"
              c:identifier="PANGO_SCRIPT_SIGNWRITING"
              glib:nick="signwriting"
              glib:name="PANGO_SCRIPT_SIGNWRITING">
        <doc xml:space="preserve"
             filename="pango/pango-script.h"
             line="157">Signwriting. Since: 1.40</doc>
      </member>
      <function name="for_unichar"
                c:identifier="pango_script_for_unichar"
                version="1.4"
                deprecated="1"
                deprecated-version="1.44.">
        <doc xml:space="preserve"
             filename="pango/pango-script.c"
             line="63">Looks up the script for a particular character.

The script of a character is defined by
[Unicode Standard Annex 24: Script names](http://www.unicode.org/reports/tr24/).

No check is made for @ch being a valid Unicode character; if you pass
in invalid character, the result is undefined.

Note that while the return type of this function is declared
as `PangoScript`, as of Pango 1.18, this function simply returns
the return value of [func@GLib.unichar_get_script]. Callers must be
prepared to handle unknown values.</doc>
        <doc-deprecated xml:space="preserve">Use g_unichar_get_script()</doc-deprecated>
        <source-position filename="pango/pango-script.h" line="310"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-script.c"
               line="80">the `PangoScript` for the character.</doc>
          <type name="Script" c:type="PangoScript"/>
        </return-value>
        <parameters>
          <parameter name="ch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="65">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_sample_language"
                c:identifier="pango_script_get_sample_language"
                version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="869">Finds a language tag that is reasonably representative of @script.

The language will usually be the most widely spoken or used language
written in that script: for instance, the sample language for
%PANGO_SCRIPT_CYRILLIC is ru (Russian), the sample language for
%PANGO_SCRIPT_ARABIC is ar.

For some scripts, no sample language will be returned because
there is no language that is sufficiently representative. The
best example of this is %PANGO_SCRIPT_HAN, where various different
variants of written Chinese, Japanese, and Korean all use
significantly different sets of Han characters and forms
of shared characters. No sample language can be provided
for many historical scripts as well.

As of 1.18, this function checks the environment variables
`PANGO_LANGUAGE` and `LANGUAGE` (checked in that order) first.
If one of them is set, it is parsed as a list of language tags
separated by colons or other separators. This function
will return the first language in the parsed list that Pango
believes may use @script for writing. This last predicate
is tested using [method@Pango.Language.includes_script]. This can
be used to control Pango's font selection for non-primary
languages. For example, a `PANGO_LANGUAGE` enviroment variable
set to "en:fa" makes Pango choose fonts suitable for Persian (fa)
instead of Arabic (ar) when a segment of Arabic text is found
in an otherwise non-Arabic text. The same trick can be used to
choose a default language for %PANGO_SCRIPT_HAN when setting
context language is not feasible.</doc>
        <source-position filename="pango/pango-script.h" line="331"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="903">a `PangoLanguage` that is representative
  of the script</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
        <parameters>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-language.c"
                 line="871">a `PangoScript`</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="ScriptIter"
            c:type="PangoScriptIter"
            opaque="1"
            glib:type-name="PangoScriptIter"
            glib:get-type="pango_script_iter_get_type"
            c:symbol-prefix="script_iter">
      <doc xml:space="preserve"
           filename="pango/pango-script.h"
           line="29">A `PangoScriptIter` is used to iterate through a string
and identify ranges in different scripts.</doc>
      <source-position filename="pango/pango-script.h" line="35"/>
      <constructor name="new"
                   c:identifier="pango_script_iter_new"
                   version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-script.c"
             line="122">Create a new `PangoScriptIter`, used to break a string of
Unicode text into runs by Unicode script.

No copy is made of @text, so the caller needs to make
sure it remains valid until the iterator is freed with
[method@Pango.ScriptIter.free].</doc>
        <source-position filename="pango/pango-script.h" line="316"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-script.c"
               line="134">the new script iterator, initialized
 to point at the first range in the text, which should be
 freed with [method@Pango.ScriptIter.free]. If the string is
 empty, it will point at an empty range.</doc>
          <type name="ScriptIter" c:type="PangoScriptIter*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="124">a UTF-8 string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="125">length of @text, or -1 if @text is nul-terminated</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="pango_script_iter_free" version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-script.c"
             line="159">Frees a `PangoScriptIter`.</doc>
        <source-position filename="pango/pango-script.h" line="326"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="161">a `PangoScriptIter`</doc>
            <type name="ScriptIter" c:type="PangoScriptIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_range"
              c:identifier="pango_script_iter_get_range"
              version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-script.c"
             line="174">Gets information about the range to which @iter currently points.

The range is the set of locations p where *start &lt;= p &lt; *end.
(That is, it doesn't include the character stored at *end)

Note that while the type of the @script argument is declared
as `PangoScript`, as of Pango 1.18, this function simply returns
`GUnicodeScript` values. Callers must be prepared to handle unknown
values.</doc>
        <source-position filename="pango/pango-script.h" line="319"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="176">a `PangoScriptIter`</doc>
            <type name="ScriptIter" c:type="PangoScriptIter*"/>
          </instance-parameter>
          <parameter name="start"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="177">location to store start position of the range</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="178">location to store end position of the range</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="script"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="179">location to store script for range</doc>
            <type name="Script" c:type="PangoScript*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="pango_script_iter_next" version="1.4">
        <doc xml:space="preserve"
             filename="pango/pango-script.c"
             line="315">Advances a `PangoScriptIter` to the next range.

If @iter is already at the end, it is left unchanged
and %FALSE is returned.</doc>
        <source-position filename="pango/pango-script.h" line="324"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-script.c"
               line="324">%TRUE if @iter was successfully advanced</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-script.c"
                 line="317">a `PangoScriptIter`</doc>
            <type name="ScriptIter" c:type="PangoScriptIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="ShapeFlags"
              version="1.44"
              glib:type-name="PangoShapeFlags"
              glib:get-type="pango_shape_flags_get_type"
              c:type="PangoShapeFlags">
      <doc xml:space="preserve"
           filename="pango/pango-glyph.h"
           line="218">Flags influencing the shaping process.

`PangoShapeFlags` can be passed to [func@Pango.shape_with_flags].</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_SHAPE_NONE"
              glib:nick="none"
              glib:name="PANGO_SHAPE_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="220">Default value</doc>
      </member>
      <member name="round_positions"
              value="1"
              c:identifier="PANGO_SHAPE_ROUND_POSITIONS"
              glib:nick="round-positions"
              glib:name="PANGO_SHAPE_ROUND_POSITIONS">
        <doc xml:space="preserve"
             filename="pango/pango-glyph.h"
             line="221">Round glyph positions and widths to whole device units
  This option should be set if the target renderer can't do subpixel positioning of glyphs</doc>
      </member>
    </bitfield>
    <bitfield name="ShowFlags"
              version="1.44"
              glib:type-name="PangoShowFlags"
              glib:get-type="pango_show_flags_get_type"
              c:type="PangoShowFlags">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="194">These flags affect how Pango treats characters that are normally
not visible in the output.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_SHOW_NONE"
              glib:nick="none"
              glib:name="PANGO_SHOW_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="196">No special treatment for invisible characters</doc>
      </member>
      <member name="spaces"
              value="1"
              c:identifier="PANGO_SHOW_SPACES"
              glib:nick="spaces"
              glib:name="PANGO_SHOW_SPACES">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="197">Render spaces, tabs and newlines visibly</doc>
      </member>
      <member name="line_breaks"
              value="2"
              c:identifier="PANGO_SHOW_LINE_BREAKS"
              glib:nick="line-breaks"
              glib:name="PANGO_SHOW_LINE_BREAKS">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="198">Render line breaks visibly</doc>
      </member>
      <member name="ignorables"
              value="4"
              c:identifier="PANGO_SHOW_IGNORABLES"
              glib:nick="ignorables"
              glib:name="PANGO_SHOW_IGNORABLES">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="199">Render default-ignorable Unicode
  characters visibly</doc>
      </member>
    </bitfield>
    <enumeration name="Stretch"
                 glib:type-name="PangoStretch"
                 glib:get-type="pango_stretch_get_type"
                 c:type="PangoStretch">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="145">An enumeration specifying the width of the font relative to other designs
within a family.</doc>
      <member name="ultra_condensed"
              value="0"
              c:identifier="PANGO_STRETCH_ULTRA_CONDENSED"
              glib:nick="ultra-condensed"
              glib:name="PANGO_STRETCH_ULTRA_CONDENSED">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="147">ultra condensed width</doc>
      </member>
      <member name="extra_condensed"
              value="1"
              c:identifier="PANGO_STRETCH_EXTRA_CONDENSED"
              glib:nick="extra-condensed"
              glib:name="PANGO_STRETCH_EXTRA_CONDENSED">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="148">extra condensed width</doc>
      </member>
      <member name="condensed"
              value="2"
              c:identifier="PANGO_STRETCH_CONDENSED"
              glib:nick="condensed"
              glib:name="PANGO_STRETCH_CONDENSED">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="149">condensed width</doc>
      </member>
      <member name="semi_condensed"
              value="3"
              c:identifier="PANGO_STRETCH_SEMI_CONDENSED"
              glib:nick="semi-condensed"
              glib:name="PANGO_STRETCH_SEMI_CONDENSED">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="150">semi condensed width</doc>
      </member>
      <member name="normal"
              value="4"
              c:identifier="PANGO_STRETCH_NORMAL"
              glib:nick="normal"
              glib:name="PANGO_STRETCH_NORMAL">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="151">the normal width</doc>
      </member>
      <member name="semi_expanded"
              value="5"
              c:identifier="PANGO_STRETCH_SEMI_EXPANDED"
              glib:nick="semi-expanded"
              glib:name="PANGO_STRETCH_SEMI_EXPANDED">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="152">semi expanded width</doc>
      </member>
      <member name="expanded"
              value="6"
              c:identifier="PANGO_STRETCH_EXPANDED"
              glib:nick="expanded"
              glib:name="PANGO_STRETCH_EXPANDED">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="153">expanded width</doc>
      </member>
      <member name="extra_expanded"
              value="7"
              c:identifier="PANGO_STRETCH_EXTRA_EXPANDED"
              glib:nick="extra-expanded"
              glib:name="PANGO_STRETCH_EXTRA_EXPANDED">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="154">extra expanded width</doc>
      </member>
      <member name="ultra_expanded"
              value="8"
              c:identifier="PANGO_STRETCH_ULTRA_EXPANDED"
              glib:nick="ultra-expanded"
              glib:name="PANGO_STRETCH_ULTRA_EXPANDED">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="155">ultra expanded width</doc>
      </member>
    </enumeration>
    <enumeration name="Style"
                 glib:type-name="PangoStyle"
                 glib:get-type="pango_style_get_type"
                 c:type="PangoStyle">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="66">An enumeration specifying the various slant styles possible for a font.</doc>
      <member name="normal"
              value="0"
              c:identifier="PANGO_STYLE_NORMAL"
              glib:nick="normal"
              glib:name="PANGO_STYLE_NORMAL">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="68">the font is upright.</doc>
      </member>
      <member name="oblique"
              value="1"
              c:identifier="PANGO_STYLE_OBLIQUE"
              glib:nick="oblique"
              glib:name="PANGO_STYLE_OBLIQUE">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="69">the font is slanted, but in a roman style.</doc>
      </member>
      <member name="italic"
              value="2"
              c:identifier="PANGO_STYLE_ITALIC"
              glib:nick="italic"
              glib:name="PANGO_STYLE_ITALIC">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="70">the font is slanted in an italic style.</doc>
      </member>
    </enumeration>
    <enumeration name="TabAlign"
                 glib:type-name="PangoTabAlign"
                 glib:get-type="pango_tab_align_get_type"
                 c:type="PangoTabAlign">
      <doc xml:space="preserve"
           filename="pango/pango-tabs.h"
           line="31">`PangoTabAlign` specifies where the text appears relative to the tab stop
position.</doc>
      <member name="left"
              value="0"
              c:identifier="PANGO_TAB_LEFT"
              glib:nick="left"
              glib:name="PANGO_TAB_LEFT">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.h"
             line="33">the text appears to the right of the tab stop position</doc>
      </member>
      <member name="right"
              value="1"
              c:identifier="PANGO_TAB_RIGHT"
              glib:nick="right"
              glib:name="PANGO_TAB_RIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.h"
             line="34">the text appears to the left of the tab stop position
  until the available space is filled. Since: 1.50</doc>
      </member>
      <member name="center"
              value="2"
              c:identifier="PANGO_TAB_CENTER"
              glib:nick="center"
              glib:name="PANGO_TAB_CENTER">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.h"
             line="36">the text is centered at the tab stop position
  until the available space is filled. Since: 1.50</doc>
      </member>
      <member name="decimal"
              value="3"
              c:identifier="PANGO_TAB_DECIMAL"
              glib:nick="decimal"
              glib:name="PANGO_TAB_DECIMAL">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.h"
             line="38">text before the first occurrence of the decimal point
  character appears to the left of the tab stop position (until the available
  space is filled), the rest to the right. Since: 1.50</doc>
      </member>
    </enumeration>
    <record name="TabArray"
            c:type="PangoTabArray"
            opaque="1"
            glib:type-name="PangoTabArray"
            glib:get-type="pango_tab_array_get_type"
            c:symbol-prefix="tab_array">
      <doc xml:space="preserve"
           filename="pango/pango-tabs.c"
           line="37">A `PangoTabArray` contains an array of tab stops.

`PangoTabArray` can be used to set tab stops in a `PangoLayout`.
Each tab stop has an alignment, a position, and optionally
a character to use as decimal point.</doc>
      <source-position filename="pango/pango-tabs.h" line="29"/>
      <constructor name="new" c:identifier="pango_tab_array_new">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="66">Creates an array of @initial_size tab stops.

Tab stops are specified in pixel units if @positions_in_pixels is %TRUE,
otherwise in Pango units. All stops are initially at position 0.</doc>
        <source-position filename="pango/pango-tabs.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-tabs.c"
               line="76">the newly allocated `PangoTabArray`, which should
  be freed with [method@Pango.TabArray.free].</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <parameter name="initial_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="68">Initial number of tab stops to allocate, can be 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="positions_in_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="69">whether positions are in pixel units</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_positions"
                   c:identifier="pango_tab_array_new_with_positions"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="108">Creates a `PangoTabArray` and allows you to specify the alignment
and position of each tab stop.

You **must** provide an alignment and position for @size tab stops.</doc>
        <source-position filename="pango/pango-tabs.h" line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-tabs.c"
               line="121">the newly allocated `PangoTabArray`, which should
  be freed with [method@Pango.TabArray.free].</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="110">number of tab stops in the array</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="positions_in_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="111">whether positions are in pixel units</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="first_alignment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="112">alignment of first tab stop</doc>
            <type name="TabAlign" c:type="PangoTabAlign"/>
          </parameter>
          <parameter name="first_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="113">position of first tab stop</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="114">additional alignment/position pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="pango_tab_array_copy">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="173">Copies a `PangoTabArray`.</doc>
        <source-position filename="pango/pango-tabs.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-tabs.c"
               line="179">the newly allocated `PangoTabArray`, which should
  be freed with [method@Pango.TabArray.free].</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="175">`PangoTabArray` to copy</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_tab_array_free">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="197">Frees a tab array and associated resources.</doc>
        <source-position filename="pango/pango-tabs.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="199">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_decimal_point"
              c:identifier="pango_tab_array_get_decimal_point"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="577">Gets the Unicode character to use as decimal point.

This is only relevant for tabs with %PANGO_TAB_DECIMAL alignment,
which align content at the first occurrence of the decimal point
character.

The default value of 0 means that Pango will use the
decimal point according to the current locale.</doc>
        <source-position filename="pango/pango-tabs.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="gunichar" c:type="gunichar"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="579">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="tab_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="580">the index of a tab stop</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_positions_in_pixels"
              c:identifier="pango_tab_array_get_positions_in_pixels">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="356">Returns %TRUE if the tab positions are in pixels,
%FALSE if they are in Pango units.</doc>
        <source-position filename="pango/pango-tabs.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-tabs.c"
               line="363">whether positions are in pixels.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="358">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="pango_tab_array_get_size">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="213">Gets the number of tab stops in @tab_array.</doc>
        <source-position filename="pango/pango-tabs.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-tabs.c"
               line="219">the number of tab stops in the array.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="215">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tab" c:identifier="pango_tab_array_get_tab">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="289">Gets the alignment and position of a tab stop.</doc>
        <source-position filename="pango/pango-tabs.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="291">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="tab_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="292">tab stop index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alignment"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="293">location to store alignment</doc>
            <type name="TabAlign" c:type="PangoTabAlign*"/>
          </parameter>
          <parameter name="location"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="294">location to store tab position</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tabs" c:identifier="pango_tab_array_get_tabs">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="315">If non-%NULL, @alignments and @locations are filled with allocated
arrays.

The arrays are of length [method@Pango.TabArray.get_size].
You must free the returned array.</doc>
        <source-position filename="pango/pango-tabs.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="317">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="alignments"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="318">location to store an array of tab
  stop alignments</doc>
            <type name="TabAlign" c:type="PangoTabAlign**"/>
          </parameter>
          <parameter name="locations"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="320">location to store an array
  of tab positions</doc>
            <array zero-terminated="0" c:type="gint**">
              <type name="gint" c:type="gint*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="pango_tab_array_resize">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="229">Resizes a tab array.

You must subsequently initialize any tabs
that were added as a result of growing the array.</doc>
        <source-position filename="pango/pango-tabs.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="231">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="232">new size of the array</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decimal_point"
              c:identifier="pango_tab_array_set_decimal_point"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="546">Sets the Unicode character to use as decimal point.

This is only relevant for tabs with %PANGO_TAB_DECIMAL alignment,
which align content at the first occurrence of the decimal point
character.

By default, Pango uses the decimal point according
to the current locale.</doc>
        <source-position filename="pango/pango-tabs.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="548">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="tab_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="549">the index of a tab stop</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="decimal_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="550">the decimal point to use</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_positions_in_pixels"
              c:identifier="pango_tab_array_set_positions_in_pixels"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="373">Sets whether positions in this array are specified in
pixels.</doc>
        <source-position filename="pango/pango-tabs.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="375">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="positions_in_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="376">whether positions are in pixels</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab" c:identifier="pango_tab_array_set_tab">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="263">Sets the alignment and location of a tab stop.</doc>
        <source-position filename="pango/pango-tabs.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="265">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="tab_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="266">the index of a tab stop</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alignment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="267">tab alignment</doc>
            <type name="TabAlign" c:type="PangoTabAlign"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="268">tab location in Pango units</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort" c:identifier="pango_tab_array_sort" version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="613">Utility function to ensure that the tab stops are in increasing order.</doc>
        <source-position filename="pango/pango-tabs.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="615">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="pango_tab_array_to_string"
              version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="392">Serializes a `PangoTabArray` to a string.

No guarantees are made about the format of the string,
it may change between Pango versions.

The intended use of this function is testing and
debugging. The format is not meant as a permanent
storage format.</doc>
        <source-position filename="pango/pango-tabs.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-tabs.c"
               line="405">a newly allocated string</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="394">a `PangoTabArray`</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_string"
                c:identifier="pango_tab_array_from_string"
                version="1.50">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="446">Deserializes a `PangoTabArray` from a string.

This is the counterpart to [method@Pango.TabArray.to_string].
See that functions for details about the format.</doc>
        <source-position filename="pango/pango-tabs.h" line="100"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="pango/pango-tabs.c"
               line="455">a new `PangoTabArray`</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="pango/pango-tabs.c"
                 line="448">a string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="TextTransform"
                 version="1.50"
                 glib:type-name="PangoTextTransform"
                 glib:get-type="pango_text_transform_get_type"
                 c:type="PangoTextTransform">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="214">An enumeration that affects how Pango treats characters during shaping.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_TEXT_TRANSFORM_NONE"
              glib:nick="none"
              glib:name="PANGO_TEXT_TRANSFORM_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="216">Leave text unchanged</doc>
      </member>
      <member name="lowercase"
              value="1"
              c:identifier="PANGO_TEXT_TRANSFORM_LOWERCASE"
              glib:nick="lowercase"
              glib:name="PANGO_TEXT_TRANSFORM_LOWERCASE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="217">Display letters and numbers as lowercase</doc>
      </member>
      <member name="uppercase"
              value="2"
              c:identifier="PANGO_TEXT_TRANSFORM_UPPERCASE"
              glib:nick="uppercase"
              glib:name="PANGO_TEXT_TRANSFORM_UPPERCASE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="218">Display letters and numbers as uppercase</doc>
      </member>
      <member name="capitalize"
              value="3"
              c:identifier="PANGO_TEXT_TRANSFORM_CAPITALIZE"
              glib:nick="capitalize"
              glib:name="PANGO_TEXT_TRANSFORM_CAPITALIZE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="219">Display the first character of a word
  in titlecase</doc>
      </member>
    </enumeration>
    <function-macro name="UNITS_CEIL"
                    c:identifier="PANGO_UNITS_CEIL"
                    version="1.50"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="122">Rounds a dimension up to whole device units, but does not
convert it to device units.</doc>
      <source-position filename="pango/pango-types.h" line="132"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="124">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="UNITS_FLOOR"
                    c:identifier="PANGO_UNITS_FLOOR"
                    version="1.50"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="109">Rounds a dimension down to whole device units, but does not
convert it to device units.</doc>
      <source-position filename="pango/pango-types.h" line="119"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="111">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="UNITS_ROUND"
                    c:identifier="PANGO_UNITS_ROUND"
                    version="1.18"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-types.h"
           line="135">Rounds a dimension to whole device units, but does not
convert it to device units.</doc>
      <source-position filename="pango/pango-types.h" line="145"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="pango/pango-types.h"
               line="137">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="Underline"
                 glib:type-name="PangoUnderline"
                 glib:get-type="pango_underline_get_type"
                 c:type="PangoUnderline">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.h"
           line="134">The `PangoUnderline` enumeration is used to specify whether text
should be underlined, and if so, the type of underlining.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_UNDERLINE_NONE"
              glib:nick="none"
              glib:name="PANGO_UNDERLINE_NONE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="136">no underline should be drawn</doc>
      </member>
      <member name="single"
              value="1"
              c:identifier="PANGO_UNDERLINE_SINGLE"
              glib:nick="single"
              glib:name="PANGO_UNDERLINE_SINGLE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="137">a single underline should be drawn</doc>
      </member>
      <member name="double"
              value="2"
              c:identifier="PANGO_UNDERLINE_DOUBLE"
              glib:nick="double"
              glib:name="PANGO_UNDERLINE_DOUBLE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="138">a double underline should be drawn</doc>
      </member>
      <member name="low"
              value="3"
              c:identifier="PANGO_UNDERLINE_LOW"
              glib:nick="low"
              glib:name="PANGO_UNDERLINE_LOW">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="139">a single underline should be drawn at a
  position beneath the ink extents of the text being
  underlined. This should be used only for underlining
  single characters, such as for keyboard accelerators.
  %PANGO_UNDERLINE_SINGLE should be used for extended
  portions of text.</doc>
      </member>
      <member name="error"
              value="4"
              c:identifier="PANGO_UNDERLINE_ERROR"
              glib:nick="error"
              glib:name="PANGO_UNDERLINE_ERROR">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="145">an underline indicating an error should
  be drawn below. The exact style of rendering is up to the
  `PangoRenderer` in use, but typical styles include wavy
  or dotted lines.
  This underline is typically used to indicate an error such
  as a possible mispelling; in some cases a contrasting color
  may automatically be used. This type of underlining is
  available since Pango 1.4.</doc>
      </member>
      <member name="single_line"
              value="5"
              c:identifier="PANGO_UNDERLINE_SINGLE_LINE"
              glib:nick="single-line"
              glib:name="PANGO_UNDERLINE_SINGLE_LINE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="153">Like @PANGO_UNDERLINE_SINGLE, but
  drawn continuously across multiple runs. This type
  of underlining is available since Pango 1.46.</doc>
      </member>
      <member name="double_line"
              value="6"
              c:identifier="PANGO_UNDERLINE_DOUBLE_LINE"
              glib:nick="double-line"
              glib:name="PANGO_UNDERLINE_DOUBLE_LINE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="156">Like @PANGO_UNDERLINE_DOUBLE, but
  drawn continuously across multiple runs. This type
  of underlining is available since Pango 1.46.</doc>
      </member>
      <member name="error_line"
              value="7"
              c:identifier="PANGO_UNDERLINE_ERROR_LINE"
              glib:nick="error-line"
              glib:name="PANGO_UNDERLINE_ERROR_LINE">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.h"
             line="159">Like @PANGO_UNDERLINE_ERROR, but
  drawn continuously across multiple runs. This type
  of underlining is available since Pango 1.46.</doc>
      </member>
    </enumeration>
    <function-macro name="VERSION_CHECK"
                    c:identifier="PANGO_VERSION_CHECK"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-utils.h"
           line="158">Checks that the version of Pango available at compile-time is not older than
the provided version number.</doc>
      <source-position filename="pango/pango-utils.h" line="164"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="pango/pango-utils.h"
               line="160">the major component of the version number</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="pango/pango-utils.h"
               line="161">the minor component of the version number</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="pango/pango-utils.h"
               line="162">the micro component of the version number</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VERSION_ENCODE"
                    c:identifier="PANGO_VERSION_ENCODE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="pango/pango-utils.h"
           line="111">This macro encodes the given Pango version into an integer.  The numbers
returned by %PANGO_VERSION and pango_version() are encoded using this macro.
Two encoded version numbers can be compared as integers.</doc>
      <source-position filename="pango/pango-utils.h" line="121"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="pango/pango-utils.h"
               line="113">the major component of the version number</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="pango/pango-utils.h"
               line="114">the minor component of the version number</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="pango/pango-utils.h"
               line="115">the micro component of the version number</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION_MAJOR" value="1" c:type="PANGO_VERSION_MAJOR">
      <doc xml:space="preserve"
           filename="pango/pango-utils.h"
           line="137">The major component of the version of Pango available at compile-time.</doc>
      <source-position filename="pango/pango-features.h" line="4"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_MICRO" value="0" c:type="PANGO_VERSION_MICRO">
      <doc xml:space="preserve"
           filename="pango/pango-utils.h"
           line="147">The micro component of the version of Pango available at compile-time.</doc>
      <source-position filename="pango/pango-features.h" line="6"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_MINOR" value="51" c:type="PANGO_VERSION_MINOR">
      <doc xml:space="preserve"
           filename="pango/pango-utils.h"
           line="142">The minor component of the version of Pango available at compile-time.</doc>
      <source-position filename="pango/pango-features.h" line="5"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_STRING"
              value="1.51.0"
              c:type="PANGO_VERSION_STRING">
      <doc xml:space="preserve"
           filename="pango/pango-utils.h"
           line="132">A string literal containing the version of Pango available at compile-time.</doc>
      <source-position filename="pango/pango-features.h" line="8"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="Variant"
                 glib:type-name="PangoVariant"
                 glib:get-type="pango_variant_get_type"
                 c:type="PangoVariant">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="80">An enumeration specifying capitalization variant of the font.</doc>
      <member name="normal"
              value="0"
              c:identifier="PANGO_VARIANT_NORMAL"
              glib:nick="normal"
              glib:name="PANGO_VARIANT_NORMAL">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="82">A normal font.</doc>
      </member>
      <member name="small_caps"
              value="1"
              c:identifier="PANGO_VARIANT_SMALL_CAPS"
              glib:nick="small-caps"
              glib:name="PANGO_VARIANT_SMALL_CAPS">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="83">A font with the lower case characters
  replaced by smaller variants of the capital characters.</doc>
      </member>
      <member name="all_small_caps"
              value="2"
              c:identifier="PANGO_VARIANT_ALL_SMALL_CAPS"
              glib:nick="all-small-caps"
              glib:name="PANGO_VARIANT_ALL_SMALL_CAPS">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="85">A font with all characters
  replaced by smaller variants of the capital characters. Since: 1.50</doc>
      </member>
      <member name="petite_caps"
              value="3"
              c:identifier="PANGO_VARIANT_PETITE_CAPS"
              glib:nick="petite-caps"
              glib:name="PANGO_VARIANT_PETITE_CAPS">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="87">A font with the lower case characters
  replaced by smaller variants of the capital characters.
  Petite Caps can be even smaller than Small Caps. Since: 1.50</doc>
      </member>
      <member name="all_petite_caps"
              value="4"
              c:identifier="PANGO_VARIANT_ALL_PETITE_CAPS"
              glib:nick="all-petite-caps"
              glib:name="PANGO_VARIANT_ALL_PETITE_CAPS">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="90">A font with all characters
  replaced by smaller variants of the capital characters.
  Petite Caps can be even smaller than Small Caps. Since: 1.50</doc>
      </member>
      <member name="unicase"
              value="5"
              c:identifier="PANGO_VARIANT_UNICASE"
              glib:nick="unicase"
              glib:name="PANGO_VARIANT_UNICASE">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="93">A font with the upper case characters
  replaced by smaller variants of the capital letters. Since: 1.50</doc>
      </member>
      <member name="title_caps"
              value="6"
              c:identifier="PANGO_VARIANT_TITLE_CAPS"
              glib:nick="title-caps"
              glib:name="PANGO_VARIANT_TITLE_CAPS">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="95">A font with capital letters that
  are more suitable for all-uppercase titles. Since: 1.50</doc>
      </member>
    </enumeration>
    <enumeration name="Weight"
                 glib:type-name="PangoWeight"
                 glib:get-type="pango_weight_get_type"
                 c:type="PangoWeight">
      <doc xml:space="preserve"
           filename="pango/pango-font.h"
           line="110">An enumeration specifying the weight (boldness) of a font.

Weight is specified as a numeric value ranging from 100 to 1000.
This enumeration simply provides some common, predefined values.</doc>
      <member name="thin"
              value="100"
              c:identifier="PANGO_WEIGHT_THIN"
              glib:nick="thin"
              glib:name="PANGO_WEIGHT_THIN">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="112">the thin weight (= 100) Since: 1.24</doc>
      </member>
      <member name="ultralight"
              value="200"
              c:identifier="PANGO_WEIGHT_ULTRALIGHT"
              glib:nick="ultralight"
              glib:name="PANGO_WEIGHT_ULTRALIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="113">the ultralight weight (= 200)</doc>
      </member>
      <member name="light"
              value="300"
              c:identifier="PANGO_WEIGHT_LIGHT"
              glib:nick="light"
              glib:name="PANGO_WEIGHT_LIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="114">the light weight (= 300)</doc>
      </member>
      <member name="semilight"
              value="350"
              c:identifier="PANGO_WEIGHT_SEMILIGHT"
              glib:nick="semilight"
              glib:name="PANGO_WEIGHT_SEMILIGHT">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="115">the semilight weight (= 350) Since: 1.36.7</doc>
      </member>
      <member name="book"
              value="380"
              c:identifier="PANGO_WEIGHT_BOOK"
              glib:nick="book"
              glib:name="PANGO_WEIGHT_BOOK">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="116">the book weight (= 380) Since: 1.24)</doc>
      </member>
      <member name="normal"
              value="400"
              c:identifier="PANGO_WEIGHT_NORMAL"
              glib:nick="normal"
              glib:name="PANGO_WEIGHT_NORMAL">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="117">the default weight (= 400)</doc>
      </member>
      <member name="medium"
              value="500"
              c:identifier="PANGO_WEIGHT_MEDIUM"
              glib:nick="medium"
              glib:name="PANGO_WEIGHT_MEDIUM">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="118">the medium weight (= 500) Since: 1.24</doc>
      </member>
      <member name="semibold"
              value="600"
              c:identifier="PANGO_WEIGHT_SEMIBOLD"
              glib:nick="semibold"
              glib:name="PANGO_WEIGHT_SEMIBOLD">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="119">the semibold weight (= 600)</doc>
      </member>
      <member name="bold"
              value="700"
              c:identifier="PANGO_WEIGHT_BOLD"
              glib:nick="bold"
              glib:name="PANGO_WEIGHT_BOLD">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="120">the bold weight (= 700)</doc>
      </member>
      <member name="ultrabold"
              value="800"
              c:identifier="PANGO_WEIGHT_ULTRABOLD"
              glib:nick="ultrabold"
              glib:name="PANGO_WEIGHT_ULTRABOLD">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="121">the ultrabold weight (= 800)</doc>
      </member>
      <member name="heavy"
              value="900"
              c:identifier="PANGO_WEIGHT_HEAVY"
              glib:nick="heavy"
              glib:name="PANGO_WEIGHT_HEAVY">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="122">the heavy weight (= 900)</doc>
      </member>
      <member name="ultraheavy"
              value="1000"
              c:identifier="PANGO_WEIGHT_ULTRAHEAVY"
              glib:nick="ultraheavy"
              glib:name="PANGO_WEIGHT_ULTRAHEAVY">
        <doc xml:space="preserve"
             filename="pango/pango-font.h"
             line="123">the ultraheavy weight (= 1000) Since: 1.24</doc>
      </member>
    </enumeration>
    <enumeration name="WrapMode"
                 glib:type-name="PangoWrapMode"
                 glib:get-type="pango_wrap_mode_get_type"
                 c:type="PangoWrapMode">
      <doc xml:space="preserve"
           filename="pango/pango-layout.h"
           line="67">`PangoWrapMode` describes how to wrap the lines of a `PangoLayout`
to the desired width.

For @PANGO_WRAP_WORD, Pango uses break opportunities that are determined
by the Unicode line breaking algorithm. For @PANGO_WRAP_CHAR, Pango allows
breaking at grapheme boundaries that are determined by the Unicode text
segmentation algorithm.</doc>
      <member name="word"
              value="0"
              c:identifier="PANGO_WRAP_WORD"
              glib:nick="word"
              glib:name="PANGO_WRAP_WORD">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="69">wrap lines at word boundaries.</doc>
      </member>
      <member name="char"
              value="1"
              c:identifier="PANGO_WRAP_CHAR"
              glib:nick="char"
              glib:name="PANGO_WRAP_CHAR">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="70">wrap lines at character boundaries.</doc>
      </member>
      <member name="word_char"
              value="2"
              c:identifier="PANGO_WRAP_WORD_CHAR"
              glib:nick="word-char"
              glib:name="PANGO_WRAP_WORD_CHAR">
        <doc xml:space="preserve"
             filename="pango/pango-layout.h"
             line="71">wrap lines at word boundaries, but fall back to
  character boundaries if there is not enough space for a full word.</doc>
      </member>
    </enumeration>
    <function name="attr_allow_breaks_new"
              c:identifier="pango_attr_allow_breaks_new"
              version="1.44">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1287">Create a new allow-breaks attribute.

If breaks are disabled, the range will be kept in a
single run, as far as possible.</doc>
      <source-position filename="pango/pango-attributes.h" line="589"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1296">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="allow_breaks" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1289">%TRUE if we line breaks are allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_background_alpha_new"
              c:identifier="pango_attr_background_alpha_new"
              version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1262">Create a new background alpha attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="587"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1268">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1264">the alpha value, between 1 and 65536</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_background_new"
              c:identifier="pango_attr_background_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="610">Create a new background color attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="527"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="618">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="612">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="613">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="614">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_baseline_shift_new"
              c:identifier="pango_attr_baseline_shift_new"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="926">Create a new baseline displacement attribute.

The effect of this attribute is to shift the baseline of a run,
relative to the run of preceding run.

&lt;picture&gt;
  &lt;source srcset="baseline-shift-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img alt="Baseline Shift" src="baseline-shift-light.png"&gt;
&lt;/picture&gt;</doc>
      <source-position filename="pango/pango-attributes.h" line="560"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="942">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="shift" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="928">either a `PangoBaselineShift` enumeration value or an absolute value (&gt; 1024)
  in Pango units, relative to the baseline of the previous run.
  Positive values displace the text upwards.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_break" c:identifier="pango_attr_break" version="1.50">
      <doc xml:space="preserve"
           filename="pango/break.c"
           line="2277">Apply customization from attributes to the breaks in @attrs.

The line breaks are assumed to have been produced
by [func@Pango.default_break] and [func@Pango.tailor_break].</doc>
      <source-position filename="pango/pango-break.h" line="135"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2279">text to break. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2280">length of text in bytes (may be -1 if @text is nul-terminated)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="attr_list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2281">`PangoAttrList` to apply</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2282">Byte offset of @text from the beginning of the paragraph</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2283">array with one `PangoLogAttr`
  per character in @text, plus one extra, to be filled in</doc>
          <array length="5" zero-terminated="0" c:type="PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </parameter>
        <parameter name="attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2285">length of @attrs array</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_fallback_new"
              c:identifier="pango_attr_fallback_new"
              version="1.4">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1017">Create a new font fallback attribute.

If fallback is disabled, characters will only be
used from the closest matching font on the system.
No fallback will be done to other fonts on the system
that might contain the characters in the text.</doc>
      <source-position filename="pango/pango-attributes.h" line="566"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1029">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="enable_fallback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1019">%TRUE if we should fall back on other fonts
  for characters the active font is missing</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_family_new" c:identifier="pango_attr_family_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="529">Create a new font family attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="521"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="535">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="family" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="531">the family or comma-separated list of families</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_font_desc_new"
              c:identifier="pango_attr_font_desc_new"
              moved-to="AttrFontDesc.new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="762">Create a new font description attribute.

This attribute allows setting family, style, weight, variant,
stretch, and size simultaneously.</doc>
      <source-position filename="pango/pango-attributes.h" line="543"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="771">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="desc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="764">the font description</doc>
          <type name="FontDescription" c:type="const PangoFontDescription*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_font_features_new"
              c:identifier="pango_attr_font_features_new"
              moved-to="AttrFontFeatures.new"
              version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1206">Create a new font features tag attribute.

You can use this attribute to select OpenType font features like small-caps,
alternative glyphs, ligatures, etc. for fonts that support them.</doc>
      <source-position filename="pango/pango-attributes.h" line="583"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1216">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="features" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1208">a string with OpenType font features, with the syntax of the [CSS
font-feature-settings property](https://www.w3.org/TR/css-fonts-4/#font-rend-desc)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_font_scale_new"
              c:identifier="pango_attr_font_scale_new"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="961">Create a new font scale attribute.

The effect of this attribute is to change the font size of a run,
relative to the size of preceding run.</doc>
      <source-position filename="pango/pango-attributes.h" line="562"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="972">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="scale" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="963">a `PangoFontScale` value, which indicates font size change relative
  to the size of the previous run.</doc>
          <type name="FontScale" c:type="PangoFontScale"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_foreground_alpha_new"
              c:identifier="pango_attr_foreground_alpha_new"
              version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1237">Create a new foreground alpha attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="585"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1243">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1239">the alpha value, between 1 and 65536</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_foreground_new"
              c:identifier="pango_attr_foreground_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="583">Create a new foreground color attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="523"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="591">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="585">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="586">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="587">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_gravity_hint_new"
              c:identifier="pango_attr_gravity_hint_new"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1181">Create a new gravity hint attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="581"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1187">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="hint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1183">the gravity hint value</doc>
          <type name="GravityHint" c:type="PangoGravityHint"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_gravity_new"
              c:identifier="pango_attr_gravity_new"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1154">Create a new gravity attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="579"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1160">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="gravity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1156">the gravity value; should not be %PANGO_GRAVITY_AUTO</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_insert_hyphens_new"
              c:identifier="pango_attr_insert_hyphens_new"
              version="1.44">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1315">Create a new insert-hyphens attribute.

Pango will insert hyphens when breaking lines in
the middle of a word. This attribute can be used
to suppress the hyphen.</doc>
      <source-position filename="pango/pango-attributes.h" line="597"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1325">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="insert_hyphens" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1317">%TRUE if hyphens should be inserted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_language_new"
              c:identifier="pango_attr_language_new"
              moved-to="AttrLanguage.new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="554">Create a new language tag attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="519"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="560">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="language" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="556">language tag</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_letter_spacing_new"
              c:identifier="pango_attr_letter_spacing_new"
              version="1.6">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1048">Create a new letter-spacing attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="568"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1055">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="letter_spacing" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1050">amount of extra space to add between
  graphemes of the text, in Pango units</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_line_height_new"
              c:identifier="pango_attr_line_height_new"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1481">Modify the height of logical line extents by a factor.

This affects the values returned by
[method@Pango.LayoutLine.get_extents],
[method@Pango.LayoutLine.get_pixel_extents] and
[method@Pango.LayoutIter.get_line_extents].</doc>
      <source-position filename="pango/pango-attributes.h" line="607"/>
      <return-value transfer-ownership="full">
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="factor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1483">the scaling factor to apply to the logical height</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_line_height_new_absolute"
              c:identifier="pango_attr_line_height_new_absolute"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1508">Override the height of logical line extents to be @height.

This affects the values returned by
[method@Pango.LayoutLine.get_extents],
[method@Pango.LayoutLine.get_pixel_extents] and
[method@Pango.LayoutIter.get_line_extents].</doc>
      <source-position filename="pango/pango-attributes.h" line="609"/>
      <return-value transfer-ownership="full">
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1510">the line height, in %PANGO_SCALE-ths of a point</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_list_from_string"
              c:identifier="pango_attr_list_from_string"
              moved-to="AttrList.from_string"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="2801">Deserializes a `PangoAttrList` from a string.

This is the counterpart to [method@Pango.AttrList.to_string].
See that functions for details about the format.</doc>
      <source-position filename="pango/pango-attributes.h" line="713"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="2810">a new `PangoAttrList`</doc>
        <type name="AttrList" c:type="PangoAttrList*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="2803">a string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_overline_color_new"
              c:identifier="pango_attr_overline_color_new"
              version="1.46">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1449">Create a new overline color attribute.

This attribute modifies the color of overlines.
If not set, overlines will use the foreground color.</doc>
      <source-position filename="pango/pango-attributes.h" line="601"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1460">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1451">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1452">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1453">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_overline_new"
              c:identifier="pango_attr_overline_new"
              version="1.46">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1424">Create a new overline-style attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="599"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1430">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="overline" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1426">the overline style</doc>
          <type name="Overline" c:type="PangoOverline"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_rise_new" c:identifier="pango_attr_rise_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="902">Create a new baseline displacement attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="558"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="909">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="rise" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="904">the amount that the text should be displaced vertically,
  in Pango units. Positive values displace the text upwards.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_scale_new" c:identifier="pango_attr_scale_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="991">Create a new font size scale attribute.

The base font for the affected text will have
its size multiplied by @scale_factor.</doc>
      <source-position filename="pango/pango-attributes.h" line="564"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1000">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="scale_factor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="993">factor to scale the font</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_sentence_new"
              c:identifier="pango_attr_sentence_new"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1397">Marks the range of the attribute as a single sentence.

Note that this may require adjustments to word and
sentence classification around the range.</doc>
      <source-position filename="pango/pango-attributes.h" line="594"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1405">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
    </function>
    <function name="attr_shape_new"
              c:identifier="pango_attr_shape_new"
              moved-to="AttrShape.new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1127">Create a new shape attribute.

A shape is used to impose a particular ink and logical
rectangle on the result of shaping a particular glyph.
This might be used, for instance, for embedding a picture
or a widget inside a `PangoLayout`.</doc>
      <source-position filename="pango/pango-attributes.h" line="570"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1139">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="ink_rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1129">ink rectangle to assign to each character</doc>
          <type name="Rectangle" c:type="const PangoRectangle*"/>
        </parameter>
        <parameter name="logical_rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1130">logical rectangle to assign to each character</doc>
          <type name="Rectangle" c:type="const PangoRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_shape_new_with_data"
              c:identifier="pango_attr_shape_new_with_data"
              moved-to="AttrShape.new_with_data"
              version="1.8">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1074">Creates a new shape attribute.

Like [func@Pango.AttrShape.new], but a user data pointer
is also provided; this pointer can be accessed when later
rendering the glyph.</doc>
      <source-position filename="pango/pango-attributes.h" line="573"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1091">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="ink_rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1076">ink rectangle to assign to each character</doc>
          <type name="Rectangle" c:type="const PangoRectangle*"/>
        </parameter>
        <parameter name="logical_rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1077">logical rectangle to assign to each character</doc>
          <type name="Rectangle" c:type="const PangoRectangle*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1078">user data pointer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="copy_func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified"
                   destroy="4">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1079">function to copy @data when the
  attribute is copied. If %NULL, @data is simply copied
  as a pointer</doc>
          <type name="AttrDataCopyFunc" c:type="PangoAttrDataCopyFunc"/>
        </parameter>
        <parameter name="destroy_func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1082">function to free @data when the
  attribute is freed</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_show_new"
              c:identifier="pango_attr_show_new"
              version="1.44">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1344">Create a new attribute that influences how invisible
characters are rendered.</doc>
      <source-position filename="pango/pango-attributes.h" line="605"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1351">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1346">`PangoShowFlags` to apply</doc>
          <type name="ShowFlags" c:type="PangoShowFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_size_new"
              c:identifier="pango_attr_size_new"
              moved-to="AttrSize.new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="637">Create a new font-size attribute in fractional points.</doc>
      <source-position filename="pango/pango-attributes.h" line="531"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="643">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="639">the font size, in %PANGO_SCALE-ths of a point</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_size_new_absolute"
              c:identifier="pango_attr_size_new_absolute"
              moved-to="AttrSize.new_absolute"
              version="1.8">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="653">Create a new font-size attribute in device units.</doc>
      <source-position filename="pango/pango-attributes.h" line="533"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="659">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="655">the font size, in %PANGO_SCALE-ths of a device unit</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_stretch_new" c:identifier="pango_attr_stretch_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="739">Create a new font stretch attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="541"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="745">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="stretch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="741">the stretch</doc>
          <type name="Stretch" c:type="PangoStretch"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_strikethrough_color_new"
              c:identifier="pango_attr_strikethrough_color_new"
              version="1.8">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="870">Create a new strikethrough color attribute.

This attribute modifies the color of strikethrough lines.
If not set, strikethrough lines will use the foreground color.</doc>
      <source-position filename="pango/pango-attributes.h" line="554"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="881">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="872">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="873">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="874">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_strikethrough_new"
              c:identifier="pango_attr_strikethrough_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="847">Create a new strike-through attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="552"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="853">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="strikethrough" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="849">%TRUE if the text should be struck-through</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_style_new" c:identifier="pango_attr_style_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="671">Create a new font slant style attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="535"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="677">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="673">the slant style</doc>
          <type name="Style" c:type="PangoStyle"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_text_transform_new"
              c:identifier="pango_attr_text_transform_new"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1534">Create a new attribute that influences how characters
are transformed during shaping.</doc>
      <source-position filename="pango/pango-attributes.h" line="611"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1541">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="transform" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="1536">`PangoTextTransform` to apply</doc>
          <type name="TextTransform" c:type="PangoTextTransform"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_type_get_name"
              c:identifier="pango_attr_type_get_name"
              moved-to="AttrType.get_name"
              version="1.22">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="69">Fetches the attribute type name.

The attribute type name is the string passed in
when registering the type using
[func@Pango.AttrType.register].

The returned value is an interned string (see
g_intern_string() for what that means) that should
not be modified or freed.</doc>
      <source-position filename="pango/pango-attributes.h" line="506"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="83">the type ID name (which
  may be %NULL), or %NULL if @type is a built-in Pango
  attribute type or invalid.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="71">an attribute type ID to fetch the name for</doc>
          <type name="AttrType" c:type="PangoAttrType"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_type_register"
              c:identifier="pango_attr_type_register"
              moved-to="AttrType.register">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="35">Allocate a new attribute type ID.

The attribute type name can be accessed later
by using [func@Pango.AttrType.get_name].</doc>
      <source-position filename="pango/pango-attributes.h" line="504"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="44">the new type ID.</doc>
        <type name="AttrType" c:type="PangoAttrType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="37">an identifier for the type</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_underline_color_new"
              c:identifier="pango_attr_underline_color_new"
              version="1.8">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="815">Create a new underline color attribute.

This attribute modifies the color of underlines.
If not set, underlines will use the foreground color.</doc>
      <source-position filename="pango/pango-attributes.h" line="548"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="826">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="817">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="818">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="819">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_underline_new"
              c:identifier="pango_attr_underline_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="792">Create a new underline-style attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="546"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="798">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="underline" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="794">the underline style</doc>
          <type name="Underline" c:type="PangoUnderline"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_variant_new" c:identifier="pango_attr_variant_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="717">Create a new font variant attribute (normal or small caps).</doc>
      <source-position filename="pango/pango-attributes.h" line="539"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="723">the newly allocated `PangoAttribute`,
  which should be freed with [method@Pango.Attribute.destroy].</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="variant" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="719">the variant</doc>
          <type name="Variant" c:type="PangoVariant"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_weight_new" c:identifier="pango_attr_weight_new">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="694">Create a new font weight attribute.</doc>
      <source-position filename="pango/pango-attributes.h" line="537"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="700">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="weight" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-attributes.c"
               line="696">the weight</doc>
          <type name="Weight" c:type="PangoWeight"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_word_new"
              c:identifier="pango_attr_word_new"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-attributes.c"
           line="1370">Marks the range of the attribute as a single word.

Note that this may require adjustments to word and
sentence classification around the range.</doc>
      <source-position filename="pango/pango-attributes.h" line="592"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-attributes.c"
             line="1378">the newly allocated
  `PangoAttribute`, which should be freed with
  [method@Pango.Attribute.destroy]</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
    </function>
    <function name="bidi_type_for_unichar"
              c:identifier="pango_bidi_type_for_unichar"
              moved-to="BidiType.for_unichar"
              version="1.22">
      <doc xml:space="preserve"
           filename="pango/pango-bidi-type.c"
           line="34">Determines the bidirectional type of a character.

The bidirectional type is specified in the Unicode Character Database.

A simplified version of this function is available as [func@unichar_direction].</doc>
      <source-position filename="pango/pango-bidi-type.h" line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.c"
             line="44">the bidirectional character type, as used in the
Unicode bidirectional algorithm.</doc>
        <type name="BidiType" c:type="PangoBidiType"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-bidi-type.c"
               line="36">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="break"
              c:identifier="pango_break"
              deprecated="1"
              deprecated-version="1.44">
      <doc xml:space="preserve"
           filename="pango/break.c"
           line="2199">Determines possible line, word, and character breaks
for a string of Unicode text with a single analysis.

For most purposes you may want to use [func@Pango.get_log_attrs].</doc>
      <doc-deprecated xml:space="preserve">Use [func@Pango.default_break],
  [func@Pango.tailor_break] and [func@Pango.attr_break].</doc-deprecated>
      <source-position filename="pango/pango-break.h" line="105"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2201">the text to process. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2202">length of @text in bytes (may be -1 if @text is nul-terminated)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2203">`PangoAnalysis` structure for @text</doc>
          <type name="Analysis" c:type="PangoAnalysis*"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2204">an array to store character information in</doc>
          <array length="4" zero-terminated="0" c:type="PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </parameter>
        <parameter name="attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2205">size of the array passed as @attrs</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="default_break" c:identifier="pango_default_break">
      <doc xml:space="preserve"
           filename="pango/break.c"
           line="2165">This is the default break algorithm.

It applies rules from the [Unicode Line Breaking Algorithm](http://www.unicode.org/unicode/reports/tr14/)
without language-specific tailoring, therefore the @analyis argument is unused
and can be %NULL.

See [func@Pango.tailor_break] for language-specific breaks.

See [func@Pango.attr_break] for attribute-based customization.</doc>
      <source-position filename="pango/pango-break.h" line="120"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2167">text to break. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2168">length of text in bytes (may be -1 if @text is nul-terminated)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2169">a `PangoAnalysis` structure for the @text</doc>
          <type name="Analysis" c:type="PangoAnalysis*"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2170">logical attributes to fill in</doc>
          <type name="LogAttr" c:type="PangoLogAttr*"/>
        </parameter>
        <parameter name="attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2171">size of the array passed as @attrs</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="extents_to_pixels"
              c:identifier="pango_extents_to_pixels"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="1024">Converts extents from Pango units to device units.

The conversion is done by dividing by the %PANGO_SCALE factor and
performing rounding.

The @inclusive rectangle is converted by flooring the x/y coordinates
and extending width/height, such that the final rectangle completely
includes the original rectangle.

The @nearest rectangle is converted by rounding the coordinates
of the rectangle to the nearest device unit (pixel).

The rule to which argument to use is: if you want the resulting device-space
rectangle to completely contain the original rectangle, pass it in as
@inclusive. If you want two touching-but-not-overlapping rectangles stay
touching-but-not-overlapping after rounding to device units, pass them in
as @nearest.</doc>
      <source-position filename="pango/pango-types.h" line="231"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="inclusive"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="1026">rectangle to round to pixels inclusively</doc>
          <type name="Rectangle" c:type="PangoRectangle*"/>
        </parameter>
        <parameter name="nearest"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="1027">rectangle to round to nearest pixels</doc>
          <type name="Rectangle" c:type="PangoRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="find_base_dir"
              c:identifier="pango_find_base_dir"
              version="1.4">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="849">Searches a string the first character that has a strong
direction, according to the Unicode bidirectional algorithm.</doc>
      <source-position filename="pango/pango-bidi-type.h" line="107"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="857">The direction corresponding to the first strong character.
  If no such character is found, then %PANGO_DIRECTION_NEUTRAL is returned.</doc>
        <type name="Direction" c:type="PangoDirection"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="851">the text to process. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="852">length of @text in bytes (may be -1 if @text is nul-terminated)</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="find_paragraph_boundary"
              c:identifier="pango_find_paragraph_boundary">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="1154">Locates a paragraph boundary in @text.

A boundary is caused by delimiter characters, such as
a newline, carriage return, carriage return-newline pair,
or Unicode paragraph separator character.

The index of the run of delimiters is returned in
@paragraph_delimiter_index. The index of the start of the
next paragraph (index after all delimiters) is stored n
@next_paragraph_start.

If no delimiters are found, both @paragraph_delimiter_index
and @next_paragraph_start are filled with the length of @text
(an index one off the end).</doc>
      <source-position filename="pango/pango-utils.h" line="103"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="1156">UTF-8 text</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="1157">length of @text in bytes, or -1 if nul-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="paragraph_delimiter_index"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="1158">return location for index of
  delimiter</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="next_paragraph_start"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="1160">return location for start of next
  paragraph</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_description_from_string"
              c:identifier="pango_font_description_from_string"
              moved-to="FontDescription.from_string">
      <doc xml:space="preserve"
           filename="pango/fonts.c"
           line="1252">Creates a new font description from a string representation.

The string must have the form

    "\[FAMILY-LIST] \[STYLE-OPTIONS] \[SIZE] \[VARIATIONS]",

where FAMILY-LIST is a comma-separated list of families optionally
terminated by a comma, STYLE_OPTIONS is a whitespace-separated list
of words where each word describes one of style, variant, weight,
stretch, or gravity, and SIZE is a decimal number (size in points)
or optionally followed by the unit modifier "px" for absolute size.
VARIATIONS is a comma-separated list of font variation
specifications of the form "\@axis=value" (the = sign is optional).

The following words are understood as styles:
"Normal", "Roman", "Oblique", "Italic".

The following words are understood as variants:
"Small-Caps", "All-Small-Caps", "Petite-Caps", "All-Petite-Caps",
"Unicase", "Title-Caps".

The following words are understood as weights:
"Thin", "Ultra-Light", "Extra-Light", "Light", "Semi-Light",
"Demi-Light", "Book", "Regular", "Medium", "Semi-Bold", "Demi-Bold",
"Bold", "Ultra-Bold", "Extra-Bold", "Heavy", "Black", "Ultra-Black",
"Extra-Black".

The following words are understood as stretch values:
"Ultra-Condensed", "Extra-Condensed", "Condensed", "Semi-Condensed",
"Semi-Expanded", "Expanded", "Extra-Expanded", "Ultra-Expanded".

The following words are understood as gravity values:
"Not-Rotated", "South", "Upside-Down", "North", "Rotated-Left",
"East", "Rotated-Right", "West".

Any one of the options may be absent. If FAMILY-LIST is absent, then
the family_name field of the resulting font description will be
initialized to %NULL. If STYLE-OPTIONS is missing, then all style
options will be set to the default values. If SIZE is missing, the
size in the resulting font description will be set to 0.

A typical example:

    "Cantarell Italic Light 15 \@wght=200"</doc>
      <source-position filename="pango/pango-font.h" line="340"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1301">a new `PangoFontDescription`.</doc>
        <type name="FontDescription" c:type="PangoFontDescription*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1254">string representation of a font description.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_log_attrs" c:identifier="pango_get_log_attrs">
      <doc xml:space="preserve"
           filename="pango/break.c"
           line="2323">Computes a `PangoLogAttr` for each character in @text.

The @attrs array must have one `PangoLogAttr` for
each position in @text; if @text contains N characters,
it has N+1 positions, including the last position at the
end of the text. @text should be an entire paragraph;
logical attributes can't be computed without context
(for example you need to see spaces on either side of
a word to know the word is a word).</doc>
      <source-position filename="pango/pango-break.h" line="112"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2325">text to process. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2326">length in bytes of @text</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2327">embedding level, or -1 if unknown</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="language" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2328">language tag</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2329">array with one `PangoLogAttr`
  per character in @text, plus one extra, to be filled in</doc>
          <array length="5" zero-terminated="0" c:type="PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </parameter>
        <parameter name="attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2331">length of @attrs array</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_mirror_char"
              c:identifier="pango_get_mirror_char"
              deprecated="1"
              deprecated-version="1.30">
      <doc xml:space="preserve"
           filename="pango/pango-bidi-type.c"
           line="303">Returns the mirrored character of a Unicode character.

Mirror characters are determined by the Unicode mirrored property.</doc>
      <doc-deprecated xml:space="preserve">Use [func@GLib.unichar_get_mirror_char] instead;
  the docs for that function provide full details.</doc-deprecated>
      <source-position filename="pango/pango-bidi-type.h" line="111"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.c"
             line="312">%TRUE if @ch has a mirrored character and @mirrored_ch is
filled in, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-bidi-type.c"
               line="305">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
        <parameter name="mirrored_ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-bidi-type.c"
               line="306">location to store the mirrored character</doc>
          <type name="gunichar" c:type="gunichar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gravity_get_for_matrix"
              c:identifier="pango_gravity_get_for_matrix"
              moved-to="Gravity.get_for_matrix"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-gravity.c"
           line="62">Finds the gravity that best matches the rotation component
in a `PangoMatrix`.</doc>
      <source-position filename="pango/pango-gravity.h" line="122"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.c"
             line="69">the gravity of @matrix, which will never be
%PANGO_GRAVITY_AUTO, or %PANGO_GRAVITY_SOUTH if @matrix is %NULL</doc>
        <type name="Gravity" c:type="PangoGravity"/>
      </return-value>
      <parameters>
        <parameter name="matrix"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="64">a `PangoMatrix`</doc>
          <type name="Matrix" c:type="const PangoMatrix*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gravity_get_for_script"
              c:identifier="pango_gravity_get_for_script"
              moved-to="Gravity.get_for_script"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-gravity.c"
           line="351">Returns the gravity to use in laying out a `PangoItem`.

The gravity is determined based on the script, base gravity, and hint.

If @base_gravity is %PANGO_GRAVITY_AUTO, it is first replaced with the
preferred gravity of @script.  To get the preferred gravity of a script,
pass %PANGO_GRAVITY_AUTO and %PANGO_GRAVITY_HINT_STRONG in.</doc>
      <source-position filename="pango/pango-gravity.h" line="124"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.c"
             line="365">resolved gravity suitable to use for a run of text
with @script</doc>
        <type name="Gravity" c:type="PangoGravity"/>
      </return-value>
      <parameters>
        <parameter name="script" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="353">`PangoScript` to query</doc>
          <type name="Script" c:type="PangoScript"/>
        </parameter>
        <parameter name="base_gravity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="354">base gravity of the paragraph</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </parameter>
        <parameter name="hint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="355">orientation hint</doc>
          <type name="GravityHint" c:type="PangoGravityHint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gravity_get_for_script_and_width"
              c:identifier="pango_gravity_get_for_script_and_width"
              moved-to="Gravity.get_for_script_and_width"
              version="1.26">
      <doc xml:space="preserve"
           filename="pango/pango-gravity.c"
           line="381">Returns the gravity to use in laying out a single character
or `PangoItem`.

The gravity is determined based on the script, East Asian width,
base gravity, and hint,

This function is similar to [func@Pango.Gravity.get_for_script] except
that this function makes a distinction between narrow/half-width and
wide/full-width characters also. Wide/full-width characters always
stand *upright*, that is, they always take the base gravity,
whereas narrow/full-width characters are always rotated in vertical
context.

If @base_gravity is %PANGO_GRAVITY_AUTO, it is first replaced with the
preferred gravity of @script.</doc>
      <source-position filename="pango/pango-gravity.h" line="128"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.c"
             line="404">resolved gravity suitable to use for a run of text
with @script and @wide.</doc>
        <type name="Gravity" c:type="PangoGravity"/>
      </return-value>
      <parameters>
        <parameter name="script" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="383">`PangoScript` to query</doc>
          <type name="Script" c:type="PangoScript"/>
        </parameter>
        <parameter name="wide" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="384">%TRUE for wide characters as returned by g_unichar_iswide()</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="base_gravity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="385">base gravity of the paragraph</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </parameter>
        <parameter name="hint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="386">orientation hint</doc>
          <type name="GravityHint" c:type="PangoGravityHint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gravity_to_rotation"
              c:identifier="pango_gravity_to_rotation"
              moved-to="Gravity.to_rotation"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-gravity.c"
           line="28">Converts a `PangoGravity` value to its natural rotation in radians.

Note that [method@Pango.Matrix.rotate] takes angle in degrees, not radians.
So, to call [method@Pango.Matrix,rotate] with the output of this function
you should multiply it by (180. / G_PI).</doc>
      <source-position filename="pango/pango-gravity.h" line="120"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-gravity.c"
             line="38">the rotation value corresponding to @gravity.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="gravity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-gravity.c"
               line="30">gravity to query, should not be %PANGO_GRAVITY_AUTO</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_zero_width"
              c:identifier="pango_is_zero_width"
              version="1.10">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="889">Checks if a character that should not be normally rendered.

This includes all Unicode characters with "ZERO WIDTH" in their name,
as well as *bidi* formatting characters, and a few other ones.

This is totally different from [func@GLib.unichar_iszerowidth] and is at best misnamed.</doc>
      <source-position filename="pango/pango-utils.h" line="100"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="900">%TRUE if @ch is a zero-width character, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="891">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="itemize" c:identifier="pango_itemize">
      <doc xml:space="preserve"
           filename="pango/itemize.c"
           line="1642">Breaks a piece of text into segments with consistent directional
level and font.

Each byte of @text will be contained in exactly one of the items in the
returned list; the generated list of items will be in logical order (the
start offsets of the items are ascending).

@cached_iter should be an iterator over @attrs currently positioned
at a range before or containing @start_index; @cached_iter will be
advanced to the range covering the position just after
@start_index + @length. (i.e. if itemizing in a loop, just keep passing
in the same @cached_iter).</doc>
      <source-position filename="pango/pango-item.h" line="146"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/itemize.c"
             line="1666">a `GList` of
  [struct@Pango.Item] structures. The items should be freed using
  [method@Pango.Item.free] in combination with [func@GLib.List.free_full].</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Item"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1644">a structure holding information that affects
  the itemization process.</doc>
          <type name="Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1646">the text to itemize. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="start_index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1647">first byte in @text to process</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1648">the number of bytes (not characters) to process
  after @start_index. This must be &gt;= 0.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1650">the set of attributes that apply to @text.</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="cached_iter"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1651">Cached attribute iterator</doc>
          <type name="AttrIterator" c:type="PangoAttrIterator*"/>
        </parameter>
      </parameters>
    </function>
    <function name="itemize_with_base_dir"
              c:identifier="pango_itemize_with_base_dir"
              version="1.4">
      <doc xml:space="preserve"
           filename="pango/itemize.c"
           line="1594">Like `pango_itemize()`, but with an explicitly specified base direction.

The base direction is used when computing bidirectional levels.
[func@itemize] gets the base direction from the `PangoContext`
(see [method@Pango.Context.set_base_dir]).</doc>
      <source-position filename="pango/pango-item.h" line="154"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/itemize.c"
             line="1612">a `GList` of
  [struct@Pango.Item] structures. The items should be freed using
  [method@Pango.Item.free] probably in combination with [func@GLib.List.free_full].</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Item"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1596">a structure holding information that affects
  the itemization process.</doc>
          <type name="Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="base_dir" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1598">base direction to use for bidirectional processing</doc>
          <type name="Direction" c:type="PangoDirection"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1599">the text to itemize.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="start_index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1600">first byte in @text to process</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1601">the number of bytes (not characters) to process
  after @start_index. This must be &gt;= 0.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1603">the set of attributes that apply to @text.</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="cached_iter"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/itemize.c"
               line="1604">Cached attribute iterator</doc>
          <type name="AttrIterator" c:type="PangoAttrIterator*"/>
        </parameter>
      </parameters>
    </function>
    <function name="language_from_string"
              c:identifier="pango_language_from_string"
              moved-to="Language.from_string">
      <doc xml:space="preserve"
           filename="pango/pango-language.c"
           line="310">Convert a language tag to a `PangoLanguage`.

The language tag must be in a RFC-3066 format. `PangoLanguage` pointers
can be efficiently copied (copy the pointer) and compared with other
language tags (compare the pointer.)

This function first canonicalizes the string by converting it to
lowercase, mapping '_' to '-', and stripping all characters other
than letters and '-'.

Use [func@Pango.Language.get_default] if you want to get the
`PangoLanguage` for the current locale of the process.</doc>
      <source-position filename="pango/pango-language.h" line="46"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="327">a `PangoLanguage`</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </return-value>
      <parameters>
        <parameter name="language"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="312">a string representing a language tag</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="language_get_default"
              c:identifier="pango_language_get_default"
              moved-to="Language.get_default"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-language.c"
           line="251">Returns the `PangoLanguage` for the current locale of the process.

On Unix systems, this is the return value is derived from
`setlocale (LC_CTYPE, NULL)`, and the user can
affect this through the environment variables LC_ALL, LC_CTYPE or
LANG (checked in that order). The locale string typically is in
the form lang_COUNTRY, where lang is an ISO-639 language code, and
COUNTRY is an ISO-3166 country code. For instance, sv_FI for
Swedish as written in Finland or pt_BR for Portuguese as written in
Brazil.

On Windows, the C library does not use any such environment
variables, and setting them won't affect the behavior of functions
like ctime(). The user sets the locale through the Regional Options
in the Control Panel. The C library (in the setlocale() function)
does not use country and language codes, but country and language
names spelled out in English.
However, this function does check the above environment
variables, and does return a Unix-style locale string based on
either said environment variables or the thread's current locale.

Your application should call `setlocale(LC_ALL, "")` for the user
settings to take effect. GTK does this in its initialization
functions automatically (by calling gtk_set_locale()).
See the setlocale() manpage for more details.

Note that the default language can change over the life of an application.

Also note that this function will not do the right thing if you
use per-thread locales with uselocale(). In that case, you should
just call pango_language_from_string() yourself.</doc>
      <source-position filename="pango/pango-language.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="286">the default language as a `PangoLanguage`</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </return-value>
    </function>
    <function name="language_get_preferred"
              c:identifier="pango_language_get_preferred"
              moved-to="Language.get_preferred"
              version="1.48">
      <doc xml:space="preserve"
           filename="pango/pango-language.c"
           line="840">Returns the list of languages that the user prefers.

The list is specified by the `PANGO_LANGUAGE` or `LANGUAGE`
environment variables, in order of preference. Note that this
list does not necessarily include the language returned by
[func@Pango.Language.get_default].

When choosing language-specific resources, such as the sample
text returned by [method@Pango.Language.get_sample_string],
you should first try the default language, followed by the
languages returned by this function.</doc>
      <source-position filename="pango/pango-language.h" line="43"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="855">a %NULL-terminated array
  of `PangoLanguage`*</doc>
        <array c:type="PangoLanguage**">
          <type name="Language" c:type="PangoLanguage*"/>
        </array>
      </return-value>
    </function>
    <function name="layout_deserialize_error_quark"
              c:identifier="pango_layout_deserialize_error_quark"
              moved-to="LayoutDeserializeError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="log2vis_get_embedding_levels"
              c:identifier="pango_log2vis_get_embedding_levels"
              version="1.4">
      <doc xml:space="preserve"
           filename="pango/pango-bidi-type.c"
           line="91">Return the bidirectional embedding levels of the input paragraph.

The bidirectional embedding levels are defined by the [Unicode Bidirectional
Algorithm](http://www.unicode.org/reports/tr9/).

If the input base direction is a weak direction, the direction of the
characters in the text will determine the final resolved direction.</doc>
      <source-position filename="pango/pango-utils.h" line="92"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.c"
             line="106">a newly allocated array of embedding levels, one item per
  character (not byte), that should be freed using [func@GLib.free].</doc>
        <type name="guint8" c:type="guint8*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-bidi-type.c"
               line="93">the text to itemize.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-bidi-type.c"
               line="94">the number of bytes (not characters) to process, or -1
  if @text is nul-terminated and the length should be calculated.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="pbase_dir" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-bidi-type.c"
               line="96">input base direction, and output resolved direction.</doc>
          <type name="Direction" c:type="PangoDirection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="markup_parser_finish"
              c:identifier="pango_markup_parser_finish"
              version="1.31.0"
              throws="1">
      <doc xml:space="preserve"
           filename="pango/pango-markup.c"
           line="719">Finishes parsing markup.

After feeding a Pango markup parser some data with [method@GLib.MarkupParseContext.parse],
use this function to get the list of attributes and text out of the
markup. This function will not free @context, use [method@GLib.MarkupParseContext.free]
to do so.</doc>
      <source-position filename="pango/pango-markup.h" line="34"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-markup.c"
             line="734">%FALSE if @error is set, otherwise %TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="721">A valid parse context that was returned from [func@markup_parser_new]</doc>
          <type name="GLib.MarkupParseContext" c:type="GMarkupParseContext*"/>
        </parameter>
        <parameter name="attr_list"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="722">address of return location for a `PangoAttrList`</doc>
          <type name="AttrList" c:type="PangoAttrList**"/>
        </parameter>
        <parameter name="text"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="723">address of return location for text with tags stripped</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="accel_char"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="724">address of return location for accelerator char</doc>
          <type name="gunichar" c:type="gunichar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="markup_parser_new"
              c:identifier="pango_markup_parser_new"
              version="1.31.0">
      <doc xml:space="preserve"
           filename="pango/pango-markup.c"
           line="681">Incrementally parses marked-up text to create a plain-text string
and an attribute list.

See the [Pango Markup](pango_markup.html) docs for details about the
supported markup.

If @accel_marker is nonzero, the given character will mark the
character following it as an accelerator. For example, @accel_marker
might be an ampersand or underscore. All characters marked
as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
and the first character so marked will be returned in @accel_char,
when calling [func@markup_parser_finish]. Two @accel_marker characters
following each other produce a single literal @accel_marker character.

To feed markup to the parser, use [method@GLib.MarkupParseContext.parse]
on the returned [struct@GLib.MarkupParseContext]. When done with feeding markup
to the parser, use [func@markup_parser_finish] to get the data out
of it, and then use [method@GLib.MarkupParseContext.free] to free it.

This function is designed for applications that read Pango markup
from streams. To simply parse a string containing Pango markup,
the [func@Pango.parse_markup] API is recommended instead.</doc>
      <source-position filename="pango/pango-markup.h" line="31"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-markup.c"
             line="708">a `GMarkupParseContext` that should be
destroyed with [method@GLib.MarkupParseContext.free].</doc>
        <type name="GLib.MarkupParseContext" c:type="GMarkupParseContext*"/>
      </return-value>
      <parameters>
        <parameter name="accel_marker" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="683">character that precedes an accelerator, or 0 for none</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_enum"
              c:identifier="pango_parse_enum"
              version="1.16"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="673">Parses an enum type and stores the result in @value.

If @str does not match the nick name of any of the possible values
for the enum and is not an integer, %FALSE is returned, a warning
is issued if @warn is %TRUE, and a string representing the list of
possible values is stored in @possible_values. The list is
slash-separated, eg. "none/start/middle/end".

If failed and @possible_values is not %NULL, returned string should
be freed using g_free().</doc>
      <source-position filename="pango/pango-utils.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="693">%TRUE if @str was successfully parsed</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="675">enum type to parse, eg. %PANGO_TYPE_ELLIPSIZE_MODE</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="str"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="676">string to parse</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="677">integer to store the result in</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="678">if %TRUE, issue a g_warning() on bad input</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="possible_values"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="679">place to store list of possible
  values on failure</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_markup" c:identifier="pango_parse_markup" throws="1">
      <doc xml:space="preserve"
           filename="pango/pango-markup.c"
           line="602">Parses marked-up text to create a plain-text string and an attribute list.

See the [Pango Markup](pango_markup.html) docs for details about the
supported markup.

If @accel_marker is nonzero, the given character will mark the
character following it as an accelerator. For example, @accel_marker
might be an ampersand or underscore. All characters marked
as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
and the first character so marked will be returned in @accel_char.
Two @accel_marker characters following each other produce a single
literal @accel_marker character.

To parse a stream of pango markup incrementally, use [func@markup_parser_new].

If any error happens, none of the output arguments are touched except
for @error.</doc>
      <source-position filename="pango/pango-markup.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-markup.c"
             line="630">%FALSE if @error is set, otherwise %TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="markup_text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="604">markup to parse (see the [Pango Markup](pango_markup.html) docs)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="605">length of @markup_text, or -1 if nul-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="accel_marker" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="606">character that precedes an accelerator, or 0 for none</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
        <parameter name="attr_list"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="607">address of return location for a `PangoAttrList`</doc>
          <type name="AttrList" c:type="PangoAttrList**"/>
        </parameter>
        <parameter name="text"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="608">address of return location for text with tags stripped</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="accel_char"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-markup.c"
               line="609">address of return location for accelerator char</doc>
          <type name="gunichar" c:type="gunichar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_stretch" c:identifier="pango_parse_stretch">
      <doc xml:space="preserve"
           filename="pango/fonts.c"
           line="1667">Parses a font stretch.

The allowed values are
"ultra_condensed", "extra_condensed", "condensed",
"semi_condensed", "normal", "semi_expanded", "expanded",
"extra_expanded" and "ultra_expanded". Case variations are
ignored and the '_' characters may be omitted.</doc>
      <source-position filename="pango/pango-utils.h" line="78"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1681">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1669">a string to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="stretch"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1670">a `PangoStretch` to store the result in.</doc>
          <type name="Stretch" c:type="PangoStretch*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1671">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_style" c:identifier="pango_parse_style">
      <doc xml:space="preserve"
           filename="pango/fonts.c"
           line="1601">Parses a font style.

The allowed values are "normal", "italic" and "oblique", case
variations being
ignored.</doc>
      <source-position filename="pango/pango-utils.h" line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1613">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1603">a string to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="style"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1604">a `PangoStyle` to store the result in.</doc>
          <type name="Style" c:type="PangoStyle*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1605">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_variant" c:identifier="pango_parse_variant">
      <doc xml:space="preserve"
           filename="pango/fonts.c"
           line="1623">Parses a font variant.

The allowed values are "normal", "small-caps", "all-small-caps",
"petite-caps", "all-petite-caps", "unicase" and "title-caps",
case variations being ignored.</doc>
      <source-position filename="pango/pango-utils.h" line="70"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1635">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1625">a string to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="variant"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1626">a `PangoVariant` to store the result in.</doc>
          <type name="Variant" c:type="PangoVariant*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1627">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_weight" c:identifier="pango_parse_weight">
      <doc xml:space="preserve"
           filename="pango/fonts.c"
           line="1645">Parses a font weight.

The allowed values are "heavy",
"ultrabold", "bold", "normal", "light", "ultraleight"
and integers. Case variations are ignored.</doc>
      <source-position filename="pango/pango-utils.h" line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/fonts.c"
             line="1657">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1647">a string to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="weight"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1648">a `PangoWeight` to store the result in.</doc>
          <type name="Weight" c:type="PangoWeight*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/fonts.c"
               line="1649">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="quantize_line_geometry"
              c:identifier="pango_quantize_line_geometry"
              version="1.12">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="949">Quantizes the thickness and position of a line to whole device pixels.

This is typically used for underline or strikethrough. The purpose of
this function is to avoid such lines looking blurry.

Care is taken to make sure @thickness is at least one pixel when this
function returns, but returned @position may become zero as a result
of rounding.</doc>
      <source-position filename="pango/pango-utils.h" line="86"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="thickness"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="951">pointer to the thickness of a line, in Pango units</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="position"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="952">corresponding position</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="read_line"
              c:identifier="pango_read_line"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="238">Reads an entire line from a file into a buffer.

Lines may be delimited with '\n', '\r', '\n\r', or '\r\n'. The delimiter
is not written into the buffer. Text after a '#' character is treated as
a comment and skipped. '\' can be used to escape a # character.
'\' proceeding a line delimiter combines adjacent lines. A '\' proceeding
any other character is ignored and written into the output buffer
unmodified.</doc>
      <source-position filename="pango/pango-utils.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="252">0 if the stream was already at an %EOF character,
  otherwise the number of lines read (this is useful for maintaining
  a line number counter which doesn't combine lines with '\')</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="stream"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="240">a stdio stream</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="241">`GString` buffer into which to write the result</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="reorder_items" c:identifier="pango_reorder_items">
      <doc xml:space="preserve"
           filename="pango/reorder-items.c"
           line="32">Reorder items from logical order to visual order.

The visual order is determined from the associated directional
levels of the items. The original list is unmodified.

(Please open a bug if you use this function.
 It is not a particularly convenient interface, and the code
 is duplicated elsewhere in Pango for that reason.)</doc>
      <source-position filename="pango/pango-item.h" line="141"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/reorder-items.c"
             line="46">a `GList`
  of `PangoItem` structures in visual order.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Item"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="items" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/reorder-items.c"
               line="34">a `GList` of `PangoItem`
  in logical order.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="scan_int"
              c:identifier="pango_scan_int"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="513">Scans an integer.

Leading white space is skipped.</doc>
      <source-position filename="pango/pango-utils.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="522">%FALSE if a parse error occurred</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pos"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="515">in/out string position</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
        <parameter name="out"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="516">an int into which to write the result</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="scan_string"
              c:identifier="pango_scan_string"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="420">Scans a string into a `GString` buffer.

The string may either be a sequence of non-white-space characters,
or a quoted string with '"'. Instead a quoted string, '\"' represents
a literal quote. Leading white space outside of quotes is skipped.</doc>
      <source-position filename="pango/pango-utils.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="431">%FALSE if a parse error occurred</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pos"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="422">in/out string position</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="423">a `GString` into which to write the result</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="scan_word"
              c:identifier="pango_scan_word"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="375">Scans a word into a `GString` buffer.

A word consists of [A-Za-z_] followed by zero or more
[A-Za-z_0-9]. Leading white space is skipped.</doc>
      <source-position filename="pango/pango-utils.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="385">%FALSE if a parse error occurred</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pos"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="377">in/out string position</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="378">a `GString` into which to write the result</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="script_for_unichar"
              c:identifier="pango_script_for_unichar"
              moved-to="Script.for_unichar"
              version="1.4"
              deprecated="1"
              deprecated-version="1.44.">
      <doc xml:space="preserve"
           filename="pango/pango-script.c"
           line="63">Looks up the script for a particular character.

The script of a character is defined by
[Unicode Standard Annex 24: Script names](http://www.unicode.org/reports/tr24/).

No check is made for @ch being a valid Unicode character; if you pass
in invalid character, the result is undefined.

Note that while the return type of this function is declared
as `PangoScript`, as of Pango 1.18, this function simply returns
the return value of [func@GLib.unichar_get_script]. Callers must be
prepared to handle unknown values.</doc>
      <doc-deprecated xml:space="preserve">Use g_unichar_get_script()</doc-deprecated>
      <source-position filename="pango/pango-script.h" line="310"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-script.c"
             line="80">the `PangoScript` for the character.</doc>
        <type name="Script" c:type="PangoScript"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-script.c"
               line="65">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="script_get_sample_language"
              c:identifier="pango_script_get_sample_language"
              moved-to="Script.get_sample_language"
              version="1.4">
      <doc xml:space="preserve"
           filename="pango/pango-language.c"
           line="869">Finds a language tag that is reasonably representative of @script.

The language will usually be the most widely spoken or used language
written in that script: for instance, the sample language for
%PANGO_SCRIPT_CYRILLIC is ru (Russian), the sample language for
%PANGO_SCRIPT_ARABIC is ar.

For some scripts, no sample language will be returned because
there is no language that is sufficiently representative. The
best example of this is %PANGO_SCRIPT_HAN, where various different
variants of written Chinese, Japanese, and Korean all use
significantly different sets of Han characters and forms
of shared characters. No sample language can be provided
for many historical scripts as well.

As of 1.18, this function checks the environment variables
`PANGO_LANGUAGE` and `LANGUAGE` (checked in that order) first.
If one of them is set, it is parsed as a list of language tags
separated by colons or other separators. This function
will return the first language in the parsed list that Pango
believes may use @script for writing. This last predicate
is tested using [method@Pango.Language.includes_script]. This can
be used to control Pango's font selection for non-primary
languages. For example, a `PANGO_LANGUAGE` enviroment variable
set to "en:fa" makes Pango choose fonts suitable for Persian (fa)
instead of Arabic (ar) when a segment of Arabic text is found
in an otherwise non-Arabic text. The same trick can be used to
choose a default language for %PANGO_SCRIPT_HAN when setting
context language is not feasible.</doc>
      <source-position filename="pango/pango-script.h" line="331"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="pango/pango-language.c"
             line="903">a `PangoLanguage` that is representative
  of the script</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </return-value>
      <parameters>
        <parameter name="script" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-language.c"
               line="871">a `PangoScript`</doc>
          <type name="Script" c:type="PangoScript"/>
        </parameter>
      </parameters>
    </function>
    <function name="shape" c:identifier="pango_shape">
      <doc xml:space="preserve"
           filename="pango/shape.c"
           line="795">Convert the characters in @text into glyphs.

Given a segment of text and the corresponding `PangoAnalysis` structure
returned from [func@Pango.itemize], convert the characters into glyphs. You
may also pass in only a substring of the item from [func@Pango.itemize].

It is recommended that you use [func@Pango.shape_full] instead, since
that API allows for shaping interaction happening across text item
boundaries.

Some aspects of hyphen insertion and text transformation (in particular,
capitalization) require log attrs, and thus can only be handled by
[func@Pango.shape_item].

Note that the extra attributes in the @analyis that is returned from
[func@Pango.itemize] have indices that are relative to the entire paragraph,
so you need to subtract the item offset from their indices before
calling [func@Pango.shape].</doc>
      <source-position filename="pango/pango-glyph.h" line="236"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="797">the text to process</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="798">the length (in bytes) of @text</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="799">`PangoAnalysis` structure from [func@Pango.itemize]</doc>
          <type name="Analysis" c:type="const PangoAnalysis*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="800">glyph string in which to store results</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shape_full" c:identifier="pango_shape_full" version="1.32">
      <doc xml:space="preserve"
           filename="pango/shape.c"
           line="830">Convert the characters in @text into glyphs.

Given a segment of text and the corresponding `PangoAnalysis` structure
returned from [func@Pango.itemize], convert the characters into glyphs.
You may also pass in only a substring of the item from [func@Pango.itemize].

This is similar to [func@Pango.shape], except it also can optionally take
the full paragraph text as input, which will then be used to perform
certain cross-item shaping interactions. If you have access to the broader
text of which @item_text is part of, provide the broader text as
@paragraph_text. If @paragraph_text is %NULL, item text is used instead.

Some aspects of hyphen insertion and text transformation (in particular,
capitalization) require log attrs, and thus can only be handled by
[func@Pango.shape_item].

Note that the extra attributes in the @analyis that is returned from
[func@Pango.itemize] have indices that are relative to the entire paragraph,
so you do not pass the full paragraph text as @paragraph_text, you need
to subtract the item offset from their indices before calling
[func@Pango.shape_full].</doc>
      <source-position filename="pango/pango-glyph.h" line="242"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="item_text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="832">valid UTF-8 text to shape.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="833">the length (in bytes) of @item_text. -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="paragraph_text"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="834">text of the paragraph (see details).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="paragraph_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="835">the length (in bytes) of @paragraph_text. -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="836">`PangoAnalysis` structure from [func@Pango.itemize].</doc>
          <type name="Analysis" c:type="const PangoAnalysis*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="837">glyph string in which to store results.</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shape_item" c:identifier="pango_shape_item" version="1.50">
      <doc xml:space="preserve"
           filename="pango/shape.c"
           line="926">Convert the characters in @item into glyphs.

This is similar to [func@Pango.shape_with_flags], except it takes a
`PangoItem` instead of separate @item_text and @analysis arguments.

It also takes @log_attrs, which are needed for implementing some aspects
of hyphen insertion and text transforms (in particular, capitalization).

Note that the extra attributes in the @analyis that is returned from
[func@Pango.itemize] have indices that are relative to the entire paragraph,
so you do not pass the full paragraph text as @paragraph_text, you need
to subtract the item offset from their indices before calling
[func@Pango.shape_with_flags].</doc>
      <source-position filename="pango/pango-glyph.h" line="260"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="item" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="928">`PangoItem` to shape</doc>
          <type name="Item" c:type="PangoItem*"/>
        </parameter>
        <parameter name="paragraph_text"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="929">text of the paragraph (see details).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="paragraph_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="930">the length (in bytes) of @paragraph_text.
    -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="log_attrs"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="932">array of `PangoLogAttr` for @item</doc>
          <type name="LogAttr" c:type="PangoLogAttr*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="933">glyph string in which to store results</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="934">flags influencing the shaping process</doc>
          <type name="ShapeFlags" c:type="PangoShapeFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="shape_with_flags"
              c:identifier="pango_shape_with_flags"
              version="1.44">
      <doc xml:space="preserve"
           filename="pango/shape.c"
           line="878">Convert the characters in @text into glyphs.

Given a segment of text and the corresponding `PangoAnalysis` structure
returned from [func@Pango.itemize], convert the characters into glyphs.
You may also pass in only a substring of the item from [func@Pango.itemize].

This is similar to [func@Pango.shape_full], except it also takes flags
that can influence the shaping process.

Some aspects of hyphen insertion and text transformation (in particular,
capitalization) require log attrs, and thus can only be handled by
[func@Pango.shape_item].

Note that the extra attributes in the @analyis that is returned from
[func@Pango.itemize] have indices that are relative to the entire paragraph,
so you do not pass the full paragraph text as @paragraph_text, you need
to subtract the item offset from their indices before calling
[func@Pango.shape_with_flags].</doc>
      <source-position filename="pango/pango-glyph.h" line="250"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="item_text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="880">valid UTF-8 text to shape</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="881">the length (in bytes) of @item_text.
    -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="paragraph_text"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="883">text of the paragraph (see details).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="paragraph_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="884">the length (in bytes) of @paragraph_text.
    -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="886">`PangoAnalysis` structure from [func@Pango.itemize]</doc>
          <type name="Analysis" c:type="const PangoAnalysis*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="887">glyph string in which to store results</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/shape.c"
               line="888">flags influencing the shaping process</doc>
          <type name="ShapeFlags" c:type="PangoShapeFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="skip_space"
              c:identifier="pango_skip_space"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="351">Skips 0 or more characters of white space.</doc>
      <source-position filename="pango/pango-utils.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="357">%FALSE if skipping the white space leaves
  the position at a '\0' character.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pos"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="353">in/out string position</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="split_file_list"
              c:identifier="pango_split_file_list"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="172">Splits a %G_SEARCHPATH_SEPARATOR-separated list of files, stripping
white space and substituting ~/ with $HOME/.</doc>
      <source-position filename="pango/pango-utils.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="179">a list of
  strings to be freed with g_strfreev()</doc>
        <array c:type="char**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="174">a %G_SEARCHPATH_SEPARATOR separated list of filenames</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="tab_array_from_string"
              c:identifier="pango_tab_array_from_string"
              moved-to="TabArray.from_string"
              version="1.50">
      <doc xml:space="preserve"
           filename="pango/pango-tabs.c"
           line="446">Deserializes a `PangoTabArray` from a string.

This is the counterpart to [method@Pango.TabArray.to_string].
See that functions for details about the format.</doc>
      <source-position filename="pango/pango-tabs.h" line="100"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="pango/pango-tabs.c"
             line="455">a new `PangoTabArray`</doc>
        <type name="TabArray" c:type="PangoTabArray*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-tabs.c"
               line="448">a string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="tailor_break"
              c:identifier="pango_tailor_break"
              version="1.44">
      <doc xml:space="preserve"
           filename="pango/break.c"
           line="2229">Apply language-specific tailoring to the breaks in @attrs.

The line breaks are assumed to have been produced by [func@Pango.default_break].

If @offset is not -1, it is used to apply attributes from @analysis that are
relevant to line breaking.

Note that it is better to pass -1 for @offset and use [func@Pango.attr_break]
to apply attributes to the whole paragraph.</doc>
      <source-position filename="pango/pango-break.h" line="127"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2231">text to process. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2232">length in bytes of @text</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2233">`PangoAnalysis` for @text</doc>
          <type name="Analysis" c:type="PangoAnalysis*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2234">Byte offset of @text from the beginning of the
  paragraph, or -1 to ignore attributes from @analysis</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2236">array with one `PangoLogAttr`
  per character in @text, plus one extra, to be filled in</doc>
          <array length="5" zero-terminated="0" c:type="PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </parameter>
        <parameter name="attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/break.c"
               line="2238">length of @attrs array</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="trim_string"
              c:identifier="pango_trim_string"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="139">Trims leading and trailing whitespace from a string.</doc>
      <source-position filename="pango/pango-utils.h" line="35"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="145">A newly-allocated string that must be freed with g_free()</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="141">a string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="unichar_direction" c:identifier="pango_unichar_direction">
      <doc xml:space="preserve"
           filename="pango/pango-bidi-type.c"
           line="269">Determines the inherent direction of a character.

The inherent direction is either `PANGO_DIRECTION_LTR`, `PANGO_DIRECTION_RTL`,
or `PANGO_DIRECTION_NEUTRAL`.

This function is useful to categorize characters into left-to-right
letters, right-to-left letters, and everything else. If full Unicode
bidirectional type of a character is needed, [func@Pango.BidiType.for_unichar]
can be used instead.</doc>
      <source-position filename="pango/pango-bidi-type.h" line="105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-bidi-type.c"
             line="283">the direction of the character.</doc>
        <type name="Direction" c:type="PangoDirection"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-bidi-type.c"
               line="271">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="units_from_double"
              c:identifier="pango_units_from_double"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="987">Converts a floating-point number to Pango units.

The conversion is done by multiplying @d by %PANGO_SCALE and
rounding the result to nearest integer.</doc>
      <source-position filename="pango/pango-types.h" line="150"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="996">the value in Pango units.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="989">double floating-point value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="units_to_double"
              c:identifier="pango_units_to_double"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="1006">Converts a number in Pango units to floating-point.

The conversion is done by dividing @i by %PANGO_SCALE.</doc>
      <source-position filename="pango/pango-types.h" line="152"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="1014">the double value.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="i" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="1008">value in Pango units</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="version" c:identifier="pango_version" version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="50">Returns the encoded version of Pango available at run-time.

This is similar to the macro %PANGO_VERSION except that the macro
returns the encoded version available at compile-time. A version
number can be encoded into an integer using PANGO_VERSION_ENCODE().</doc>
      <source-position filename="pango/pango-utils.h" line="173"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="59">The encoded version of Pango library available at run time.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="version_check"
              c:identifier="pango_version_check"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="89">Checks that the Pango library in use is compatible with the
given version.

Generally you would pass in the constants %PANGO_VERSION_MAJOR,
%PANGO_VERSION_MINOR, %PANGO_VERSION_MICRO as the three arguments
to this function; that produces a check that the library in use at
run-time is compatible with the version of Pango the application or
module was compiled against.

Compatibility is defined by two things: first the version
of the running library is newer than the version
@required_major.required_minor.@required_micro. Second
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)

For compile-time version checking use PANGO_VERSION_CHECK().</doc>
      <source-position filename="pango/pango-utils.h" line="181"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="113">%NULL if the Pango library is compatible
  with the given version, or a string describing the version
  mismatch.  The returned string is owned by Pango and should not
  be modified or freed.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="required_major" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="91">the required major version</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="required_minor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="92">the required minor version</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="required_micro" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="pango/pango-utils.c"
               line="93">the required major version</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="version_string"
              c:identifier="pango_version_string"
              version="1.16">
      <doc xml:space="preserve"
           filename="pango/pango-utils.c"
           line="69">Returns the version of Pango available at run-time.

This is similar to the macro %PANGO_VERSION_STRING except that the
macro returns the version available at compile-time.</doc>
      <source-position filename="pango/pango-utils.h" line="177"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="pango/pango-utils.c"
             line="77">A string containing the version of Pango library available
  at run time. The returned string is owned by Pango and should not
  be modified or freed.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
  </namespace>
</repository>
