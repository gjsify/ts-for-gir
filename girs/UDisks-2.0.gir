<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="udisks2"/>
  <c:include name="udisks/udisks.h"/>
  <namespace name="UDisks"
             version="2.0"
             shared-library="libudisks2.so.0"
             c:identifier-prefixes="UDisks"
             c:symbol-prefixes="udisks">
    <interface name="Block"
               c:symbol-prefix="block"
               c:type="UDisksBlock"
               glib:type-name="UDisksBlock"
               glib:get-type="udisks_block_get_type"
               glib:type-struct="BlockIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_block_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_block_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksBlock interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_configuration"
                      invoker="get_configuration"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_configuration() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_crypto_backing_device"
                      invoker="get_crypto_backing_device"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_crypto_backing_device() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device"
                      invoker="get_device"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_device() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device_number"
                      invoker="get_device_number"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_drive" invoker="get_drive" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_drive() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_auto"
                      invoker="get_hint_auto"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_icon_name"
                      invoker="get_hint_icon_name"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_icon_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_ignore"
                      invoker="get_hint_ignore"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_name"
                      invoker="get_hint_name"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_partitionable"
                      invoker="get_hint_partitionable"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_symbolic_icon_name"
                      invoker="get_hint_symbolic_icon_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_symbolic_icon_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_system"
                      invoker="get_hint_system"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id"
                      invoker="get_id"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_label"
                      invoker="get_id_label"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_label() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_type"
                      invoker="get_id_type"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_type() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_usage"
                      invoker="get_id_usage"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_usage() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_uuid"
                      invoker="get_id_uuid"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_uuid() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_version"
                      invoker="get_id_version"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_version() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mdraid"
                      invoker="get_mdraid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mdraid_member"
                      invoker="get_mdraid_member"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid_member() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_preferred_device"
                      invoker="get_preferred_device"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_preferred_device() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_only"
                      invoker="get_read_only"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_symlinks"
                      invoker="get_symlinks"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_symlinks() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_configuration_item">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_format">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_secret_configuration">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_backup">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_benchmark">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_restore">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_configuration_item">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rescan">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_update_configuration_item">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_configuration_item"
              c:identifier="udisks_block_call_add_configuration_item">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_add_configuration_item_finish() to get the result of the operation.

See udisks_block_call_add_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_configuration_item_finish"
              c:identifier="udisks_block_call_add_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_add_configuration_item().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_add_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_configuration_item_sync"
              c:identifier="udisks_block_call_add_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_add_configuration_item() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format" c:identifier="udisks_block_call_format">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_format_finish() to get the result of the operation.

See udisks_block_call_format_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_finish"
              c:identifier="udisks_block_call_format_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_format().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_sync"
              c:identifier="udisks_block_call_format_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_format() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration"
              c:identifier="udisks_block_call_get_secret_configuration">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_get_secret_configuration_finish() to get the result of the operation.

See udisks_block_call_get_secret_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration_finish"
              c:identifier="udisks_block_call_get_secret_configuration_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_get_secret_configuration().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_configuration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_get_secret_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration_sync"
              c:identifier="udisks_block_call_get_secret_configuration_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_get_secret_configuration() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_configuration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup"
              c:identifier="udisks_block_call_open_for_backup">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_open_for_backup_finish() to get the result of the operation.

See udisks_block_call_open_for_backup_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup_finish"
              c:identifier="udisks_block_call_open_for_backup_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_open_for_backup().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_backup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup_sync"
              c:identifier="udisks_block_call_open_for_backup_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_backup() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark"
              c:identifier="udisks_block_call_open_for_benchmark">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_open_for_benchmark_finish() to get the result of the operation.

See udisks_block_call_open_for_benchmark_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark_finish"
              c:identifier="udisks_block_call_open_for_benchmark_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_open_for_benchmark().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_benchmark().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark_sync"
              c:identifier="udisks_block_call_open_for_benchmark_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_benchmark() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore"
              c:identifier="udisks_block_call_open_for_restore">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_open_for_restore_finish() to get the result of the operation.

See udisks_block_call_open_for_restore_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore_finish"
              c:identifier="udisks_block_call_open_for_restore_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_open_for_restore().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_restore().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore_sync"
              c:identifier="udisks_block_call_open_for_restore_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_restore() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item"
              c:identifier="udisks_block_call_remove_configuration_item">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_remove_configuration_item_finish() to get the result of the operation.

See udisks_block_call_remove_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item_finish"
              c:identifier="udisks_block_call_remove_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_remove_configuration_item().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_remove_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item_sync"
              c:identifier="udisks_block_call_remove_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_remove_configuration_item() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan" c:identifier="udisks_block_call_rescan">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_rescan_finish() to get the result of the operation.

See udisks_block_call_rescan_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan_finish"
              c:identifier="udisks_block_call_rescan_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_rescan().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_rescan().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan_sync"
              c:identifier="udisks_block_call_rescan_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_rescan() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item"
              c:identifier="udisks_block_call_update_configuration_item">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_call_update_configuration_item_finish() to get the result of the operation.

See udisks_block_call_update_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item_finish"
              c:identifier="udisks_block_call_update_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_call_update_configuration_item().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_update_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item_sync"
              c:identifier="udisks_block_call_update_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_update_configuration_item() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_configuration_item"
              c:identifier="udisks_block_complete_add_configuration_item">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_format"
              c:identifier="udisks_block_complete_format">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_secret_configuration"
              c:identifier="udisks_block_complete_get_secret_configuration">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="configuration" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_backup"
              c:identifier="udisks_block_complete_open_for_backup">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_benchmark"
              c:identifier="udisks_block_complete_open_for_benchmark">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_restore"
              c:identifier="udisks_block_complete_open_for_restore">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_configuration_item"
              c:identifier="udisks_block_complete_remove_configuration_item">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rescan"
              c:identifier="udisks_block_complete_rescan">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_update_configuration_item"
              c:identifier="udisks_block_complete_update_configuration_item">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_configuration"
              c:identifier="udisks_block_dup_configuration"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_crypto_backing_device"
              c:identifier="udisks_block_dup_crypto_backing_device"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_device"
              c:identifier="udisks_block_dup_device"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_drive"
              c:identifier="udisks_block_dup_drive"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_icon_name"
              c:identifier="udisks_block_dup_hint_icon_name"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_name"
              c:identifier="udisks_block_dup_hint_name"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_symbolic_icon_name"
              c:identifier="udisks_block_dup_hint_symbolic_icon_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="udisks_block_dup_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_label"
              c:identifier="udisks_block_dup_id_label"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_type"
              c:identifier="udisks_block_dup_id_type"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_usage"
              c:identifier="udisks_block_dup_id_usage"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_uuid"
              c:identifier="udisks_block_dup_id_uuid"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_version"
              c:identifier="udisks_block_dup_id_version"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_mdraid"
              c:identifier="udisks_block_dup_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_mdraid_member"
              c:identifier="udisks_block_dup_mdraid_member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_preferred_device"
              c:identifier="udisks_block_dup_preferred_device"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_symlinks"
              c:identifier="udisks_block_dup_symlinks"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="udisks_block_get_configuration"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_configuration() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crypto_backing_device"
              c:identifier="udisks_block_get_crypto_backing_device"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_crypto_backing_device() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device"
              c:identifier="udisks_block_get_device"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_device() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_number"
              c:identifier="udisks_block_get_device_number"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive"
              c:identifier="udisks_block_get_drive"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_drive() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_auto"
              c:identifier="udisks_block_get_hint_auto"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_icon_name"
              c:identifier="udisks_block_get_hint_icon_name"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_icon_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_ignore"
              c:identifier="udisks_block_get_hint_ignore"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_name"
              c:identifier="udisks_block_get_hint_name"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_partitionable"
              c:identifier="udisks_block_get_hint_partitionable"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_symbolic_icon_name"
              c:identifier="udisks_block_get_hint_symbolic_icon_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_symbolic_icon_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_system"
              c:identifier="udisks_block_get_hint_system"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="udisks_block_get_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_label"
              c:identifier="udisks_block_get_id_label"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_label() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_type"
              c:identifier="udisks_block_get_id_type"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_type() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_usage"
              c:identifier="udisks_block_get_id_usage"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_usage() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_uuid"
              c:identifier="udisks_block_get_id_uuid"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_uuid() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_version"
              c:identifier="udisks_block_get_id_version"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_version() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid"
              c:identifier="udisks_block_get_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid_member"
              c:identifier="udisks_block_get_mdraid_member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid_member() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_device"
              c:identifier="udisks_block_get_preferred_device"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_preferred_device() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_only"
              c:identifier="udisks_block_get_read_only"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_block_get_size"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symlinks"
              c:identifier="udisks_block_get_symlinks"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_symlinks() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_configuration"
              c:identifier="udisks_block_set_configuration"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_crypto_backing_device"
              c:identifier="udisks_block_set_crypto_backing_device"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device"
              c:identifier="udisks_block_set_device"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_number"
              c:identifier="udisks_block_set_device_number"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive"
              c:identifier="udisks_block_set_drive"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_auto"
              c:identifier="udisks_block_set_hint_auto"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_icon_name"
              c:identifier="udisks_block_set_hint_icon_name"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_ignore"
              c:identifier="udisks_block_set_hint_ignore"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_name"
              c:identifier="udisks_block_set_hint_name"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_partitionable"
              c:identifier="udisks_block_set_hint_partitionable"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_symbolic_icon_name"
              c:identifier="udisks_block_set_hint_symbolic_icon_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_system"
              c:identifier="udisks_block_set_hint_system"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="udisks_block_set_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_label"
              c:identifier="udisks_block_set_id_label"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_type"
              c:identifier="udisks_block_set_id_type"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_usage"
              c:identifier="udisks_block_set_id_usage"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_uuid"
              c:identifier="udisks_block_set_id_uuid"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_version"
              c:identifier="udisks_block_set_id_version"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid"
              c:identifier="udisks_block_set_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid_member"
              c:identifier="udisks_block_set_mdraid_member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preferred_device"
              c:identifier="udisks_block_set_preferred_device"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_only"
              c:identifier="udisks_block_set_read_only"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_block_set_size"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_symlinks"
              c:identifier="udisks_block_set_symlinks"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="configuration" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="crypto-backing-device"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device-number" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="drive" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-auto" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-icon-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-ignore" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-partitionable"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-symbolic-icon-name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-system" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-label" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-usage" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-uuid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-version" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdraid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdraid-member"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="preferred-device" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="read-only" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="symlinks" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <glib:signal name="handle-add-configuration-item" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_add_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-format" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_format() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-secret-configuration" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_get_secret_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-backup" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_backup() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-benchmark" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_benchmark() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-restore" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_restore() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-configuration-item" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_remove_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rescan" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_rescan() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-update-configuration-item" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_update_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="BlockIface"
            c:type="UDisksBlockIface"
            glib:is-gtype-struct-for="Block">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_configuration_item">
        <callback name="handle_add_configuration_item">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_format">
        <callback name="handle_format">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_secret_configuration">
        <callback name="handle_get_secret_configuration">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_backup">
        <callback name="handle_open_for_backup">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_benchmark">
        <callback name="handle_open_for_benchmark">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_restore">
        <callback name="handle_open_for_restore">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_configuration_item">
        <callback name="handle_remove_configuration_item">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rescan">
        <callback name="handle_rescan">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_update_configuration_item">
        <callback name="handle_update_configuration_item">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_old_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_new_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_crypto_backing_device">
        <callback name="get_crypto_backing_device">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device">
        <callback name="get_device">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device_number">
        <callback name="get_device_number">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_drive">
        <callback name="get_drive">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_auto">
        <callback name="get_hint_auto">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_icon_name">
        <callback name="get_hint_icon_name">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_ignore">
        <callback name="get_hint_ignore">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_name">
        <callback name="get_hint_name">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_partitionable">
        <callback name="get_hint_partitionable">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_system">
        <callback name="get_hint_system">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_label">
        <callback name="get_id_label">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_type">
        <callback name="get_id_type">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_usage">
        <callback name="get_id_usage">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_uuid">
        <callback name="get_id_uuid">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_version">
        <callback name="get_id_version">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_preferred_device">
        <callback name="get_preferred_device">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_only">
        <callback name="get_read_only">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_symlinks">
        <callback name="get_symlinks">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_symbolic_icon_name">
        <callback name="get_hint_symbolic_icon_name">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mdraid">
        <callback name="get_mdraid">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mdraid_member">
        <callback name="get_mdraid_member">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="BlockProxy"
           c:symbol-prefix="block_proxy"
           c:type="UDisksBlockProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksBlockProxy"
           glib:get-type="udisks_block_proxy_get_type"
           glib:type-struct="BlockProxyClass">
      <doc xml:space="preserve">The #UDisksBlockProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Block"/>
      <constructor name="new_finish"
                   c:identifier="udisks_block_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_block_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_block_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_block_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_block_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_block_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_block_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_block_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_block_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_proxy_new_finish() to get the result of the operation.

See udisks_block_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_block_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_block_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_block_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_block_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockProxyPrivate" c:type="UDisksBlockProxyPrivate*"/>
      </field>
    </class>
    <record name="BlockProxyClass"
            c:type="UDisksBlockProxyClass"
            glib:is-gtype-struct-for="BlockProxy">
      <doc xml:space="preserve">Class structure for #UDisksBlockProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="BlockProxyPrivate"
            c:type="UDisksBlockProxyPrivate"
            disguised="1">
    </record>
    <class name="BlockSkeleton"
           c:symbol-prefix="block_skeleton"
           c:type="UDisksBlockSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksBlockSkeleton"
           glib:get-type="udisks_block_skeleton_get_type"
           glib:type-struct="BlockSkeletonClass">
      <doc xml:space="preserve">The #UDisksBlockSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Block"/>
      <constructor name="new" c:identifier="udisks_block_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="BlockSkeleton" c:type="UDisksBlock*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockSkeletonPrivate"
              c:type="UDisksBlockSkeletonPrivate*"/>
      </field>
    </class>
    <record name="BlockSkeletonClass"
            c:type="UDisksBlockSkeletonClass"
            glib:is-gtype-struct-for="BlockSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksBlockSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="BlockSkeletonPrivate"
            c:type="UDisksBlockSkeletonPrivate"
            disguised="1">
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="UDisksClient"
           parent="GObject.Object"
           glib:type-name="UDisksClient"
           glib:get-type="udisks_client_get_type">
      <doc xml:space="preserve">#UDisksClient is used for accessing the UDisks service from a
client program.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_client_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_client_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksClient or %NULL if @error is set. Free with
g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_client_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously gets a #UDisksClient for the local system.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksClient or %NULL if @error is set. Free with
g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_client_new">
        <doc xml:space="preserve">Asynchronously gets a #UDisksClient. When the operation is
finished, @callback will be invoked in the &lt;link
linkend="g-main-context-push-thread-default"&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">Function that will be called when the result is ready.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_all_blocks_for_mdraid"
              c:identifier="udisks_client_get_all_blocks_for_mdraid"
              version="2.1">
        <doc xml:space="preserve">Gets all RAID devices (e.g. &lt;filename&gt;/dev/md0&lt;/filename&gt; and &lt;filename&gt;/dev/md1&lt;/filename&gt;) for @raid.

This is usually only useful in &lt;ulink
url="http://en.wikipedia.org/wiki/Split-brain_(computing)"&gt;split-brain
situations&lt;/ulink&gt; — see udisks_client_get_block_for_mdraid() for
an example — and is normally used only to convey the problem in an
user interface.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_dev"
              c:identifier="udisks_client_get_block_for_dev">
        <doc xml:space="preserve">Gets the #UDisksBlock corresponding to @block_device_number, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksBlock or %NULL if not found.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block_device_number" transfer-ownership="none">
            <doc xml:space="preserve">A #dev_t to get a #UDisksBlock for.</doc>
            <type name="guint64" c:type="dev_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_drive"
              c:identifier="udisks_client_get_block_for_drive">
        <doc xml:space="preserve">Gets a block device corresponding to @drive. The returned block
device, if any, is for the whole disk drive, e.g. a partition block
device is never returned.

Set @get_physical to %TRUE if you need a block device that you can
send low-level SCSI commands with (for multipath, this returns one
of the physical paths). Set it to %FALSE if you need a block device
that you can read/write data with (for multipath, this returns the
mapped device).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksBlock or %NULL if the requested
kind of block device is not available - use g_object_unref() to
free the returned object.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
          <parameter name="get_physical" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to get a physical device, %FALSE to get the logical device.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_label"
              c:identifier="udisks_client_get_block_for_label">
        <doc xml:space="preserve">Gets all the #UDisksBlock instances with the given label, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The label.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_mdraid"
              c:identifier="udisks_client_get_block_for_mdraid"
              version="2.1">
        <doc xml:space="preserve">Gets the RAID device (e.g. &lt;filename&gt;/dev/md0&lt;/filename&gt;) for @raid.

In the case of a &lt;ulink
url="http://en.wikipedia.org/wiki/Split-brain_(computing)"&gt;split-brain
syndrome&lt;/ulink&gt;, it is undefined which RAID device is
returned. For example this can happen if
&lt;filename&gt;/dev/sda&lt;/filename&gt; and &lt;filename&gt;/dev/sdb&lt;/filename&gt; are
components of a two-disk RAID-1 and &lt;filename&gt;/dev/md0&lt;/filename&gt;
and &lt;filename&gt;/dev/md1&lt;/filename&gt; are two degraded arrays, each one
using exactly one of the two devices. Use
udisks_client_get_all_blocks_for_mdraid() to get all RAID devices.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksBlock or %NULL if no RAID device is running.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_uuid"
              c:identifier="udisks_client_get_block_for_uuid">
        <doc xml:space="preserve">Gets all the #UDisksBlock instances with the given uuid, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve">The uuid.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cleartext_block"
              c:identifier="udisks_client_get_cleartext_block">
        <doc xml:space="preserve">If @block is an unlocked encrypted device, gets the cleartext device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksBlock or %NULL. Free with
g_object_unref() when done with it.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_for_block"
              c:identifier="udisks_client_get_drive_for_block">
        <doc xml:space="preserve">Gets the #UDisksDrive that @block belongs to, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksDrive or %NULL if there is no
#UDisksDrive for @block - free the returned object with
g_object_unref().</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_info"
              c:identifier="udisks_client_get_drive_info"
              deprecated="1"
              deprecated-version="2.1">
        <doc xml:space="preserve">Gets information about a #UDisksDrive object that is suitable to
present in an user interface. The returned strings are localized.</doc>
        <doc-deprecated xml:space="preserve">Use udisks_client_get_object_info() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
          <parameter name="out_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">Return location for name or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">Return location for description or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_drive_icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">Return location for icon representing the drive or %NULL.</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
          <parameter name="out_media_description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">Return location for description of the media or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_media_icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">Return location for icon representing the media or %NULL.</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_siblings"
              c:identifier="udisks_client_get_drive_siblings"
              version="2.1">
        <doc xml:space="preserve">Gets all siblings for @drive.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list of #UDisksDrive instances. The
  returned list should be freed with g_list_free() after each element has been
  freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Drive"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id_for_display"
              c:identifier="udisks_client_get_id_for_display">
        <doc xml:space="preserve">Gets a human readable localized string for @usage, @type and @version.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="usage" transfer-ownership="none">
            <doc xml:space="preserve">Usage id e.g. "filesystem" or "crypto".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">Type e.g. "ext4" or "crypto_LUKS"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve">Version.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="long_string" transfer-ownership="none">
            <doc xml:space="preserve">Whether to produce a long string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_job_description"
              c:identifier="udisks_client_get_job_description">
        <doc xml:space="preserve">Gets a human-readable and localized text string describing the
operation of @job.

For known job types, see the documentation for the
&lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;Job:Operation&lt;/link&gt;
D-Bus property.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="job" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_jobs_for_object"
              c:identifier="udisks_client_get_jobs_for_object">
        <doc xml:space="preserve">Gets all the #UDisksJob instances that reference @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list of #UDisksJob instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Job"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loop_for_block"
              c:identifier="udisks_client_get_loop_for_block">
        <doc xml:space="preserve">Gets the corresponding loop interface for @block.

This only works if @block itself is a loop device or a partition of
a loop device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksLoop or %NULL. Free with g_object_unref().</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_manager" c:identifier="udisks_client_get_manager">
        <doc xml:space="preserve">Gets the #UDisksManager interface on the well-known
&lt;literal&gt;/org/freedesktop/UDisks2/Manager&lt;/literal&gt; object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksManager or %NULL if the udisksd
daemon is not currently running. Do not free, the instance is owned
by @client.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid_for_block"
              c:identifier="udisks_client_get_mdraid_for_block"
              version="2.1">
        <doc xml:space="preserve">Gets the #UDisksMDRaid that @block is the block device for, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksMDRaid or %NULL if there is no
  #UDisksMDRaid for @block or @block is not a MD-RAID block
  device. Free the returned object with g_object_unref().</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media_compat_for_display"
              c:identifier="udisks_client_get_media_compat_for_display">
        <doc xml:space="preserve">Gets a human-readable string of the media described by
@media_compat. The returned information is localized.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string that should be freed with g_free() or %NULL if
unknown.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="media_compat" transfer-ownership="none">
            <doc xml:space="preserve">An array of media types.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_members_for_mdraid"
              c:identifier="udisks_client_get_members_for_mdraid"
              version="2.1">
        <doc xml:space="preserve">Gets the physical block devices that are part of @raid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="udisks_client_get_object">
        <doc xml:space="preserve">Convenience function for looking up an #UDisksObject for @object_path.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksObject corresponding to
@object_path or %NULL if not found. The returned object must be
freed with g_object_unref().</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">Object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_info"
              c:identifier="udisks_client_get_object_info"
              version="2.1">
        <doc xml:space="preserve">Gets information about a #UDisksObject instance that is suitable to
present in an user interface. Information is returned in the
#UDisksObjectInfo object and is localized.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksObjectInfo instance that should be freed with g_object_unref().</doc>
          <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_manager"
              c:identifier="udisks_client_get_object_manager">
        <doc xml:space="preserve">Gets the #GDBusObjectManager used by @client.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusObjectManager. Do not free, the
instance is owned by @client.</doc>
          <type name="Gio.DBusObjectManager" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition_info"
              c:identifier="udisks_client_get_partition_info">
        <doc xml:space="preserve">Gets information about @partition that is suitable to present in an
user interface in a single line of text.

The returned string is localized and includes things like the
partition type, flags (if any) and name (if any).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve"># #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table"
              c:identifier="udisks_client_get_partition_table">
        <doc xml:space="preserve">Gets the #UDisksPartitionTable corresponding to @partition.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksPartitionTable. Free with g_object_unref().</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_subtype_for_display"
              c:identifier="udisks_client_get_partition_table_subtype_for_display">
        <doc xml:space="preserve">Gets a human readable localized string for @partition_table_type and @partition_table_subtype.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A description of @partition_table_type and @partition_table_subtype or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype" transfer-ownership="none">
            <doc xml:space="preserve">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_subtypes"
              c:identifier="udisks_client_get_partition_table_subtypes">
        <doc xml:space="preserve">Gets all known subtypes for @partition_table_type.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A %NULL-terminated array of
strings. Only the container should be freed with g_free().</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_type_for_display"
              c:identifier="udisks_client_get_partition_table_type_for_display">
        <doc xml:space="preserve">Gets a human readable localized string for @partition_table_type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A description of @partition_table_type or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_and_subtype_for_display"
              c:identifier="udisks_client_get_partition_type_and_subtype_for_display"
              version="2.1.1">
        <doc xml:space="preserve">Like udisks_client_get_partition_type_for_display() but also takes
the partition table subtype into account, if available. This is
useful in scenarios where different subtypes is using the same
partition type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A description of @partition_type or %NULL if unknown.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve">A partitioning type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype" transfer-ownership="none">
            <doc xml:space="preserve">A partitioning subtype or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_type" transfer-ownership="none">
            <doc xml:space="preserve">A partition type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_for_display"
              c:identifier="udisks_client_get_partition_type_for_display">
        <doc xml:space="preserve">Gets a human readable localized string for @partiton_table_type and @partition_type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A description of @partition_type or %NULL if unknown.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve">A partitioning type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_type" transfer-ownership="none">
            <doc xml:space="preserve">A partition type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_infos"
              c:identifier="udisks_client_get_partition_type_infos">
        <doc xml:space="preserve">Gets information about all known partition types for @partition_table_type and @partition_table_subtype.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list of
  #UDisksPartitionTypeInfo instances. The returned list should be freed
  with g_list_free() after freeing each element with udisks_partition_type_info_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="PartitionTypeInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A partition table subtype or %NULL to get all known types.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partitions"
              c:identifier="udisks_client_get_partitions">
        <doc xml:space="preserve">Gets all partitions of @table.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list of #UDisksPartition instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Partition"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size_for_display"
              c:identifier="udisks_client_get_size_for_display">
        <doc xml:space="preserve">Utility function to get a human-readable string that represents @size.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">Size in bytes</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="use_pow2" transfer-ownership="none">
            <doc xml:space="preserve">Whether power-of-two units should be used instead of power-of-ten units.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="long_string" transfer-ownership="none">
            <doc xml:space="preserve">Whether to produce a long string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_object" c:identifier="udisks_client_peek_object">
        <doc xml:space="preserve">Like udisks_client_get_object() but doesn't increase the reference
count on the returned #UDisksObject.

&lt;warning&gt;The returned object is only valid until removed so it is only safe to use this function on the thread where @client was constructed. Use udisks_client_get_object() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksObject corresponding to
@object_path or %NULL if not found.</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">Object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_changed"
              c:identifier="udisks_client_queue_changed"
              version="2.1">
        <doc xml:space="preserve">Queues up a #UDisksClient::changed signal and rate-limit it. See
the documentation for the #UDisksClient::changed property for more
information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="settle" c:identifier="udisks_client_settle">
        <doc xml:space="preserve">Blocks until all pending D-Bus messages have been delivered. Also
emits the (rate-limited) #UDisksClient::changed signal if changes
are currently pending.

This is useful in two situations: 1. when using synchronous method
calls since e.g. D-Bus signals received while waiting for the reply
are queued up and dispatched after the synchronous call ends; and
2. when using asynchronous calls where the return value references
a newly created object (such as the &lt;link
linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;Manager.LoopSetup()&lt;/link&gt; method).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="manager" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksManager interface on the well-known
&lt;literal&gt;/org/freedesktop/UDisks2/Manager&lt;/literal&gt; object</doc>
        <type name="Manager"/>
      </property>
      <property name="object-manager" transfer-ownership="none">
        <doc xml:space="preserve">The #GDBusObjectManager used by the #UDisksClient instance.</doc>
        <type name="Gio.DBusObjectManager"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve">This signal is emitted either when an object or interface is
added or removed a when property has changed. Additionally,
multiple received signals are coalesced into a single signal that
is rate-limited to fire at most every 100ms.

Note that calling udisks_client_settle() will cause this signal
to fire if any changes are outstanding.

For greater detail, connect to the
#GDBusObjectManager::object-added,
#GDBusObjectManager::object-removed,
#GDBusObjectManager::interface-added,
#GDBusObjectManager::interface-removed,
#GDBusObjectManagerClient::interface-proxy-properties-changed and
signals on the #UDisksClient:object-manager object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <interface name="Drive"
               c:symbol-prefix="drive"
               c:type="UDisksDrive"
               glib:type-name="UDisksDrive"
               glib:get-type="udisks_drive_get_type"
               glib:type-struct="DriveIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_drive_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksDrive interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_can_power_off"
                      invoker="get_can_power_off"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_configuration"
                      invoker="get_configuration"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_configuration() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_connection_bus"
                      invoker="get_connection_bus"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_connection_bus() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_ejectable"
                      invoker="get_ejectable"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_id() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media" invoker="get_media" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_available"
                      invoker="get_media_available"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_change_detected"
                      invoker="get_media_change_detected"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_compatibility"
                      invoker="get_media_compatibility"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media_compatibility() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_removable"
                      invoker="get_media_removable"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_model" invoker="get_model" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_model() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical"
                      invoker="get_optical"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_blank"
                      invoker="get_optical_blank"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_audio_tracks"
                      invoker="get_optical_num_audio_tracks"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_data_tracks"
                      invoker="get_optical_num_data_tracks"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_sessions"
                      invoker="get_optical_num_sessions"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_tracks"
                      invoker="get_optical_num_tracks"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_removable"
                      invoker="get_removable"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_revision"
                      invoker="get_revision"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_revision() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rotation_rate"
                      invoker="get_rotation_rate"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_seat" invoker="get_seat" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_seat() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_serial"
                      invoker="get_serial"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_serial() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sibling_id"
                      invoker="get_sibling_id"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sibling_id() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sort_key"
                      invoker="get_sort_key"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sort_key() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_detected"
                      invoker="get_time_detected"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_media_detected"
                      invoker="get_time_media_detected"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vendor"
                      invoker="get_vendor"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_vendor() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_wwn" invoker="get_wwn" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_wwn() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_eject">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_power_off">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_configuration">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_eject" c:identifier="udisks_drive_call_eject">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_call_eject_finish() to get the result of the operation.

See udisks_drive_call_eject_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_eject_finish"
              c:identifier="udisks_drive_call_eject_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_call_eject().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_eject().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_eject_sync"
              c:identifier="udisks_drive_call_eject_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_eject() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off"
              c:identifier="udisks_drive_call_power_off"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_call_power_off_finish() to get the result of the operation.

See udisks_drive_call_power_off_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off_finish"
              c:identifier="udisks_drive_call_power_off_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_call_power_off().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_power_off().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off_sync"
              c:identifier="udisks_drive_call_power_off_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_power_off() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration"
              c:identifier="udisks_drive_call_set_configuration">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_call_set_configuration_finish() to get the result of the operation.

See udisks_drive_call_set_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration_finish"
              c:identifier="udisks_drive_call_set_configuration_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_call_set_configuration().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_set_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration_sync"
              c:identifier="udisks_drive_call_set_configuration_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_set_configuration() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_eject" c:identifier="udisks_drive_complete_eject">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_power_off"
              c:identifier="udisks_drive_complete_power_off"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_configuration"
              c:identifier="udisks_drive_complete_set_configuration">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_configuration"
              c:identifier="udisks_drive_dup_configuration"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_connection_bus"
              c:identifier="udisks_drive_dup_connection_bus"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="udisks_drive_dup_id"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_media"
              c:identifier="udisks_drive_dup_media"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_media_compatibility"
              c:identifier="udisks_drive_dup_media_compatibility"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_model"
              c:identifier="udisks_drive_dup_model"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_revision"
              c:identifier="udisks_drive_dup_revision"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_seat"
              c:identifier="udisks_drive_dup_seat"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_serial"
              c:identifier="udisks_drive_dup_serial"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sibling_id"
              c:identifier="udisks_drive_dup_sibling_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sort_key"
              c:identifier="udisks_drive_dup_sort_key"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_vendor"
              c:identifier="udisks_drive_dup_vendor"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_wwn"
              c:identifier="udisks_drive_dup_wwn"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_power_off"
              c:identifier="udisks_drive_get_can_power_off"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="udisks_drive_get_configuration"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_configuration() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_bus"
              c:identifier="udisks_drive_get_connection_bus"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_connection_bus() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ejectable"
              c:identifier="udisks_drive_get_ejectable"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="udisks_drive_get_id"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_id() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media"
              c:identifier="udisks_drive_get_media"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_available"
              c:identifier="udisks_drive_get_media_available"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_change_detected"
              c:identifier="udisks_drive_get_media_change_detected"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_compatibility"
              c:identifier="udisks_drive_get_media_compatibility"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media_compatibility() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_removable"
              c:identifier="udisks_drive_get_media_removable"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="udisks_drive_get_model"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_model() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical"
              c:identifier="udisks_drive_get_optical"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_blank"
              c:identifier="udisks_drive_get_optical_blank"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_audio_tracks"
              c:identifier="udisks_drive_get_optical_num_audio_tracks"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_data_tracks"
              c:identifier="udisks_drive_get_optical_num_data_tracks"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_sessions"
              c:identifier="udisks_drive_get_optical_num_sessions"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_tracks"
              c:identifier="udisks_drive_get_optical_num_tracks"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_removable"
              c:identifier="udisks_drive_get_removable"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="udisks_drive_get_revision"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_revision() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rotation_rate"
              c:identifier="udisks_drive_get_rotation_rate"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seat"
              c:identifier="udisks_drive_get_seat"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_seat() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="udisks_drive_get_serial"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_serial() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sibling_id"
              c:identifier="udisks_drive_get_sibling_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sibling_id() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_drive_get_size"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_key"
              c:identifier="udisks_drive_get_sort_key"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sort_key() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_detected"
              c:identifier="udisks_drive_get_time_detected"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_media_detected"
              c:identifier="udisks_drive_get_time_media_detected"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor"
              c:identifier="udisks_drive_get_vendor"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_vendor() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wwn"
              c:identifier="udisks_drive_get_wwn"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_wwn() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_power_off"
              c:identifier="udisks_drive_set_can_power_off"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_configuration"
              c:identifier="udisks_drive_set_configuration"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connection_bus"
              c:identifier="udisks_drive_set_connection_bus"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ejectable"
              c:identifier="udisks_drive_set_ejectable"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="udisks_drive_set_id"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media"
              c:identifier="udisks_drive_set_media"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_available"
              c:identifier="udisks_drive_set_media_available"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_change_detected"
              c:identifier="udisks_drive_set_media_change_detected"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_compatibility"
              c:identifier="udisks_drive_set_media_compatibility"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_removable"
              c:identifier="udisks_drive_set_media_removable"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="udisks_drive_set_model"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical"
              c:identifier="udisks_drive_set_optical"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_blank"
              c:identifier="udisks_drive_set_optical_blank"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_audio_tracks"
              c:identifier="udisks_drive_set_optical_num_audio_tracks"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_data_tracks"
              c:identifier="udisks_drive_set_optical_num_data_tracks"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_sessions"
              c:identifier="udisks_drive_set_optical_num_sessions"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_tracks"
              c:identifier="udisks_drive_set_optical_num_tracks"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_removable"
              c:identifier="udisks_drive_set_removable"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_revision"
              c:identifier="udisks_drive_set_revision"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rotation_rate"
              c:identifier="udisks_drive_set_rotation_rate"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_seat"
              c:identifier="udisks_drive_set_seat"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_serial"
              c:identifier="udisks_drive_set_serial"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sibling_id"
              c:identifier="udisks_drive_set_sibling_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_drive_set_size"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_key"
              c:identifier="udisks_drive_set_sort_key"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_detected"
              c:identifier="udisks_drive_set_time_detected"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_media_detected"
              c:identifier="udisks_drive_set_time_media_detected"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vendor"
              c:identifier="udisks_drive_set_vendor"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wwn"
              c:identifier="udisks_drive_set_wwn"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-power-off"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="configuration" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="connection-bus" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ejectable" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media-available" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-change-detected"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-compatibility"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="media-removable" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="model" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="optical" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="optical-blank" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="optical-num-audio-tracks"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-data-tracks"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-sessions"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-tracks"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="removable" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="revision" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="rotation-rate" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="seat" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="serial" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sibling-id"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sort-key" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="time-detected" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="time-media-detected"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vendor" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wwn" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-eject" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_eject() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-power-off" when="last" version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_power_off() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-configuration" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_set_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="DriveAta"
               c:symbol-prefix="drive_ata"
               c:type="UDisksDriveAta"
               glib:type-name="UDisksDriveAta"
               glib:get-type="udisks_drive_ata_get_type"
               glib:type-struct="DriveAtaIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_drive_ata_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_ata_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksDriveAta interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_aam_enabled"
                      invoker="get_aam_enabled"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_aam_supported"
                      invoker="get_aam_supported"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_aam_vendor_recommended_value"
                      invoker="get_aam_vendor_recommended_value"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_apm_enabled"
                      invoker="get_apm_enabled"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_apm_supported"
                      invoker="get_apm_supported"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pm_enabled"
                      invoker="get_pm_enabled"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pm_supported"
                      invoker="get_pm_supported"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_lookahead_enabled"
                      invoker="get_read_lookahead_enabled"
                      version="2.1.7"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_lookahead_supported"
                      invoker="get_read_lookahead_supported"
                      version="2.1.7"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_enhanced_erase_unit_minutes"
                      invoker="get_security_enhanced_erase_unit_minutes"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_erase_unit_minutes"
                      invoker="get_security_erase_unit_minutes"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_frozen"
                      invoker="get_security_frozen"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_enabled"
                      invoker="get_smart_enabled"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_failing"
                      invoker="get_smart_failing"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_attributes_failed_in_the_past"
                      invoker="get_smart_num_attributes_failed_in_the_past"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_attributes_failing"
                      invoker="get_smart_num_attributes_failing"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_bad_sectors"
                      invoker="get_smart_num_bad_sectors"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_power_on_seconds"
                      invoker="get_smart_power_on_seconds"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_percent_remaining"
                      invoker="get_smart_selftest_percent_remaining"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_status"
                      invoker="get_smart_selftest_status"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_ata_dup_smart_selftest_status() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_supported"
                      invoker="get_smart_supported"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_temperature"
                      invoker="get_smart_temperature"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_updated"
                      invoker="get_smart_updated"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_write_cache_enabled"
                      invoker="get_write_cache_enabled"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_write_cache_supported"
                      invoker="get_write_cache_supported"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_get_state">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_standby">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_wakeup">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_security_erase_unit">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_get_attributes">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_abort">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_start">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_set_enabled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_update">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_pm_get_state"
              c:identifier="udisks_drive_ata_call_pm_get_state">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_pm_get_state_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_get_state_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_get_state_finish"
              c:identifier="udisks_drive_ata_call_pm_get_state_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_pm_get_state().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="out_state"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_get_state().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_get_state_sync"
              c:identifier="udisks_drive_ata_call_pm_get_state_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_get_state() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_state"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby"
              c:identifier="udisks_drive_ata_call_pm_standby">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_pm_standby_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_standby_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby_finish"
              c:identifier="udisks_drive_ata_call_pm_standby_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_pm_standby().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_standby().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby_sync"
              c:identifier="udisks_drive_ata_call_pm_standby_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_standby() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup"
              c:identifier="udisks_drive_ata_call_pm_wakeup">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_pm_wakeup_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_wakeup_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup_finish"
              c:identifier="udisks_drive_ata_call_pm_wakeup_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_pm_wakeup().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_wakeup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup_sync"
              c:identifier="udisks_drive_ata_call_pm_wakeup_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_wakeup() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit"
              c:identifier="udisks_drive_ata_call_security_erase_unit">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_security_erase_unit_finish() to get the result of the operation.

See udisks_drive_ata_call_security_erase_unit_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit_finish"
              c:identifier="udisks_drive_ata_call_security_erase_unit_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_security_erase_unit().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_security_erase_unit().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit_sync"
              c:identifier="udisks_drive_ata_call_security_erase_unit_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_security_erase_unit() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes"
              c:identifier="udisks_drive_ata_call_smart_get_attributes">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_smart_get_attributes_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_get_attributes_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_finish"
              c:identifier="udisks_drive_ata_call_smart_get_attributes_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_smart_get_attributes().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_get_attributes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_sync"
              c:identifier="udisks_drive_ata_call_smart_get_attributes_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_get_attributes() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_smart_selftest_abort_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_selftest_abort_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_finish"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_smart_selftest_abort().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_selftest_abort().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_sync"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_selftest_abort() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start"
              c:identifier="udisks_drive_ata_call_smart_selftest_start">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_smart_selftest_start_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_selftest_start_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_finish"
              c:identifier="udisks_drive_ata_call_smart_selftest_start_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_smart_selftest_start().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_selftest_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_sync"
              c:identifier="udisks_drive_ata_call_smart_selftest_start_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_selftest_start() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled"
              c:identifier="udisks_drive_ata_call_smart_set_enabled"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_smart_set_enabled_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_set_enabled_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled_finish"
              c:identifier="udisks_drive_ata_call_smart_set_enabled_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_smart_set_enabled().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_set_enabled().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled_sync"
              c:identifier="udisks_drive_ata_call_smart_set_enabled_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_set_enabled() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update"
              c:identifier="udisks_drive_ata_call_smart_update">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_call_smart_update_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_update_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_finish"
              c:identifier="udisks_drive_ata_call_smart_update_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_call_smart_update().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_update().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_sync"
              c:identifier="udisks_drive_ata_call_smart_update_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_update() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_get_state"
              c:identifier="udisks_drive_ata_complete_pm_get_state">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_standby"
              c:identifier="udisks_drive_ata_complete_pm_standby">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_wakeup"
              c:identifier="udisks_drive_ata_complete_pm_wakeup">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_security_erase_unit"
              c:identifier="udisks_drive_ata_complete_security_erase_unit">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_get_attributes"
              c:identifier="udisks_drive_ata_complete_smart_get_attributes">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_abort"
              c:identifier="udisks_drive_ata_complete_smart_selftest_abort">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_start"
              c:identifier="udisks_drive_ata_complete_smart_selftest_start">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_set_enabled"
              c:identifier="udisks_drive_ata_complete_smart_set_enabled"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_update"
              c:identifier="udisks_drive_ata_complete_smart_update">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_smart_selftest_status"
              c:identifier="udisks_drive_ata_dup_smart_selftest_status"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_enabled"
              c:identifier="udisks_drive_ata_get_aam_enabled"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_supported"
              c:identifier="udisks_drive_ata_get_aam_supported"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_vendor_recommended_value"
              c:identifier="udisks_drive_ata_get_aam_vendor_recommended_value"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apm_enabled"
              c:identifier="udisks_drive_ata_get_apm_enabled"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apm_supported"
              c:identifier="udisks_drive_ata_get_apm_supported"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pm_enabled"
              c:identifier="udisks_drive_ata_get_pm_enabled"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pm_supported"
              c:identifier="udisks_drive_ata_get_pm_supported"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_lookahead_enabled"
              c:identifier="udisks_drive_ata_get_read_lookahead_enabled"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_lookahead_supported"
              c:identifier="udisks_drive_ata_get_read_lookahead_supported"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_enhanced_erase_unit_minutes"
              c:identifier="udisks_drive_ata_get_security_enhanced_erase_unit_minutes"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_erase_unit_minutes"
              c:identifier="udisks_drive_ata_get_security_erase_unit_minutes"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_frozen"
              c:identifier="udisks_drive_ata_get_security_frozen"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_enabled"
              c:identifier="udisks_drive_ata_get_smart_enabled"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_failing"
              c:identifier="udisks_drive_ata_get_smart_failing"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_attributes_failed_in_the_past"
              c:identifier="udisks_drive_ata_get_smart_num_attributes_failed_in_the_past"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_attributes_failing"
              c:identifier="udisks_drive_ata_get_smart_num_attributes_failing"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_bad_sectors"
              c:identifier="udisks_drive_ata_get_smart_num_bad_sectors"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_power_on_seconds"
              c:identifier="udisks_drive_ata_get_smart_power_on_seconds"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_percent_remaining"
              c:identifier="udisks_drive_ata_get_smart_selftest_percent_remaining"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_status"
              c:identifier="udisks_drive_ata_get_smart_selftest_status"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_ata_dup_smart_selftest_status() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_supported"
              c:identifier="udisks_drive_ata_get_smart_supported"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_temperature"
              c:identifier="udisks_drive_ata_get_smart_temperature"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_updated"
              c:identifier="udisks_drive_ata_get_smart_updated"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_write_cache_enabled"
              c:identifier="udisks_drive_ata_get_write_cache_enabled"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_write_cache_supported"
              c:identifier="udisks_drive_ata_get_write_cache_supported"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_aam_enabled"
              c:identifier="udisks_drive_ata_set_aam_enabled"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aam_supported"
              c:identifier="udisks_drive_ata_set_aam_supported"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aam_vendor_recommended_value"
              c:identifier="udisks_drive_ata_set_aam_vendor_recommended_value"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apm_enabled"
              c:identifier="udisks_drive_ata_set_apm_enabled"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apm_supported"
              c:identifier="udisks_drive_ata_set_apm_supported"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pm_enabled"
              c:identifier="udisks_drive_ata_set_pm_enabled"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pm_supported"
              c:identifier="udisks_drive_ata_set_pm_supported"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_lookahead_enabled"
              c:identifier="udisks_drive_ata_set_read_lookahead_enabled"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_lookahead_supported"
              c:identifier="udisks_drive_ata_set_read_lookahead_supported"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_enhanced_erase_unit_minutes"
              c:identifier="udisks_drive_ata_set_security_enhanced_erase_unit_minutes"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_erase_unit_minutes"
              c:identifier="udisks_drive_ata_set_security_erase_unit_minutes"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_frozen"
              c:identifier="udisks_drive_ata_set_security_frozen"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_enabled"
              c:identifier="udisks_drive_ata_set_smart_enabled"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_failing"
              c:identifier="udisks_drive_ata_set_smart_failing"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_attributes_failed_in_the_past"
              c:identifier="udisks_drive_ata_set_smart_num_attributes_failed_in_the_past"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_attributes_failing"
              c:identifier="udisks_drive_ata_set_smart_num_attributes_failing"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_bad_sectors"
              c:identifier="udisks_drive_ata_set_smart_num_bad_sectors"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_power_on_seconds"
              c:identifier="udisks_drive_ata_set_smart_power_on_seconds"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_percent_remaining"
              c:identifier="udisks_drive_ata_set_smart_selftest_percent_remaining"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_status"
              c:identifier="udisks_drive_ata_set_smart_selftest_status"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_supported"
              c:identifier="udisks_drive_ata_set_smart_supported"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_temperature"
              c:identifier="udisks_drive_ata_set_smart_temperature"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_updated"
              c:identifier="udisks_drive_ata_set_smart_updated"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_cache_enabled"
              c:identifier="udisks_drive_ata_set_write_cache_enabled"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_cache_supported"
              c:identifier="udisks_drive_ata_set_write_cache_supported"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="aam-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aam-supported" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aam-vendor-recommended-value"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="apm-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="apm-supported" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pm-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pm-supported" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-lookahead-enabled"
                version="2.1.7"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-lookahead-supported"
                version="2.1.7"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="security-enhanced-erase-unit-minutes"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="security-erase-unit-minutes"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="security-frozen" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-failing" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-num-attributes-failed-in-the-past"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-num-attributes-failing"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-num-bad-sectors"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="smart-power-on-seconds"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="smart-selftest-percent-remaining"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-selftest-status"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smart-supported" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-temperature"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="smart-updated" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="write-cache-enabled"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="write-cache-supported"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-pm-get-state" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_get_state() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pm-standby" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_standby() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pm-wakeup" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_wakeup() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-security-erase-unit" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_security_erase_unit() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-get-attributes" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_get_attributes() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-abort" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_selftest_abort() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-start" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_selftest_start() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-set-enabled" when="last" version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_set_enabled() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-update" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_update() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DriveAtaIface"
            c:type="UDisksDriveAtaIface"
            glib:is-gtype-struct-for="DriveAta">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_pm_get_state">
        <callback name="handle_pm_get_state">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pm_standby">
        <callback name="handle_pm_standby">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pm_wakeup">
        <callback name="handle_pm_wakeup">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_security_erase_unit">
        <callback name="handle_security_erase_unit">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_get_attributes">
        <callback name="handle_smart_get_attributes">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_abort">
        <callback name="handle_smart_selftest_abort">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_start">
        <callback name="handle_smart_selftest_start">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_update">
        <callback name="handle_smart_update">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_enabled">
        <callback name="get_aam_enabled">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_supported">
        <callback name="get_aam_supported">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_vendor_recommended_value">
        <callback name="get_aam_vendor_recommended_value">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apm_enabled">
        <callback name="get_apm_enabled">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apm_supported">
        <callback name="get_apm_supported">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pm_enabled">
        <callback name="get_pm_enabled">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pm_supported">
        <callback name="get_pm_supported">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_enhanced_erase_unit_minutes">
        <callback name="get_security_enhanced_erase_unit_minutes">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_erase_unit_minutes">
        <callback name="get_security_erase_unit_minutes">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_frozen">
        <callback name="get_security_frozen">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_enabled">
        <callback name="get_smart_enabled">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_failing">
        <callback name="get_smart_failing">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_attributes_failed_in_the_past">
        <callback name="get_smart_num_attributes_failed_in_the_past">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_attributes_failing">
        <callback name="get_smart_num_attributes_failing">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_bad_sectors">
        <callback name="get_smart_num_bad_sectors">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_power_on_seconds">
        <callback name="get_smart_power_on_seconds">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_percent_remaining">
        <callback name="get_smart_selftest_percent_remaining">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_status">
        <callback name="get_smart_selftest_status">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_supported">
        <callback name="get_smart_supported">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_temperature">
        <callback name="get_smart_temperature">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_updated">
        <callback name="get_smart_updated">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_set_enabled">
        <callback name="handle_smart_set_enabled">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_write_cache_enabled">
        <callback name="get_write_cache_enabled">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_write_cache_supported">
        <callback name="get_write_cache_supported">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_lookahead_enabled">
        <callback name="get_read_lookahead_enabled">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_lookahead_supported">
        <callback name="get_read_lookahead_supported">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveAtaProxy"
           c:symbol-prefix="drive_ata_proxy"
           c:type="UDisksDriveAtaProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveAtaProxy"
           glib:get-type="udisks_drive_ata_proxy_get_type"
           glib:type-struct="DriveAtaProxyClass">
      <doc xml:space="preserve">The #UDisksDriveAtaProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DriveAta"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_ata_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_ata_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_ata_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_ata_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_drive_ata_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_ata_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_ata_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_ata_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_ata_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_proxy_new_finish() to get the result of the operation.

See udisks_drive_ata_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_ata_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_drive_ata_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_ata_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_ata_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveAtaProxyPrivate"
              c:type="UDisksDriveAtaProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveAtaProxyClass"
            c:type="UDisksDriveAtaProxyClass"
            glib:is-gtype-struct-for="DriveAtaProxy">
      <doc xml:space="preserve">Class structure for #UDisksDriveAtaProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveAtaProxyPrivate"
            c:type="UDisksDriveAtaProxyPrivate"
            disguised="1">
    </record>
    <class name="DriveAtaSkeleton"
           c:symbol-prefix="drive_ata_skeleton"
           c:type="UDisksDriveAtaSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveAtaSkeleton"
           glib:get-type="udisks_drive_ata_skeleton_get_type"
           glib:type-struct="DriveAtaSkeletonClass">
      <doc xml:space="preserve">The #UDisksDriveAtaSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="DriveAta"/>
      <constructor name="new" c:identifier="udisks_drive_ata_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="DriveAtaSkeleton" c:type="UDisksDriveAta*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveAtaSkeletonPrivate"
              c:type="UDisksDriveAtaSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveAtaSkeletonClass"
            c:type="UDisksDriveAtaSkeletonClass"
            glib:is-gtype-struct-for="DriveAtaSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksDriveAtaSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveAtaSkeletonPrivate"
            c:type="UDisksDriveAtaSkeletonPrivate"
            disguised="1">
    </record>
    <record name="DriveIface"
            c:type="UDisksDriveIface"
            glib:is-gtype-struct-for="Drive">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_eject">
        <callback name="handle_eject">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_configuration">
        <callback name="handle_set_configuration">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_connection_bus">
        <callback name="get_connection_bus">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ejectable">
        <callback name="get_ejectable">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media">
        <callback name="get_media">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_available">
        <callback name="get_media_available">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_change_detected">
        <callback name="get_media_change_detected">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_compatibility">
        <callback name="get_media_compatibility">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_removable">
        <callback name="get_media_removable">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_model">
        <callback name="get_model">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical">
        <callback name="get_optical">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_blank">
        <callback name="get_optical_blank">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_audio_tracks">
        <callback name="get_optical_num_audio_tracks">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_data_tracks">
        <callback name="get_optical_num_data_tracks">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_sessions">
        <callback name="get_optical_num_sessions">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_tracks">
        <callback name="get_optical_num_tracks">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_removable">
        <callback name="get_removable">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_revision">
        <callback name="get_revision">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rotation_rate">
        <callback name="get_rotation_rate">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_seat">
        <callback name="get_seat">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_serial">
        <callback name="get_serial">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sort_key">
        <callback name="get_sort_key">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_detected">
        <callback name="get_time_detected">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_media_detected">
        <callback name="get_time_media_detected">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vendor">
        <callback name="get_vendor">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_wwn">
        <callback name="get_wwn">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_power_off">
        <callback name="handle_power_off">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_power_off">
        <callback name="get_can_power_off">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sibling_id">
        <callback name="get_sibling_id">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveProxy"
           c:symbol-prefix="drive_proxy"
           c:type="UDisksDriveProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveProxy"
           glib:get-type="udisks_drive_proxy_get_type"
           glib:type-struct="DriveProxyClass">
      <doc xml:space="preserve">The #UDisksDriveProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Drive"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_drive_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_drive_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_proxy_new_finish() to get the result of the operation.

See udisks_drive_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_drive_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_drive_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveProxyPrivate" c:type="UDisksDriveProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveProxyClass"
            c:type="UDisksDriveProxyClass"
            glib:is-gtype-struct-for="DriveProxy">
      <doc xml:space="preserve">Class structure for #UDisksDriveProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveProxyPrivate"
            c:type="UDisksDriveProxyPrivate"
            disguised="1">
    </record>
    <class name="DriveSkeleton"
           c:symbol-prefix="drive_skeleton"
           c:type="UDisksDriveSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveSkeleton"
           glib:get-type="udisks_drive_skeleton_get_type"
           glib:type-struct="DriveSkeletonClass">
      <doc xml:space="preserve">The #UDisksDriveSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Drive"/>
      <constructor name="new" c:identifier="udisks_drive_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="DriveSkeleton" c:type="UDisksDrive*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveSkeletonPrivate"
              c:type="UDisksDriveSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveSkeletonClass"
            c:type="UDisksDriveSkeletonClass"
            glib:is-gtype-struct-for="DriveSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksDriveSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveSkeletonPrivate"
            c:type="UDisksDriveSkeletonPrivate"
            disguised="1">
    </record>
    <constant name="ERROR_NUM_ENTRIES"
              value="1"
              c:type="UDISKS_ERROR_NUM_ENTRIES">
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Encrypted"
               c:symbol-prefix="encrypted"
               c:type="UDisksEncrypted"
               glib:type-name="UDisksEncrypted"
               glib:get-type="udisks_encrypted_get_type"
               glib:type-struct="EncryptedIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_encrypted_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_encrypted_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksEncrypted interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_child_configuration() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_change_passphrase">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_lock">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_unlock">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_change_passphrase"
              c:identifier="udisks_encrypted_call_change_passphrase">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_encrypted_call_change_passphrase_finish() to get the result of the operation.

See udisks_encrypted_call_change_passphrase_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_passphrase_finish"
              c:identifier="udisks_encrypted_call_change_passphrase_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_encrypted_call_change_passphrase().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_change_passphrase().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_passphrase_sync"
              c:identifier="udisks_encrypted_call_change_passphrase_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_change_passphrase() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock" c:identifier="udisks_encrypted_call_lock">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_encrypted_call_lock_finish() to get the result of the operation.

See udisks_encrypted_call_lock_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_finish"
              c:identifier="udisks_encrypted_call_lock_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_encrypted_call_lock().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_lock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_sync"
              c:identifier="udisks_encrypted_call_lock_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_lock() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock" c:identifier="udisks_encrypted_call_unlock">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_encrypted_call_unlock_finish() to get the result of the operation.

See udisks_encrypted_call_unlock_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock_finish"
              c:identifier="udisks_encrypted_call_unlock_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_encrypted_call_unlock().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="out_cleartext_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_unlock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock_sync"
              c:identifier="udisks_encrypted_call_unlock_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_unlock() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_cleartext_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_change_passphrase"
              c:identifier="udisks_encrypted_complete_change_passphrase">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_lock"
              c:identifier="udisks_encrypted_complete_lock">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_unlock"
              c:identifier="udisks_encrypted_complete_unlock">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="cleartext_device" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_encrypted_dup_child_configuration"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_encrypted_get_child_configuration"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_child_configuration() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_encrypted_set_child_configuration"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-configuration"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <glib:signal name="handle-change-passphrase" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_change_passphrase() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-lock" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_lock() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-unlock" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_unlock() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="EncryptedIface"
            c:type="UDisksEncryptedIface"
            glib:is-gtype-struct-for="Encrypted">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_change_passphrase">
        <callback name="handle_change_passphrase">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_new_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_lock">
        <callback name="handle_lock">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_unlock">
        <callback name="handle_unlock">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EncryptedProxy"
           c:symbol-prefix="encrypted_proxy"
           c:type="UDisksEncryptedProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksEncryptedProxy"
           glib:get-type="udisks_encrypted_proxy_get_type"
           glib:type-struct="EncryptedProxyClass">
      <doc xml:space="preserve">The #UDisksEncryptedProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Encrypted"/>
      <constructor name="new_finish"
                   c:identifier="udisks_encrypted_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_encrypted_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_encrypted_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_encrypted_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_encrypted_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_encrypted_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_encrypted_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_encrypted_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_encrypted_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_encrypted_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_encrypted_proxy_new_finish() to get the result of the operation.

See udisks_encrypted_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_encrypted_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_encrypted_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_encrypted_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_encrypted_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EncryptedProxyPrivate"
              c:type="UDisksEncryptedProxyPrivate*"/>
      </field>
    </class>
    <record name="EncryptedProxyClass"
            c:type="UDisksEncryptedProxyClass"
            glib:is-gtype-struct-for="EncryptedProxy">
      <doc xml:space="preserve">Class structure for #UDisksEncryptedProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="EncryptedProxyPrivate"
            c:type="UDisksEncryptedProxyPrivate"
            disguised="1">
    </record>
    <class name="EncryptedSkeleton"
           c:symbol-prefix="encrypted_skeleton"
           c:type="UDisksEncryptedSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksEncryptedSkeleton"
           glib:get-type="udisks_encrypted_skeleton_get_type"
           glib:type-struct="EncryptedSkeletonClass">
      <doc xml:space="preserve">The #UDisksEncryptedSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Encrypted"/>
      <constructor name="new" c:identifier="udisks_encrypted_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="EncryptedSkeleton" c:type="UDisksEncrypted*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EncryptedSkeletonPrivate"
              c:type="UDisksEncryptedSkeletonPrivate*"/>
      </field>
    </class>
    <record name="EncryptedSkeletonClass"
            c:type="UDisksEncryptedSkeletonClass"
            glib:is-gtype-struct-for="EncryptedSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksEncryptedSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="EncryptedSkeletonPrivate"
            c:type="UDisksEncryptedSkeletonPrivate"
            disguised="1">
    </record>
    <enumeration name="Error"
                 glib:type-name="UDisksError"
                 glib:get-type="udisks_error_get_type"
                 c:type="UDisksError"
                 glib:error-domain="udisks-error-quark">
      <doc xml:space="preserve">Error codes for the #UDISKS_ERROR error domain and the
corresponding D-Bus error names.</doc>
      <member name="failed"
              value="0"
              c:identifier="UDISKS_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve">The operation failed.</doc>
      </member>
      <member name="cancelled"
              value="1"
              c:identifier="UDISKS_ERROR_CANCELLED"
              glib:nick="cancelled">
        <doc xml:space="preserve">The operation was cancelled.</doc>
      </member>
      <member name="already_cancelled"
              value="2"
              c:identifier="UDISKS_ERROR_ALREADY_CANCELLED"
              glib:nick="already-cancelled">
        <doc xml:space="preserve">The operation has already been cancelled.</doc>
      </member>
      <member name="not_authorized"
              value="3"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED"
              glib:nick="not-authorized">
        <doc xml:space="preserve">Not authorized to perform the requested operation.</doc>
      </member>
      <member name="not_authorized_can_obtain"
              value="4"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN"
              glib:nick="not-authorized-can-obtain">
        <doc xml:space="preserve">Like %UDISKS_ERROR_NOT_AUTHORIZED but authorization can be obtained through e.g. authentication.</doc>
      </member>
      <member name="not_authorized_dismissed"
              value="5"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED_DISMISSED"
              glib:nick="not-authorized-dismissed">
        <doc xml:space="preserve">Like %UDISKS_ERROR_NOT_AUTHORIZED but an authentication was shown and the user dimissed it.</doc>
      </member>
      <member name="already_mounted"
              value="6"
              c:identifier="UDISKS_ERROR_ALREADY_MOUNTED"
              glib:nick="already-mounted">
        <doc xml:space="preserve">The device is already mounted.</doc>
      </member>
      <member name="not_mounted"
              value="7"
              c:identifier="UDISKS_ERROR_NOT_MOUNTED"
              glib:nick="not-mounted">
        <doc xml:space="preserve">The device is not mounted.</doc>
      </member>
      <member name="option_not_permitted"
              value="8"
              c:identifier="UDISKS_ERROR_OPTION_NOT_PERMITTED"
              glib:nick="option-not-permitted">
        <doc xml:space="preserve">Not permitted to use the requested option.</doc>
      </member>
      <member name="mounted_by_other_user"
              value="9"
              c:identifier="UDISKS_ERROR_MOUNTED_BY_OTHER_USER"
              glib:nick="mounted-by-other-user">
        <doc xml:space="preserve">The device is mounted by another user.</doc>
      </member>
      <member name="already_unmounting"
              value="10"
              c:identifier="UDISKS_ERROR_ALREADY_UNMOUNTING"
              glib:nick="already-unmounting">
        <doc xml:space="preserve">The device is already unmounting.</doc>
      </member>
      <member name="not_supported"
              value="11"
              c:identifier="UDISKS_ERROR_NOT_SUPPORTED"
              glib:nick="not-supported">
        <doc xml:space="preserve">The operation is not supported due to missing driver/tool support.</doc>
      </member>
      <member name="timed_out"
              value="12"
              c:identifier="UDISKS_ERROR_TIMED_OUT"
              glib:nick="timed-out">
        <doc xml:space="preserve">The operation timed out.</doc>
      </member>
      <member name="would_wakeup"
              value="13"
              c:identifier="UDISKS_ERROR_WOULD_WAKEUP"
              glib:nick="would-wakeup">
        <doc xml:space="preserve">The operation would wake up a disk that is in a deep-sleep state.</doc>
      </member>
      <member name="device_busy"
              value="14"
              c:identifier="UDISKS_ERROR_DEVICE_BUSY"
              glib:nick="device-busy">
        <doc xml:space="preserve">Attempting to unmount a device that is busy.</doc>
      </member>
      <member name="iscsi_daemon_transport_failed"
              value="15"
              c:identifier="UDISKS_ERROR_ISCSI_DAEMON_TRANSPORT_FAILED"
              glib:nick="iscsi-daemon-transport-failed">
      </member>
      <member name="iscsi_host_not_found"
              value="16"
              c:identifier="UDISKS_ERROR_ISCSI_HOST_NOT_FOUND"
              glib:nick="iscsi-host-not-found">
      </member>
      <member name="iscsi_idmb"
              value="17"
              c:identifier="UDISKS_ERROR_ISCSI_IDMB"
              glib:nick="iscsi-idmb">
      </member>
      <member name="iscsi_login_failed"
              value="18"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_FAILED"
              glib:nick="iscsi-login-failed">
      </member>
      <member name="iscsi_login_auth_failed"
              value="19"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_AUTH_FAILED"
              glib:nick="iscsi-login-auth-failed">
      </member>
      <member name="iscsi_login_fatal"
              value="20"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_FATAL"
              glib:nick="iscsi-login-fatal">
      </member>
      <member name="iscsi_logout_failed"
              value="21"
              c:identifier="UDISKS_ERROR_ISCSI_LOGOUT_FAILED"
              glib:nick="iscsi-logout-failed">
      </member>
      <member name="iscsi_no_firmware"
              value="22"
              c:identifier="UDISKS_ERROR_ISCSI_NO_FIRMWARE"
              glib:nick="iscsi-no-firmware">
      </member>
      <member name="iscsi_no_objects_found"
              value="23"
              c:identifier="UDISKS_ERROR_ISCSI_NO_OBJECTS_FOUND"
              glib:nick="iscsi-no-objects-found">
      </member>
      <member name="iscsi_not_connected"
              value="24"
              c:identifier="UDISKS_ERROR_ISCSI_NOT_CONNECTED"
              glib:nick="iscsi-not-connected">
      </member>
      <member name="iscsi_transport_failed"
              value="25"
              c:identifier="UDISKS_ERROR_ISCSI_TRANSPORT_FAILED"
              glib:nick="iscsi-transport-failed">
      </member>
      <member name="iscsi_unknown_discovery_type"
              value="26"
              c:identifier="UDISKS_ERROR_ISCSI_UNKNOWN_DISCOVERY_TYPE"
              glib:nick="iscsi-unknown-discovery-type">
      </member>
      <function name="quark" c:identifier="udisks_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <interface name="Filesystem"
               c:symbol-prefix="filesystem"
               c:type="UDisksFilesystem"
               glib:type-name="UDisksFilesystem"
               glib:get-type="udisks_filesystem_get_type"
               glib:type-struct="FilesystemIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_filesystem_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_filesystem_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksFilesystem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_mount_points"
                      invoker="get_mount_points"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_dup_mount_points() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_mount">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_unmount">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_mount" c:identifier="udisks_filesystem_call_mount">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_filesystem_call_mount_finish() to get the result of the operation.

See udisks_filesystem_call_mount_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount_finish"
              c:identifier="udisks_filesystem_call_mount_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_filesystem_call_mount().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_mount_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_mount().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount_sync"
              c:identifier="udisks_filesystem_call_mount_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_mount() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_mount_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label"
              c:identifier="udisks_filesystem_call_set_label">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_filesystem_call_set_label_finish() to get the result of the operation.

See udisks_filesystem_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_filesystem_call_set_label_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_filesystem_call_set_label().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_filesystem_call_set_label_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_set_label() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount"
              c:identifier="udisks_filesystem_call_unmount">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_filesystem_call_unmount_finish() to get the result of the operation.

See udisks_filesystem_call_unmount_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount_finish"
              c:identifier="udisks_filesystem_call_unmount_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_filesystem_call_unmount().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_unmount().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount_sync"
              c:identifier="udisks_filesystem_call_unmount_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_unmount() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_mount"
              c:identifier="udisks_filesystem_complete_mount">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="mount_path" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_filesystem_complete_set_label">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_unmount"
              c:identifier="udisks_filesystem_complete_unmount">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_mount_points"
              c:identifier="udisks_filesystem_dup_mount_points"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mount_points"
              c:identifier="udisks_filesystem_get_mount_points"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_dup_mount_points() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mount_points"
              c:identifier="udisks_filesystem_set_mount_points"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="mount-points" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <glib:signal name="handle-mount" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_mount() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-label" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-unmount" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_unmount() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="FilesystemIface"
            c:type="UDisksFilesystemIface"
            glib:is-gtype-struct-for="Filesystem">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_mount">
        <callback name="handle_mount">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_unmount">
        <callback name="handle_unmount">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mount_points">
        <callback name="get_mount_points">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksFilesystem.</doc>
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FilesystemProxy"
           c:symbol-prefix="filesystem_proxy"
           c:type="UDisksFilesystemProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksFilesystemProxy"
           glib:get-type="udisks_filesystem_proxy_get_type"
           glib:type-struct="FilesystemProxyClass">
      <doc xml:space="preserve">The #UDisksFilesystemProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Filesystem"/>
      <constructor name="new_finish"
                   c:identifier="udisks_filesystem_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_filesystem_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_filesystem_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_filesystem_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_filesystem_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_filesystem_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_filesystem_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_filesystem_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_filesystem_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_filesystem_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_filesystem_proxy_new_finish() to get the result of the operation.

See udisks_filesystem_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_filesystem_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_filesystem_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_filesystem_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_filesystem_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemProxyPrivate"
              c:type="UDisksFilesystemProxyPrivate*"/>
      </field>
    </class>
    <record name="FilesystemProxyClass"
            c:type="UDisksFilesystemProxyClass"
            glib:is-gtype-struct-for="FilesystemProxy">
      <doc xml:space="preserve">Class structure for #UDisksFilesystemProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="FilesystemProxyPrivate"
            c:type="UDisksFilesystemProxyPrivate"
            disguised="1">
    </record>
    <class name="FilesystemSkeleton"
           c:symbol-prefix="filesystem_skeleton"
           c:type="UDisksFilesystemSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksFilesystemSkeleton"
           glib:get-type="udisks_filesystem_skeleton_get_type"
           glib:type-struct="FilesystemSkeletonClass">
      <doc xml:space="preserve">The #UDisksFilesystemSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Filesystem"/>
      <constructor name="new" c:identifier="udisks_filesystem_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="FilesystemSkeleton" c:type="UDisksFilesystem*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemSkeletonPrivate"
              c:type="UDisksFilesystemSkeletonPrivate*"/>
      </field>
    </class>
    <record name="FilesystemSkeletonClass"
            c:type="UDisksFilesystemSkeletonClass"
            glib:is-gtype-struct-for="FilesystemSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksFilesystemSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="FilesystemSkeletonPrivate"
            c:type="UDisksFilesystemSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="Job"
               c:symbol-prefix="job"
               c:type="UDisksJob"
               glib:type-name="UDisksJob"
               glib:get-type="udisks_job_get_type"
               glib:type-struct="JobIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
      <function name="interface_info" c:identifier="udisks_job_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_job_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksJob interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="completed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_success" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bytes"
                      invoker="get_bytes"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cancelable"
                      invoker="get_cancelable"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_expected_end_time"
                      invoker="get_expected_end_time"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_objects"
                      invoker="get_objects"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_objects() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operation"
                      invoker="get_operation"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_operation() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress"
                      invoker="get_progress"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress_valid"
                      invoker="get_progress_valid"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rate"
                      invoker="get_rate"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_start_time"
                      invoker="get_start_time"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_started_by_uid"
                      invoker="get_started_by_uid"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_cancel" c:identifier="udisks_job_call_cancel">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_job_call_cancel_finish() to get the result of the operation.

See udisks_job_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="udisks_job_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_job_call_cancel().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="udisks_job_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_job_call_cancel() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel" c:identifier="udisks_job_complete_cancel">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_objects"
              c:identifier="udisks_job_dup_objects"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operation"
              c:identifier="udisks_job_dup_operation"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_completed" c:identifier="udisks_job_emit_completed">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-UDisks2-Job.Completed"&gt;"Completed"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_success" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bytes"
              c:identifier="udisks_job_get_bytes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cancelable"
              c:identifier="udisks_job_get_cancelable"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expected_end_time"
              c:identifier="udisks_job_get_expected_end_time"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_objects"
              c:identifier="udisks_job_get_objects"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_objects() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operation"
              c:identifier="udisks_job_get_operation"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_operation() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="udisks_job_get_progress"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_valid"
              c:identifier="udisks_job_get_progress_valid"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rate"
              c:identifier="udisks_job_get_rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_time"
              c:identifier="udisks_job_get_start_time"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_started_by_uid"
              c:identifier="udisks_job_get_started_by_uid"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bytes"
              c:identifier="udisks_job_set_bytes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cancelable"
              c:identifier="udisks_job_set_cancelable"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expected_end_time"
              c:identifier="udisks_job_set_expected_end_time"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_objects"
              c:identifier="udisks_job_set_objects"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation"
              c:identifier="udisks_job_set_operation"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="udisks_job_set_progress"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress_valid"
              c:identifier="udisks_job_set_progress_valid"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rate"
              c:identifier="udisks_job_set_rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_time"
              c:identifier="udisks_job_set_start_time"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_started_by_uid"
              c:identifier="udisks_job_set_started_by_uid"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="bytes"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="cancelable" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expected-end-time"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="objects" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="operation" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="progress-valid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rate"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="start-time" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="started-by-uid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="completed" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-UDisks2-Job.Completed"&gt;"Completed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_success" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_job_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="JobIface"
            c:type="UDisksJobIface"
            glib:is-gtype-struct-for="Job">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cancelable">
        <callback name="get_cancelable">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_expected_end_time">
        <callback name="get_expected_end_time">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_objects">
        <callback name="get_objects">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operation">
        <callback name="get_operation">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress">
        <callback name="get_progress">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress_valid">
        <callback name="get_progress_valid">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_start_time">
        <callback name="get_start_time">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_started_by_uid">
        <callback name="get_started_by_uid">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="completed">
        <callback name="completed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
            <parameter name="arg_success" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bytes">
        <callback name="get_bytes">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rate">
        <callback name="get_rate">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="JobProxy"
           c:symbol-prefix="job_proxy"
           c:type="UDisksJobProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksJobProxy"
           glib:get-type="udisks_job_proxy_get_type"
           glib:type-struct="JobProxyClass">
      <doc xml:space="preserve">The #UDisksJobProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Job"/>
      <constructor name="new_finish"
                   c:identifier="udisks_job_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_job_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_job_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_job_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_job_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_job_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_job_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_job_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_job_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_job_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_job_proxy_new_finish() to get the result of the operation.

See udisks_job_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus" c:identifier="udisks_job_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_job_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_job_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_job_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="JobProxyPrivate" c:type="UDisksJobProxyPrivate*"/>
      </field>
    </class>
    <record name="JobProxyClass"
            c:type="UDisksJobProxyClass"
            glib:is-gtype-struct-for="JobProxy">
      <doc xml:space="preserve">Class structure for #UDisksJobProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="JobProxyPrivate"
            c:type="UDisksJobProxyPrivate"
            disguised="1">
    </record>
    <class name="JobSkeleton"
           c:symbol-prefix="job_skeleton"
           c:type="UDisksJobSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksJobSkeleton"
           glib:get-type="udisks_job_skeleton_get_type"
           glib:type-struct="JobSkeletonClass">
      <doc xml:space="preserve">The #UDisksJobSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Job"/>
      <constructor name="new" c:identifier="udisks_job_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="JobSkeleton" c:type="UDisksJob*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="JobSkeletonPrivate" c:type="UDisksJobSkeletonPrivate*"/>
      </field>
    </class>
    <record name="JobSkeletonClass"
            c:type="UDisksJobSkeletonClass"
            glib:is-gtype-struct-for="JobSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksJobSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="JobSkeletonPrivate"
            c:type="UDisksJobSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="Loop"
               c:symbol-prefix="loop"
               c:type="UDisksLoop"
               glib:type-name="UDisksLoop"
               glib:get-type="udisks_loop_get_type"
               glib:type-struct="LoopIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_loop_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_loop_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksLoop interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_autoclear"
                      invoker="get_autoclear"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_backing_file"
                      invoker="get_backing_file"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_loop_dup_backing_file() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_setup_by_uid"
                      invoker="get_setup_by_uid"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_autoclear">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_delete" c:identifier="udisks_loop_call_delete">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_loop_call_delete_finish() to get the result of the operation.

See udisks_loop_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_loop_call_delete_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_loop_call_delete().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_loop_call_delete_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_loop_call_delete() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear"
              c:identifier="udisks_loop_call_set_autoclear">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_loop_call_set_autoclear_finish() to get the result of the operation.

See udisks_loop_call_set_autoclear_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear_finish"
              c:identifier="udisks_loop_call_set_autoclear_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_loop_call_set_autoclear().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_call_set_autoclear().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear_sync"
              c:identifier="udisks_loop_call_set_autoclear_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_loop_call_set_autoclear() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_loop_complete_delete">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_autoclear"
              c:identifier="udisks_loop_complete_set_autoclear">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_backing_file"
              c:identifier="udisks_loop_dup_backing_file"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoclear"
              c:identifier="udisks_loop_get_autoclear"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backing_file"
              c:identifier="udisks_loop_get_backing_file"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_loop_dup_backing_file() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setup_by_uid"
              c:identifier="udisks_loop_get_setup_by_uid"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_autoclear"
              c:identifier="udisks_loop_set_autoclear"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backing_file"
              c:identifier="udisks_loop_set_backing_file"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_setup_by_uid"
              c:identifier="udisks_loop_set_setup_by_uid"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="autoclear" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="backing-file" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="setup-by-uid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_loop_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-autoclear" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_loop_complete_set_autoclear() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="LoopIface"
            c:type="UDisksLoopIface"
            glib:is-gtype-struct-for="Loop">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_autoclear">
        <callback name="handle_set_autoclear">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_autoclear">
        <callback name="get_autoclear">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_backing_file">
        <callback name="get_backing_file">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_setup_by_uid">
        <callback name="get_setup_by_uid">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LoopProxy"
           c:symbol-prefix="loop_proxy"
           c:type="UDisksLoopProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksLoopProxy"
           glib:get-type="udisks_loop_proxy_get_type"
           glib:type-struct="LoopProxyClass">
      <doc xml:space="preserve">The #UDisksLoopProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Loop"/>
      <constructor name="new_finish"
                   c:identifier="udisks_loop_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_loop_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_loop_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_loop_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_loop_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_loop_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_loop_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_loop_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_loop_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_loop_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_loop_proxy_new_finish() to get the result of the operation.

See udisks_loop_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_loop_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_loop_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_loop_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_loop_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LoopProxyPrivate" c:type="UDisksLoopProxyPrivate*"/>
      </field>
    </class>
    <record name="LoopProxyClass"
            c:type="UDisksLoopProxyClass"
            glib:is-gtype-struct-for="LoopProxy">
      <doc xml:space="preserve">Class structure for #UDisksLoopProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="LoopProxyPrivate"
            c:type="UDisksLoopProxyPrivate"
            disguised="1">
    </record>
    <class name="LoopSkeleton"
           c:symbol-prefix="loop_skeleton"
           c:type="UDisksLoopSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksLoopSkeleton"
           glib:get-type="udisks_loop_skeleton_get_type"
           glib:type-struct="LoopSkeletonClass">
      <doc xml:space="preserve">The #UDisksLoopSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Loop"/>
      <constructor name="new" c:identifier="udisks_loop_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="LoopSkeleton" c:type="UDisksLoop*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LoopSkeletonPrivate" c:type="UDisksLoopSkeletonPrivate*"/>
      </field>
    </class>
    <record name="LoopSkeletonClass"
            c:type="UDisksLoopSkeletonClass"
            glib:is-gtype-struct-for="LoopSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksLoopSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="LoopSkeletonPrivate"
            c:type="UDisksLoopSkeletonPrivate"
            disguised="1">
    </record>
    <constant name="MAJOR_VERSION" value="2" c:type="UDISKS_MAJOR_VERSION">
      <doc xml:space="preserve">The major version of the libudisks2 header files.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="MDRaid"
               c:symbol-prefix="mdraid"
               c:type="UDisksMDRaid"
               version="2.0.0"
               glib:type-name="UDisksMDRaid"
               glib:get-type="udisks_mdraid_get_type"
               glib:type-struct="MDRaidIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_mdraid_interface_info"
                version="2.0.0">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_mdraid_override_properties"
                version="2.0.0">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksMDRaid interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active_devices"
                      invoker="get_active_devices"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_active_devices() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bitmap_location"
                      invoker="get_bitmap_location"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_bitmap_location() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_child_configuration() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_chunk_size"
                      invoker="get_chunk_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_degraded"
                      invoker="get_degraded"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_level"
                      invoker="get_level"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_level() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_devices"
                      invoker="get_num_devices"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_running"
                      invoker="get_running"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_action"
                      invoker="get_sync_action"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_sync_action() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_completed"
                      invoker="get_sync_completed"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_rate"
                      invoker="get_sync_rate"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_remaining_time"
                      invoker="get_sync_remaining_time"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_uuid() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_request_sync_action">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_bitmap_location">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_mdraid_call_add_device"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_call_add_device_finish() to get the result of the operation.

See udisks_mdraid_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_mdraid_call_add_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_call_add_device().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_mdraid_call_add_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_add_device() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_mdraid_call_delete"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_call_delete_finish() to get the result of the operation.

See udisks_mdraid_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_mdraid_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_call_delete().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_mdraid_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_delete() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_mdraid_call_remove_device"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_call_remove_device_finish() to get the result of the operation.

See udisks_mdraid_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_mdraid_call_remove_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_call_remove_device().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_mdraid_call_remove_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_remove_device() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action"
              c:identifier="udisks_mdraid_call_request_sync_action"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_call_request_sync_action_finish() to get the result of the operation.

See udisks_mdraid_call_request_sync_action_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action_finish"
              c:identifier="udisks_mdraid_call_request_sync_action_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_call_request_sync_action().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_request_sync_action().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action_sync"
              c:identifier="udisks_mdraid_call_request_sync_action_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_request_sync_action() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location"
              c:identifier="udisks_mdraid_call_set_bitmap_location"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_call_set_bitmap_location_finish() to get the result of the operation.

See udisks_mdraid_call_set_bitmap_location_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location_finish"
              c:identifier="udisks_mdraid_call_set_bitmap_location_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_call_set_bitmap_location().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_set_bitmap_location().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location_sync"
              c:identifier="udisks_mdraid_call_set_bitmap_location_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_set_bitmap_location() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start"
              c:identifier="udisks_mdraid_call_start"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_call_start_finish() to get the result of the operation.

See udisks_mdraid_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_finish"
              c:identifier="udisks_mdraid_call_start_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_call_start().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_sync"
              c:identifier="udisks_mdraid_call_start_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_start() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop"
              c:identifier="udisks_mdraid_call_stop"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_call_stop_finish() to get the result of the operation.

See udisks_mdraid_call_stop_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_finish"
              c:identifier="udisks_mdraid_call_stop_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_call_stop().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_stop().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_sync"
              c:identifier="udisks_mdraid_call_stop_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_stop() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_mdraid_complete_add_device"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_mdraid_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_mdraid_complete_remove_device"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_request_sync_action"
              c:identifier="udisks_mdraid_complete_request_sync_action"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_bitmap_location"
              c:identifier="udisks_mdraid_complete_set_bitmap_location"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start"
              c:identifier="udisks_mdraid_complete_start"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop"
              c:identifier="udisks_mdraid_complete_stop"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_active_devices"
              c:identifier="udisks_mdraid_dup_active_devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_bitmap_location"
              c:identifier="udisks_mdraid_dup_bitmap_location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_mdraid_dup_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_level"
              c:identifier="udisks_mdraid_dup_level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_mdraid_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sync_action"
              c:identifier="udisks_mdraid_dup_sync_action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_mdraid_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_devices"
              c:identifier="udisks_mdraid_get_active_devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_active_devices() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bitmap_location"
              c:identifier="udisks_mdraid_get_bitmap_location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_bitmap_location() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_mdraid_get_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_child_configuration() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chunk_size"
              c:identifier="udisks_mdraid_get_chunk_size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_degraded"
              c:identifier="udisks_mdraid_get_degraded"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level"
              c:identifier="udisks_mdraid_get_level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_level() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_mdraid_get_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_devices"
              c:identifier="udisks_mdraid_get_num_devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running"
              c:identifier="udisks_mdraid_get_running"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_mdraid_get_size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_action"
              c:identifier="udisks_mdraid_get_sync_action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_sync_action() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_completed"
              c:identifier="udisks_mdraid_get_sync_completed"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_rate"
              c:identifier="udisks_mdraid_get_sync_rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_remaining_time"
              c:identifier="udisks_mdraid_get_sync_remaining_time"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_mdraid_get_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_uuid() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active_devices"
              c:identifier="udisks_mdraid_set_active_devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bitmap_location"
              c:identifier="udisks_mdraid_set_bitmap_location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_mdraid_set_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chunk_size"
              c:identifier="udisks_mdraid_set_chunk_size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_degraded"
              c:identifier="udisks_mdraid_set_degraded"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_level"
              c:identifier="udisks_mdraid_set_level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_mdraid_set_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_devices"
              c:identifier="udisks_mdraid_set_num_devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_running"
              c:identifier="udisks_mdraid_set_running"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_mdraid_set_size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_action"
              c:identifier="udisks_mdraid_set_sync_action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_completed"
              c:identifier="udisks_mdraid_set_sync_completed"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_rate"
              c:identifier="udisks_mdraid_set_sync_rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_remaining_time"
              c:identifier="udisks_mdraid_set_sync_remaining_time"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_mdraid_set_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-devices"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="bitmap-location"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="child-configuration"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="chunk-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="degraded"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="level"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="num-devices"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="running"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sync-action"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sync-completed"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sync-rate"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sync-remaining-time"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-request-sync-action"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_request_sync_action() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-bitmap-location"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_set_bitmap_location() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start" when="last" version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_start() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop" when="last" version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_stop() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="MDRaidIface"
            c:type="UDisksMDRaidIface"
            glib:is-gtype-struct-for="MDRaid"
            version="2.0.0">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_request_sync_action">
        <callback name="handle_request_sync_action">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_sync_action" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_bitmap_location">
        <callback name="handle_set_bitmap_location">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start">
        <callback name="handle_start">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop">
        <callback name="handle_stop">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active_devices">
        <callback name="get_active_devices">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bitmap_location">
        <callback name="get_bitmap_location">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_chunk_size">
        <callback name="get_chunk_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_degraded">
        <callback name="get_degraded">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_level">
        <callback name="get_level">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_devices">
        <callback name="get_num_devices">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_running">
        <callback name="get_running">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_action">
        <callback name="get_sync_action">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_completed">
        <callback name="get_sync_completed">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_rate">
        <callback name="get_sync_rate">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_remaining_time">
        <callback name="get_sync_remaining_time">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MDRaidProxy"
           c:symbol-prefix="mdraid_proxy"
           c:type="UDisksMDRaidProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksMDRaidProxy"
           glib:get-type="udisks_mdraid_proxy_get_type"
           glib:type-struct="MDRaidProxyClass">
      <doc xml:space="preserve">The #UDisksMDRaidProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="MDRaid"/>
      <constructor name="new_finish"
                   c:identifier="udisks_mdraid_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_mdraid_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_mdraid_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_mdraid_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve">Like udisks_mdraid_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_mdraid_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_mdraid_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_mdraid_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_mdraid_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_proxy_new_finish() to get the result of the operation.

See udisks_mdraid_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_mdraid_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve">Like udisks_mdraid_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_mdraid_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_mdraid_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MDRaidProxyPrivate" c:type="UDisksMDRaidProxyPrivate*"/>
      </field>
    </class>
    <record name="MDRaidProxyClass"
            c:type="UDisksMDRaidProxyClass"
            glib:is-gtype-struct-for="MDRaidProxy"
            version="2.0.0">
      <doc xml:space="preserve">Class structure for #UDisksMDRaidProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="MDRaidProxyPrivate"
            c:type="UDisksMDRaidProxyPrivate"
            disguised="1">
    </record>
    <class name="MDRaidSkeleton"
           c:symbol-prefix="mdraid_skeleton"
           c:type="UDisksMDRaidSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksMDRaidSkeleton"
           glib:get-type="udisks_mdraid_skeleton_get_type"
           glib:type-struct="MDRaidSkeletonClass">
      <doc xml:space="preserve">The #UDisksMDRaidSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="MDRaid"/>
      <constructor name="new"
                   c:identifier="udisks_mdraid_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="MDRaidSkeleton" c:type="UDisksMDRaid*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MDRaidSkeletonPrivate"
              c:type="UDisksMDRaidSkeletonPrivate*"/>
      </field>
    </class>
    <record name="MDRaidSkeletonClass"
            c:type="UDisksMDRaidSkeletonClass"
            glib:is-gtype-struct-for="MDRaidSkeleton"
            version="2.0.0">
      <doc xml:space="preserve">Class structure for #UDisksMDRaidSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="MDRaidSkeletonPrivate"
            c:type="UDisksMDRaidSkeletonPrivate"
            disguised="1">
    </record>
    <constant name="MICRO_VERSION" value="4" c:type="UDISKS_MICRO_VERSION">
      <doc xml:space="preserve">The micro version of the libudisks2 header files.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="6" c:type="UDISKS_MINOR_VERSION">
      <doc xml:space="preserve">The minor version of the libudisks2 header files.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="UDisksManager"
               glib:type-name="UDisksManager"
               glib:get-type="udisks_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_manager_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_supported_filesystems"
                      invoker="get_supported_filesystems"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_filesystems() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_modules">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_loop_setup">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_mdraid_create">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_enable_modules"
              c:identifier="udisks_manager_call_enable_modules">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_manager_call_enable_modules_finish() to get the result of the operation.

See udisks_manager_call_enable_modules_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules_finish"
              c:identifier="udisks_manager_call_enable_modules_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_manager_call_enable_modules().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_enable_modules().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules_sync"
              c:identifier="udisks_manager_call_enable_modules_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_enable_modules() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup"
              c:identifier="udisks_manager_call_loop_setup">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_manager_call_loop_setup_finish() to get the result of the operation.

See udisks_manager_call_loop_setup_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup_finish"
              c:identifier="udisks_manager_call_loop_setup_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_manager_call_loop_setup().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_resulting_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_loop_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup_sync"
              c:identifier="udisks_manager_call_loop_setup_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_loop_setup() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_resulting_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create"
              c:identifier="udisks_manager_call_mdraid_create"
              version="2.0.0">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_manager_call_mdraid_create_finish() to get the result of the operation.

See udisks_manager_call_mdraid_create_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create_finish"
              c:identifier="udisks_manager_call_mdraid_create_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_manager_call_mdraid_create().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_resulting_array"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_mdraid_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create_sync"
              c:identifier="udisks_manager_call_mdraid_create_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_mdraid_create() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_resulting_array"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_modules"
              c:identifier="udisks_manager_complete_enable_modules">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_loop_setup"
              c:identifier="udisks_manager_complete_loop_setup">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="resulting_device" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_mdraid_create"
              c:identifier="udisks_manager_complete_mdraid_create"
              version="2.0.0">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="resulting_array" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_supported_filesystems"
              c:identifier="udisks_manager_dup_supported_filesystems"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="udisks_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_filesystems"
              c:identifier="udisks_manager_get_supported_filesystems"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_filesystems() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="udisks_manager_get_version"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_supported_filesystems"
              c:identifier="udisks_manager_set_supported_filesystems"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="udisks_manager_set_version"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="supported-filesystems"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="version" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-enable-modules" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_enable_modules() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-loop-setup" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_loop_setup() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-mdraid-create" when="last" version="2.0.0">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_mdraid_create() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerIface"
            c:type="UDisksManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_enable_modules">
        <callback name="handle_enable_modules">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_loop_setup">
        <callback name="handle_loop_setup">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_fd" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_filesystems">
        <callback name="get_supported_filesystems">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_mdraid_create">
        <callback name="handle_mdraid_create">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_blocks" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_chunk" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="UDisksManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerProxy"
           glib:get-type="udisks_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve">The #UDisksManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Manager"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_manager_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_manager_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_manager_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_manager_proxy_new_finish() to get the result of the operation.

See udisks_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_manager_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="UDisksManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="UDisksManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve">Class structure for #UDisksManagerProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="UDisksManagerProxyPrivate"
            disguised="1">
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="UDisksManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerSkeleton"
           glib:get-type="udisks_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve">The #UDisksManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Manager"/>
      <constructor name="new" c:identifier="udisks_manager_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="UDisksManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="UDisksManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="UDisksManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksManagerSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="UDisksManagerSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="Object"
               c:symbol-prefix="object"
               c:type="UDisksObject"
               glib:type-name="UDisksObject"
               glib:get-type="udisks_object_get_type"
               glib:type-struct="ObjectIface">
      <doc xml:space="preserve">The #UDisksObject type is a specialized container of interfaces.</doc>
      <prerequisite name="Gio.DBusObject"/>
      <method name="get_block" c:identifier="udisks_object_get_block">
        <doc xml:space="preserve">Gets the #UDisksBlock instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksBlock that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive" c:identifier="udisks_object_get_drive">
        <doc xml:space="preserve">Gets the #UDisksDrive instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksDrive that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive_ata" c:identifier="udisks_object_get_drive_ata">
        <doc xml:space="preserve">Gets the #UDisksDriveAta instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksDriveAta that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="DriveAta" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypted" c:identifier="udisks_object_get_encrypted">
        <doc xml:space="preserve">Gets the #UDisksEncrypted instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksEncrypted that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Encrypted" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filesystem"
              c:identifier="udisks_object_get_filesystem">
        <doc xml:space="preserve">Gets the #UDisksFilesystem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksFilesystem that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Filesystem" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_job" c:identifier="udisks_object_get_job">
        <doc xml:space="preserve">Gets the #UDisksJob instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksJob that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Job" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loop" c:identifier="udisks_object_get_loop">
        <doc xml:space="preserve">Gets the #UDisksLoop instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksLoop that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager" c:identifier="udisks_object_get_manager">
        <doc xml:space="preserve">Gets the #UDisksManager instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksManager that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid"
              c:identifier="udisks_object_get_mdraid"
              version="2.0.0">
        <doc xml:space="preserve">Gets the #UDisksMDRaid instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksMDRaid that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition" c:identifier="udisks_object_get_partition">
        <doc xml:space="preserve">Gets the #UDisksPartition instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksPartition that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Partition" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition_table"
              c:identifier="udisks_object_get_partition_table">
        <doc xml:space="preserve">Gets the #UDisksPartitionTable instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksPartitionTable that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swapspace" c:identifier="udisks_object_get_swapspace">
        <doc xml:space="preserve">Gets the #UDisksSwapspace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; on @object, if any.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UDisksSwapspace that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Swapspace" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_block"
              c:identifier="udisks_object_peek_block"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_block() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksBlock or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive"
              c:identifier="udisks_object_peek_drive"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_drive() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksDrive or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive_ata"
              c:identifier="udisks_object_peek_drive_ata"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_drive_ata() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksDriveAta or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="DriveAta" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_encrypted"
              c:identifier="udisks_object_peek_encrypted"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_encrypted() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksEncrypted or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Encrypted" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_filesystem"
              c:identifier="udisks_object_peek_filesystem"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_filesystem() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksFilesystem or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Filesystem" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_job"
              c:identifier="udisks_object_peek_job"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_job() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksJob or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Job" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_loop"
              c:identifier="udisks_object_peek_loop"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_loop() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksLoop or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager"
              c:identifier="udisks_object_peek_manager"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_manager() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksManager or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_mdraid"
              c:identifier="udisks_object_peek_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_mdraid() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksMDRaid or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_partition"
              c:identifier="udisks_object_peek_partition"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_partition() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksPartition or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Partition" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_partition_table"
              c:identifier="udisks_object_peek_partition_table"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_partition_table() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksPartitionTable or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_swapspace"
              c:identifier="udisks_object_peek_swapspace"
              introspectable="0">
        <doc xml:space="preserve">Like udisks_object_get_swapspace() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UDisksSwapspace or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Swapspace" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="block" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksBlock instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Block"/>
      </property>
      <property name="drive" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksDrive instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Drive"/>
      </property>
      <property name="drive-ata" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksDriveAta instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="DriveAta"/>
      </property>
      <property name="encrypted" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksEncrypted instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Encrypted"/>
      </property>
      <property name="filesystem" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksFilesystem instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Filesystem"/>
      </property>
      <property name="job" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksJob instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Job"/>
      </property>
      <property name="loop" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksLoop instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Loop"/>
      </property>
      <property name="manager" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksManager instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Manager"/>
      </property>
      <property name="mdraid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksMDRaid instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="MDRaid"/>
      </property>
      <property name="partition" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksPartition instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Partition"/>
      </property>
      <property name="partition-table" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksPartitionTable instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="PartitionTable"/>
      </property>
      <property name="swapspace" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #UDisksSwapspace instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Swapspace"/>
      </property>
    </interface>
    <record name="ObjectIface"
            c:type="UDisksObjectIface"
            glib:is-gtype-struct-for="Object">
      <doc xml:space="preserve">Virtual table for the #UDisksObject interface.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="ObjectInfo"
           c:symbol-prefix="object_info"
           c:type="UDisksObjectInfo"
           version="2.1"
           parent="GObject.Object"
           glib:type-name="UDisksObjectInfo"
           glib:get-type="udisks_object_info_get_type">
      <doc xml:space="preserve">Detailed information about the D-Bus interfaces (such as
#UDisksBlock and #UDisksDrive) on a #UDisksObject that is suitable
to display in an user interface. Use
udisks_client_get_object_info() to get #UDisksObjectInfo objects.
Note that #UDisksObjectInfo is an immutable object; once it has
been created it cannot be modified further.

The &lt;link
linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;HintName&lt;/link&gt;
and/or &lt;link
linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;HintIconName&lt;/link&gt;
propreties on associated #UDisksBlock interfaces (if any) may
influence what udisks_object_info_get_icon() and
udisks_object_info_get_media_icon() returns.

The value return by udisks_object_info_get_one_liner() is designed
to contain enough information such that it is all that needs to be
shown about the object. As a result for e.g.  block devices or
drives it contains the special device device
e.g. &lt;filename&gt;/dev/sda&lt;/filename&gt;.</doc>
      <method name="get_description"
              c:identifier="udisks_object_info_get_description"
              version="2.1">
        <doc xml:space="preserve">Gets the description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="udisks_object_info_get_icon"
              version="2.1">
        <doc xml:space="preserve">Gets the icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_symbolic"
              c:identifier="udisks_object_info_get_icon_symbolic"
              version="2.1">
        <doc xml:space="preserve">Gets the symbolic icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_description"
              c:identifier="udisks_object_info_get_media_description"
              version="2.1">
        <doc xml:space="preserve">Gets the media description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_icon"
              c:identifier="udisks_object_info_get_media_icon"
              version="2.1">
        <doc xml:space="preserve">Gets the media icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_icon_symbolic"
              c:identifier="udisks_object_info_get_media_icon_symbolic"
              version="2.1">
        <doc xml:space="preserve">Gets the symbolic media icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_object_info_get_name"
              version="2.1">
        <doc xml:space="preserve">Gets the name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object"
              c:identifier="udisks_object_info_get_object"
              version="2.1">
        <doc xml:space="preserve">Gets the #UDisksObject that @info is for</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The object - do not free or unref, the reference belongs to @info.</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_one_liner"
              c:identifier="udisks_object_info_get_one_liner"
              version="2.1">
        <doc xml:space="preserve">Gets a one-line description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_key"
              c:identifier="udisks_object_info_get_sort_key"
              version="2.1">
        <doc xml:space="preserve">Gets the sort-key for @info. This can be used with g_strcmp0() to
sort objects.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The sort key or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="ObjectManagerClient"
           c:symbol-prefix="object_manager_client"
           c:type="UDisksObjectManagerClient"
           parent="Gio.DBusObjectManagerClient"
           glib:type-name="UDisksObjectManagerClient"
           glib:get-type="udisks_object_manager_client_get_type"
           glib:type-struct="ObjectManagerClientClass">
      <doc xml:space="preserve">The #UDisksObjectManagerClient structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_object_manager_client_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_object_manager_client_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_object_manager_client_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_object_manager_client_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_object_manager_client_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_object_manager_client_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_object_manager_client_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_object_manager_client_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_object_manager_client_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates #GDBusObjectManagerClient using udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_object_manager_client_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_proxy_type"
                c:identifier="udisks_object_manager_client_get_proxy_type">
        <doc xml:space="preserve">A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy&lt;!-- --&gt;- and #GDBusProxy&lt;!-- --&gt;-derived types.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusProxy&lt;!-- --&gt;-derived #GType if @interface_name is not %NULL, otherwise the #GType for #UDisksObjectProxy.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusObjectManagerClient.</doc>
            <type name="Gio.DBusObjectManagerClient"
                  c:type="GDBusObjectManagerClient*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">The object path of the remote object (unused).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Interface name of the remote object or %NULL to get the object proxy #GType.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data (unused).</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="udisks_object_manager_client_new">
        <doc xml:space="preserve">Asynchronously creates #GDBusObjectManagerClient using udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_object_manager_client_new_finish() to get the result of the operation.

See udisks_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_object_manager_client_new_for_bus">
        <doc xml:space="preserve">Like udisks_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_object_manager_client_new_for_bus_finish() to get the result of the operation.

See udisks_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectManagerClient"
              c:type="GDBusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectManagerClientPrivate"
              c:type="UDisksObjectManagerClientPrivate*"/>
      </field>
    </class>
    <record name="ObjectManagerClientClass"
            c:type="UDisksObjectManagerClientClass"
            glib:is-gtype-struct-for="ObjectManagerClient">
      <doc xml:space="preserve">Class structure for #UDisksObjectManagerClient.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusObjectManagerClientClass"
              c:type="GDBusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="ObjectManagerClientPrivate"
            c:type="UDisksObjectManagerClientPrivate"
            disguised="1">
    </record>
    <class name="ObjectProxy"
           c:symbol-prefix="object_proxy"
           c:type="UDisksObjectProxy"
           parent="Gio.DBusObjectProxy"
           glib:type-name="UDisksObjectProxy"
           glib:get-type="udisks_object_proxy_get_type"
           glib:type-struct="ObjectProxyClass">
      <doc xml:space="preserve">The #UDisksObjectProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="udisks_object_proxy_new">
        <doc xml:space="preserve">Creates a new proxy object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The proxy object.</doc>
          <type name="ObjectProxy" c:type="UDisksObjectProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectProxy" c:type="GDBusObjectProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectProxyPrivate" c:type="UDisksObjectProxyPrivate*"/>
      </field>
    </class>
    <record name="ObjectProxyClass"
            c:type="UDisksObjectProxyClass"
            glib:is-gtype-struct-for="ObjectProxy">
      <doc xml:space="preserve">Class structure for #UDisksObjectProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusObjectProxyClass" c:type="GDBusObjectProxyClass"/>
      </field>
    </record>
    <record name="ObjectProxyPrivate"
            c:type="UDisksObjectProxyPrivate"
            disguised="1">
    </record>
    <class name="ObjectSkeleton"
           c:symbol-prefix="object_skeleton"
           c:type="UDisksObjectSkeleton"
           parent="Gio.DBusObjectSkeleton"
           glib:type-name="UDisksObjectSkeleton"
           glib:get-type="udisks_object_skeleton_get_type"
           glib:type-struct="ObjectSkeletonClass">
      <doc xml:space="preserve">The #UDisksObjectSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="udisks_object_skeleton_new">
        <doc xml:space="preserve">Creates a new skeleton object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_block" c:identifier="udisks_object_skeleton_set_block">
        <doc xml:space="preserve">Sets the #UDisksBlock instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksBlock or %NULL to clear the interface.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive" c:identifier="udisks_object_skeleton_set_drive">
        <doc xml:space="preserve">Sets the #UDisksDrive instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksDrive or %NULL to clear the interface.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive_ata"
              c:identifier="udisks_object_skeleton_set_drive_ata">
        <doc xml:space="preserve">Sets the #UDisksDriveAta instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksDriveAta or %NULL to clear the interface.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypted"
              c:identifier="udisks_object_skeleton_set_encrypted">
        <doc xml:space="preserve">Sets the #UDisksEncrypted instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksEncrypted or %NULL to clear the interface.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filesystem"
              c:identifier="udisks_object_skeleton_set_filesystem">
        <doc xml:space="preserve">Sets the #UDisksFilesystem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksFilesystem or %NULL to clear the interface.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_job" c:identifier="udisks_object_skeleton_set_job">
        <doc xml:space="preserve">Sets the #UDisksJob instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksJob or %NULL to clear the interface.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loop" c:identifier="udisks_object_skeleton_set_loop">
        <doc xml:space="preserve">Sets the #UDisksLoop instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksLoop or %NULL to clear the interface.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager"
              c:identifier="udisks_object_skeleton_set_manager">
        <doc xml:space="preserve">Sets the #UDisksManager instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksManager or %NULL to clear the interface.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid"
              c:identifier="udisks_object_skeleton_set_mdraid"
              version="2.0.0">
        <doc xml:space="preserve">Sets the #UDisksMDRaid instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksMDRaid or %NULL to clear the interface.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition"
              c:identifier="udisks_object_skeleton_set_partition">
        <doc xml:space="preserve">Sets the #UDisksPartition instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksPartition or %NULL to clear the interface.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition_table"
              c:identifier="udisks_object_skeleton_set_partition_table">
        <doc xml:space="preserve">Sets the #UDisksPartitionTable instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksPartitionTable or %NULL to clear the interface.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swapspace"
              c:identifier="udisks_object_skeleton_set_swapspace">
        <doc xml:space="preserve">Sets the #UDisksSwapspace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; on @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #UDisksSwapspace or %NULL to clear the interface.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectSkeleton" c:type="GDBusObjectSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectSkeletonPrivate"
              c:type="UDisksObjectSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ObjectSkeletonClass"
            c:type="UDisksObjectSkeletonClass"
            glib:is-gtype-struct-for="ObjectSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksObjectSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusObjectSkeletonClass"
              c:type="GDBusObjectSkeletonClass"/>
      </field>
    </record>
    <record name="ObjectSkeletonPrivate"
            c:type="UDisksObjectSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="Partition"
               c:symbol-prefix="partition"
               c:type="UDisksPartition"
               glib:type-name="UDisksPartition"
               glib:get-type="udisks_partition_get_type"
               glib:type-struct="PartitionIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_partition_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_partition_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksPartition interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_flags" invoker="get_flags" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_contained"
                      invoker="get_is_contained"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_container"
                      invoker="get_is_container"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_number"
                      invoker="get_number"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_offset"
                      invoker="get_offset"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_table" invoker="get_table" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_table() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_type_() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid" invoker="get_uuid" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_uuid() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_flags">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_name">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_type">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_delete" c:identifier="udisks_partition_call_delete">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_call_delete_finish() to get the result of the operation.

See udisks_partition_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_partition_call_delete_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_call_delete().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_partition_call_delete_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_delete() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags"
              c:identifier="udisks_partition_call_set_flags">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_call_set_flags_finish() to get the result of the operation.

See udisks_partition_call_set_flags_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags_finish"
              c:identifier="udisks_partition_call_set_flags_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_call_set_flags().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_flags().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags_sync"
              c:identifier="udisks_partition_call_set_flags_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_flags() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name"
              c:identifier="udisks_partition_call_set_name">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_call_set_name_finish() to get the result of the operation.

See udisks_partition_call_set_name_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name_finish"
              c:identifier="udisks_partition_call_set_name_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_call_set_name().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name_sync"
              c:identifier="udisks_partition_call_set_name_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_name() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type"
              c:identifier="udisks_partition_call_set_type">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_call_set_type_finish() to get the result of the operation.

See udisks_partition_call_set_type_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type_finish"
              c:identifier="udisks_partition_call_set_type_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_call_set_type().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_type().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type_sync"
              c:identifier="udisks_partition_call_set_type_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_type() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_partition_complete_delete">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_flags"
              c:identifier="udisks_partition_complete_set_flags">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_name"
              c:identifier="udisks_partition_complete_set_name">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_type"
              c:identifier="udisks_partition_complete_set_type">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_partition_dup_name"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_table"
              c:identifier="udisks_partition_dup_table"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_partition_dup_type_"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_partition_dup_uuid"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="udisks_partition_get_flags"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_contained"
              c:identifier="udisks_partition_get_is_contained"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_container"
              c:identifier="udisks_partition_get_is_container"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_partition_get_name"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number"
              c:identifier="udisks_partition_get_number"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset"
              c:identifier="udisks_partition_get_offset"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_partition_get_size"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_table"
              c:identifier="udisks_partition_get_table"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_table() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_partition_get_type_"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_type_() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_partition_get_uuid"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_uuid() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="udisks_partition_set_flags"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_contained"
              c:identifier="udisks_partition_set_is_contained"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_container"
              c:identifier="udisks_partition_set_is_container"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_partition_set_name"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number"
              c:identifier="udisks_partition_set_number"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset"
              c:identifier="udisks_partition_set_offset"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_partition_set_size"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_table"
              c:identifier="udisks_partition_set_table"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_partition_set_type_"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_partition_set_uuid"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="is-contained" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-container" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="number" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="offset" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="size" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="table" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-flags" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_flags() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-name" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_name() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-type" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_type() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PartitionIface"
            c:type="UDisksPartitionIface"
            glib:is-gtype-struct-for="Partition">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_flags">
        <callback name="handle_set_flags">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_flags" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_name">
        <callback name="handle_set_name">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_type">
        <callback name="handle_set_type">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_flags">
        <callback name="get_flags">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_contained">
        <callback name="get_is_contained">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_container">
        <callback name="get_is_container">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_number">
        <callback name="get_number">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_offset">
        <callback name="get_offset">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_table">
        <callback name="get_table">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PartitionProxy"
           c:symbol-prefix="partition_proxy"
           c:type="UDisksPartitionProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPartitionProxy"
           glib:get-type="udisks_partition_proxy_get_type"
           glib:type-struct="PartitionProxyClass">
      <doc xml:space="preserve">The #UDisksPartitionProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Partition"/>
      <constructor name="new_finish"
                   c:identifier="udisks_partition_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_partition_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_partition_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_partition_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_partition_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_partition_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_partition_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_partition_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_proxy_new_finish() to get the result of the operation.

See udisks_partition_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_partition_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_partition_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_partition_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionProxyPrivate"
              c:type="UDisksPartitionProxyPrivate*"/>
      </field>
    </class>
    <record name="PartitionProxyClass"
            c:type="UDisksPartitionProxyClass"
            glib:is-gtype-struct-for="PartitionProxy">
      <doc xml:space="preserve">Class structure for #UDisksPartitionProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PartitionProxyPrivate"
            c:type="UDisksPartitionProxyPrivate"
            disguised="1">
    </record>
    <class name="PartitionSkeleton"
           c:symbol-prefix="partition_skeleton"
           c:type="UDisksPartitionSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPartitionSkeleton"
           glib:get-type="udisks_partition_skeleton_get_type"
           glib:type-struct="PartitionSkeletonClass">
      <doc xml:space="preserve">The #UDisksPartitionSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Partition"/>
      <constructor name="new" c:identifier="udisks_partition_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="PartitionSkeleton" c:type="UDisksPartition*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionSkeletonPrivate"
              c:type="UDisksPartitionSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PartitionSkeletonClass"
            c:type="UDisksPartitionSkeletonClass"
            glib:is-gtype-struct-for="PartitionSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksPartitionSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PartitionSkeletonPrivate"
            c:type="UDisksPartitionSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="PartitionTable"
               c:symbol-prefix="partition_table"
               c:type="UDisksPartitionTable"
               glib:type-name="UDisksPartitionTable"
               glib:get-type="udisks_partition_table_get_type"
               glib:type-struct="PartitionTableIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_partition_table_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_partition_table_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksPartitionTable interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_type_() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_partition">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_partition_and_format">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create_partition"
              c:identifier="udisks_partition_table_call_create_partition">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_table_call_create_partition_finish() to get the result of the operation.

See udisks_partition_table_call_create_partition_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format"
              c:identifier="udisks_partition_table_call_create_partition_and_format">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_table_call_create_partition_and_format_finish() to get the result of the operation.

See udisks_partition_table_call_create_partition_and_format_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="9">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format_finish"
              c:identifier="udisks_partition_table_call_create_partition_and_format_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_table_call_create_partition_and_format().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_call_create_partition_and_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format_sync"
              c:identifier="udisks_partition_table_call_create_partition_and_format_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_table_call_create_partition_and_format() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_finish"
              c:identifier="udisks_partition_table_call_create_partition_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_table_call_create_partition().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_call_create_partition().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_sync"
              c:identifier="udisks_partition_table_call_create_partition_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_table_call_create_partition() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_partition"
              c:identifier="udisks_partition_table_complete_create_partition">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="created_partition" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_partition_and_format"
              c:identifier="udisks_partition_table_complete_create_partition_and_format">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="created_partition" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_partition_table_dup_type_"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_partition_table_get_type_"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_type_() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_partition_table_set_type_"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-create-partition" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_table_complete_create_partition() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-partition-and-format" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_table_complete_create_partition_and_format() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PartitionTableIface"
            c:type="UDisksPartitionTableIface"
            glib:is-gtype-struct-for="PartitionTable">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_partition">
        <callback name="handle_create_partition">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_offset" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_partition_and_format">
        <callback name="handle_create_partition_and_format">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_offset" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_format_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_format_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksPartitionTable.</doc>
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PartitionTableProxy"
           c:symbol-prefix="partition_table_proxy"
           c:type="UDisksPartitionTableProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPartitionTableProxy"
           glib:get-type="udisks_partition_table_proxy_get_type"
           glib:type-struct="PartitionTableProxyClass">
      <doc xml:space="preserve">The #UDisksPartitionTableProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="PartitionTable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_partition_table_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_table_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_partition_table_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_partition_table_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_partition_table_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_partition_table_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_partition_table_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_partition_table_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_partition_table_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_partition_table_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_table_proxy_new_finish() to get the result of the operation.

See udisks_partition_table_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_partition_table_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_partition_table_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_partition_table_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_partition_table_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionTableProxyPrivate"
              c:type="UDisksPartitionTableProxyPrivate*"/>
      </field>
    </class>
    <record name="PartitionTableProxyClass"
            c:type="UDisksPartitionTableProxyClass"
            glib:is-gtype-struct-for="PartitionTableProxy">
      <doc xml:space="preserve">Class structure for #UDisksPartitionTableProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PartitionTableProxyPrivate"
            c:type="UDisksPartitionTableProxyPrivate"
            disguised="1">
    </record>
    <class name="PartitionTableSkeleton"
           c:symbol-prefix="partition_table_skeleton"
           c:type="UDisksPartitionTableSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPartitionTableSkeleton"
           glib:get-type="udisks_partition_table_skeleton_get_type"
           glib:type-struct="PartitionTableSkeletonClass">
      <doc xml:space="preserve">The #UDisksPartitionTableSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="PartitionTable"/>
      <constructor name="new"
                   c:identifier="udisks_partition_table_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="PartitionTableSkeleton" c:type="UDisksPartitionTable*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionTableSkeletonPrivate"
              c:type="UDisksPartitionTableSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PartitionTableSkeletonClass"
            c:type="UDisksPartitionTableSkeletonClass"
            glib:is-gtype-struct-for="PartitionTableSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksPartitionTableSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PartitionTableSkeletonPrivate"
            c:type="UDisksPartitionTableSkeletonPrivate"
            disguised="1">
    </record>
    <record name="PartitionTypeInfo"
            c:type="UDisksPartitionTypeInfo"
            glib:type-name="UDisksPartitionTypeInfo"
            glib:get-type="udisks_partition_type_info_get_type"
            c:symbol-prefix="partition_type_info">
      <doc xml:space="preserve">Detailed information about a partition type.

@table_subtype is used to break the set of partition types for
@table_type into a logical subsets. It is typically only used in
user interfaces where the partition type is selected.

This struct may grow in the future without it being considered an
ABI break.</doc>
      <field name="table_type" writable="1">
        <doc xml:space="preserve">A partition table type e.g. 'dos' or 'gpt'</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="table_subtype" writable="1">
        <doc xml:space="preserve">A partition table sub-type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve">A partition type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve">Flags from the #UDisksPartitionTypeInfoFlags enumeration.</doc>
        <type name="PartitionTypeInfoFlags"
              c:type="UDisksPartitionTypeInfoFlags"/>
      </field>
      <method name="free" c:identifier="udisks_partition_type_info_free">
        <doc xml:space="preserve">Frees @info.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksPartitionTypeInfo.</doc>
            <type name="PartitionTypeInfo" c:type="UDisksPartitionTypeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="PartitionTypeInfoFlags"
              glib:type-name="UDisksPartitionTypeInfoFlags"
              glib:get-type="udisks_partition_type_info_flags_get_type"
              c:type="UDisksPartitionTypeInfoFlags">
      <doc xml:space="preserve">Flags describing a partition type.</doc>
      <member name="none"
              value="0"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No flags set.</doc>
      </member>
      <member name="swap"
              value="1"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP"
              glib:nick="swap">
        <doc xml:space="preserve">Partition type is used for swap.</doc>
      </member>
      <member name="raid"
              value="2"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID"
              glib:nick="raid">
        <doc xml:space="preserve">Partition type is used for RAID/LVM or similar.</doc>
      </member>
      <member name="hidden"
              value="4"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN"
              glib:nick="hidden">
        <doc xml:space="preserve">Partition type indicates the partition is hidden (e.g. 'dos' type 0x1b "Hidden W95 FAT32"). Note that this is not the same as user-toggleable attributs/flags for a partition.</doc>
      </member>
      <member name="create_only"
              value="8"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY"
              glib:nick="create-only">
        <doc xml:space="preserve">Partition type can only be used when creating a partition and e.g. should not be selectable in a "change partition type" user interface (e.g. 'dos' type 0x05, 0x0f and 0x85 for extended partitions).</doc>
      </member>
      <member name="system"
              value="16"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM"
              glib:nick="system">
        <doc xml:space="preserve">Partition type indicates the partition is part of the system / bootloader (e.g. 'dos' types 0xee, 0xff, 'gpt' types for 'EFI System partition' and 'BIOS Boot partition').</doc>
      </member>
    </bitfield>
    <interface name="Swapspace"
               c:symbol-prefix="swapspace"
               c:type="UDisksSwapspace"
               glib:type-name="UDisksSwapspace"
               glib:get-type="udisks_swapspace_get_type"
               glib:type-struct="SwapspaceIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="udisks_swapspace_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_swapspace_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksSwapspace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active"
                      invoker="get_active"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_start" c:identifier="udisks_swapspace_call_start">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_swapspace_call_start_finish() to get the result of the operation.

See udisks_swapspace_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_finish"
              c:identifier="udisks_swapspace_call_start_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_swapspace_call_start().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_sync"
              c:identifier="udisks_swapspace_call_start_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_start() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop" c:identifier="udisks_swapspace_call_stop">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_swapspace_call_stop_finish() to get the result of the operation.

See udisks_swapspace_call_stop_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_finish"
              c:identifier="udisks_swapspace_call_stop_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_swapspace_call_stop().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_stop().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_sync"
              c:identifier="udisks_swapspace_call_stop_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_stop() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start"
              c:identifier="udisks_swapspace_complete_start">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop"
              c:identifier="udisks_swapspace_complete_stop">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="udisks_swapspace_get_active"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="udisks_swapspace_set_active"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-start" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_start() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_stop() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="SwapspaceIface"
            c:type="UDisksSwapspaceIface"
            glib:is-gtype-struct-for="Swapspace">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_start">
        <callback name="handle_start">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop">
        <callback name="handle_stop">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active">
        <callback name="get_active">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UDisksSwapspace.</doc>
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SwapspaceProxy"
           c:symbol-prefix="swapspace_proxy"
           c:type="UDisksSwapspaceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksSwapspaceProxy"
           glib:get-type="udisks_swapspace_proxy_get_type"
           glib:type-struct="SwapspaceProxyClass">
      <doc xml:space="preserve">The #UDisksSwapspaceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Swapspace"/>
      <constructor name="new_finish"
                   c:identifier="udisks_swapspace_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_swapspace_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_swapspace_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with udisks_swapspace_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_swapspace_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like udisks_swapspace_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_swapspace_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_swapspace_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_swapspace_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_swapspace_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_swapspace_proxy_new_finish() to get the result of the operation.

See udisks_swapspace_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_swapspace_proxy_new_for_bus">
        <doc xml:space="preserve">Like udisks_swapspace_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call udisks_swapspace_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_swapspace_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SwapspaceProxyPrivate"
              c:type="UDisksSwapspaceProxyPrivate*"/>
      </field>
    </class>
    <record name="SwapspaceProxyClass"
            c:type="UDisksSwapspaceProxyClass"
            glib:is-gtype-struct-for="SwapspaceProxy">
      <doc xml:space="preserve">Class structure for #UDisksSwapspaceProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="SwapspaceProxyPrivate"
            c:type="UDisksSwapspaceProxyPrivate"
            disguised="1">
    </record>
    <class name="SwapspaceSkeleton"
           c:symbol-prefix="swapspace_skeleton"
           c:type="UDisksSwapspaceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksSwapspaceSkeleton"
           glib:get-type="udisks_swapspace_skeleton_get_type"
           glib:type-struct="SwapspaceSkeletonClass">
      <doc xml:space="preserve">The #UDisksSwapspaceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="Swapspace"/>
      <constructor name="new" c:identifier="udisks_swapspace_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="SwapspaceSkeleton" c:type="UDisksSwapspace*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SwapspaceSkeletonPrivate"
              c:type="UDisksSwapspaceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="SwapspaceSkeletonClass"
            c:type="UDisksSwapspaceSkeletonClass"
            glib:is-gtype-struct-for="SwapspaceSkeleton">
      <doc xml:space="preserve">Class structure for #UDisksSwapspaceSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="SwapspaceSkeletonPrivate"
            c:type="UDisksSwapspaceSkeletonPrivate"
            disguised="1">
    </record>
    <function name="block_interface_info"
              c:identifier="udisks_block_interface_info"
              moved-to="Block.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="block_override_properties"
              c:identifier="udisks_block_override_properties"
              moved-to="Block.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksBlock interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_ata_interface_info"
              c:identifier="udisks_drive_ata_interface_info"
              moved-to="DriveAta.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_ata_override_properties"
              c:identifier="udisks_drive_ata_override_properties"
              moved-to="DriveAta.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksDriveAta interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_interface_info"
              c:identifier="udisks_drive_interface_info"
              moved-to="Drive.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_override_properties"
              c:identifier="udisks_drive_override_properties"
              moved-to="Drive.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksDrive interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="encrypted_interface_info"
              c:identifier="udisks_encrypted_interface_info"
              moved-to="Encrypted.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="encrypted_override_properties"
              c:identifier="udisks_encrypted_override_properties"
              moved-to="Encrypted.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksEncrypted interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark"
              c:identifier="udisks_error_quark"
              moved-to="Error.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="filesystem_interface_info"
              c:identifier="udisks_filesystem_interface_info"
              moved-to="Filesystem.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="filesystem_override_properties"
              c:identifier="udisks_filesystem_override_properties"
              moved-to="Filesystem.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksFilesystem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="job_interface_info"
              c:identifier="udisks_job_interface_info"
              moved-to="Job.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="job_override_properties"
              c:identifier="udisks_job_override_properties"
              moved-to="Job.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksJob interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="loop_interface_info"
              c:identifier="udisks_loop_interface_info"
              moved-to="Loop.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="loop_override_properties"
              c:identifier="udisks_loop_override_properties"
              moved-to="Loop.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksLoop interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="udisks_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_override_properties"
              c:identifier="udisks_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mdraid_interface_info"
              c:identifier="udisks_mdraid_interface_info"
              moved-to="MDRaid.interface_info"
              version="2.0.0">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="mdraid_override_properties"
              c:identifier="udisks_mdraid_override_properties"
              moved-to="MDRaid.override_properties"
              version="2.0.0">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksMDRaid interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="partition_interface_info"
              c:identifier="udisks_partition_interface_info"
              moved-to="Partition.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="partition_override_properties"
              c:identifier="udisks_partition_override_properties"
              moved-to="Partition.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksPartition interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="partition_table_interface_info"
              c:identifier="udisks_partition_table_interface_info"
              moved-to="PartitionTable.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="partition_table_override_properties"
              c:identifier="udisks_partition_table_override_properties"
              moved-to="PartitionTable.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksPartitionTable interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="swapspace_interface_info"
              c:identifier="udisks_swapspace_interface_info"
              moved-to="Swapspace.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="swapspace_override_properties"
              c:identifier="udisks_swapspace_override_properties"
              moved-to="Swapspace.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UDisksSwapspace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
