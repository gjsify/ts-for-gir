<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="colord"/>
  <c:include name="colord.h"/>
  <namespace name="Colord"
             version="1.0"
             shared-library="libcolord.so.2"
             c:identifier-prefixes="Cd"
             c:symbol-prefixes="cd">
    <alias name="PixelFormat" c:type="CdPixelFormat">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="101">The pixel format of an image.
NOTE: these values are the same as the lcms2 AOTTTTTUYFPXSEEECCCCBBB type.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="107"/>
      <type name="guint32" c:type="guint32"/>
    </alias>
    <constant name="CLIENT_PROPERTY_DAEMON_VERSION"
              value="DaemonVersion"
              c:type="CD_CLIENT_PROPERTY_DAEMON_VERSION">
      <source-position filename="lib/colord/cd-enum.h" line="429"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_PROPERTY_SYSTEM_MODEL"
              value="SystemModel"
              c:type="CD_CLIENT_PROPERTY_SYSTEM_MODEL">
      <source-position filename="lib/colord/cd-enum.h" line="431"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_PROPERTY_SYSTEM_VENDOR"
              value="SystemVendor"
              c:type="CD_CLIENT_PROPERTY_SYSTEM_VENDOR">
      <source-position filename="lib/colord/cd-enum.h" line="430"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="CdClient"
           parent="GObject.Object"
           glib:type-name="CdClient"
           glib:get-type="cd_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="lib/colord/cd-client.h" line="76"/>
      <constructor name="new" c:identifier="cd_client_new" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2632">Creates a new #CdClient object.</doc>
        <source-position filename="lib/colord/cd-client.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="2637">a new CdClient object.</doc>
          <type name="Client" c:type="CdClient*"/>
        </return-value>
      </constructor>
      <function name="error_from_string"
                c:identifier="cd_client_error_from_string"
                version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="877">Converts a string to a #CdClientError.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="580"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="882">enumerated value</doc>
          <type name="ClientError" c:type="CdClientError"/>
        </return-value>
        <parameters>
          <parameter name="error_desc" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark"
                c:identifier="cd_client_error_quark"
                version="0.1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="111">An error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="error_to_string"
                c:identifier="cd_client_error_to_string"
                version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="848">Converts a #CdClientError to a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="579"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="853">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="error_enum" transfer-ownership="none">
            <type name="ClientError" c:type="CdClientError"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <source-position filename="lib/colord/cd-client.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_added">
        <source-position filename="lib/colord/cd-client.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="CdDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_changed">
        <source-position filename="lib/colord/cd-client.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="CdDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_removed">
        <source-position filename="lib/colord/cd-client.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="CdDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="profile_added">
        <source-position filename="lib/colord/cd-client.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="profile_changed">
        <source-position filename="lib/colord/cd-client.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="profile_removed">
        <source-position filename="lib/colord/cd-client.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sensor_added">
        <source-position filename="lib/colord/cd-client.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="sensor" transfer-ownership="none">
            <type name="Sensor" c:type="CdSensor*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sensor_changed">
        <source-position filename="lib/colord/cd-client.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="sensor" transfer-ownership="none">
            <type name="Sensor" c:type="CdSensor*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sensor_removed">
        <source-position filename="lib/colord/cd-client.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="sensor" transfer-ownership="none">
            <type name="Sensor" c:type="CdSensor*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="connect" c:identifier="cd_client_connect" version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="406">Connects to the colord daemon.</doc>
        <source-position filename="lib/colord/cd-client.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="408">a #CdClient instance</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="409">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="410">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="411">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="cd_client_connect_finish"
              version="0.1.6"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="321">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="329">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="323">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="324">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="cd_client_connect_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="63">Connects to the colord daemon.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="74">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="65">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="66">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_device"
              c:identifier="cd_client_create_device"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="521">Creates a color device.</doc>
        <source-position filename="lib/colord/cd-client.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="523">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="524">identifier for the device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="525">the scope of the device</doc>
            <type name="ObjectScope" c:type="CdObjectScope"/>
          </parameter>
          <parameter name="properties"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="526">properties to
  set on the device, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="528">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="529">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="530">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_device_finish"
              c:identifier="cd_client_create_device_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="452">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="460">a #CdDevice or %NULL</doc>
          <type name="Device" c:type="CdDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="454">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="455">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_device_sync"
              c:identifier="cd_client_create_device_sync"
              version="0.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="499">Creates a color device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="514">A #CdDevice object, or %NULL for error</doc>
          <type name="Device" c:type="CdDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="501">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="502">identifier for the device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="503">the scope of the device</doc>
            <type name="ObjectScope" c:type="CdObjectScope"/>
          </parameter>
          <parameter name="properties"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="504">properties to
  set on the device, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="506">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_profile"
              c:identifier="cd_client_create_profile"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="653">Creates a color profile.</doc>
        <source-position filename="lib/colord/cd-client.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="655">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="656">identifier for the profile</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="657">the scope of the profile</doc>
            <type name="ObjectScope" c:type="CdObjectScope"/>
          </parameter>
          <parameter name="properties"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="658">properties to
  set on the profile, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="660">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="661">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="662">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_profile_finish"
              c:identifier="cd_client_create_profile_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="592">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="600">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="594">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="595">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_profile_for_icc"
              c:identifier="cd_client_create_profile_for_icc"
              version="1.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="772">Creates a color profile for an #CdIcc Object.</doc>
        <source-position filename="lib/colord/cd-client.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="774">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="775">#CdIcc object</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="776">the scope of the profile</doc>
            <type name="ObjectScope" c:type="CdObjectScope"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="777">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="778">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="779">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_profile_for_icc_finish"
              c:identifier="cd_client_create_profile_for_icc_finish"
              version="1.1.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="824">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="118"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="832">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="826">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="827">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_profile_for_icc_sync"
              c:identifier="cd_client_create_profile_for_icc_sync"
              version="1.1.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="387">Creates a color profile from a #CdIcc object.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="400">A #CdProfile object, or %NULL for error</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="389">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="390">A #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="391">the scope of the profile</doc>
            <type name="ObjectScope" c:type="CdObjectScope"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="392">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_profile_sync"
              c:identifier="cd_client_create_profile_sync"
              version="0.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="326">Creates a color profile.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="341">A #CdProfile object, or %NULL for error</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="328">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="329">identifier for the device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="330">the scope of the profile</doc>
            <type name="ObjectScope" c:type="CdObjectScope"/>
          </parameter>
          <parameter name="properties"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="331">properties to
  set on the profile, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="333">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_device"
              c:identifier="cd_client_delete_device"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1151">Deletes a device.</doc>
        <source-position filename="lib/colord/cd-client.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1153">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1154">a #CdDevice</doc>
            <type name="Device" c:type="CdDevice*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1155">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1156">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1157">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_device_finish"
              c:identifier="cd_client_delete_device_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1107">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1115">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1109">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1110">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_device_sync"
              c:identifier="cd_client_delete_device_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="163">Deletes a color device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="175">%TRUE is the device was deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="165">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="166">a #CdDevice.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="167">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_profile"
              c:identifier="cd_client_delete_profile"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1236">Deletes a profile.</doc>
        <source-position filename="lib/colord/cd-client.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1238">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1239">a #CdProfile</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1240">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1241">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1242">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_profile_finish"
              c:identifier="cd_client_delete_profile_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1192">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1200">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1194">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1195">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_profile_sync"
              c:identifier="cd_client_delete_profile_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="112">Deletes a color profile.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="124">%TRUE is the profile was deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="114">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="115">a #CdProfile.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="116">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_device"
              c:identifier="cd_client_find_device"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1328">Finds a device by an ID.</doc>
        <source-position filename="lib/colord/cd-client.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1330">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1331">a device id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1332">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1333">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1334">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_device_by_property"
              c:identifier="cd_client_find_device_by_property"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1419">Finds a color device that has a property value.</doc>
        <source-position filename="lib/colord/cd-client.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1421">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1422">the device property key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1423">the device property value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1424">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1425">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1426">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_device_by_property_finish"
              c:identifier="cd_client_find_device_by_property_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1368">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="164"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1376">a #CdDevice or %NULL</doc>
          <type name="Device" c:type="CdDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1370">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1371">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_device_by_property_sync"
              c:identifier="cd_client_find_device_by_property_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="776">Finds a color device that has a property value.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="789">A #CdDevice object, or %NULL for error</doc>
          <type name="Device" c:type="CdDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="778">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="779">The device property key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="780">The device property value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="781">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_device_finish"
              c:identifier="cd_client_find_device_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1277">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="154"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1285">a #CdDevice or %NULL</doc>
          <type name="Device" c:type="CdDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1279">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1280">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_device_sync"
              c:identifier="cd_client_find_device_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="722">Finds a color device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="734">A #CdDevice object, or %NULL for error</doc>
          <type name="Device" c:type="CdDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="724">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="725">The device ID.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="726">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile"
              c:identifier="cd_client_find_profile"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1512">Finds a profile by an ID.</doc>
        <source-position filename="lib/colord/cd-client.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1514">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1515">a profile id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1516">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1517">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1518">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile_by_filename"
              c:identifier="cd_client_find_profile_by_filename"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1603">Finds a profile by a filename.</doc>
        <source-position filename="lib/colord/cd-client.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1605">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1606">a profile filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1607">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1608">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1609">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile_by_filename_finish"
              c:identifier="cd_client_find_profile_by_filename_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1552">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="183"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1560">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1554">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1555">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile_by_filename_sync"
              c:identifier="cd_client_find_profile_by_filename_sync"
              version="0.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="271">Finds a color profile from its filename.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="283">A #CdProfile object, or %NULL for error</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="273">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="274">filename for the profile</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="275">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile_by_property"
              c:identifier="cd_client_find_profile_by_property"
              version="0.1.24">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2215">Finds a color profile that has a property value.</doc>
        <source-position filename="lib/colord/cd-client.h" line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2217">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2218">the profile property key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2219">the profile property value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2220">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2221">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2222">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile_by_property_finish"
              c:identifier="cd_client_find_profile_by_property_finish"
              version="0.1.24"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2164">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="235"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="2172">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2166">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2167">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile_by_property_sync"
              c:identifier="cd_client_find_profile_by_property_sync"
              version="0.1.24"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="942">Finds a color profile that has a property value.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="955">A #CdProfile object, or %NULL for error</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="944">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="945">The profile property key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="946">The profile property value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="947">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile_finish"
              c:identifier="cd_client_find_profile_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1461">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="173"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1469">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1463">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1464">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_profile_sync"
              c:identifier="cd_client_find_profile_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="216">Finds a color profile from its id.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="228">A #CdProfile object, or %NULL for error</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="218">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="219">id for the profile</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="220">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_sensor"
              c:identifier="cd_client_find_sensor"
              version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2308">Finds a sensor by an ID.</doc>
        <source-position filename="lib/colord/cd-client.h" line="239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2310">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2311">a sensor id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2312">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2313">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2314">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_sensor_finish"
              c:identifier="cd_client_find_sensor_finish"
              version="0.1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2257">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="244"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="2265">a #CdSensor or %NULL</doc>
          <type name="Sensor" c:type="CdSensor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2259">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2260">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_sensor_sync"
              c:identifier="cd_client_find_sensor_sync"
              version="0.1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="998">Finds a color sensor.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="1010">A #CdSensor object, or %NULL for error</doc>
          <type name="Sensor" c:type="CdSensor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="1000">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="1001">The sensor ID.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="1002">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connected"
              c:identifier="cd_client_get_connected"
              glib:get-property="connected"
              version="0.1.9">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="188">Gets if the client has been connected.</doc>
        <source-position filename="lib/colord/cd-client.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="194">%TRUE if properties are valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="190">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_daemon_version"
              c:identifier="cd_client_get_daemon_version"
              glib:get-property="daemon-version"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="131">Get colord daemon version.</doc>
        <source-position filename="lib/colord/cd-client.h" line="252"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="137">string containing the daemon version, e.g. "0.1.0"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="133">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="cd_client_get_devices"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1810">Gets an array of color devices.</doc>
        <source-position filename="lib/colord/cd-client.h" line="196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1812">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1813">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1814">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1815">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices_by_kind"
              c:identifier="cd_client_get_devices_by_kind"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1898">Gets an array of color devices.</doc>
        <source-position filename="lib/colord/cd-client.h" line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1900">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1901">the type of device.</doc>
            <type name="DeviceKind" c:type="CdDeviceKind"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1902">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1903">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1904">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices_by_kind_finish"
              c:identifier="cd_client_get_devices_by_kind_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1847">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="209"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1855">the devices</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1849">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1850">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices_by_kind_sync"
              c:identifier="cd_client_get_devices_by_kind_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="887">Get an array of the device objects of a specified kind.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="114"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="899">an array of
	 #CdDevice objects.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="889">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="890">a #CdDeviceKind, e.g. %CD_DEVICE_KIND_DISPLAY</doc>
            <type name="DeviceKind" c:type="CdDeviceKind"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="891">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices_finish"
              c:identifier="cd_client_get_devices_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1759">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="200"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1767">the devices</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1761">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1762">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices_sync"
              c:identifier="cd_client_get_devices_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="560">Get an array of the device objects.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="86"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="571">an array of
	 #CdDevice objects.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="562">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="563">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_server"
              c:identifier="cd_client_get_has_server"
              version="0.1.12">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="206">Gets if the colord server is currently running.
WARNING: This function may block for up to 5 seconds waiting for the daemon
to start if it is not already running.</doc>
        <source-position filename="lib/colord/cd-client.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="214">%TRUE if the colord process is running</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="208">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profiles"
              c:identifier="cd_client_get_profiles"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2014">Gets an array of color profiles.</doc>
        <source-position filename="lib/colord/cd-client.h" line="213"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2016">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2017">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2018">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2019">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_profiles_finish"
              c:identifier="cd_client_get_profiles_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1963">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="217"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1971">the profiles</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Profile"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1965">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1966">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_profiles_sync"
              c:identifier="cd_client_get_profiles_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="614">Get an array of the profile objects.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="90"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="625">an array of
	 #CdProfile objects.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Profile"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="616">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="617">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sensors"
              c:identifier="cd_client_get_sensors"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2127">Gets an array of color sensors.</doc>
        <source-position filename="lib/colord/cd-client.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2129">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2130">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2131">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2132">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sensors_finish"
              c:identifier="cd_client_get_sensors_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2076">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="225"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="2084">the sensors</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Sensor"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2078">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2079">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sensors_sync"
              c:identifier="cd_client_get_sensors_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="668">Get an array of the sensor objects.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="94"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="679">an array of
	 #CdSensor objects.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Sensor"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="670">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="671">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_standard_space"
              c:identifier="cd_client_get_standard_space"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1694">Finds a standard profile space.</doc>
        <source-position filename="lib/colord/cd-client.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1696">a #CdStandardSpace instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="standard_space" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1697">a profile id</doc>
            <type name="StandardSpace" c:type="CdStandardSpace"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1698">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1699">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1700">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_standard_space_finish"
              c:identifier="cd_client_get_standard_space_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1643">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="192"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="1651">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1645">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1646">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_standard_space_sync"
              c:identifier="cd_client_get_standard_space_sync"
              version="0.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="832">Finds a standard colorspace.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="844">A #CdProfile object, or %NULL for error</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="834">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="standard_space" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="835">standard colorspace value</doc>
            <type name="StandardSpace" c:type="CdStandardSpace"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="836">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_model"
              c:identifier="cd_client_get_system_model"
              glib:get-property="system-model"
              version="1.0.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="169">Get system model.</doc>
        <source-position filename="lib/colord/cd-client.h" line="254"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="175">string containing the system model, e.g. "T61"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="171">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_vendor"
              c:identifier="cd_client_get_system_vendor"
              glib:get-property="system-vendor"
              version="1.0.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="150">Get system vendor.</doc>
        <source-position filename="lib/colord/cd-client.h" line="253"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="156">string containing the system vendor, e.g. "Lenovo"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="152">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="import_profile"
              c:identifier="cd_client_import_profile"
              version="0.1.12">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="1060">Imports a color profile into the users home directory.

If the profile should be accessible for all users, then call
cd_profile_install_system_wide() on the result.</doc>
        <source-position filename="lib/colord/cd-client.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1062">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1063">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1064">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1065">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="1066">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="import_profile_finish"
              c:identifier="cd_client_import_profile_finish"
              version="0.1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="893">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-client.h" line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client.c"
               line="901">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="895">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="896">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="import_profile_sync"
              c:identifier="cd_client_import_profile_sync"
              version="0.1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client-sync.c"
             line="445">Imports a color profile into the users home directory.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-client-sync.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-client-sync.c"
               line="457">A #CdProfile object, or %NULL for error</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="447">a #CdClient instance.</doc>
            <type name="Client" c:type="CdClient*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="448">A #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client-sync.c"
                 line="449">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connected"
                version="0.1.9"
                transfer-ownership="none"
                getter="get_connected"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2432">The if the object path has been connected as is valid for use.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="daemon-version"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_daemon_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2390">The daemon version.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="system-model"
                version="1.0.2"
                transfer-ownership="none"
                getter="get_system_model"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2418">The system model.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="system-vendor"
                version="1.0.2"
                transfer-ownership="none"
                getter="get_system_vendor"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2404">The system vendor.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="changed" when="last" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2586">The ::changed signal is emitted when properties may have changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="device-added" when="last" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2446">The ::device-added signal is emitted when a device is added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2449">the #CdDevice that was added.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-changed" when="last" version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2477">The ::device-changed signal is emitted when a device is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2480">the #CdDevice that was changed.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2462">The ::device-removed signal is emitted when a device is removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2465">the #CdDevice that was removed.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="profile-added" when="last" version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2492">The ::profile-added signal is emitted when a profile is added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2495">the #CdProfile that was added.</doc>
            <type name="Profile"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="profile-changed" when="last" version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2523">The ::profile-changed signal is emitted when a profile is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2526">the #CdProfile that was removed.</doc>
            <type name="Profile"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="profile-removed" when="last" version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2508">The ::profile-added signal is emitted when a profile is removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2511">the #CdProfile that was removed.</doc>
            <type name="Profile"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="sensor-added" when="last" version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2539">The ::sensor-added signal is emitted when a sensor is added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2542">the #CdSensor that was added.</doc>
            <type name="Sensor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="sensor-changed" when="last" version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2570">The ::sensor-changed signal is emitted when a sensor is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2573">the #CdSensor that was removed.</doc>
            <type name="Sensor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="sensor-removed" when="last" version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-client.c"
             line="2555">The ::sensor-added signal is emitted when a sensor is removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-client.c"
                 line="2558">the #CdSensor that was removed.</doc>
            <type name="Sensor"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ClientClass"
            c:type="CdClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="lib/colord/cd-client.h" line="76"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="device_added">
        <callback name="device_added">
          <source-position filename="lib/colord/cd-client.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="CdDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_removed">
        <callback name="device_removed">
          <source-position filename="lib/colord/cd-client.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="CdDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_changed">
        <callback name="device_changed">
          <source-position filename="lib/colord/cd-client.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="CdDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="profile_added">
        <callback name="profile_added">
          <source-position filename="lib/colord/cd-client.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="profile" transfer-ownership="none">
              <type name="Profile" c:type="CdProfile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="profile_removed">
        <callback name="profile_removed">
          <source-position filename="lib/colord/cd-client.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="profile" transfer-ownership="none">
              <type name="Profile" c:type="CdProfile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="profile_changed">
        <callback name="profile_changed">
          <source-position filename="lib/colord/cd-client.h" line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="profile" transfer-ownership="none">
              <type name="Profile" c:type="CdProfile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sensor_added">
        <callback name="sensor_added">
          <source-position filename="lib/colord/cd-client.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="sensor" transfer-ownership="none">
              <type name="Sensor" c:type="CdSensor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sensor_removed">
        <callback name="sensor_removed">
          <source-position filename="lib/colord/cd-client.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="sensor" transfer-ownership="none">
              <type name="Sensor" c:type="CdSensor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sensor_changed">
        <callback name="sensor_changed">
          <source-position filename="lib/colord/cd-client.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
            <parameter name="sensor" transfer-ownership="none">
              <type name="Sensor" c:type="CdSensor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="lib/colord/cd-client.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="CdClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_cd_client_reserved1" introspectable="0">
        <callback name="_cd_client_reserved1">
          <source-position filename="lib/colord/cd-client.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_client_reserved2" introspectable="0">
        <callback name="_cd_client_reserved2">
          <source-position filename="lib/colord/cd-client.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_client_reserved3" introspectable="0">
        <callback name="_cd_client_reserved3">
          <source-position filename="lib/colord/cd-client.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_client_reserved4" introspectable="0">
        <callback name="_cd_client_reserved4">
          <source-position filename="lib/colord/cd-client.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_client_reserved5" introspectable="0">
        <callback name="_cd_client_reserved5">
          <source-position filename="lib/colord/cd-client.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_client_reserved6" introspectable="0">
        <callback name="_cd_client_reserved6">
          <source-position filename="lib/colord/cd-client.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_client_reserved7" introspectable="0">
        <callback name="_cd_client_reserved7">
          <source-position filename="lib/colord/cd-client.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_client_reserved8" introspectable="0">
        <callback name="_cd_client_reserved8">
          <source-position filename="lib/colord/cd-client.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ClientError" c:type="CdClientError">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="404">Errors that can be thrown</doc>
      <source-position filename="lib/colord/cd-enum.h" line="426"/>
      <member name="internal"
              value="0"
              c:identifier="CD_CLIENT_ERROR_INTERNAL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="406">An internal error occurred</doc>
      </member>
      <member name="already_exists"
              value="1"
              c:identifier="CD_CLIENT_ERROR_ALREADY_EXISTS">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="407">The profile already exists</doc>
      </member>
      <member name="failed_to_authenticate"
              value="2"
              c:identifier="CD_CLIENT_ERROR_FAILED_TO_AUTHENTICATE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="408">Authentication failed</doc>
      </member>
      <member name="not_supported"
              value="3"
              c:identifier="CD_CLIENT_ERROR_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="409">Feature not supported</doc>
      </member>
      <member name="not_found"
              value="4"
              c:identifier="CD_CLIENT_ERROR_NOT_FOUND">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="410">Profile or device not found</doc>
      </member>
      <member name="input_invalid"
              value="5"
              c:identifier="CD_CLIENT_ERROR_INPUT_INVALID">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="411">One or more of the parameters is invalid</doc>
      </member>
      <member name="file_invalid"
              value="6"
              c:identifier="CD_CLIENT_ERROR_FILE_INVALID">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="412">The file if invalid</doc>
      </member>
    </enumeration>
    <enumeration name="ColorBlackbodyFlags"
                 version="1.3.5"
                 c:type="CdColorBlackbodyFlags">
      <doc xml:space="preserve"
           filename="lib/colord/cd-color.h"
           line="69">Flags used when returning an RGB color from a temperature.</doc>
      <source-position filename="lib/colord/cd-color.h" line="83"/>
      <member name="none"
              value="0"
              c:identifier="CD_COLOR_BLACKBODY_FLAG_NONE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.h"
             line="71">No flags set.</doc>
      </member>
      <member name="use_planckian"
              value="1"
              c:identifier="CD_COLOR_BLACKBODY_FLAG_USE_PLANCKIAN">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.h"
             line="72">Use Planckian below 5000K</doc>
      </member>
    </enumeration>
    <record name="ColorLab"
            c:type="CdColorLab"
            glib:type-name="CdColorLab"
            glib:get-type="cd_color_lab_get_type"
            c:symbol-prefix="color_lab">
      <source-position filename="lib/colord/cd-color.h" line="43"/>
      <field name="L" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="cd_color_lab_new" version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="321">Allocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="326">A newly allocated #CdColorLab object</doc>
          <type name="ColorLab" c:type="CdColorLab*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="cd_color_lab_copy" version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="703">Deep copies a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="705">the source color</doc>
            <type name="ColorLab" c:type="const CdColorLab*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="706">the destination color</doc>
            <type name="ColorLab" c:type="CdColorLab*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delta_e76"
              c:identifier="cd_color_lab_delta_e76"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="547">Calculates the ΔE of two colors using the 1976 formula.</doc>
        <source-position filename="lib/colord/cd-color.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="554">distance metric, where JND ΔE ≈ 2.3</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="p1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="549">Lab value 1</doc>
            <type name="ColorLab" c:type="const CdColorLab*"/>
          </instance-parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="550">Lab value 2</doc>
            <type name="ColorLab" c:type="const CdColorLab*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="cd_color_lab_dup" version="0.1.32">
        <source-position filename="lib/colord/cd-color.h" line="127"/>
        <return-value transfer-ownership="full">
          <type name="ColorLab" c:type="CdColorLab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="ColorLab" c:type="const CdColorLab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="cd_color_lab_free" version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="409">Deallocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="411">the color object</doc>
            <type name="ColorLab" c:type="CdColorLab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="cd_color_lab_set" version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="526">Initialises a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="528">the destination color</doc>
            <type name="ColorLab" c:type="CdColorLab*"/>
          </instance-parameter>
          <parameter name="L" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="529">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="530">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="531">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="ColorRGB"
            c:type="CdColorRGB"
            glib:type-name="CdColorRGB"
            glib:get-type="cd_color_rgb_get_type"
            c:symbol-prefix="color_rgb">
      <source-position filename="lib/colord/cd-color.h" line="61"/>
      <field name="R" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="G" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="B" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="cd_color_rgb_new" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="306">Allocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="311">A newly allocated #CdColorRGB object</doc>
          <type name="ColorRGB" c:type="CdColorRGB*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="cd_color_rgb_copy" version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="723">Deep copies a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="725">the source color</doc>
            <type name="ColorRGB" c:type="const CdColorRGB*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="726">the destination color</doc>
            <type name="ColorRGB" c:type="CdColorRGB*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="cd_color_rgb_dup" version="0.1.27">
        <source-position filename="lib/colord/cd-color.h" line="128"/>
        <return-value transfer-ownership="full">
          <type name="ColorRGB" c:type="CdColorRGB*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="ColorRGB" c:type="const CdColorRGB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="cd_color_rgb_free" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="395">Deallocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="397">the color object</doc>
            <type name="ColorRGB" c:type="CdColorRGB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="from_wavelength"
              c:identifier="cd_color_rgb_from_wavelength"
              version="1.3.4">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1219">Set an RGB color which is roughly representative to the wavelength.</doc>
        <source-position filename="lib/colord/cd-color.h" line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="1221">a #CdColorRGB for the RGB result</doc>
            <type name="ColorRGB" c:type="CdColorRGB*"/>
          </instance-parameter>
          <parameter name="wavelength" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="1222">the wavelength roughly between 380nm and 780nm</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="interpolate"
              c:identifier="cd_color_rgb_interpolate"
              version="0.1.26">
        <source-position filename="lib/colord/cd-color.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="p1" transfer-ownership="none">
            <type name="ColorRGB" c:type="const CdColorRGB*"/>
          </instance-parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="ColorRGB" c:type="const CdColorRGB*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="ColorRGB" c:type="CdColorRGB*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="cd_color_rgb_set" version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="505">Initialises a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="507">the destination color</doc>
            <type name="ColorRGB" c:type="CdColorRGB*"/>
          </instance-parameter>
          <parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="508">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="G" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="509">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="510">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_rgb8"
              c:identifier="cd_color_rgb_to_rgb8"
              version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="773">Convert from one color format to another.</doc>
        <source-position filename="lib/colord/cd-color.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="775">the source color</doc>
            <type name="ColorRGB" c:type="const CdColorRGB*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="776">the destination color</doc>
            <type name="ColorRGB8" c:type="CdColorRGB8*"/>
          </parameter>
        </parameters>
      </method>
      <function name="array_interpolate"
                c:identifier="cd_color_rgb_array_interpolate"
                version="0.1.31">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1339">Interpolate the RGB array to a different size.
This uses the Akima interpolation algorithm unless the array would become
non-monotonic, in which case it falls back to linear interpolation.</doc>
        <source-position filename="lib/colord/cd-color.h" line="206"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1348">An array of size @new_length or %NULL</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="ColorRGB"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="1341">Input array</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="ColorRGB"/>
            </array>
          </parameter>
          <parameter name="new_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="1342">the target length of the return array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="array_is_monotonic"
                c:identifier="cd_color_rgb_array_is_monotonic"
                version="0.1.31">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1290">Checks the array for monotonicity.</doc>
        <source-position filename="lib/colord/cd-color.h" line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1296">%TRUE if the array is monotonic</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="1292">Input array</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="ColorRGB"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="array_new"
                c:identifier="cd_color_rgb_array_new"
                version="0.1.31">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1324">Creates a new RGB array.</doc>
        <source-position filename="lib/colord/cd-color.h" line="204"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1329">New array</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="ColorRGB"/>
          </array>
        </return-value>
      </function>
    </record>
    <record name="ColorRGB8" c:type="CdColorRGB8">
      <source-position filename="lib/colord/cd-color.h" line="37"/>
      <field name="R" writable="1">
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="G" writable="1">
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="B" writable="1">
        <type name="guint8" c:type="guint8"/>
      </field>
    </record>
    <record name="ColorSwatch"
            c:type="CdColorSwatch"
            opaque="1"
            glib:type-name="CdColorSwatch"
            glib:get-type="cd_color_swatch_get_type"
            c:symbol-prefix="color_swatch">
      <source-position filename="lib/colord/cd-color.h" line="85"/>
      <constructor name="new"
                   c:identifier="cd_color_swatch_new"
                   version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="366">Allocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="371">A newly allocated #CdColorSwatch object</doc>
          <type name="ColorSwatch" c:type="CdColorSwatch*"/>
        </return-value>
      </constructor>
      <method name="dup" c:identifier="cd_color_swatch_dup" version="0.1.32">
        <source-position filename="lib/colord/cd-color.h" line="131"/>
        <return-value transfer-ownership="full">
          <type name="ColorSwatch" c:type="CdColorSwatch*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="ColorSwatch" c:type="const CdColorSwatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="cd_color_swatch_free" version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="451">Deallocates a color swatch.</doc>
        <source-position filename="lib/colord/cd-color.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="453">the color object</doc>
            <type name="ColorSwatch" c:type="CdColorSwatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="cd_color_swatch_get_name"
              version="0.1.32">
        <source-position filename="lib/colord/cd-color.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="swatch" transfer-ownership="none">
            <type name="ColorSwatch" c:type="const CdColorSwatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="cd_color_swatch_get_value"
              version="0.1.32">
        <source-position filename="lib/colord/cd-color.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="ColorLab" c:type="const CdColorLab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="swatch" transfer-ownership="none">
            <type name="ColorSwatch" c:type="const CdColorSwatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="cd_color_swatch_set_name"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="608">Initialises a swatch name.</doc>
        <source-position filename="lib/colord/cd-color.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="610">the destination swatch</doc>
            <type name="ColorSwatch" c:type="CdColorSwatch*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="611">component name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="cd_color_swatch_set_value"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="626">Initialises a swatch value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="628">the destination swatch</doc>
            <type name="ColorSwatch" c:type="CdColorSwatch*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="629">component value</doc>
            <type name="ColorLab" c:type="const CdColorLab*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="ColorUVW"
            c:type="CdColorUVW"
            glib:type-name="CdColorUVW"
            glib:get-type="cd_color_uvw_get_type"
            c:symbol-prefix="color_uvw">
      <source-position filename="lib/colord/cd-color.h" line="67"/>
      <field name="U" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="V" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="W" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="cd_color_uvw_new" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="351">Allocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="356">A newly allocated #CdColorUVW object</doc>
          <type name="ColorUVW" c:type="CdColorUVW*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="cd_color_uvw_copy" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="683">Deep copies a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="162"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="685">the source color</doc>
            <type name="ColorUVW" c:type="const CdColorUVW*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="686">the destination color</doc>
            <type name="ColorUVW" c:type="CdColorUVW*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="cd_color_uvw_dup" version="1.1.6">
        <source-position filename="lib/colord/cd-color.h" line="130"/>
        <return-value transfer-ownership="full">
          <type name="ColorUVW" c:type="CdColorUVW*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="ColorUVW" c:type="const CdColorUVW*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="cd_color_uvw_free" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="437">Deallocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="439">the color object</doc>
            <type name="ColorUVW" c:type="CdColorUVW*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chroma_difference"
              c:identifier="cd_color_uvw_get_chroma_difference"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="873">Gets the chromaticity distance in the CIE 1960 UCS.</doc>
        <source-position filename="lib/colord/cd-color.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="880">The Euclidean distance</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="p1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="875">color</doc>
            <type name="ColorUVW" c:type="const CdColorUVW*"/>
          </instance-parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="876">color</doc>
            <type name="ColorUVW" c:type="const CdColorUVW*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="cd_color_uvw_set" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="587">Initialises a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="589">the destination color</doc>
            <type name="ColorUVW" c:type="CdColorUVW*"/>
          </instance-parameter>
          <parameter name="U" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="590">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="V" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="591">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="W" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="592">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_planckian_locus"
              c:identifier="cd_color_uvw_set_planckian_locus"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="890">Sets the CIEUVW color from a Planckian locus of specific temperature.</doc>
        <source-position filename="lib/colord/cd-color.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="892">destination color</doc>
            <type name="ColorUVW" c:type="CdColorUVW*"/>
          </instance-parameter>
          <parameter name="temp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="893">temperature in Kelvin</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="ColorXYZ"
            c:type="CdColorXYZ"
            glib:type-name="CdColorXYZ"
            glib:get-type="cd_color_xyz_get_type"
            c:symbol-prefix="color_xyz">
      <source-position filename="lib/colord/cd-color.h" line="55"/>
      <field name="X" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Y" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Z" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="cd_color_xyz_new" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="291">Allocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="296">A newly allocated #CdColorXYZ object</doc>
          <type name="ColorXYZ" c:type="CdColorXYZ*"/>
        </return-value>
      </constructor>
      <method name="clear" c:identifier="cd_color_xyz_clear" version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="487">Initialises a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="489">the destination color</doc>
            <type name="ColorXYZ" c:type="CdColorXYZ*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="cd_color_xyz_copy" version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="643">Deep copies a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="645">the source color</doc>
            <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="646">the destination color</doc>
            <type name="ColorXYZ" c:type="CdColorXYZ*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="cd_color_xyz_dup" version="0.1.27">
        <source-position filename="lib/colord/cd-color.h" line="126"/>
        <return-value transfer-ownership="full">
          <type name="ColorXYZ" c:type="CdColorXYZ*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="cd_color_xyz_free" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="381">Deallocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="383">the color object</doc>
            <type name="ColorXYZ" c:type="CdColorXYZ*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normalize"
              c:identifier="cd_color_xyz_normalize"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="829">Normalizes @src to y=1.0</doc>
        <source-position filename="lib/colord/cd-color.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="831">the source color</doc>
            <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
          </instance-parameter>
          <parameter name="max" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="832">the destination color</doc>
            <type name="ColorXYZ" c:type="CdColorXYZ*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="cd_color_xyz_set" version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="466">Initialises a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="468">the destination color</doc>
            <type name="ColorXYZ" c:type="CdColorXYZ*"/>
          </instance-parameter>
          <parameter name="X" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="469">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="470">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Z" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="471">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_cct" c:identifier="cd_color_xyz_to_cct" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="846">Gets the correlated color temperature for the XYZ value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="848">the source color</doc>
            <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_uvw" c:identifier="cd_color_xyz_to_uvw" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="961">Convert from one color format to another.</doc>
        <source-position filename="lib/colord/cd-color.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="963">the source color</doc>
            <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
          </instance-parameter>
          <parameter name="whitepoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="964">the whitepoint</doc>
            <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="965">the destination color</doc>
            <type name="ColorUVW" c:type="CdColorUVW*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_yxy"
              c:identifier="cd_color_xyz_to_yxy"
              version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="917">Convert from one color format to another.</doc>
        <source-position filename="lib/colord/cd-color.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="919">the source color</doc>
            <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="920">the destination color</doc>
            <type name="ColorYxy" c:type="CdColorYxy*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="ColorYxy"
            c:type="CdColorYxy"
            glib:type-name="CdColorYxy"
            glib:get-type="cd_color_yxy_get_type"
            c:symbol-prefix="color_yxy">
      <source-position filename="lib/colord/cd-color.h" line="49"/>
      <field name="Y" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="x" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="cd_color_yxy_new" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="336">Allocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="341">A newly allocated #CdColorYxy object</doc>
          <type name="ColorYxy" c:type="CdColorYxy*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="cd_color_yxy_copy" version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="663">Deep copies a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="665">the source color</doc>
            <type name="ColorYxy" c:type="const CdColorYxy*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="666">the destination color</doc>
            <type name="ColorYxy" c:type="CdColorYxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="cd_color_yxy_dup" version="0.1.27">
        <source-position filename="lib/colord/cd-color.h" line="129"/>
        <return-value transfer-ownership="full">
          <type name="ColorYxy" c:type="CdColorYxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="ColorYxy" c:type="const CdColorYxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="cd_color_yxy_free" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="423">Deallocates a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="425">the color object</doc>
            <type name="ColorYxy" c:type="CdColorYxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="cd_color_yxy_set" version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="566">Initialises a color value.</doc>
        <source-position filename="lib/colord/cd-color.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="568">the destination color</doc>
            <type name="ColorYxy" c:type="CdColorYxy*"/>
          </instance-parameter>
          <parameter name="Y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="569">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="570">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="571">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_uvw" c:identifier="cd_color_yxy_to_uvw" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="987">Convert from one color format to another.</doc>
        <source-position filename="lib/colord/cd-color.h" line="182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="989">the source color</doc>
            <type name="ColorYxy" c:type="const CdColorYxy*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="990">the destination color</doc>
            <type name="ColorUVW" c:type="CdColorUVW*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_xyz"
              c:identifier="cd_color_yxy_to_xyz"
              version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="794">Convert from one color format to another.</doc>
        <source-position filename="lib/colord/cd-color.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="796">the source color</doc>
            <type name="ColorYxy" c:type="const CdColorYxy*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-color.c"
                 line="797">the destination color</doc>
            <type name="ColorXYZ" c:type="CdColorXYZ*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="Colorspace" c:type="CdColorspace">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="116">The known colorspace.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="135"/>
      <member name="unknown" value="0" c:identifier="CD_COLORSPACE_UNKNOWN">
      </member>
      <member name="xyz" value="1" c:identifier="CD_COLORSPACE_XYZ">
      </member>
      <member name="lab" value="2" c:identifier="CD_COLORSPACE_LAB">
      </member>
      <member name="luv" value="3" c:identifier="CD_COLORSPACE_LUV">
      </member>
      <member name="ycbcr" value="4" c:identifier="CD_COLORSPACE_YCBCR">
      </member>
      <member name="yxy" value="5" c:identifier="CD_COLORSPACE_YXY">
      </member>
      <member name="rgb" value="6" c:identifier="CD_COLORSPACE_RGB">
      </member>
      <member name="gray" value="7" c:identifier="CD_COLORSPACE_GRAY">
      </member>
      <member name="hsv" value="8" c:identifier="CD_COLORSPACE_HSV">
      </member>
      <member name="cmyk" value="9" c:identifier="CD_COLORSPACE_CMYK">
      </member>
      <member name="cmy" value="10" c:identifier="CD_COLORSPACE_CMY">
      </member>
    </enumeration>
    <constant name="DEVICE_METADATA_OUTPUT_EDID_MD5"
              value="OutputEdidMd5"
              c:type="CD_DEVICE_METADATA_OUTPUT_EDID_MD5">
      <source-position filename="lib/colord/cd-enum.h" line="490"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_METADATA_OUTPUT_PRIORITY"
              value="OutputPriority"
              c:type="CD_DEVICE_METADATA_OUTPUT_PRIORITY">
      <source-position filename="lib/colord/cd-enum.h" line="491"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_METADATA_OUTPUT_PRIORITY_PRIMARY"
              value="primary"
              c:type="CD_DEVICE_METADATA_OUTPUT_PRIORITY_PRIMARY">
      <source-position filename="lib/colord/cd-enum.h" line="492"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_METADATA_OUTPUT_PRIORITY_SECONDARY"
              value="secondary"
              c:type="CD_DEVICE_METADATA_OUTPUT_PRIORITY_SECONDARY">
      <source-position filename="lib/colord/cd-enum.h" line="493"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_METADATA_OWNER_CMDLINE"
              value="OwnerCmdline"
              c:type="CD_DEVICE_METADATA_OWNER_CMDLINE">
      <source-position filename="lib/colord/cd-enum.h" line="494"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_METADATA_XRANDR_NAME"
              value="XRANDR_name"
              c:type="CD_DEVICE_METADATA_XRANDR_NAME">
      <source-position filename="lib/colord/cd-enum.h" line="489"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_COLORSPACE"
              value="Colorspace"
              c:type="CD_DEVICE_PROPERTY_COLORSPACE">
      <source-position filename="lib/colord/cd-enum.h" line="501"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_CREATED"
              value="Created"
              c:type="CD_DEVICE_PROPERTY_CREATED">
      <source-position filename="lib/colord/cd-enum.h" line="505"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_EMBEDDED"
              value="Embedded"
              c:type="CD_DEVICE_PROPERTY_EMBEDDED">
      <source-position filename="lib/colord/cd-enum.h" line="514"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_ENABLED"
              value="Enabled"
              c:type="CD_DEVICE_PROPERTY_ENABLED">
      <source-position filename="lib/colord/cd-enum.h" line="513"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_FORMAT"
              value="Format"
              c:type="CD_DEVICE_PROPERTY_FORMAT">
      <source-position filename="lib/colord/cd-enum.h" line="502"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_ID"
              value="DeviceId"
              c:type="CD_DEVICE_PROPERTY_ID">
      <source-position filename="lib/colord/cd-enum.h" line="508"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_KIND"
              value="Kind"
              c:type="CD_DEVICE_PROPERTY_KIND">
      <source-position filename="lib/colord/cd-enum.h" line="498"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_METADATA"
              value="Metadata"
              c:type="CD_DEVICE_PROPERTY_METADATA">
      <source-position filename="lib/colord/cd-enum.h" line="507"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_MODE"
              value="Mode"
              c:type="CD_DEVICE_PROPERTY_MODE">
      <source-position filename="lib/colord/cd-enum.h" line="503"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_MODEL"
              value="Model"
              c:type="CD_DEVICE_PROPERTY_MODEL">
      <source-position filename="lib/colord/cd-enum.h" line="497"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_MODIFIED"
              value="Modified"
              c:type="CD_DEVICE_PROPERTY_MODIFIED">
      <source-position filename="lib/colord/cd-enum.h" line="506"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_OWNER"
              value="Owner"
              c:type="CD_DEVICE_PROPERTY_OWNER">
      <source-position filename="lib/colord/cd-enum.h" line="510"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_PROFILES"
              value="Profiles"
              c:type="CD_DEVICE_PROPERTY_PROFILES">
      <source-position filename="lib/colord/cd-enum.h" line="504"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_PROFILING_INHIBITORS"
              value="ProfilingInhibitors"
              c:type="CD_DEVICE_PROPERTY_PROFILING_INHIBITORS">
      <source-position filename="lib/colord/cd-enum.h" line="512"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_SCOPE"
              value="Scope"
              c:type="CD_DEVICE_PROPERTY_SCOPE">
      <source-position filename="lib/colord/cd-enum.h" line="509"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_SEAT"
              value="Seat"
              c:type="CD_DEVICE_PROPERTY_SEAT">
      <source-position filename="lib/colord/cd-enum.h" line="511"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_SERIAL"
              value="Serial"
              c:type="CD_DEVICE_PROPERTY_SERIAL">
      <source-position filename="lib/colord/cd-enum.h" line="500"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROPERTY_VENDOR"
              value="Vendor"
              c:type="CD_DEVICE_PROPERTY_VENDOR">
      <source-position filename="lib/colord/cd-enum.h" line="499"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="CdDevice"
           parent="GObject.Object"
           glib:type-name="CdDevice"
           glib:get-type="cd_device_get_type"
           glib:type-struct="DeviceClass">
      <source-position filename="lib/colord/cd-device.h" line="57"/>
      <constructor name="new" c:identifier="cd_device_new" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2238">Creates a new #CdDevice object.</doc>
        <source-position filename="lib/colord/cd-device.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="2243">a new CdDevice object.</doc>
          <type name="Device" c:type="CdDevice*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_object_path"
                   c:identifier="cd_device_new_with_object_path"
                   version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2255">Creates a new #CdDevice object with a known object path.</doc>
        <source-position filename="lib/colord/cd-device.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="2261">a new device object.</doc>
          <type name="Device" c:type="CdDevice*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="2257">The colord object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error_from_string"
                c:identifier="cd_device_error_from_string"
                version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="813">Converts a string to a #CdDeviceError.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="578"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="818">enumerated value</doc>
          <type name="DeviceError" c:type="CdDeviceError"/>
        </return-value>
        <parameters>
          <parameter name="error_desc" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark"
                c:identifier="cd_device_error_quark"
                version="0.1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="116">An error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="error_to_string"
                c:identifier="cd_device_error_to_string"
                version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="780">Converts a #CdDeviceError to a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="577"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="785">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="error_enum" transfer-ownership="none">
            <type name="DeviceError" c:type="CdDeviceError"/>
          </parameter>
        </parameters>
      </function>
      <function name="kind_from_string"
                c:identifier="cd_device_kind_from_string"
                version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="290">Converts a string to a #CdDeviceKind.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="544"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="295">enumerated value</doc>
          <type name="DeviceKind" c:type="CdDeviceKind"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="kind_to_profile_kind"
                c:identifier="cd_device_kind_to_profile_kind"
                version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="607">Gets the most suitable profile kind for a device kind.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="571"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="613">a #CdProfileKind</doc>
          <type name="ProfileKind" c:type="CdProfileKind"/>
        </return-value>
        <parameters>
          <parameter name="device_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-enum.c"
                 line="609">A #CdDeviceKind</doc>
            <type name="DeviceKind" c:type="CdDeviceKind"/>
          </parameter>
        </parameters>
      </function>
      <function name="kind_to_string"
                c:identifier="cd_device_kind_to_string"
                version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="275">Converts a #CdDeviceKind to a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="280">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="kind_enum" transfer-ownership="none">
            <type name="DeviceKind" c:type="CdDeviceKind"/>
          </parameter>
        </parameters>
      </function>
      <function name="mode_from_string"
                c:identifier="cd_device_mode_from_string">
        <source-position filename="lib/colord/cd-enum.h" line="554"/>
        <return-value transfer-ownership="none">
          <type name="DeviceMode" c:type="CdDeviceMode"/>
        </return-value>
        <parameters>
          <parameter name="device_mode" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="mode_to_string" c:identifier="cd_device_mode_to_string">
        <source-position filename="lib/colord/cd-enum.h" line="553"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="device_mode" transfer-ownership="none">
            <type name="DeviceMode" c:type="CdDeviceMode"/>
          </parameter>
        </parameters>
      </function>
      <function name="relation_from_string"
                c:identifier="cd_device_relation_from_string">
        <source-position filename="lib/colord/cd-enum.h" line="556"/>
        <return-value transfer-ownership="none">
          <type name="DeviceRelation" c:type="CdDeviceRelation"/>
        </return-value>
        <parameters>
          <parameter name="device_relation" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="relation_to_string"
                c:identifier="cd_device_relation_to_string">
        <source-position filename="lib/colord/cd-enum.h" line="555"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="device_relation" transfer-ownership="none">
            <type name="DeviceRelation" c:type="CdDeviceRelation"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <source-position filename="lib/colord/cd-device.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_profile"
              c:identifier="cd_device_add_profile"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1087">Adds a profile to a device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1089">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="relation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1090">a #CdDeviceRelation, e.g. #CD_DEVICE_RELATION_HARD</doc>
            <type name="DeviceRelation" c:type="CdDeviceRelation"/>
          </parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1091">a #CdProfile instance</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1092">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1093">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1094">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_profile_finish"
              c:identifier="cd_device_add_profile_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1043">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1051">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1045">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1046">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_profile_sync"
              c:identifier="cd_device_add_profile_sync"
              version="0.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="170">Adds a profile to a device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="183">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="172">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="relation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="173">a #CdDeviceRelation, e.g. #CD_DEVICE_RELATION_HARD</doc>
            <type name="DeviceRelation" c:type="CdDeviceRelation"/>
          </parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="174">a #CdProfile instance</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="175">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect" c:identifier="cd_device_connect" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="893">Connects to the object and fills up initial properties.</doc>
        <source-position filename="lib/colord/cd-device.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="895">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="896">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="897">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="898">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="cd_device_connect_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="694">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="702">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="696">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="697">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="cd_device_connect_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="62">Connects to the object and fills up initial properties.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="73">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="64">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="65">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="cd_device_equal" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1810">Tests two devices for equality.</doc>
        <source-position filename="lib/colord/cd-device.h" line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1817">%TRUE if the devices are the same device</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1812">one #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="device2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1813">another #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_colorspace"
              c:identifier="cd_device_get_colorspace"
              glib:get-property="colorspace"
              version="0.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="337">Gets the device colorspace.</doc>
        <source-position filename="lib/colord/cd-device.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="343">A colorspace, e.g. %CD_COLORSPACE_RGB</doc>
          <type name="Colorspace" c:type="CdColorspace"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="339">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connected"
              c:identifier="cd_device_get_connected"
              glib:get-property="connected"
              version="0.1.9">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1757">Gets if the device has been connected.</doc>
        <source-position filename="lib/colord/cd-device.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1763">%TRUE if properties are valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1759">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_created"
              c:identifier="cd_device_get_created"
              glib:get-property="created"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="280">Gets the device creation date.</doc>
        <source-position filename="lib/colord/cd-device.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="286">A value in microseconds, or 0 for invalid</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="282">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_profile"
              c:identifier="cd_device_get_default_profile"
              version="0.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="471">Gets the default device profile. A profile will not be returned
if the device is being profiled or is disabled.</doc>
        <source-position filename="lib/colord/cd-device.h" line="171"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="478">A #CdProfile's or NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="473">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_embedded"
              c:identifier="cd_device_get_embedded"
              glib:get-property="embedded"
              version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="394">Returns if the device is embedded in the computer and cannot be
removed.</doc>
        <source-position filename="lib/colord/cd-device.h" line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="401">%TRUE if embedded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="396">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="cd_device_get_enabled"
              glib:get-property="enabled"
              version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="375">Gets the device enabled state.</doc>
        <source-position filename="lib/colord/cd-device.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="381">%TRUE if the device is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="377">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format"
              c:identifier="cd_device_get_format"
              glib:get-property="format"
              version="0.1.9">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="242">Gets the device format.</doc>
        <source-position filename="lib/colord/cd-device.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="248">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="244">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="cd_device_get_id"
              glib:get-property="id"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="147">Gets the device ID.</doc>
        <source-position filename="lib/colord/cd-device.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="153">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="149">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="cd_device_get_kind"
              glib:get-property="kind"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="318">Gets the device kind.</doc>
        <source-position filename="lib/colord/cd-device.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="324">A device kind, e.g. %CD_DEVICE_KIND_DISPLAY</doc>
          <type name="DeviceKind" c:type="CdDeviceKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="320">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="cd_device_get_metadata"
              version="0.1.5">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="519">Returns the device metadata.</doc>
        <source-position filename="lib/colord/cd-device.h" line="173"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="525">a
              #GHashTable.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="521">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_item"
              c:identifier="cd_device_get_metadata_item"
              version="0.1.5">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="539">Returns the device metadata for a specific key.</doc>
        <source-position filename="lib/colord/cd-device.h" line="174"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="546">the metadata value, or %NULL if not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="541">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="542">a key for the metadata dictionary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="cd_device_get_mode"
              glib:get-property="mode"
              version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="356">Gets the device mode.</doc>
        <source-position filename="lib/colord/cd-device.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="362">A colorspace, e.g. %CD_DEVICE_MODE_VIRTUAL</doc>
          <type name="DeviceMode" c:type="CdDeviceMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="358">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="cd_device_get_model"
              glib:get-property="model"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="166">Gets the device model.</doc>
        <source-position filename="lib/colord/cd-device.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="172">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="168">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modified"
              c:identifier="cd_device_get_modified"
              glib:get-property="modified"
              version="0.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="299">Gets the device modified date.</doc>
        <source-position filename="lib/colord/cd-device.h" line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="305">A value in microseconds, or 0 for invalid</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="301">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="cd_device_get_object_path"
              glib:get-property="object-path"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1739">Gets the object path for the device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1745">the object path, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1741">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_owner"
              c:identifier="cd_device_get_owner"
              glib:get-property="owner"
              version="0.1.13">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="433">Gets the device owner.</doc>
        <source-position filename="lib/colord/cd-device.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="439">The UID of the user that created the device</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="435">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profile_for_qualifiers"
              c:identifier="cd_device_get_profile_for_qualifiers"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1516">Gets the preferred profile for some qualifiers.</doc>
        <source-position filename="lib/colord/cd-device.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1518">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="qualifiers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1519">a set of qualifiers that can included wildcards</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1520">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1521">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1522">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_profile_for_qualifiers_finish"
              c:identifier="cd_device_get_profile_for_qualifiers_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1465">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1473">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1467">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1468">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_profile_for_qualifiers_sync"
              c:identifier="cd_device_get_profile_for_qualifiers_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="280">Gets the preferred profile for some qualifiers.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="292">a #CdProfile or %NULL</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="282">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="qualifiers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="283">a set of qualifiers that can included wildcards</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="284">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_profile_relation"
              c:identifier="cd_device_get_profile_relation"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1615">Gets the property relationship to the device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1617">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1618">a #CdProfile instance</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1619">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1620">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1621">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_profile_relation_finish"
              c:identifier="cd_device_get_profile_relation_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1563">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1571">success</doc>
          <type name="DeviceRelation" c:type="CdDeviceRelation"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1565">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1566">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_profile_relation_sync"
              c:identifier="cd_device_get_profile_relation_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="494">Gets the property relationship to the device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="506">%TRUE for success, else %FALSE.</doc>
          <type name="DeviceRelation" c:type="CdDeviceRelation"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="496">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="497">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="498">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_profiles"
              c:identifier="cd_device_get_profiles"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="452">Gets the device profiles.</doc>
        <source-position filename="lib/colord/cd-device.h" line="170"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="458">An array of #CdProfile's</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Profile"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="454">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profiling_inhibitors"
              c:identifier="cd_device_get_profiling_inhibitors"
              glib:get-property="profiling-inhibitors"
              version="0.1.17">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="261">Gets any profiling inhibitors for the device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="267">A strv, or %NULL for invalid</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="263">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scope"
              c:identifier="cd_device_get_scope"
              glib:get-property="scope"
              version="0.1.10">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="414">Gets the device scope.</doc>
        <source-position filename="lib/colord/cd-device.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="420">An object scope, e.g. %CD_OBJECT_SCOPE_TEMP</doc>
          <type name="ObjectScope" c:type="CdObjectScope"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="416">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seat"
              c:identifier="cd_device_get_seat"
              glib:get-property="seat"
              version="0.1.24">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="223">Gets the device seat identifier.</doc>
        <source-position filename="lib/colord/cd-device.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="229">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="225">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="cd_device_get_serial"
              glib:get-property="serial"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="204">Gets the device serial number.</doc>
        <source-position filename="lib/colord/cd-device.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="210">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="206">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor"
              c:identifier="cd_device_get_vendor"
              glib:get-property="vendor"
              version="0.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="185">Gets the device vendor.</doc>
        <source-position filename="lib/colord/cd-device.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="191">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="187">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="make_profile_default"
              c:identifier="cd_device_make_profile_default"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1260">Makes an already added profile default for a device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1262">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1263">a #CdProfile instance</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1264">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1265">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1266">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="make_profile_default_finish"
              c:identifier="cd_device_make_profile_default_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1216">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1224">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1218">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1219">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="make_profile_default_sync"
              c:identifier="cd_device_make_profile_default_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="334">Makes an already added profile default for a device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="346">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="336">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="337">a #CdProfile instance</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="338">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="profiling_inhibit"
              c:identifier="cd_device_profiling_inhibit"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1345">Sets up the device for profiling and causes no profiles to be
returned if cd_device_get_profile_for_qualifiers_sync() is used.</doc>
        <source-position filename="lib/colord/cd-device.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1347">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1348">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1349">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1350">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="profiling_inhibit_finish"
              c:identifier="cd_device_profiling_inhibit_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1301">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1309">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1303">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1304">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="profiling_inhibit_sync"
              c:identifier="cd_device_profiling_inhibit_sync"
              version="0.1.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="388">Sets up the device for profiling and causes no profiles to be
returned if cd_device_get_profile_for_qualifiers_sync() is used.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="400">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="390">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="391">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="profiling_uninhibit"
              c:identifier="cd_device_profiling_uninhibit"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1427">Restores the device after profiling and causes normal profiles to be
returned if cd_device_get_profile_for_qualifiers_sync() is used.</doc>
        <source-position filename="lib/colord/cd-device.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1429">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1430">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1431">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1432">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="profiling_uninhibit_finish"
              c:identifier="cd_device_profiling_uninhibit_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1383">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1391">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1385">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1386">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="profiling_uninhibit_sync"
              c:identifier="cd_device_profiling_uninhibit_sync"
              version="0.1.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="441">Sets up the device for profiling and causes no profiles to be
returned if cd_device_get_profile_for_qualifiers_sync() is used.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="453">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="443">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="444">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_profile"
              c:identifier="cd_device_remove_profile"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1175">Removes a profile from a device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1177">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1178">a #CdProfile instance</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1179">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1180">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1181">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_profile_finish"
              c:identifier="cd_device_remove_profile_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1131">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1139">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1133">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1134">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_profile_sync"
              c:identifier="cd_device_remove_profile_sync"
              version="0.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="226">Removes a profile from a device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="238">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="228">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="229">a #CdProfile instance</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="230">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_colorspace_sync"
              c:identifier="cd_device_set_colorspace_sync"
              version="0.1.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="703">Sets the device kind.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="715">#TRUE for success, else #FALSE and @error is used</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="705">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="706">The device colorspace, e.g. #CD_COLORSPACE_RGB</doc>
            <type name="Colorspace" c:type="CdColorspace"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="707">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="cd_device_set_enabled"
              version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1700">Enables or disables a device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1702">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1703">the enabled state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1704">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1705">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1706">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_finish"
              c:identifier="cd_device_set_enabled_finish"
              version="0.1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1656">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1664">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1658">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1659">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_sync"
              c:identifier="cd_device_set_enabled_sync"
              version="0.1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="548">Enables or disables a device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="560">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="550">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="551">the enabled state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="552">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind_sync"
              c:identifier="cd_device_set_kind_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="675">Sets the device kind.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="687">#TRUE for success, else #FALSE and @error is used</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="677">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="678">The device kind, e.g. #CD_DEVICE_KIND_DISPLAY</doc>
            <type name="DeviceKind" c:type="CdDeviceKind"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="679">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode_sync"
              c:identifier="cd_device_set_mode_sync"
              version="0.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="731">Sets the device mode.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="743">#TRUE for success, else #FALSE and @error is used</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="733">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="734">The device kind, e.g. #CD_DEVICE_MODE_VIRTUAL</doc>
            <type name="DeviceMode" c:type="CdDeviceMode"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="735">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model_sync"
              c:identifier="cd_device_set_model_sync"
              version="0.1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="591">Sets the device model.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="603">#TRUE for success, else #FALSE and @error is used</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="593">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="594">The model.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="595">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object_path"
              c:identifier="cd_device_set_object_path"
              glib:set-property="object-path"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="129">Sets the object path of the device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="131">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="132">The colord object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property"
              c:identifier="cd_device_set_property"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="999">Sets a property on the device.</doc>
        <source-position filename="lib/colord/cd-device.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1001">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1002">a property key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1003">a property key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1004">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1005">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1006">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_finish"
              c:identifier="cd_device_set_property_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="937">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-device.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="945">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="939">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="940">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_sync"
              c:identifier="cd_device_set_property_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="114">Sets an object property.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="127">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="116">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="117">The property key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="118">The property value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="119">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_serial_sync"
              c:identifier="cd_device_set_serial_sync"
              version="0.1.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="619">Sets the device serial number.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="631">#TRUE for success, else #FALSE and @error is used</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="621">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="622">The string value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="623">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vendor_sync"
              c:identifier="cd_device_set_vendor_sync"
              version="0.1.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device-sync.c"
             line="647">Sets the device vendor.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-device-sync.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device-sync.c"
               line="659">#TRUE for success, else #FALSE and @error is used</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="649">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="650">The string value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device-sync.c"
                 line="651">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="cd_device_to_string"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1775">Converts the device to a string description.</doc>
        <source-position filename="lib/colord/cd-device.h" line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-device.c"
               line="1781">text representation of #CdDevice</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-device.c"
                 line="1777">a #CdDevice instance.</doc>
            <type name="Device" c:type="CdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="colorspace"
                version="0.1.1"
                transfer-ownership="none"
                getter="get_colorspace"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2105">The device colorspace, e.g. %CD_COLORSPACE_RGB.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="connected"
                version="0.1.9"
                transfer-ownership="none"
                getter="get_connected"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1960">The if the object path has been connected as is valid for use.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="created"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_created"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1973">The time the device was created.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="embedded"
                version="0.1.27"
                transfer-ownership="none"
                getter="get_embedded"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2182">If the device is embedded in the device and cannot be removed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled"
                version="0.1.26"
                transfer-ownership="none"
                getter="get_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2153">The device enabled state.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="format"
                version="0.1.9"
                transfer-ownership="none"
                getter="get_format"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2051">The device format.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1999">The device ID.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_kind"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2090">The device kind, e.g. %CD_DEVICE_KIND_DISPLAY.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mode"
                version="0.1.2"
                transfer-ownership="none"
                getter="get_mode"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2121">The device colorspace, e.g. %CD_DEVICE_MODE_VIRTUAL.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="model"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_model"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2012">The device model.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="modified"
                version="0.1.1"
                transfer-ownership="none"
                getter="get_modified"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1986">The last time the device was modified.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="object-path"
                version="0.1.8"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_object_path"
                getter="get_object_path"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1947">The object path of the remote object</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="owner"
                version="0.1.13"
                transfer-ownership="none"
                getter="get_owner"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2167">The device owner, e.g. 500.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="profiling-inhibitors"
                transfer-ownership="none"
                getter="get_profiling_inhibitors">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="scope"
                version="0.1.10"
                transfer-ownership="none"
                getter="get_scope"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2137">The device scope, e.g. %CD_OBJECT_SCOPE_TEMP.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="seat"
                version="0.1.24"
                transfer-ownership="none"
                getter="get_seat"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2038">The device seat identifier.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="serial"
                version="0.1.1"
                transfer-ownership="none"
                getter="get_serial"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2025">The device serial number.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vendor"
                version="0.1.1"
                transfer-ownership="none"
                getter="get_vendor"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="2064">The device vendor.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="changed" when="last" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-device.c"
             line="1932">The ::changed signal is emitted when the device data has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DeviceClass"
            c:type="CdDeviceClass"
            glib:is-gtype-struct-for="Device">
      <source-position filename="lib/colord/cd-device.h" line="57"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="lib/colord/cd-device.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="CdDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_cd_device_reserved1" introspectable="0">
        <callback name="_cd_device_reserved1">
          <source-position filename="lib/colord/cd-device.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_device_reserved2" introspectable="0">
        <callback name="_cd_device_reserved2">
          <source-position filename="lib/colord/cd-device.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_device_reserved3" introspectable="0">
        <callback name="_cd_device_reserved3">
          <source-position filename="lib/colord/cd-device.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_device_reserved4" introspectable="0">
        <callback name="_cd_device_reserved4">
          <source-position filename="lib/colord/cd-device.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_device_reserved5" introspectable="0">
        <callback name="_cd_device_reserved5">
          <source-position filename="lib/colord/cd-device.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_device_reserved6" introspectable="0">
        <callback name="_cd_device_reserved6">
          <source-position filename="lib/colord/cd-device.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_device_reserved7" introspectable="0">
        <callback name="_cd_device_reserved7">
          <source-position filename="lib/colord/cd-device.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_device_reserved8" introspectable="0">
        <callback name="_cd_device_reserved8">
          <source-position filename="lib/colord/cd-device.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceError" c:type="CdDeviceError">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="375">Errors that can be thrown</doc>
      <source-position filename="lib/colord/cd-enum.h" line="402"/>
      <member name="internal"
              value="0"
              c:identifier="CD_DEVICE_ERROR_INTERNAL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="377">An internal error occurred</doc>
      </member>
      <member name="profile_does_not_exist"
              value="1"
              c:identifier="CD_DEVICE_ERROR_PROFILE_DOES_NOT_EXIST">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="378">The profile does not exist</doc>
      </member>
      <member name="profile_already_added"
              value="2"
              c:identifier="CD_DEVICE_ERROR_PROFILE_ALREADY_ADDED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="379">The profile has already been added</doc>
      </member>
      <member name="profiling"
              value="3"
              c:identifier="CD_DEVICE_ERROR_PROFILING">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="380">The device is being profiled</doc>
      </member>
      <member name="nothing_matched"
              value="4"
              c:identifier="CD_DEVICE_ERROR_NOTHING_MATCHED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="381">Nothing matched the search term</doc>
      </member>
      <member name="failed_to_inhibit"
              value="5"
              c:identifier="CD_DEVICE_ERROR_FAILED_TO_INHIBIT">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="382">Cound not inhibit device</doc>
      </member>
      <member name="failed_to_uninhibit"
              value="6"
              c:identifier="CD_DEVICE_ERROR_FAILED_TO_UNINHIBIT">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="383">Cound not uninhibit device</doc>
      </member>
      <member name="failed_to_authenticate"
              value="7"
              c:identifier="CD_DEVICE_ERROR_FAILED_TO_AUTHENTICATE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="384">Authentication failed</doc>
      </member>
      <member name="not_enabled"
              value="8"
              c:identifier="CD_DEVICE_ERROR_NOT_ENABLED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="385">The device has been disabled</doc>
      </member>
    </enumeration>
    <enumeration name="DeviceKind" c:type="CdDeviceKind">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="33">The device type.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="47"/>
      <member name="unknown" value="0" c:identifier="CD_DEVICE_KIND_UNKNOWN">
      </member>
      <member name="display" value="1" c:identifier="CD_DEVICE_KIND_DISPLAY">
      </member>
      <member name="scanner" value="2" c:identifier="CD_DEVICE_KIND_SCANNER">
      </member>
      <member name="printer" value="3" c:identifier="CD_DEVICE_KIND_PRINTER">
      </member>
      <member name="camera" value="4" c:identifier="CD_DEVICE_KIND_CAMERA">
      </member>
      <member name="webcam" value="5" c:identifier="CD_DEVICE_KIND_WEBCAM">
      </member>
    </enumeration>
    <enumeration name="DeviceMode" c:type="CdDeviceMode">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="137">The device mode.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="148"/>
      <member name="unknown" value="0" c:identifier="CD_DEVICE_MODE_UNKNOWN">
      </member>
      <member name="physical" value="1" c:identifier="CD_DEVICE_MODE_PHYSICAL">
      </member>
      <member name="virtual" value="2" c:identifier="CD_DEVICE_MODE_VIRTUAL">
      </member>
    </enumeration>
    <enumeration name="DeviceRelation" c:type="CdDeviceRelation">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="150">The device to profile relationship.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="161"/>
      <member name="unknown"
              value="0"
              c:identifier="CD_DEVICE_RELATION_UNKNOWN">
      </member>
      <member name="soft" value="1" c:identifier="CD_DEVICE_RELATION_SOFT">
      </member>
      <member name="hard" value="2" c:identifier="CD_DEVICE_RELATION_HARD">
      </member>
    </enumeration>
    <class name="Edid"
           c:symbol-prefix="edid"
           c:type="CdEdid"
           parent="GObject.Object"
           glib:type-name="CdEdid"
           glib:get-type="cd_edid_get_type"
           glib:type-struct="EdidClass">
      <source-position filename="lib/colord/cd-edid.h" line="53"/>
      <constructor name="new" c:identifier="cd_edid_new" version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="674">Creates an object suitable for parsing an EDID.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="679">A new #CdEdid</doc>
          <type name="Edid" c:type="CdEdid*"/>
        </return-value>
      </constructor>
      <function name="error_quark"
                c:identifier="cd_edid_error_quark"
                version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="70">Gets the #CdEdid error quark.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="75">a #GQuark</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_blue" c:identifier="cd_edid_get_blue" version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="351">Gets the blue primary.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="357">#CdColorYxy chromaticity</doc>
          <type name="ColorYxy" c:type="const CdColorYxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="353">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_checksum"
              c:identifier="cd_edid_get_checksum"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="225">Gets the EDID MD5 checksum.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="231">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="227">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_eisa_id"
              c:identifier="cd_edid_get_eisa_id"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="207">Gets the EDID EISA ID.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="213">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="209">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gamma"
              c:identifier="cd_edid_get_gamma"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="297">Gets the native panel gamma.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="303">floating point value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="299">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_green"
              c:identifier="cd_edid_get_green"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="333">Gets the green primary.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="339">#CdColorYxy chromaticity</doc>
          <type name="ColorYxy" c:type="const CdColorYxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="335">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="cd_edid_get_height"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="279">Gets the panel height in inches.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="285">integer value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="281">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_monitor_name"
              c:identifier="cd_edid_get_monitor_name"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="88">Gets the EDID monitor name.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="94">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="90">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pnp_id"
              c:identifier="cd_edid_get_pnp_id"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="243">Gets the EDID PNP ID.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="249">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="245">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_red" c:identifier="cd_edid_get_red" version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="315">Gets the red primary.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="321">%TRUE for success</doc>
          <type name="ColorYxy" c:type="const CdColorYxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="317">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial_number"
              c:identifier="cd_edid_get_serial_number"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="189">Gets the EDID serial number.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="195">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="191">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor_name"
              c:identifier="cd_edid_get_vendor_name"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="169">Gets the EDID vendor name.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="175">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="171">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_white"
              c:identifier="cd_edid_get_white"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="369">Gets the whitepoint.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="375">#CdColorYxy chromaticity</doc>
          <type name="ColorYxy" c:type="const CdColorYxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="371">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="cd_edid_get_width"
              version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="261">Gets the panel width in inches.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="267">integer value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="263">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse"
              c:identifier="cd_edid_parse"
              version="1.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="494">Parses the EDID.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-edid.c"
               line="502">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="496">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
          <parameter name="edid_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="497">data to parse</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="cd_edid_reset" version="1.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-edid.c"
             line="387">Resets all cached data.</doc>
        <source-position filename="lib/colord/cd-edid.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-edid.c"
                 line="389">A valid #CdEdid</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="EdidClass"
            c:type="CdEdidClass"
            glib:is-gtype-struct-for="Edid">
      <source-position filename="lib/colord/cd-edid.h" line="53"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_cd_edid_reserved1" introspectable="0">
        <callback name="_cd_edid_reserved1">
          <source-position filename="lib/colord/cd-edid.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_edid_reserved2" introspectable="0">
        <callback name="_cd_edid_reserved2">
          <source-position filename="lib/colord/cd-edid.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_edid_reserved3" introspectable="0">
        <callback name="_cd_edid_reserved3">
          <source-position filename="lib/colord/cd-edid.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_edid_reserved4" introspectable="0">
        <callback name="_cd_edid_reserved4">
          <source-position filename="lib/colord/cd-edid.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_edid_reserved5" introspectable="0">
        <callback name="_cd_edid_reserved5">
          <source-position filename="lib/colord/cd-edid.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_edid_reserved6" introspectable="0">
        <callback name="_cd_edid_reserved6">
          <source-position filename="lib/colord/cd-edid.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_edid_reserved7" introspectable="0">
        <callback name="_cd_edid_reserved7">
          <source-position filename="lib/colord/cd-edid.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_edid_reserved8" introspectable="0">
        <callback name="_cd_edid_reserved8">
          <source-position filename="lib/colord/cd-edid.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Icc"
           c:symbol-prefix="icc"
           c:type="CdIcc"
           parent="GObject.Object"
           glib:type-name="CdIcc"
           glib:get-type="cd_icc_get_type"
           glib:type-struct="IccClass">
      <source-position filename="lib/colord/cd-icc.h" line="86"/>
      <constructor name="new" c:identifier="cd_icc_new" version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="4090">Creates a new #CdIcc object.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="4095">a new CdIcc object.</doc>
          <type name="Icc" c:type="CdIcc*"/>
        </return-value>
      </constructor>
      <function name="error_quark"
                c:identifier="cd_icc_error_quark"
                version="0.1.32">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="108">An error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="add_metadata"
              c:identifier="cd_icc_add_metadata"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2297">Sets an item of data to the profile metadata, overwriting it if
it already exists.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="191"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2299">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2300">the metadata key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2301">the UTF-8 metadata value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_default"
              c:identifier="cd_icc_create_default"
              version="1.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3102">Creates a default sRGB ICC profile.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="256"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3109">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3104">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_default_full"
              c:identifier="cd_icc_create_default_full"
              version="1.4.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3045">Creates a default sRGB ICC profile.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="259"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3053">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3047">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3048">a set of #CdIccLoadFlags</doc>
            <type name="IccLoadFlags" c:type="CdIccLoadFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_from_edid"
              c:identifier="cd_icc_create_from_edid"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3181">Creates an ICC profile from EDID data.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3193">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3183">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="gamma_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3184">approximate device gamma</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3185">primary color value</doc>
            <type name="ColorYxy" c:type="const CdColorYxy*"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3186">primary color value</doc>
            <type name="ColorYxy" c:type="const CdColorYxy*"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3187">primary color value</doc>
            <type name="ColorYxy" c:type="const CdColorYxy*"/>
          </parameter>
          <parameter name="white" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3188">whitepoint value</doc>
            <type name="ColorYxy" c:type="const CdColorYxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_from_edid_data"
              c:identifier="cd_icc_create_from_edid_data"
              version="1.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3119">Creates an ICC profile from EDID data.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="252"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3127">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3121">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="edid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3122">EDID data</doc>
            <type name="Edid" c:type="CdEdid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_blue"
              c:identifier="cd_icc_get_blue"
              glib:get-property="blue"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3005">Gets the profile red chromaticity value.
This function will only return results if the profile was loaded with the
%CD_ICC_LOAD_FLAGS_PRIMARIES flag.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3013">the #CdColorXYZ value</doc>
          <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3007">a valid #CdIcc instance</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_delete"
              c:identifier="cd_icc_get_can_delete"
              glib:get-property="can-delete"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2429">Finds out if the profile could be deleted.
This is only applicable for profiles loaded with cd_icc_load_file() as
obviously data and fd's cannot be sanely unlinked.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2437">%TRUE if g_file_delete() would likely work</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2431">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_characterization_data"
              c:identifier="cd_icc_get_characterization_data"
              version="1.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1758">Gets any characterization data used to build the profile.
This function will only return results if the profile was loaded with the
%CD_ICC_LOAD_FLAGS_CHARACTERIZATION flag.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="1766">TI3 string data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1760">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_checksum"
              c:identifier="cd_icc_get_checksum"
              glib:get-property="checksum"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2504">Gets the profile checksum if one exists.
This will either be the embedded profile ID, or the file checksum if
the #CdIcc object was loaded using cd_icc_load_data() or cd_icc_load_file()
and the %CD_ICC_LOAD_FLAGS_FALLBACK_MD5 flag is used.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2513">An embedded MD5 checksum, or %NULL for not set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2506">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_colorspace"
              c:identifier="cd_icc_get_colorspace"
              glib:get-property="colorspace"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2223">Gets the profile colorspace</doc>
        <source-position filename="lib/colord/cd-icc.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2229">The profile colorspace, e.g. %CD_COLORSPACE_RGB</doc>
          <type name="Colorspace" c:type="CdColorspace"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2225">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context"
              c:identifier="cd_icc_get_context"
              version="1.1.7">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2043">Return the cmsContext instance used locally. This may be required if you
are using native LCMS calls and then cd_icc_load_handle().</doc>
        <source-position filename="lib/colord/cd-icc.h" line="174"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2050">Do not call cmsDeleteContext() on this value!</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2045">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_copyright"
              c:identifier="cd_icc_get_copyright"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2675">Gets the profile copyright.
If the translated text is not available in the selected locale then the
default untranslated (en_US) text is returned.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2685">The text as a UTF-8 string, or %NULL of the locale is invalid
              or the tag does not exist.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2677">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2678">A locale, e.g. "en_GB.UTF-8" or %NULL for the profile default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_created"
              c:identifier="cd_icc_get_created"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2449">Gets the ICC creation date and time.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="198"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2455">A #GDateTime object, or %NULL for not set</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2451">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="cd_icc_get_description"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2647">Gets the profile description.
If the translated text is not available in the selected locale then the
default untranslated (en_US) text is returned.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2657">The text as a UTF-8 string, or %NULL of the locale is invalid
              or the tag does not exist.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2649">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2650">A locale, e.g. "en_GB.UTF-8" or %NULL for the profile default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="cd_icc_get_filename"
              glib:get-property="filename"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2133">Gets the filename of the ICC data, if one exists.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2139">A filename, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2135">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_green"
              c:identifier="cd_icc_get_green"
              glib:get-property="green"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2985">Gets the profile green chromaticity value.
This function will only return results if the profile was loaded with the
%CD_ICC_LOAD_FLAGS_PRIMARIES flag.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2993">the #CdColorXYZ value</doc>
          <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2987">a valid #CdIcc instance</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handle" c:identifier="cd_icc_get_handle">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2026">Return the cmsHPROFILE instance used locally. This may be required if you
are using the profile in a transform.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="173"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2033">Do not call cmsCloseProfile() on this value!</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2028">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="cd_icc_get_kind"
              glib:get-property="kind"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2187">Gets the profile kind.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2193">The kind, e.g. %CD_PROFILE_KIND_INPUT</doc>
          <type name="ProfileKind" c:type="CdProfileKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2189">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manufacturer"
              c:identifier="cd_icc_get_manufacturer"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2701">Gets the profile manufacturer.
If the translated text is not available in the selected locale then the
default untranslated (en_US) text is returned.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="211"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2711">The text as a UTF-8 string, or %NULL of the locale is invalid
              or the tag does not exist.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2703">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2704">A locale, e.g. "en_GB.UTF-8" or %NULL for the profile default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="cd_icc_get_metadata"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2259">Gets all the metadata from the ICC profile.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="188"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2265">The profile metadata</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2261">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_item"
              c:identifier="cd_icc_get_metadata_item"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2277">Gets an item of data from the ICC metadata store.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2284">The dictionary data, or %NULL if the key does not exist.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2279">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2280">the dictionary key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="cd_icc_get_model"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2727">Gets the profile model.
If the translated text is not available in the selected locale then the
default untranslated (en_US) text is returned.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2737">The text as a UTF-8 string, or %NULL of the locale is invalid
              or the tag does not exist.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2729">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2730">A locale, e.g. "en_GB.UTF-8" or %NULL for the profile default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_named_colors"
              c:identifier="cd_icc_get_named_colors"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2409">Gets any named colors in the profile.
This function will only return results if the profile was loaded with the
%CD_ICC_LOAD_FLAGS_NAMED_COLORS flag.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="196"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2417">An array of color swatches</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="ColorSwatch"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2411">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_red"
              c:identifier="cd_icc_get_red"
              glib:get-property="red"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2965">Gets the profile red chromaticity value.
This function will only return results if the profile was loaded with the
%CD_ICC_LOAD_FLAGS_PRIMARIES flag.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2973">the #CdColorXYZ value</doc>
          <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2967">a valid #CdIcc instance</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_response"
              c:identifier="cd_icc_get_response"
              version="0.1.34"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3324">Generates a response curve of a specified size.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="271"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3332">response data, or %NULL for error</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="ColorRGB"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3326">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3327">the size of the curve to generate</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="cd_icc_get_size"
              glib:get-property="size"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2116">Gets the ICC profile file size</doc>
        <source-position filename="lib/colord/cd-icc.h" line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2121">The size in bytes, or 0 for unknown.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tag_data"
              c:identifier="cd_icc_get_tag_data"
              version="1.1.6"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="723">Returns the raw data for the specific tag.
Most users do not need to do this.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="277"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="732">the data for the tag</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="725">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="726">a 4 bytes tag description, e.g. "cprt" or "vcgt"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tags"
              c:identifier="cd_icc_get_tags"
              version="1.1.6"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="680">Returns the internal tag table. Most users do not need to do this.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="275"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="687">the tag tables as an array of strings</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="682">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temperature"
              c:identifier="cd_icc_get_temperature"
              glib:get-property="temperature"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2945">Gets the ICC color temperature, rounded to the nearest 100K.
This function will only return results if the profile was loaded with the
%CD_ICC_LOAD_FLAGS_PRIMARIES flag.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2953">The color temperature in Kelvin, or 0 for error.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2947">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vcgt"
              c:identifier="cd_icc_get_vcgt"
              version="0.1.34"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3274">Gets the video card calibration data from the profile.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="263"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3282">VCGT data, or %NULL for error</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="ColorRGB"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3276">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3277">the desired size of the table data</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="cd_icc_get_version"
              glib:get-property="version"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2151">Gets the ICC profile version, typically 2.1 or 4.2</doc>
        <source-position filename="lib/colord/cd-icc.h" line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="2157">A floating point version number, or 0.0 for unknown</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2153">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_warnings"
              c:identifier="cd_icc_get_warnings"
              version="0.1.34">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3788">Returns any warnings with profiles</doc>
        <source-position filename="lib/colord/cd-icc.h" line="242"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3794">An array of warning values</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="ProfileWarning"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3790">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_white"
              c:identifier="cd_icc_get_white"
              glib:get-property="white"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3025">Gets the profile white point.
This function will only return results if the profile was loaded with the
%CD_ICC_LOAD_FLAGS_PRIMARIES flag.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="3033">the #CdColorXYZ value</doc>
          <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3027">a valid #CdIcc instance</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_data"
              c:identifier="cd_icc_load_data"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1154">Loads an ICC profile from raw byte data.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1156">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1157">binary data</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="data_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1158">Length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1159">a set of #CdIccLoadFlags</doc>
            <type name="IccLoadFlags" c:type="CdIccLoadFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_fd"
              c:identifier="cd_icc_load_fd"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1978">Loads an ICC profile from an open file descriptor.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1980">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1981">a file descriptor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1982">a set of #CdIccLoadFlags</doc>
            <type name="IccLoadFlags" c:type="CdIccLoadFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file"
              c:identifier="cd_icc_load_file"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1906">Loads an ICC profile from a local or remote file.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1908">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1909">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1910">a set of #CdIccLoadFlags</doc>
            <type name="IccLoadFlags" c:type="CdIccLoadFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1911">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_handle"
              c:identifier="cd_icc_load_handle"
              version="0.1.33"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2062">Set the internal cmsHPROFILE instance. This may be required if you create
the profile using cmsCreateRGBProfileTHR() and then want to use the
functionality in #CdIcc.

Do not call cmsCloseProfile() on @handle in the caller, this will be done
when the @icc object is finalized. Treat the profile like it's been adopted
by this module.

To handle the internal error callback, you should use the thread-safe
creation function, e.g. cmsCreateNULLProfileTHR(). The @context_id should be
set as the value of cd_icc_get_context() for this object.

Additionally, this function cannot be called more than once, and also can't
be called if cd_icc_load_file() has previously been used on the @icc object.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2064">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="handle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2065">a cmsHPROFILE instance</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2066">a set of #CdIccLoadFlags</doc>
            <type name="IccLoadFlags" c:type="CdIccLoadFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_metadata"
              c:identifier="cd_icc_remove_metadata"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2322">Removes an item of metadata.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2324">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2325">the metadata key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_data"
              c:identifier="cd_icc_save_data"
              version="1.0.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1554">Saves an ICC profile to an allocated memory location.

Return vale: A #GBytes structure, or %NULL for error</doc>
        <source-position filename="lib/colord/cd-icc.h" line="156"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1556">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1557">a set of #CdIccSaveFlags</doc>
            <type name="IccSaveFlags" c:type="CdIccSaveFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_default"
              c:identifier="cd_icc_save_default"
              version="1.1.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1854">Saves an ICC profile to the default per-user location.

Return vale: %TRUE for success.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1856">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1857">a set of #CdIccSaveFlags</doc>
            <type name="IccSaveFlags" c:type="CdIccSaveFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1858">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file"
              c:identifier="cd_icc_save_file"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1796">Saves an ICC profile to a local or remote file.

Return vale: %TRUE for success.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1798">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1799">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1800">a set of #CdIccSaveFlags</doc>
            <type name="IccSaveFlags" c:type="CdIccSaveFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1801">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_characterization_data"
              c:identifier="cd_icc_set_characterization_data"
              version="1.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1778">Sets the characterization data used to build the profile.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1780">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1781">TI3 string data, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_colorspace"
              c:identifier="cd_icc_set_colorspace"
              glib:set-property="colorspace"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2241">Sets the colorspace kind.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2243">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2244">the profile colorspace, e.g. %CD_COLORSPACE_RGB</doc>
            <type name="Colorspace" c:type="CdColorspace"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_copyright"
              c:identifier="cd_icc_set_copyright"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2801">Sets the profile _copyright for a specific locale.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="222"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2803">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2804">A locale, e.g. "en_GB.UTF-8" or %NULL for the profile default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2805">New UTF-8 string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_copyright_items"
              c:identifier="cd_icc_set_copyright_items"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2821">Sets the profile copyrights for specific locales.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2823">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2824">New translated values, with the key being the locale.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_created"
              c:identifier="cd_icc_set_created"
              version="1.4.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2487">Sets the ICC creation date and time.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2489">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="creation_time" transfer-ownership="none">
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="cd_icc_set_description"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2753">Sets the profile description for a specific locale.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2755">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2756">A locale, e.g. "en_GB.UTF-8" or %NULL for the profile default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2757">New UTF-8 string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description_items"
              c:identifier="cd_icc_set_description_items"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2773">Sets the profile descriptions for specific locales.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2775">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2776">New translated values, with the key being the locale.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename"
              c:identifier="cd_icc_set_filename"
              version="1.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="1888">Sets the filename, which may be required if the ICC profile has been loaded
using cd_icc_load_fd() from a disk cache.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1890">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="1891">a filename, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind"
              c:identifier="cd_icc_set_kind"
              glib:set-property="kind"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2205">Sets the profile kind.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2207">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2208">the profile kind, e.g. %CD_PROFILE_KIND_DISPLAY_DEVICE</doc>
            <type name="ProfileKind" c:type="CdProfileKind"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manufacturer"
              c:identifier="cd_icc_set_manufacturer"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2849">Sets the profile manufacturer for a specific locale.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2851">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2852">A locale, e.g. "en_GB.UTF-8" or %NULL for the profile default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2853">New UTF-8 string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manufacturer_items"
              c:identifier="cd_icc_set_manufacturer_items"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2869">Sets the profile manufacturers for specific locales.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2871">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2872">New translated values, with the key being the locale.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="cd_icc_set_model"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2897">Sets the profile model for a specific locale.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="232"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2899">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2900">A locale, e.g. "en_GB.UTF-8" or %NULL for the profile default</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2901">New UTF-8 string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model_items"
              c:identifier="cd_icc_set_model_items"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2917">Sets the profile models for specific locales.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2919">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2920">New translated values, with the key being the locale.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_tag_data"
              c:identifier="cd_icc_set_tag_data"
              version="1.1.6"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="768">Sets the raw data for the specific tag.
Most users do not need to do this.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="280"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="770">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="771">a 4 bytes tag description, e.g. "cprt" or "vcgt"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="772">a variable sized data entry</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vcgt"
              c:identifier="cd_icc_set_vcgt"
              version="0.1.34"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="3427">Sets the Video Card Gamma Table from the profile.

Return vale: %TRUE for success.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="267"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3429">A valid #CdIcc</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="vcgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="3430">video card calibration data</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="ColorRGB"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="cd_icc_set_version"
              glib:set-property="version"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="2169">Sets the profile version.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2171">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="2172">the profile version, e.g. 2.1 or 4.0</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="cd_icc_to_string"
              version="0.1.32">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.c"
             line="246">Returns a string representation of the ICC profile.</doc>
        <source-position filename="lib/colord/cd-icc.h" line="171"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-icc.c"
               line="252">an allocated string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-icc.c"
                 line="248">a #CdIcc instance.</doc>
            <type name="Icc" c:type="CdIcc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="blue" transfer-ownership="none" getter="get_blue">
        <type name="ColorXYZ"/>
      </property>
      <property name="can-delete"
                transfer-ownership="none"
                getter="get_can_delete"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="checksum"
                transfer-ownership="none"
                getter="get_checksum"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="colorspace"
                writable="1"
                transfer-ownership="none"
                setter="set_colorspace"
                getter="get_colorspace"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="filename"
                transfer-ownership="none"
                getter="get_filename"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="green" transfer-ownership="none" getter="get_green">
        <type name="ColorXYZ"/>
      </property>
      <property name="kind"
                writable="1"
                transfer-ownership="none"
                setter="set_kind"
                getter="get_kind"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="red" transfer-ownership="none" getter="get_red">
        <type name="ColorXYZ"/>
      </property>
      <property name="size"
                transfer-ownership="none"
                getter="get_size"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="temperature"
                transfer-ownership="none"
                getter="get_temperature"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="version"
                writable="1"
                transfer-ownership="none"
                setter="set_version"
                getter="get_version"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="white" transfer-ownership="none" getter="get_white">
        <type name="ColorXYZ"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="IccClass" c:type="CdIccClass" glib:is-gtype-struct-for="Icc">
      <source-position filename="lib/colord/cd-icc.h" line="86"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_cd_icc_reserved1" introspectable="0">
        <callback name="_cd_icc_reserved1">
          <source-position filename="lib/colord/cd-icc.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_icc_reserved2" introspectable="0">
        <callback name="_cd_icc_reserved2">
          <source-position filename="lib/colord/cd-icc.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_icc_reserved3" introspectable="0">
        <callback name="_cd_icc_reserved3">
          <source-position filename="lib/colord/cd-icc.h" line="80"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_icc_reserved4" introspectable="0">
        <callback name="_cd_icc_reserved4">
          <source-position filename="lib/colord/cd-icc.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_icc_reserved5" introspectable="0">
        <callback name="_cd_icc_reserved5">
          <source-position filename="lib/colord/cd-icc.h" line="82"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_icc_reserved6" introspectable="0">
        <callback name="_cd_icc_reserved6">
          <source-position filename="lib/colord/cd-icc.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_icc_reserved7" introspectable="0">
        <callback name="_cd_icc_reserved7">
          <source-position filename="lib/colord/cd-icc.h" line="84"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_icc_reserved8" introspectable="0">
        <callback name="_cd_icc_reserved8">
          <source-position filename="lib/colord/cd-icc.h" line="85"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="IccError" c:type="CdIccError">
      <doc xml:space="preserve"
           filename="lib/colord/cd-icc.h"
           line="45">The ICC error code.</doc>
      <source-position filename="lib/colord/cd-icc.h" line="71"/>
      <member name="failed_to_open"
              value="0"
              c:identifier="CD_ICC_ERROR_FAILED_TO_OPEN">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="47">Failed to open file</doc>
      </member>
      <member name="failed_to_parse"
              value="1"
              c:identifier="CD_ICC_ERROR_FAILED_TO_PARSE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="48">Failed to parse data</doc>
      </member>
      <member name="invalid_locale"
              value="2"
              c:identifier="CD_ICC_ERROR_INVALID_LOCALE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="49">Locale was invalid</doc>
      </member>
      <member name="no_data" value="3" c:identifier="CD_ICC_ERROR_NO_DATA">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="50">No data to read</doc>
      </member>
      <member name="failed_to_save"
              value="4"
              c:identifier="CD_ICC_ERROR_FAILED_TO_SAVE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="51">Failed to save file</doc>
      </member>
      <member name="failed_to_create"
              value="5"
              c:identifier="CD_ICC_ERROR_FAILED_TO_CREATE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="52">Failed to create file</doc>
      </member>
      <member name="invalid_colorspace"
              value="6"
              c:identifier="CD_ICC_ERROR_INVALID_COLORSPACE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="53">Invalid colorspace</doc>
      </member>
      <member name="corruption_detected"
              value="7"
              c:identifier="CD_ICC_ERROR_CORRUPTION_DETECTED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="54">Corruption has been detected</doc>
      </member>
      <member name="internal" value="8" c:identifier="CD_ICC_ERROR_INTERNAL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="55">Something inside LCMS broke</doc>
      </member>
    </enumeration>
    <bitfield name="IccLoadFlags" version="0.1.32" c:type="CdIccLoadFlags">
      <doc xml:space="preserve"
           filename="lib/colord/cd-icc.h"
           line="88">Flags used when loading an ICC profile.</doc>
      <source-position filename="lib/colord/cd-icc.h" line="115"/>
      <member name="none" value="0" c:identifier="CD_ICC_LOAD_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="90">No flags set.</doc>
      </member>
      <member name="named_colors"
              value="1"
              c:identifier="CD_ICC_LOAD_FLAGS_NAMED_COLORS">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="91">Parse any named colors in the profile.</doc>
      </member>
      <member name="translations"
              value="2"
              c:identifier="CD_ICC_LOAD_FLAGS_TRANSLATIONS">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="92">Parse all translations in the profile.</doc>
      </member>
      <member name="metadata"
              value="4"
              c:identifier="CD_ICC_LOAD_FLAGS_METADATA">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="93">Parse the metadata in the profile.</doc>
      </member>
      <member name="fallback_md5"
              value="8"
              c:identifier="CD_ICC_LOAD_FLAGS_FALLBACK_MD5">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="94">Calculate the profile MD5 if a profile
					ID was not supplied in the profile.</doc>
      </member>
      <member name="primaries"
              value="16"
              c:identifier="CD_ICC_LOAD_FLAGS_PRIMARIES">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="96">Parse the primaries in the profile.</doc>
      </member>
      <member name="characterization"
              value="32"
              c:identifier="CD_ICC_LOAD_FLAGS_CHARACTERIZATION">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="97">Load the characterization data from the profile</doc>
      </member>
      <member name="all" value="255" c:identifier="CD_ICC_LOAD_FLAGS_ALL">
      </member>
    </bitfield>
    <enumeration name="IccSaveFlags" version="0.1.32" c:type="CdIccSaveFlags">
      <doc xml:space="preserve"
           filename="lib/colord/cd-icc.h"
           line="117">Flags used when saving an ICC profile.</doc>
      <source-position filename="lib/colord/cd-icc.h" line="129"/>
      <member name="none" value="0" c:identifier="CD_ICC_SAVE_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-icc.h"
             line="119">No flags set.</doc>
      </member>
    </enumeration>
    <class name="It8"
           c:symbol-prefix="it8"
           c:type="CdIt8"
           parent="GObject.Object"
           glib:type-name="CdIt8"
           glib:get-type="cd_it8_get_type"
           glib:type-struct="It8Class">
      <source-position filename="lib/colord/cd-it8.h" line="57"/>
      <constructor name="new" c:identifier="cd_it8_new" version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="2078">Creates a new #CdIt8 object.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="93"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="2083">a new CdIt8 object.</doc>
          <type name="It8" c:type="CdIt8*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_kind"
                   c:identifier="cd_it8_new_with_kind"
                   version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="2095">Creates a new #CdIt8 object.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="2101">a new CdIt8 object.</doc>
          <type name="It8" c:type="CdIt8*"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="2097">a #CdIt8Kind, e.g %CD_IT8_KIND_TI3.</doc>
            <type name="It8Kind" c:type="CdIt8Kind"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error_quark"
                c:identifier="cd_it8_error_quark"
                version="0.1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="87">An error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="add_data" c:identifier="cd_it8_add_data" version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1639">Adds a reading to this object. If either of @rgb or @xyz is NULL then
a black reading (0.0, 0.0, 0.0) is added instead.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1641">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="rgb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1642">a #CdColorRGB, or %NULL</doc>
            <type name="ColorRGB" c:type="const CdColorRGB*"/>
          </parameter>
          <parameter name="xyz" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1643">a #CdColorXYZ, or %NULL</doc>
            <type name="ColorXYZ" c:type="const CdColorXYZ*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_option"
              c:identifier="cd_it8_add_option"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1493">Sets any extra options that have to be set in the CCMX file</doc>
        <source-position filename="lib/colord/cd-it8.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1495">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1496">A IT8 option, e.g. "TYPE_LCD"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_spectrum"
              c:identifier="cd_it8_add_spectrum"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1788">Adds a spectrum to the spectral array.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1790">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1791">the spectral data</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_item"
              c:identifier="cd_it8_get_data_item"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1696">Gets a specific bit of data from this object.
The returned data are absolute readings and are not normalised.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="1706">%TRUE if the index existed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1698">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1699">the item index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="rgb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1700">the returned RGB value</doc>
            <type name="ColorRGB" c:type="CdColorRGB*"/>
          </parameter>
          <parameter name="xyz" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1701">the returned XYZ value</doc>
            <type name="ColorXYZ" c:type="CdColorXYZ*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_size"
              c:identifier="cd_it8_get_data_size"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1678">Gets the data size.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="1684">The number of RGB-XYZ readings in this object.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1680">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enable_created"
              c:identifier="cd_it8_get_enable_created"
              version="0.1.33">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="373">Gets if the 'CREATED' attribute will be written. This is typically only
set in the self test programs.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="380">The reference, or %NULL if unset</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="375">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_instrument"
              c:identifier="cd_it8_get_instrument"
              glib:get-property="instrument"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="337">Gets the instrument the file was created by.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="343">The instrument, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="339">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="cd_it8_get_kind"
              glib:get-property="kind"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="262">Gets the kind of IT8 file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="268">a #CdIt8Kind, e.g %CD_IT8_KIND_TI3.</doc>
          <type name="It8Kind" c:type="CdIt8Kind"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="264">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matrix"
              c:identifier="cd_it8_get_matrix"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="227">Gets the calibration matrix in the it8 file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="233">a #CdMat3x3.</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="229">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_normalized"
              c:identifier="cd_it8_get_normalized"
              glib:get-property="normalized"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="392">Gets if the data should be written normlaised to y=100.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="398">%TRUE if the data should be normalised.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="394">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_originator"
              c:identifier="cd_it8_get_originator"
              glib:get-property="originator"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="301">Gets the file orginator.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="307">The originator, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="303">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reference"
              c:identifier="cd_it8_get_reference"
              glib:get-property="reference"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="355">Gets the reference the file was created against.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="361">The reference, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="357">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spectral"
              c:identifier="cd_it8_get_spectral"
              glib:get-property="spectral"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="410">Gets if the data is spectral or XYZ.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="416">%TRUE if the data is in spectral bands.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="412">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spectrum_array"
              c:identifier="cd_it8_get_spectrum_array"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1818">Gets the spectral data of IT8 file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="160"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="1824">spectral data</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Spectrum"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1820">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spectrum_by_id"
              c:identifier="cd_it8_get_spectrum_by_id"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1836">Gets a specific spectrum in an IT8 file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="1843">spectrum, or %NULL</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1838">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1839">the spectrum ID value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="cd_it8_get_title"
              glib:get-property="title"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="319">Gets the file title.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="325">The title, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="321">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xyz_for_rgb"
              c:identifier="cd_it8_get_xyz_for_rgb"
              version="1.2.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1732">Gets the XYZ value for a specific RGB value.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="1742">A CdColorXYZ, or %NULL if the sample does not exist.</doc>
          <type name="ColorXYZ" c:type="CdColorXYZ*"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1734">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1735">the red value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="G" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1736">the green value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1737">the blue value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1738">the smallest difference between colors, e.g. 0.01f</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_option"
              c:identifier="cd_it8_has_option"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="799">Finds an option in the file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="806">%TRUE if the option is set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="801">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="802">a option, e.g. "TYPE_CRT"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="cd_it8_load_from_data"
              version="0.1.20"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="828">Loads a it8 file from data.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="837">%TRUE if a valid it8 file was read.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="830">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="831">text data</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="utf8" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="832">the size of text data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_file"
              c:identifier="cd_it8_load_from_file"
              version="0.1.20"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="959">Loads a it8 file from disk.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="967">%TRUE if a valid it8 file was read.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="961">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="962">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_data"
              c:identifier="cd_it8_save_to_data"
              version="0.1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1347">Saves a it8 file to an area of memory.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="1356">%TRUE if it8 file was saved.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1349">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1350">a pointer to returned data</doc>
            <array length="1" zero-terminated="0" c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1351">size of @data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_file"
              c:identifier="cd_it8_save_to_file"
              version="0.1.20"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1462">Saves a it8 file to disk</doc>
        <source-position filename="lib/colord/cd-it8.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-it8.c"
               line="1470">%TRUE if it8 file was saved.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1464">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1465">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_created"
              c:identifier="cd_it8_set_enable_created"
              version="0.1.33">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1620">Sets if the 'CREATED' attribute should be written. This is mainly useful
in the self test programs where we want to string compare the output data
with a known reference.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1622">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="enable_created" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1623">Is 'CREATED' should be written</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_instrument"
              c:identifier="cd_it8_set_instrument"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1582">Sets the measuring instrument that created the .it8 file</doc>
        <source-position filename="lib/colord/cd-it8.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1584">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="instrument" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1585">the instruemnt name, e.g. "huey"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind"
              c:identifier="cd_it8_set_kind"
              glib:set-property="kind"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="245">Set the kind of IT8 file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="247">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="248">a #CdIt8Kind, e.g %CD_IT8_KIND_TI3.</doc>
            <type name="It8Kind" c:type="CdIt8Kind"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_matrix"
              c:identifier="cd_it8_set_matrix"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="210">Set the calibration matrix in the it8 file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="212">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="213">a #CdMat3x3.</doc>
            <type name="Mat3x3" c:type="const CdMat3x3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_normalized"
              c:identifier="cd_it8_set_normalized"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1510">Sets if normalized data should be written to the .it8 file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1512">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="normalized" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1513">If the data is normalized</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_originator"
              c:identifier="cd_it8_set_originator"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1544">Sets the program name that created the .it8 file</doc>
        <source-position filename="lib/colord/cd-it8.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1546">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="originator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1547">the program name, e.g. "gcm-calibrate"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reference"
              c:identifier="cd_it8_set_reference"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1601">Sets the reference that as used to create the .it8 reference</doc>
        <source-position filename="lib/colord/cd-it8.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1603">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="reference" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1604">the instruemnt name, e.g. "colormunki"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spectral"
              c:identifier="cd_it8_set_spectral"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1527">Sets if spectral data should be written to the .it8 file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1529">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="spectral" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1530">If the data is spectral</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spectrum_array"
              c:identifier="cd_it8_set_spectrum_array"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1770">Set the spectral data</doc>
        <source-position filename="lib/colord/cd-it8.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1772">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1773">the spectral data</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Spectrum"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="cd_it8_set_title"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1563">Sets the display name for the file.</doc>
        <source-position filename="lib/colord/cd-it8.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="it8" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1565">a #CdIt8 instance.</doc>
            <type name="It8" c:type="CdIt8*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-it8.c"
                 line="1566">the title name, e.g. "Factory calibration"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="instrument"
                version="0.1.20"
                transfer-ownership="none"
                getter="get_instrument"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1991">The instrument that created the results, e.g. "huey"</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                version="0.1.20"
                writable="1"
                transfer-ownership="none"
                setter="set_kind"
                getter="get_kind"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1935">The kind of IT8 file.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="normalized"
                version="0.1.20"
                transfer-ownership="none"
                getter="get_normalized"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1949">If the results file is normalized.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="originator"
                version="0.1.20"
                transfer-ownership="none"
                getter="get_originator"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1963">The framework that created the results, e.g. "cd-self-test"</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="reference"
                version="0.1.20"
                transfer-ownership="none"
                getter="get_reference"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="2005">The reference that created the results, e.g. "colormunki"</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="spectral"
                version="0.1.20"
                transfer-ownership="none"
                getter="get_spectral"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="2019">If the results file is spectral.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                version="0.1.20"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.c"
             line="1977">The file title, e.g. "Factor calibration".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="It8Class" c:type="CdIt8Class" glib:is-gtype-struct-for="It8">
      <source-position filename="lib/colord/cd-it8.h" line="57"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_cd_it8_reserved1" introspectable="0">
        <callback name="_cd_it8_reserved1">
          <source-position filename="lib/colord/cd-it8.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_it8_reserved2" introspectable="0">
        <callback name="_cd_it8_reserved2">
          <source-position filename="lib/colord/cd-it8.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_it8_reserved3" introspectable="0">
        <callback name="_cd_it8_reserved3">
          <source-position filename="lib/colord/cd-it8.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_it8_reserved4" introspectable="0">
        <callback name="_cd_it8_reserved4">
          <source-position filename="lib/colord/cd-it8.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_it8_reserved5" introspectable="0">
        <callback name="_cd_it8_reserved5">
          <source-position filename="lib/colord/cd-it8.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_it8_reserved6" introspectable="0">
        <callback name="_cd_it8_reserved6">
          <source-position filename="lib/colord/cd-it8.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_it8_reserved7" introspectable="0">
        <callback name="_cd_it8_reserved7">
          <source-position filename="lib/colord/cd-it8.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_it8_reserved8" introspectable="0">
        <callback name="_cd_it8_reserved8">
          <source-position filename="lib/colord/cd-it8.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="It8Error" c:type="CdIt8Error">
      <doc xml:space="preserve"
           filename="lib/colord/cd-it8.h"
           line="59">Errors that can be thrown</doc>
      <source-position filename="lib/colord/cd-it8.h" line="72"/>
      <member name="failed" value="0" c:identifier="CD_IT8_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-it8.h"
             line="61">the transaction failed for an unknown reason</doc>
      </member>
      <member name="invalid_format"
              value="1"
              c:identifier="CD_IT8_ERROR_INVALID_FORMAT">
      </member>
      <member name="unknown_kind"
              value="2"
              c:identifier="CD_IT8_ERROR_UNKNOWN_KIND">
      </member>
    </enumeration>
    <enumeration name="It8Kind" c:type="CdIt8Kind">
      <doc xml:space="preserve"
           filename="lib/colord/cd-it8.h"
           line="74">The kind of IT8 file.</doc>
      <source-position filename="lib/colord/cd-it8.h" line="90"/>
      <member name="unknown" value="0" c:identifier="CD_IT8_KIND_UNKNOWN">
      </member>
      <member name="ti1" value="1" c:identifier="CD_IT8_KIND_TI1">
      </member>
      <member name="ti3" value="2" c:identifier="CD_IT8_KIND_TI3">
      </member>
      <member name="ccmx" value="3" c:identifier="CD_IT8_KIND_CCMX">
      </member>
      <member name="cal" value="4" c:identifier="CD_IT8_KIND_CAL">
      </member>
      <member name="ccss" value="5" c:identifier="CD_IT8_KIND_CCSS">
      </member>
      <member name="spect" value="6" c:identifier="CD_IT8_KIND_SPECT">
      </member>
      <member name="cmf" value="7" c:identifier="CD_IT8_KIND_CMF">
      </member>
    </enumeration>
    <record name="Mat3x3" c:type="CdMat3x3">
      <source-position filename="lib/colord/cd-math.h" line="32"/>
      <field name="m00" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m01" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m02" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m10" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m11" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m12" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m20" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m21" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m22" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <enumeration name="ObjectScope" c:type="CdObjectScope">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="67">The options type.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="79"/>
      <member name="unknown" value="0" c:identifier="CD_OBJECT_SCOPE_UNKNOWN">
      </member>
      <member name="normal" value="1" c:identifier="CD_OBJECT_SCOPE_NORMAL">
      </member>
      <member name="temp" value="2" c:identifier="CD_OBJECT_SCOPE_TEMP">
      </member>
      <member name="disk" value="3" c:identifier="CD_OBJECT_SCOPE_DISK">
      </member>
    </enumeration>
    <constant name="PIXEL_FORMAT_ARGB32"
              value="278681"
              c:type="CD_PIXEL_FORMAT_ARGB32">
      <source-position filename="lib/colord/cd-enum.h" line="110"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXEL_FORMAT_BGRA32"
              value="279705"
              c:type="CD_PIXEL_FORMAT_BGRA32">
      <source-position filename="lib/colord/cd-enum.h" line="113"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXEL_FORMAT_CMYK32"
              value="393249"
              c:type="CD_PIXEL_FORMAT_CMYK32">
      <source-position filename="lib/colord/cd-enum.h" line="112"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXEL_FORMAT_RGB24"
              value="262169"
              c:type="CD_PIXEL_FORMAT_RGB24">
      <source-position filename="lib/colord/cd-enum.h" line="111"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXEL_FORMAT_RGBA32"
              value="262297"
              c:type="CD_PIXEL_FORMAT_RGBA32">
      <source-position filename="lib/colord/cd-enum.h" line="114"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXEL_FORMAT_UNKNOWN"
              value="0"
              c:type="CD_PIXEL_FORMAT_UNKNOWN">
      <source-position filename="lib/colord/cd-enum.h" line="109"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PROFILE_METADATA_ACCURACY_DE76_AVG"
              value="ACCURACY_dE76_avg"
              c:type="CD_PROFILE_METADATA_ACCURACY_DE76_AVG">
      <source-position filename="lib/colord/cd-enum.h" line="452"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_ACCURACY_DE76_MAX"
              value="ACCURACY_dE76_max"
              c:type="CD_PROFILE_METADATA_ACCURACY_DE76_MAX">
      <source-position filename="lib/colord/cd-enum.h" line="453"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_ACCURACY_DE76_RMS"
              value="ACCURACY_dE76_rms"
              c:type="CD_PROFILE_METADATA_ACCURACY_DE76_RMS">
      <source-position filename="lib/colord/cd-enum.h" line="454"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CMF_BINARY"
              value="CMF_binary"
              c:type="CD_PROFILE_METADATA_CMF_BINARY">
      <source-position filename="lib/colord/cd-enum.h" line="442"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CMF_PRODUCT"
              value="CMF_product"
              c:type="CD_PROFILE_METADATA_CMF_PRODUCT">
      <source-position filename="lib/colord/cd-enum.h" line="441"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CMF_VERSION"
              value="CMF_version"
              c:type="CD_PROFILE_METADATA_CMF_VERSION">
      <source-position filename="lib/colord/cd-enum.h" line="443"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CONNECTION_TYPE"
              value="CONNECTION_type"
              c:type="CD_PROFILE_METADATA_CONNECTION_TYPE">
      <source-position filename="lib/colord/cd-enum.h" line="460"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CONNECTION_TYPE_DISPLAYPORT"
              value="displayport"
              c:type="CD_PROFILE_METADATA_CONNECTION_TYPE_DISPLAYPORT">
      <source-position filename="lib/colord/cd-enum.h" line="465"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CONNECTION_TYPE_DVI"
              value="dvi"
              c:type="CD_PROFILE_METADATA_CONNECTION_TYPE_DVI">
      <source-position filename="lib/colord/cd-enum.h" line="463"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CONNECTION_TYPE_HDMI"
              value="hdmi"
              c:type="CD_PROFILE_METADATA_CONNECTION_TYPE_HDMI">
      <source-position filename="lib/colord/cd-enum.h" line="464"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CONNECTION_TYPE_INTERNAL"
              value="internal"
              c:type="CD_PROFILE_METADATA_CONNECTION_TYPE_INTERNAL">
      <source-position filename="lib/colord/cd-enum.h" line="461"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_CONNECTION_TYPE_VGA"
              value="vga"
              c:type="CD_PROFILE_METADATA_CONNECTION_TYPE_VGA">
      <source-position filename="lib/colord/cd-enum.h" line="462"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_DATA_SOURCE"
              value="DATA_source"
              c:type="CD_PROFILE_METADATA_DATA_SOURCE">
      <source-position filename="lib/colord/cd-enum.h" line="444"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_DATA_SOURCE_CALIB"
              value="calib"
              c:type="CD_PROFILE_METADATA_DATA_SOURCE_CALIB">
      <source-position filename="lib/colord/cd-enum.h" line="446"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_DATA_SOURCE_EDID"
              value="edid"
              c:type="CD_PROFILE_METADATA_DATA_SOURCE_EDID">
      <source-position filename="lib/colord/cd-enum.h" line="445"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_DATA_SOURCE_STANDARD"
              value="standard"
              c:type="CD_PROFILE_METADATA_DATA_SOURCE_STANDARD">
      <source-position filename="lib/colord/cd-enum.h" line="447"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_DATA_SOURCE_TEST"
              value="test"
              c:type="CD_PROFILE_METADATA_DATA_SOURCE_TEST">
      <source-position filename="lib/colord/cd-enum.h" line="448"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_EDID_MD5"
              value="EDID_md5"
              c:type="CD_PROFILE_METADATA_EDID_MD5">
      <source-position filename="lib/colord/cd-enum.h" line="435"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_EDID_MNFT"
              value="EDID_mnft"
              c:type="CD_PROFILE_METADATA_EDID_MNFT">
      <source-position filename="lib/colord/cd-enum.h" line="438"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_EDID_MODEL"
              value="EDID_model"
              c:type="CD_PROFILE_METADATA_EDID_MODEL">
      <source-position filename="lib/colord/cd-enum.h" line="436"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_EDID_SERIAL"
              value="EDID_serial"
              c:type="CD_PROFILE_METADATA_EDID_SERIAL">
      <source-position filename="lib/colord/cd-enum.h" line="437"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_EDID_VENDOR"
              value="EDID_manufacturer"
              c:type="CD_PROFILE_METADATA_EDID_VENDOR">
      <source-position filename="lib/colord/cd-enum.h" line="439"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_FILE_CHECKSUM"
              value="FILE_checksum"
              c:type="CD_PROFILE_METADATA_FILE_CHECKSUM">
      <source-position filename="lib/colord/cd-enum.h" line="440"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_LICENSE"
              value="License"
              c:type="CD_PROFILE_METADATA_LICENSE">
      <source-position filename="lib/colord/cd-enum.h" line="466"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_MAPPING_DEVICE_ID"
              value="MAPPING_device_id"
              c:type="CD_PROFILE_METADATA_MAPPING_DEVICE_ID">
      <source-position filename="lib/colord/cd-enum.h" line="451"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_MAPPING_FORMAT"
              value="MAPPING_format"
              c:type="CD_PROFILE_METADATA_MAPPING_FORMAT">
      <source-position filename="lib/colord/cd-enum.h" line="449"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_MAPPING_QUALIFIER"
              value="MAPPING_qualifier"
              c:type="CD_PROFILE_METADATA_MAPPING_QUALIFIER">
      <source-position filename="lib/colord/cd-enum.h" line="450"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_MEASUREMENT_DEVICE"
              value="MEASUREMENT_device"
              c:type="CD_PROFILE_METADATA_MEASUREMENT_DEVICE">
      <source-position filename="lib/colord/cd-enum.h" line="455"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_QUALITY"
              value="Quality"
              c:type="CD_PROFILE_METADATA_QUALITY">
      <source-position filename="lib/colord/cd-enum.h" line="467"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_QUALITY_HIGH"
              value="high"
              c:type="CD_PROFILE_METADATA_QUALITY_HIGH">
      <source-position filename="lib/colord/cd-enum.h" line="470"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_QUALITY_LOW"
              value="low"
              c:type="CD_PROFILE_METADATA_QUALITY_LOW">
      <source-position filename="lib/colord/cd-enum.h" line="468"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_QUALITY_MEDIUM"
              value="medium"
              c:type="CD_PROFILE_METADATA_QUALITY_MEDIUM">
      <source-position filename="lib/colord/cd-enum.h" line="469"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_SCREEN_BRIGHTNESS"
              value="SCREEN_brightness"
              c:type="CD_PROFILE_METADATA_SCREEN_BRIGHTNESS">
      <source-position filename="lib/colord/cd-enum.h" line="459"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_SCREEN_SURFACE"
              value="SCREEN_surface"
              c:type="CD_PROFILE_METADATA_SCREEN_SURFACE">
      <source-position filename="lib/colord/cd-enum.h" line="456"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_SCREEN_SURFACE_GLOSSY"
              value="glossy"
              c:type="CD_PROFILE_METADATA_SCREEN_SURFACE_GLOSSY">
      <source-position filename="lib/colord/cd-enum.h" line="458"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_SCREEN_SURFACE_MATTE"
              value="matte"
              c:type="CD_PROFILE_METADATA_SCREEN_SURFACE_MATTE">
      <source-position filename="lib/colord/cd-enum.h" line="457"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_METADATA_STANDARD_SPACE"
              value="STANDARD_space"
              c:type="CD_PROFILE_METADATA_STANDARD_SPACE">
      <source-position filename="lib/colord/cd-enum.h" line="434"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_COLORSPACE"
              value="Colorspace"
              c:type="CD_PROFILE_PROPERTY_COLORSPACE">
      <source-position filename="lib/colord/cd-enum.h" line="476"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_CREATED"
              value="Created"
              c:type="CD_PROFILE_PROPERTY_CREATED">
      <source-position filename="lib/colord/cd-enum.h" line="479"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_FILENAME"
              value="Filename"
              c:type="CD_PROFILE_PROPERTY_FILENAME">
      <source-position filename="lib/colord/cd-enum.h" line="473"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_FORMAT"
              value="Format"
              c:type="CD_PROFILE_PROPERTY_FORMAT">
      <source-position filename="lib/colord/cd-enum.h" line="475"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_HAS_VCGT"
              value="HasVcgt"
              c:type="CD_PROFILE_PROPERTY_HAS_VCGT">
      <source-position filename="lib/colord/cd-enum.h" line="480"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_ID"
              value="ProfileId"
              c:type="CD_PROFILE_PROPERTY_ID">
      <source-position filename="lib/colord/cd-enum.h" line="483"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_IS_SYSTEM_WIDE"
              value="IsSystemWide"
              c:type="CD_PROFILE_PROPERTY_IS_SYSTEM_WIDE">
      <source-position filename="lib/colord/cd-enum.h" line="481"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_KIND"
              value="Kind"
              c:type="CD_PROFILE_PROPERTY_KIND">
      <source-position filename="lib/colord/cd-enum.h" line="478"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_METADATA"
              value="Metadata"
              c:type="CD_PROFILE_PROPERTY_METADATA">
      <source-position filename="lib/colord/cd-enum.h" line="482"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_OWNER"
              value="Owner"
              c:type="CD_PROFILE_PROPERTY_OWNER">
      <source-position filename="lib/colord/cd-enum.h" line="485"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_QUALIFIER"
              value="Qualifier"
              c:type="CD_PROFILE_PROPERTY_QUALIFIER">
      <source-position filename="lib/colord/cd-enum.h" line="474"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_SCOPE"
              value="Scope"
              c:type="CD_PROFILE_PROPERTY_SCOPE">
      <source-position filename="lib/colord/cd-enum.h" line="484"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_TITLE"
              value="Title"
              c:type="CD_PROFILE_PROPERTY_TITLE">
      <source-position filename="lib/colord/cd-enum.h" line="477"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROFILE_PROPERTY_WARNINGS"
              value="Warnings"
              c:type="CD_PROFILE_PROPERTY_WARNINGS">
      <source-position filename="lib/colord/cd-enum.h" line="486"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Profile"
           c:symbol-prefix="profile"
           c:type="CdProfile"
           parent="GObject.Object"
           glib:type-name="CdProfile"
           glib:get-type="cd_profile_get_type"
           glib:type-struct="ProfileClass">
      <source-position filename="lib/colord/cd-profile.h" line="57"/>
      <constructor name="new" c:identifier="cd_profile_new" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1486">Creates a new #CdProfile object.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="1491">a new CdProfile object.</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_object_path"
                   c:identifier="cd_profile_new_with_object_path"
                   version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1503">Creates a new #CdProfile object with a known object path.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="1509">a new profile object.</doc>
          <type name="Profile" c:type="CdProfile*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1505">The colord object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error_from_string"
                c:identifier="cd_profile_error_from_string"
                version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="747">Converts a string to a #CdProfileError.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="576"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="752">enumerated value</doc>
          <type name="ProfileError" c:type="CdProfileError"/>
        </return-value>
        <parameters>
          <parameter name="error_desc" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark"
                c:identifier="cd_profile_error_quark"
                version="0.1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="108">An error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="error_to_string"
                c:identifier="cd_profile_error_to_string"
                version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="716">Converts a #CdProfileError to a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="575"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="721">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="error_enum" transfer-ownership="none">
            <type name="ProfileError" c:type="CdProfileError"/>
          </parameter>
        </parameters>
      </function>
      <function name="kind_from_string"
                c:identifier="cd_profile_kind_from_string"
                version="2.91.1">
        <source-position filename="lib/colord/cd-enum.h" line="546"/>
        <return-value transfer-ownership="none">
          <type name="ProfileKind" c:type="CdProfileKind"/>
        </return-value>
        <parameters>
          <parameter name="profile_kind" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="kind_to_string"
                c:identifier="cd_profile_kind_to_string"
                version="2.91.1">
        <source-position filename="lib/colord/cd-enum.h" line="545"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="profile_kind" transfer-ownership="none">
            <type name="ProfileKind" c:type="CdProfileKind"/>
          </parameter>
        </parameters>
      </function>
      <function name="quality_from_string"
                c:identifier="cd_profile_quality_from_string"
                version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="592">Converts a string to a #CdProfileQuality.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="570"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="597">enumerated value</doc>
          <type name="ProfileQuality" c:type="CdProfileQuality"/>
        </return-value>
        <parameters>
          <parameter name="quality" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="quality_to_string"
                c:identifier="cd_profile_quality_to_string"
                version="0.1.27">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="577">Converts a #CdProfileQuality to a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="569"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="582">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="quality_enum" transfer-ownership="none">
            <type name="ProfileQuality" c:type="CdProfileQuality"/>
          </parameter>
        </parameters>
      </function>
      <function name="warning_from_string"
                c:identifier="cd_profile_warning_from_string"
                version="0.1.25">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="562">Converts a string to a #CdProfileWarning.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="568"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="567">enumerated value</doc>
          <type name="ProfileWarning" c:type="CdProfileWarning"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="warning_to_string"
                c:identifier="cd_profile_warning_to_string"
                version="0.1.25">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="547">Converts a #CdProfileWarning to a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="567"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="552">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="kind_enum" transfer-ownership="none">
            <type name="ProfileWarning" c:type="CdProfileWarning"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <source-position filename="lib/colord/cd-profile.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="connect" c:identifier="cd_profile_connect" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="785">Connects to the object and fills up initial properties.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="787">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="788">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="789">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="790">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="cd_profile_connect_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="599">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="607">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="601">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="602">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="cd_profile_connect_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile-sync.c"
             line="60">Connects to the object and fills up initial properties.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-profile-sync.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile-sync.c"
               line="71">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile-sync.c"
                 line="62">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile-sync.c"
                 line="63">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="cd_profile_equal" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1062">Tests two profiles for equality.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="1069">%TRUE if the profiles are the same device</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1064">one #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="profile2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1065">another #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_age" c:identifier="cd_profile_get_age" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="355">Gets the profile age in seconds relative to the current time.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="361">A UNIX time, or 0 if the profile has no creation date</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="357">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_colorspace"
              c:identifier="cd_profile_get_colorspace"
              glib:get-property="colorspace"
              version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="378">Gets the profile colorspace.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="384">A #CdColorspace, e.g. %CD_COLORSPACE_RGB</doc>
          <type name="Colorspace" c:type="CdColorspace"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="380">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connected"
              c:identifier="cd_profile_get_connected"
              glib:get-property="connected"
              version="0.1.9">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1019">Gets if the profile has been connected.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="1025">%TRUE if properties are valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1021">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_created"
              c:identifier="cd_profile_get_created"
              glib:get-property="created"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="336">Gets the profile created date and time.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="342">A UNIX time, or 0 if the profile has no creation date</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="338">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="cd_profile_get_filename"
              glib:get-property="filename"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="158">Gets the profile filename.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="164">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="160">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format"
              c:identifier="cd_profile_get_format"
              glib:get-property="format"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="222">Gets the profile format.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="228">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="224">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_vcgt"
              c:identifier="cd_profile_get_has_vcgt"
              glib:get-property="has-vcgt"
              version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="397">Returns if the profile has a VCGT table.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="403">%TRUE if VCGT is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="399">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="cd_profile_get_id"
              glib:get-property="id"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="139">Gets the profile ID.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="145">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="141">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_system_wide"
              c:identifier="cd_profile_get_is_system_wide"
              glib:get-property="is-system-wide"
              version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="416">Returns if the profile is installed system wide and available for all
users.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="423">%TRUE if system wide.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="418">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="cd_profile_get_kind"
              glib:get-property="kind"
              version="0.1.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="260">Gets the profile kind.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="266">A #CdProfileKind, e.g. %CD_PROFILE_KIND_DISPLAY_DEVICE</doc>
          <type name="ProfileKind" c:type="CdProfileKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="262">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="cd_profile_get_metadata"
              version="0.1.2">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="436">Returns the profile metadata.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="107"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="442">a
              #GHashTable.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="438">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_item"
              c:identifier="cd_profile_get_metadata_item"
              version="0.1.5">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="456">Returns the profile metadata for a specific key.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="463">the metadata value, or %NULL if not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="458">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="459">a key for the metadata dictionary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="cd_profile_get_object_path"
              glib:get-property="object-path"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1001">Gets the object path for the profile.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="1007">the object path, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1003">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_owner"
              c:identifier="cd_profile_get_owner"
              glib:get-property="owner"
              version="0.1.13">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="298">Gets the profile owner.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="304">The UID of the user that created the device</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="300">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_qualifier"
              c:identifier="cd_profile_get_qualifier"
              glib:get-property="qualifier"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="203">Gets the profile qualifier.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="209">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="205">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scope"
              c:identifier="cd_profile_get_scope"
              glib:get-property="scope"
              version="0.1.10">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="279">Gets the profile scope.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="285">A #CdObjectScope, e.g. %CD_OBJECT_SCOPE_UNKNOWN</doc>
          <type name="ObjectScope" c:type="CdObjectScope"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="281">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="cd_profile_get_title"
              glib:get-property="title"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="241">Gets the profile title.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="247">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="243">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_warnings"
              c:identifier="cd_profile_get_warnings"
              glib:get-property="warnings"
              version="0.1.25">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="317">Gets the profile warnings as a string array.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="323">Any profile warnings, e.g. "vcgt-non-monotonic"</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="319">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_access"
              c:identifier="cd_profile_has_access"
              version="0.1.13">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="177">Gets if the current user has access permissions to the profile.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="183">A string, or %NULL for invalid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="179">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="install_system_wide"
              c:identifier="cd_profile_install_system_wide"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="964">Sets the profile system wide.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="966">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="967">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="968">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="969">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_system_wide_finish"
              c:identifier="cd_profile_install_system_wide_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="920">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="928">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="922">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="923">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_system_wide_sync"
              c:identifier="cd_profile_install_system_wide_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile-sync.c"
             line="168">Sets the profile system wide.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-profile-sync.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile-sync.c"
               line="179">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile-sync.c"
                 line="170">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile-sync.c"
                 line="171">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_icc"
              c:identifier="cd_profile_load_icc"
              version="0.1.32"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1085">Loads a local ICC object from the abstract profile.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="1094">A new #CdIcc object, or %NULL for error</doc>
          <type name="Icc" c:type="CdIcc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1087">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1088">options for loading the profile</doc>
            <type name="IccLoadFlags" c:type="CdIccLoadFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1089">A #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object_path"
              c:identifier="cd_profile_set_object_path"
              glib:set-property="object-path"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="121">Sets the object path of the profile.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="123">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="124">The colord object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property"
              c:identifier="cd_profile_set_property"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="875">Deletes a color device.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="877">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="878">a key name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="879">a key value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="880">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="881">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="882">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_finish"
              c:identifier="cd_profile_set_property_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="829">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="837">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="831">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="832">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_sync"
              c:identifier="cd_profile_set_property_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile-sync.c"
             line="112">Sets properties on an object

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-profile-sync.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile-sync.c"
               line="125">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile-sync.c"
                 line="114">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile-sync.c"
                 line="115">The key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile-sync.c"
                 line="116">The value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile-sync.c"
                 line="117">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="cd_profile_to_string"
              version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1037">Converts the profile to a string description.</doc>
        <source-position filename="lib/colord/cd-profile.h" line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-profile.c"
               line="1043">text representation of #CdProfile</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-profile.c"
                 line="1039">a #CdProfile instance.</doc>
            <type name="Profile" c:type="CdProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="colorspace"
                version="0.1.2"
                transfer-ownership="none"
                getter="get_colorspace"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1344">The profile colorspace.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connected"
                version="0.1.9"
                transfer-ownership="none"
                getter="get_connected"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1250">The if the object path has been connected as is valid for use.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="created"
                version="0.1.8"
                transfer-ownership="none"
                getter="get_created"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1358">When the profile was created.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="filename"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_filename"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1276">The profile filename.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="format"
                version="0.1.4"
                transfer-ownership="none"
                getter="get_format"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1303">The profile format.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="has-vcgt"
                version="0.1.2"
                transfer-ownership="none"
                getter="get_has_vcgt"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1373">If the profile has a VCGT table.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1263">The profile ID.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-system-wide"
                version="0.1.2"
                transfer-ownership="none"
                getter="get_is_system_wide"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1387">If the profile is installed system wide for all users.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                version="0.1.1"
                transfer-ownership="none"
                getter="get_kind"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1330">The profile kind.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="object-path"
                version="0.1.8"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_object_path"
                getter="get_object_path"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1237">The object path of the remote object</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="owner"
                version="0.1.13"
                transfer-ownership="none"
                getter="get_owner"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1417">The profile owner, e.g. %500.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="qualifier"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_qualifier"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1289">The profile qualifier.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="scope"
                version="0.1.10"
                transfer-ownership="none"
                getter="get_scope"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1401">The profile scope, e.g. %CD_OBJECT_SCOPE_TEMP.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="title"
                version="0.1.0"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1317">The profile title.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="warnings"
                version="0.1.25"
                transfer-ownership="none"
                getter="get_warnings">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1433">The profile warnings, e.g. "vcgt-non-monotonic".</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="changed" when="last" version="0.1.0">
        <doc xml:space="preserve"
             filename="lib/colord/cd-profile.c"
             line="1222">The ::changed signal is emitted when the profile data has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ProfileClass"
            c:type="CdProfileClass"
            glib:is-gtype-struct-for="Profile">
      <source-position filename="lib/colord/cd-profile.h" line="57"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="lib/colord/cd-profile.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="profile" transfer-ownership="none">
              <type name="Profile" c:type="CdProfile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_cd_profile_reserved1" introspectable="0">
        <callback name="_cd_profile_reserved1">
          <source-position filename="lib/colord/cd-profile.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_profile_reserved2" introspectable="0">
        <callback name="_cd_profile_reserved2">
          <source-position filename="lib/colord/cd-profile.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_profile_reserved3" introspectable="0">
        <callback name="_cd_profile_reserved3">
          <source-position filename="lib/colord/cd-profile.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_profile_reserved4" introspectable="0">
        <callback name="_cd_profile_reserved4">
          <source-position filename="lib/colord/cd-profile.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_profile_reserved5" introspectable="0">
        <callback name="_cd_profile_reserved5">
          <source-position filename="lib/colord/cd-profile.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_profile_reserved6" introspectable="0">
        <callback name="_cd_profile_reserved6">
          <source-position filename="lib/colord/cd-profile.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_profile_reserved7" introspectable="0">
        <callback name="_cd_profile_reserved7">
          <source-position filename="lib/colord/cd-profile.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_profile_reserved8" introspectable="0">
        <callback name="_cd_profile_reserved8">
          <source-position filename="lib/colord/cd-profile.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ProfileError" c:type="CdProfileError">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="348">Errors that can be thrown</doc>
      <source-position filename="lib/colord/cd-enum.h" line="373"/>
      <member name="internal"
              value="0"
              c:identifier="CD_PROFILE_ERROR_INTERNAL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="350">An internal error occurred</doc>
      </member>
      <member name="already_installed"
              value="1"
              c:identifier="CD_PROFILE_ERROR_ALREADY_INSTALLED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="351">The profile is already installed</doc>
      </member>
      <member name="failed_to_write"
              value="2"
              c:identifier="CD_PROFILE_ERROR_FAILED_TO_WRITE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="352">The profile could not be written</doc>
      </member>
      <member name="failed_to_parse"
              value="3"
              c:identifier="CD_PROFILE_ERROR_FAILED_TO_PARSE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="353">The profile could not be parsed</doc>
      </member>
      <member name="failed_to_read"
              value="4"
              c:identifier="CD_PROFILE_ERROR_FAILED_TO_READ">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="354">The profile could not be read</doc>
      </member>
      <member name="failed_to_authenticate"
              value="5"
              c:identifier="CD_PROFILE_ERROR_FAILED_TO_AUTHENTICATE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="355">Authentication failed</doc>
      </member>
      <member name="property_invalid"
              value="6"
              c:identifier="CD_PROFILE_ERROR_PROPERTY_INVALID">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="356">One or more of the properties was invalid</doc>
      </member>
      <member name="failed_to_get_uid"
              value="7"
              c:identifier="CD_PROFILE_ERROR_FAILED_TO_GET_UID">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="357">Failed to get UID for sender</doc>
      </member>
    </enumeration>
    <enumeration name="ProfileKind" c:type="CdProfileKind">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="49">The profile type.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="65"/>
      <member name="unknown" value="0" c:identifier="CD_PROFILE_KIND_UNKNOWN">
      </member>
      <member name="input_device"
              value="1"
              c:identifier="CD_PROFILE_KIND_INPUT_DEVICE">
      </member>
      <member name="display_device"
              value="2"
              c:identifier="CD_PROFILE_KIND_DISPLAY_DEVICE">
      </member>
      <member name="output_device"
              value="3"
              c:identifier="CD_PROFILE_KIND_OUTPUT_DEVICE">
      </member>
      <member name="devicelink"
              value="4"
              c:identifier="CD_PROFILE_KIND_DEVICELINK">
      </member>
      <member name="colorspace_conversion"
              value="5"
              c:identifier="CD_PROFILE_KIND_COLORSPACE_CONVERSION">
      </member>
      <member name="abstract"
              value="6"
              c:identifier="CD_PROFILE_KIND_ABSTRACT">
      </member>
      <member name="named_color"
              value="7"
              c:identifier="CD_PROFILE_KIND_NAMED_COLOR">
      </member>
    </enumeration>
    <enumeration name="ProfileQuality" c:type="CdProfileQuality">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="297">The quality of the profile produced through calibration.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="312"/>
      <member name="low" value="0" c:identifier="CD_PROFILE_QUALITY_LOW">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="299">Low quality profile, fast</doc>
      </member>
      <member name="medium" value="1" c:identifier="CD_PROFILE_QUALITY_MEDIUM">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="300">Medium quality profile</doc>
      </member>
      <member name="high" value="2" c:identifier="CD_PROFILE_QUALITY_HIGH">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="301">High quality profile, slow</doc>
      </member>
    </enumeration>
    <enumeration name="ProfileWarning" c:type="CdProfileWarning">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="261">The warning about the profile. Profiles with warnings can still be
used, but may be of limited use.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="295"/>
      <member name="none" value="0" c:identifier="CD_PROFILE_WARNING_NONE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="263">No error is found</doc>
      </member>
      <member name="description_missing"
              value="1"
              c:identifier="CD_PROFILE_WARNING_DESCRIPTION_MISSING">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="264">The description is missing or of zero length</doc>
      </member>
      <member name="copyright_missing"
              value="2"
              c:identifier="CD_PROFILE_WARNING_COPYRIGHT_MISSING">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="265">The copyright is missing or of zero length</doc>
      </member>
      <member name="vcgt_non_monotonic"
              value="3"
              c:identifier="CD_PROFILE_WARNING_VCGT_NON_MONOTONIC">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="266">The video card gamma table is not monotonic</doc>
      </member>
      <member name="scum_dot"
              value="4"
              c:identifier="CD_PROFILE_WARNING_SCUM_DOT">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="267">Lab 100, 0, 0 does not map to RGB 255,255,255</doc>
      </member>
      <member name="gray_axis_invalid"
              value="5"
              c:identifier="CD_PROFILE_WARNING_GRAY_AXIS_INVALID">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="268">There is significant a/b for gray</doc>
      </member>
      <member name="gray_axis_non_monotonic"
              value="6"
              c:identifier="CD_PROFILE_WARNING_GRAY_AXIS_NON_MONOTONIC">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="269">The gray ramp is not monotonic</doc>
      </member>
      <member name="primaries_invalid"
              value="7"
              c:identifier="CD_PROFILE_WARNING_PRIMARIES_INVALID">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="270">One or more of the primaries are invalid</doc>
      </member>
      <member name="primaries_non_additive"
              value="8"
              c:identifier="CD_PROFILE_WARNING_PRIMARIES_NON_ADDITIVE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="271">The primaries to not add to give D50 white</doc>
      </member>
      <member name="primaries_unlikely"
              value="9"
              c:identifier="CD_PROFILE_WARNING_PRIMARIES_UNLIKELY">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="272">One or more of the primaries are outside of ROMM RGB</doc>
      </member>
      <member name="whitepoint_invalid"
              value="10"
              c:identifier="CD_PROFILE_WARNING_WHITEPOINT_INVALID">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="273">RGB 255,255,255 does not return D50</doc>
      </member>
      <member name="whitepoint_unlikely"
              value="11"
              c:identifier="CD_PROFILE_WARNING_WHITEPOINT_UNLIKELY">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="274">Whitepoint is outside of usual range</doc>
      </member>
    </enumeration>
    <enumeration name="RenderingIntent" c:type="CdRenderingIntent">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="81">The rendering intent.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="99"/>
      <member name="unknown"
              value="0"
              c:identifier="CD_RENDERING_INTENT_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="83">Unknown rendering intent</doc>
      </member>
      <member name="perceptual"
              value="1"
              c:identifier="CD_RENDERING_INTENT_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="84">Used for photos as it maintains contrast</doc>
      </member>
      <member name="relative_colorimetric"
              value="2"
              c:identifier="CD_RENDERING_INTENT_RELATIVE_COLORIMETRIC">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="85">Used for graphic design and named colors</doc>
      </member>
      <member name="saturation"
              value="3"
              c:identifier="CD_RENDERING_INTENT_SATURATION">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="86">Used for business charts as it maintains saturation without dithering</doc>
      </member>
      <member name="absolute_colorimetric"
              value="4"
              c:identifier="CD_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="87">Used when a specific color is required</doc>
      </member>
    </enumeration>
    <constant name="SENSOR_METADATA_IMAGE_ATTACH"
              value="ImageAttach"
              c:type="CD_SENSOR_METADATA_IMAGE_ATTACH">
      <source-position filename="lib/colord/cd-enum.h" line="532"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_METADATA_IMAGE_CALIBRATE"
              value="ImageCalibrate"
              c:type="CD_SENSOR_METADATA_IMAGE_CALIBRATE">
      <source-position filename="lib/colord/cd-enum.h" line="533"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_METADATA_IMAGE_SCREEN"
              value="ImageScreen"
              c:type="CD_SENSOR_METADATA_IMAGE_SCREEN">
      <source-position filename="lib/colord/cd-enum.h" line="534"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_CAPABILITIES"
              value="Capabilities"
              c:type="CD_SENSOR_PROPERTY_CAPABILITIES">
      <source-position filename="lib/colord/cd-enum.h" line="526"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_EMBEDDED"
              value="Embedded"
              c:type="CD_SENSOR_PROPERTY_EMBEDDED">
      <source-position filename="lib/colord/cd-enum.h" line="528"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_ID"
              value="SensorId"
              c:type="CD_SENSOR_PROPERTY_ID">
      <source-position filename="lib/colord/cd-enum.h" line="517"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_KIND"
              value="Kind"
              c:type="CD_SENSOR_PROPERTY_KIND">
      <source-position filename="lib/colord/cd-enum.h" line="518"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_LOCKED"
              value="Locked"
              c:type="CD_SENSOR_PROPERTY_LOCKED">
      <source-position filename="lib/colord/cd-enum.h" line="525"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_METADATA"
              value="Metadata"
              c:type="CD_SENSOR_PROPERTY_METADATA">
      <source-position filename="lib/colord/cd-enum.h" line="529"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_MODE"
              value="Mode"
              c:type="CD_SENSOR_PROPERTY_MODE">
      <source-position filename="lib/colord/cd-enum.h" line="520"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_MODEL"
              value="Model"
              c:type="CD_SENSOR_PROPERTY_MODEL">
      <source-position filename="lib/colord/cd-enum.h" line="522"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_NATIVE"
              value="Native"
              c:type="CD_SENSOR_PROPERTY_NATIVE">
      <source-position filename="lib/colord/cd-enum.h" line="524"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_OPTIONS"
              value="Options"
              c:type="CD_SENSOR_PROPERTY_OPTIONS">
      <source-position filename="lib/colord/cd-enum.h" line="527"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_SERIAL"
              value="Serial"
              c:type="CD_SENSOR_PROPERTY_SERIAL">
      <source-position filename="lib/colord/cd-enum.h" line="521"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_STATE"
              value="State"
              c:type="CD_SENSOR_PROPERTY_STATE">
      <source-position filename="lib/colord/cd-enum.h" line="519"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SENSOR_PROPERTY_VENDOR"
              value="Vendor"
              c:type="CD_SENSOR_PROPERTY_VENDOR">
      <source-position filename="lib/colord/cd-enum.h" line="523"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Sensor"
           c:symbol-prefix="sensor"
           c:type="CdSensor"
           parent="GObject.Object"
           glib:type-name="CdSensor"
           glib:get-type="cd_sensor_get_type"
           glib:type-struct="SensorClass">
      <source-position filename="lib/colord/cd-sensor.h" line="58"/>
      <constructor name="new" c:identifier="cd_sensor_new" version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1610">Creates a new #CdSensor object.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1615">a new CdSensor object.</doc>
          <type name="Sensor" c:type="CdSensor*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_object_path"
                   c:identifier="cd_sensor_new_with_object_path"
                   version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1627">Creates a new #CdSensor object with a known object path.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1633">a new sensor object.</doc>
          <type name="Sensor" c:type="CdSensor*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1629">The colord object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="cap_from_string"
                c:identifier="cd_sensor_cap_from_string">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="505">Gets the sensor capability as a enumerated value.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="564"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="511">a #CdSensorCap</doc>
          <type name="SensorCap" c:type="CdSensorCap"/>
        </return-value>
        <parameters>
          <parameter name="sensor_cap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-enum.c"
                 line="507">the sensor capability, e.g. 'projector'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="cap_to_string" c:identifier="cd_sensor_cap_to_string">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="491">Gets the sensor capability as a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="563"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="497">the sensor capability, e.g. 'projector'.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="sensor_cap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-enum.c"
                 line="493">a #CdSensorCap</doc>
            <type name="SensorCap" c:type="CdSensorCap"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_from_string"
                c:identifier="cd_sensor_error_from_string"
                version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="677">Converts a string to a #CdSensorError.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="574"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="682">enumerated value</doc>
          <type name="SensorError" c:type="CdSensorError"/>
        </return-value>
        <parameters>
          <parameter name="error_desc" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark"
                c:identifier="cd_sensor_error_quark"
                version="0.1.6">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="103">An error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="error_to_string"
                c:identifier="cd_sensor_error_to_string"
                version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="640">Converts a #CdSensorError to a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="573"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="645">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="error_enum" transfer-ownership="none">
            <type name="SensorError" c:type="CdSensorError"/>
          </parameter>
        </parameters>
      </function>
      <function name="kind_from_string"
                c:identifier="cd_sensor_kind_from_string">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="449">Gets the sensor kind as a enumerated value.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="560"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="455">a #CdSensorKind</doc>
          <type name="SensorKind" c:type="CdSensorKind"/>
        </return-value>
        <parameters>
          <parameter name="sensor_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-enum.c"
                 line="451">the sensor kind, e.g. 'huey'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="kind_to_string" c:identifier="cd_sensor_kind_to_string">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="435">Gets the sensor kind as a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="559"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="441">the sensor kind, e.g. 'huey'.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="sensor_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-enum.c"
                 line="437">a #CdSensorKind</doc>
            <type name="SensorKind" c:type="CdSensorKind"/>
          </parameter>
        </parameters>
      </function>
      <function name="state_from_string"
                c:identifier="cd_sensor_state_from_string">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="477">Gets the sensor stateability as a enumerated value.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="562"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="483">a #CdSensorState</doc>
          <type name="SensorState" c:type="CdSensorState"/>
        </return-value>
        <parameters>
          <parameter name="sensor_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-enum.c"
                 line="479">the sensor stateability, e.g. 'measuring'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="state_to_string"
                c:identifier="cd_sensor_state_to_string">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="463">Gets the sensor stateability as a string.</doc>
        <source-position filename="lib/colord/cd-enum.h" line="561"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="469">the sensor stateability, e.g. 'measuring'.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="sensor_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-enum.c"
                 line="465">a #CdSensorState</doc>
            <type name="SensorState" c:type="CdSensorState"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="button_pressed">
        <source-position filename="lib/colord/cd-sensor.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="connect" c:identifier="cd_sensor_connect" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="616">Connects to the sensor.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="618">a #CdSensor instance</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="619">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="620">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="621">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="cd_sensor_connect_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="660">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="668">%TRUE if we could connect to to the sensor</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="662">a #CdSensor instance</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="663">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="cd_sensor_connect_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor-sync.c"
             line="61">Connects to the object and fills up initial properties.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-sensor-sync.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor-sync.c"
               line="72">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="63">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="64">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="cd_sensor_equal" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1286">Tests two sensors for equality.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1293">%TRUE if the sensors are the same device</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1288">one #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="sensor2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1289">another #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_caps"
              c:identifier="cd_sensor_get_caps"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="305">Returns the sensor metadata.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="311">The sensor capability bitfield.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="307">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connected"
              c:identifier="cd_sensor_get_connected"
              glib:get-property="connected"
              version="0.1.9">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1190">Gets if the sensor has been connected.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1196">%TRUE if properties are valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1192">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_embedded"
              c:identifier="cd_sensor_get_embedded"
              glib:get-property="embedded"
              version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="267">Returns if the sensor is embedded into the computer.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="273">%TRUE if embedded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="269">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="cd_sensor_get_id"
              glib:get-property="id"
              version="0.1.26">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1172">Gets the object ID for the sensor.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1178">the object ID, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1174">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="cd_sensor_get_kind"
              glib:get-property="kind"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="134">Gets the sensor kind.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="140">A #CdSensorKind, e.g. %CD_SENSOR_KIND_HUEY</doc>
          <type name="SensorKind" c:type="CdSensorKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="136">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked"
              c:identifier="cd_sensor_get_locked"
              glib:get-property="locked"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="286">Returns if the sensor is locked.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="292">%TRUE if VCGT is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="288">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="cd_sensor_get_metadata"
              version="0.1.28">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1246">Returns the sensor metadata.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="136"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1252">a
              #GHashTable.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1248">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_item"
              c:identifier="cd_sensor_get_metadata_item"
              version="0.1.28">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1266">Returns the sensor metadata for a specific key.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1273">the metadata value, or %NULL if not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1268">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1269">a key for the metadata dictionary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="cd_sensor_get_mode"
              glib:get-property="mode"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="172">Gets the sensor operating mode.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="178">A #CdSensorCap, e.g. %CD_SENSOR_CAP_AMBIENT</doc>
          <type name="SensorCap" c:type="CdSensorCap"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="174">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="cd_sensor_get_model"
              glib:get-property="model"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="210">Gets the sensor model.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="216">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="212">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_native"
              c:identifier="cd_sensor_get_native"
              glib:get-property="native"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="248">Returns if the sensor has a native driver.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="254">%TRUE if VCGT is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="250">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="cd_sensor_get_object_path"
              glib:get-property="object-path"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1154">Gets the object path for the sensor.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1160">the object path, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1156">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_option"
              c:identifier="cd_sensor_get_option"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1227">Gets a specific sensor option.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1234">A const string, or %NULL of not found.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1229">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1230">a key to search for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_options"
              c:identifier="cd_sensor_get_options"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1208">Gets any sensor options.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="133"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1214">A
              refcounted #GHashTable of (string, GVariant).</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GLib.Variant"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1210">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sample"
              c:identifier="cd_sensor_get_sample"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1013">Gets a color sample from a sensor</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1015">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1016">a #CdSensorCap</doc>
            <type name="SensorCap" c:type="CdSensorCap"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1017">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1018">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1019">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sample_finish"
              c:identifier="cd_sensor_get_sample_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="961">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="969">the XYZ reading, or %NULL</doc>
          <type name="ColorXYZ" c:type="CdColorXYZ*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="963">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="964">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sample_sync"
              c:identifier="cd_sensor_get_sample_sync"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor-sync.c"
             line="271">Gets a sample from the sensor.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-sensor-sync.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor-sync.c"
               line="283">the XYZ reading, with ambient levels in Lux encoded in X, or %NULL for error.</doc>
          <type name="ColorXYZ" c:type="CdColorXYZ*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="273">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="274">The device capability, e.g. %CD_SENSOR_CAP_AMBIENT.</doc>
            <type name="SensorCap" c:type="CdSensorCap"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="275">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="cd_sensor_get_serial"
              glib:get-property="serial"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="191">Gets the sensor serial number.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="197">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="193">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spectrum"
              c:identifier="cd_sensor_get_spectrum"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1114">Gets a color spectrum from a sensor</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1116">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1117">a #CdSensorCap</doc>
            <type name="SensorCap" c:type="CdSensorCap"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1118">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1119">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1120">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_spectrum_finish"
              c:identifier="cd_sensor_get_spectrum_finish"
              version="1.3.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1053">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="1061">the XYZ reading, or %NULL</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1055">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="1056">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_spectrum_sync"
              c:identifier="cd_sensor_get_spectrum_sync"
              version="1.3.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor-sync.c"
             line="325">Gets a spectrum from the sensor.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-sensor-sync.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor-sync.c"
               line="337">the XYZ reading, with ambient levels in Lux encoded in X, or %NULL for error.</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="327">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="328">The device capability, e.g. %CD_SENSOR_CAP_AMBIENT.</doc>
            <type name="SensorCap" c:type="CdSensorCap"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="329">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="cd_sensor_get_state"
              glib:get-property="state"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="153">Gets the sensor state.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="159">A #CdSensorState, e.g. %CD_SENSOR_STATE_IDLE</doc>
          <type name="SensorState" c:type="CdSensorState"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="155">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor"
              c:identifier="cd_sensor_get_vendor"
              glib:get-property="vendor"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="229">Gets the sensor vendor.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="235">A string, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="231">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_cap" c:identifier="cd_sensor_has_cap" version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="324">Returns the sensor metadata for a specific key.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="331">%TRUE if the sensor has the specified capability</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="326">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="327">a specified capability, e.g. %CD_SENSOR_CAP_LCD</doc>
            <type name="SensorCap" c:type="CdSensorCap"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="cd_sensor_lock" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="745">Locks the device so we can use it.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="747">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="748">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="749">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="750">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock_finish"
              c:identifier="cd_sensor_lock_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="683">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="691">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="685">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="686">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock_sync"
              c:identifier="cd_sensor_lock_sync"
              version="0.1.6"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor-sync.c"
             line="113">Locks the device so we can use it.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-sensor-sync.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor-sync.c"
               line="124">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="115">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="116">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object_path"
              c:identifier="cd_sensor_set_object_path"
              glib:set-property="object-path"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="116">Sets the object path of the sensor.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="118">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="119">The colord object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_options"
              c:identifier="cd_sensor_set_options"
              version="0.1.20">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="907">Sets options on the sensor device.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="909">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="910">the options</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="911">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="912">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="913">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_options_finish"
              c:identifier="cd_sensor_set_options_finish"
              version="0.1.20"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="863">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="871">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="865">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="866">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_options_sync"
              c:identifier="cd_sensor_set_options_sync"
              version="0.1.20"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor-sync.c"
             line="217">Sets options on the sensor device.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-sensor-sync.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor-sync.c"
               line="229">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="219">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="220">the options</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="221">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="cd_sensor_to_string">
        <source-position filename="lib/colord/cd-sensor.h" line="145"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="cd_sensor_unlock" version="0.1.8">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="826">Unlocks the sensor for use by other programs.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="828">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="829">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="830">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="831">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock_finish"
              c:identifier="cd_sensor_unlock_finish"
              version="0.1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="782">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/colord/cd-sensor.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor.c"
               line="790">success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="784">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor.c"
                 line="785">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock_sync"
              c:identifier="cd_sensor_unlock_sync"
              version="0.1.6"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor-sync.c"
             line="165">Unlocks the device for use by other programs.

WARNING: This function is synchronous, and may block.
Do not use it in GUI applications.</doc>
        <source-position filename="lib/colord/cd-sensor-sync.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-sensor-sync.c"
               line="176">%TRUE for success, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="167">a #CdSensor instance.</doc>
            <type name="Sensor" c:type="CdSensor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-sensor-sync.c"
                 line="168">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connected"
                version="0.1.9"
                transfer-ownership="none"
                getter="get_connected"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1431">The if the object path has been connected as is valid for use.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="embedded"
                version="0.1.26"
                transfer-ownership="none"
                getter="get_embedded"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1540">If the sensor has a native driver.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                version="0.1.26"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1418">The object ID of the remote object</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                version="0.1.6"
                transfer-ownership="none"
                getter="get_kind"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1444">The sensor kind.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="locked"
                version="0.1.6"
                transfer-ownership="none"
                getter="get_locked"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1554">If the sensor is locked.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode"
                version="0.1.6"
                transfer-ownership="none"
                getter="get_mode"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1472">The sensor mode.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="model"
                version="0.1.6"
                transfer-ownership="none"
                getter="get_model"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1499">The sensor model.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="native"
                version="0.1.6"
                transfer-ownership="none"
                getter="get_native"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1526">If the sensor has a native driver.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="object-path"
                version="0.1.8"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_object_path"
                getter="get_object_path"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1405">The object path of the remote object</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="serial"
                version="0.1.6"
                transfer-ownership="none"
                getter="get_serial"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1486">The sensor ID.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state"
                version="0.1.6"
                transfer-ownership="none"
                getter="get_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1458">The sensor state.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vendor"
                version="0.1.6"
                transfer-ownership="none"
                getter="get_vendor"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1512">The sensor vendor.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="button-pressed" when="last" version="0.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-sensor.c"
             line="1390">The ::button-pressed signal is emitted when the button has been pressed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <enumeration name="SensorCap" c:type="CdSensorCap">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="204">The sensor capabilities, i.e. things the sensor can do.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="230"/>
      <member name="unknown" value="0" c:identifier="CD_SENSOR_CAP_UNKNOWN">
      </member>
      <member name="lcd" value="1" c:identifier="CD_SENSOR_CAP_LCD">
      </member>
      <member name="crt" value="2" c:identifier="CD_SENSOR_CAP_CRT">
      </member>
      <member name="printer" value="3" c:identifier="CD_SENSOR_CAP_PRINTER">
      </member>
      <member name="spot" value="4" c:identifier="CD_SENSOR_CAP_SPOT">
      </member>
      <member name="projector"
              value="5"
              c:identifier="CD_SENSOR_CAP_PROJECTOR">
      </member>
      <member name="ambient" value="6" c:identifier="CD_SENSOR_CAP_AMBIENT">
      </member>
      <member name="calibration"
              value="7"
              c:identifier="CD_SENSOR_CAP_CALIBRATION">
      </member>
      <member name="led" value="8" c:identifier="CD_SENSOR_CAP_LED">
      </member>
      <member name="plasma" value="9" c:identifier="CD_SENSOR_CAP_PLASMA">
      </member>
      <member name="lcd_ccfl" value="10" c:identifier="CD_SENSOR_CAP_LCD_CCFL">
      </member>
      <member name="lcd_rgb_led"
              value="11"
              c:identifier="CD_SENSOR_CAP_LCD_RGB_LED">
      </member>
      <member name="lcd_white_led"
              value="12"
              c:identifier="CD_SENSOR_CAP_LCD_WHITE_LED">
      </member>
      <member name="wide_gamut_lcd_ccfl"
              value="13"
              c:identifier="CD_SENSOR_CAP_WIDE_GAMUT_LCD_CCFL">
      </member>
      <member name="wide_gamut_lcd_rgb_led"
              value="14"
              c:identifier="CD_SENSOR_CAP_WIDE_GAMUT_LCD_RGB_LED">
      </member>
      <member name="spectral" value="15" c:identifier="CD_SENSOR_CAP_SPECTRAL">
      </member>
      <member name="calibration_dark"
              value="16"
              c:identifier="CD_SENSOR_CAP_CALIBRATION_DARK">
      </member>
      <member name="calibration_irradiance"
              value="17"
              c:identifier="CD_SENSOR_CAP_CALIBRATION_IRRADIANCE">
      </member>
    </enumeration>
    <record name="SensorClass"
            c:type="CdSensorClass"
            glib:is-gtype-struct-for="Sensor">
      <source-position filename="lib/colord/cd-sensor.h" line="58"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="button_pressed">
        <callback name="button_pressed">
          <source-position filename="lib/colord/cd-sensor.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sensor" transfer-ownership="none">
              <type name="Sensor" c:type="CdSensor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_cd_sensor_reserved1" introspectable="0">
        <callback name="_cd_sensor_reserved1">
          <source-position filename="lib/colord/cd-sensor.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_sensor_reserved2" introspectable="0">
        <callback name="_cd_sensor_reserved2">
          <source-position filename="lib/colord/cd-sensor.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_sensor_reserved3" introspectable="0">
        <callback name="_cd_sensor_reserved3">
          <source-position filename="lib/colord/cd-sensor.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_sensor_reserved4" introspectable="0">
        <callback name="_cd_sensor_reserved4">
          <source-position filename="lib/colord/cd-sensor.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_sensor_reserved5" introspectable="0">
        <callback name="_cd_sensor_reserved5">
          <source-position filename="lib/colord/cd-sensor.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_sensor_reserved6" introspectable="0">
        <callback name="_cd_sensor_reserved6">
          <source-position filename="lib/colord/cd-sensor.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_sensor_reserved7" introspectable="0">
        <callback name="_cd_sensor_reserved7">
          <source-position filename="lib/colord/cd-sensor.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_cd_sensor_reserved8" introspectable="0">
        <callback name="_cd_sensor_reserved8">
          <source-position filename="lib/colord/cd-sensor.h" line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="SensorError" version="0.1.26" c:type="CdSensorError">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="314">The sensor error code.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="346"/>
      <member name="no_support"
              value="0"
              c:identifier="CD_SENSOR_ERROR_NO_SUPPORT">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="316">This action is unsupported on this hardware</doc>
      </member>
      <member name="no_data" value="1" c:identifier="CD_SENSOR_ERROR_NO_DATA">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="317">The sensor provided no data</doc>
      </member>
      <member name="internal"
              value="2"
              c:identifier="CD_SENSOR_ERROR_INTERNAL">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="318">An internal error occurred</doc>
      </member>
      <member name="already_locked"
              value="3"
              c:identifier="CD_SENSOR_ERROR_ALREADY_LOCKED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="319">The sensor is already locked</doc>
      </member>
      <member name="not_locked"
              value="4"
              c:identifier="CD_SENSOR_ERROR_NOT_LOCKED">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="320">The sensor is not locked</doc>
      </member>
      <member name="in_use" value="5" c:identifier="CD_SENSOR_ERROR_IN_USE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="321">The sensor is already in use</doc>
      </member>
      <member name="failed_to_authenticate"
              value="6"
              c:identifier="CD_SENSOR_ERROR_FAILED_TO_AUTHENTICATE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="322">Authentication failed</doc>
      </member>
      <member name="required_position_calibrate"
              value="7"
              c:identifier="CD_SENSOR_ERROR_REQUIRED_POSITION_CALIBRATE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="323">The sensor needs to be in the calibrate position</doc>
      </member>
      <member name="required_position_surface"
              value="8"
              c:identifier="CD_SENSOR_ERROR_REQUIRED_POSITION_SURFACE">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="324">The sensor needs to be in the surface position</doc>
      </member>
      <member name="required_dark_calibration"
              value="9"
              c:identifier="CD_SENSOR_ERROR_REQUIRED_DARK_CALIBRATION">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="325">The sensor needs dark calibration</doc>
      </member>
      <member name="required_irradiance_calibration"
              value="10"
              c:identifier="CD_SENSOR_ERROR_REQUIRED_IRRADIANCE_CALIBRATION">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.h"
             line="326">The sensor needs irradiance calibration</doc>
      </member>
    </enumeration>
    <enumeration name="SensorKind" c:type="CdSensorKind">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="163">The sensor type.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="199"/>
      <member name="unknown" value="0" c:identifier="CD_SENSOR_KIND_UNKNOWN">
      </member>
      <member name="dummy" value="1" c:identifier="CD_SENSOR_KIND_DUMMY">
      </member>
      <member name="huey" value="2" c:identifier="CD_SENSOR_KIND_HUEY">
      </member>
      <member name="color_munki_photo"
              value="3"
              c:identifier="CD_SENSOR_KIND_COLOR_MUNKI_PHOTO">
      </member>
      <member name="spyder" value="4" c:identifier="CD_SENSOR_KIND_SPYDER">
      </member>
      <member name="dtp20" value="5" c:identifier="CD_SENSOR_KIND_DTP20">
      </member>
      <member name="dtp22" value="6" c:identifier="CD_SENSOR_KIND_DTP22">
      </member>
      <member name="dtp41" value="7" c:identifier="CD_SENSOR_KIND_DTP41">
      </member>
      <member name="dtp51" value="8" c:identifier="CD_SENSOR_KIND_DTP51">
      </member>
      <member name="dtp94" value="9" c:identifier="CD_SENSOR_KIND_DTP94">
      </member>
      <member name="spectro_scan"
              value="10"
              c:identifier="CD_SENSOR_KIND_SPECTRO_SCAN">
      </member>
      <member name="i1_pro" value="11" c:identifier="CD_SENSOR_KIND_I1_PRO">
      </member>
      <member name="colorimtre_hcfr"
              value="12"
              c:identifier="CD_SENSOR_KIND_COLORIMTRE_HCFR">
      </member>
      <member name="i1_display3"
              value="13"
              c:identifier="CD_SENSOR_KIND_I1_DISPLAY3">
      </member>
      <member name="colorhug"
              value="14"
              c:identifier="CD_SENSOR_KIND_COLORHUG">
      </member>
      <member name="spyder2" value="15" c:identifier="CD_SENSOR_KIND_SPYDER2">
      </member>
      <member name="spyder3" value="16" c:identifier="CD_SENSOR_KIND_SPYDER3">
      </member>
      <member name="colorhug_plus"
              value="17"
              c:identifier="CD_SENSOR_KIND_COLORHUG_PLUS">
      </member>
      <member name="i1_display1"
              value="18"
              c:identifier="CD_SENSOR_KIND_I1_DISPLAY1">
      </member>
      <member name="i1_display2"
              value="19"
              c:identifier="CD_SENSOR_KIND_I1_DISPLAY2">
      </member>
      <member name="dtp92" value="20" c:identifier="CD_SENSOR_KIND_DTP92">
      </member>
      <member name="i1_monitor"
              value="21"
              c:identifier="CD_SENSOR_KIND_I1_MONITOR">
      </member>
      <member name="spyder4" value="22" c:identifier="CD_SENSOR_KIND_SPYDER4">
      </member>
      <member name="color_munki_smile"
              value="23"
              c:identifier="CD_SENSOR_KIND_COLOR_MUNKI_SMILE">
      </member>
      <member name="colorhug2"
              value="24"
              c:identifier="CD_SENSOR_KIND_COLORHUG2">
      </member>
      <member name="spyder5" value="25" c:identifier="CD_SENSOR_KIND_SPYDER5">
      </member>
      <member name="spark" value="26" c:identifier="CD_SENSOR_KIND_SPARK">
      </member>
      <member name="spyderx" value="27" c:identifier="CD_SENSOR_KIND_SPYDERX">
      </member>
    </enumeration>
    <enumeration name="SensorState" c:type="CdSensorState">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="232">The state of the sensor.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="245"/>
      <member name="unknown" value="0" c:identifier="CD_SENSOR_STATE_UNKNOWN">
      </member>
      <member name="starting"
              value="1"
              c:identifier="CD_SENSOR_STATE_STARTING">
      </member>
      <member name="idle" value="2" c:identifier="CD_SENSOR_STATE_IDLE">
      </member>
      <member name="measuring"
              value="3"
              c:identifier="CD_SENSOR_STATE_MEASURING">
      </member>
      <member name="busy" value="4" c:identifier="CD_SENSOR_STATE_BUSY">
      </member>
    </enumeration>
    <record name="Spectrum"
            c:type="CdSpectrum"
            opaque="1"
            glib:type-name="CdSpectrum"
            glib:get-type="cd_spectrum_get_type"
            c:symbol-prefix="spectrum">
      <source-position filename="lib/colord/cd-spectrum.h" line="33"/>
      <constructor name="new" c:identifier="cd_spectrum_new" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="349">Allocates a spectrum.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="354">A newly allocated #CdSpectrum object</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
      </constructor>
      <constructor name="planckian_new"
                   c:identifier="cd_spectrum_planckian_new"
                   version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="439">Allocates a Planckian spectrum at a specific temperature.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="445">A newly allocated #CdSpectrum object</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <parameter name="temperature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="441">the temperature in Kelvin</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="planckian_new_full"
                   c:identifier="cd_spectrum_planckian_new_full"
                   version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="391">Allocates a Planckian spectrum at a specific temperature.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="400">A newly allocated #CdSpectrum object</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <parameter name="temperature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="393">the temperature in Kelvin</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="394">the new spectrum start</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="395">the new spectrum end</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="resolution" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="396">the resolution to use when resampling</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="sized_new"
                   c:identifier="cd_spectrum_sized_new"
                   version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="369">Allocates a spectrum with a preallocated size.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="375">A newly allocated #CdSpectrum object</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <parameter name="reserved_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="371">the future size of the spectrum</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_value"
              c:identifier="cd_spectrum_add_value"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="455">Adds a value in nm to the spectrum.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="457">the spectrum</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="cd_spectrum_dup" version="1.1.6">
        <source-position filename="lib/colord/cd-spectrum.h" line="46"/>
        <return-value transfer-ownership="full">
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="51">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="cd_spectrum_free" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="470">Deallocates a color spectrum.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="472">the spectrum</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="cd_spectrum_get_data"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="242">Gets the spectral data.
NOTE: This is not normalized</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="249">spectral data</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gdouble"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="244">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end"
              c:identifier="cd_spectrum_get_end"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="277">Gets the end value of the spectral data.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="283">the value in nm</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="279">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="cd_spectrum_get_id" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="78">Gets the spectral data.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="84">the textual ID of the sample</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="80">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_norm"
              c:identifier="cd_spectrum_get_norm"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="294">Gets the normalization value of the spectral data.
NOTE: This affects every value in the spectrum.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="301">the value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="296">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resolution"
              c:identifier="cd_spectrum_get_resolution"
              version="1.2.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="312">Gets the divisor of the spectra, for instance a .</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="318">the value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="314">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="cd_spectrum_get_size"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="225">Gets the size of the spectrum data.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="231">number of data items in this spectrum</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="227">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start"
              c:identifier="cd_spectrum_get_start"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="260">Gets the start value of the spectral data.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="266">the value in nm</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="262">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="cd_spectrum_get_value"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="95">Gets the spectrum data at a specified index.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="102">spectral data value, or -1 for invalid</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="97">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="98">an index into the data</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_for_nm"
              c:identifier="cd_spectrum_get_value_for_nm"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="586">Gets the value from the spectral data for a given wavelength.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="593">the value for the wavelength</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="588">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
          <parameter name="wavelength" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="589">the wavelength in nm</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_max"
              c:identifier="cd_spectrum_get_value_max"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="114">Gets the largest normalised value in the spectrum.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="116">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_min"
              c:identifier="cd_spectrum_get_value_min"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="132">Gets the smallest normalised value in the spectrum.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="134">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_raw"
              c:identifier="cd_spectrum_get_value_raw"
              version="1.2.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="168">Gets the spectrum data at a specified index, without any normalization
applied. Most people should use cd_spectrum_get_value() instead.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="176">spectral data value, or -1 for invalid</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="170">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="171">an index into the data</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_wavelength"
              c:identifier="cd_spectrum_get_wavelength"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="188">Gets the wavelenth that corresponds to the specified index.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="195">wavelenth value in nm, or -1 for invalid</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="190">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="const CdSpectrum*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="191">an index into the data</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_wavelength_cal"
              c:identifier="cd_spectrum_get_wavelength_cal"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="918">Gets the calibration coefficients used to map pixel indexes to
wavelengths.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="920">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="c1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="921">the 1st coefficient</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="c2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="922">the 2nd coefficient</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="c3" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="923">the 3rd coefficient</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="limit_max"
              c:identifier="cd_spectrum_limit_max"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="651">Ensures no values in the spectrum fall above a set limit. If they
are found, set them to @value.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="653">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="654">the threshold value to limit the spectrum</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="limit_min"
              c:identifier="cd_spectrum_limit_min"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="629">Ensures no values in the spectrum fall below a set limit. If they
are found, set them to @value.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="631">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="632">the threshold value to limit the spectrum</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="multiply"
              c:identifier="cd_spectrum_multiply"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="716">Multiplies two spectra together.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="724">a #CdSpectrum instance</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="718">a #CdSpectrum instance, possibly an illuminant.</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="s2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="719">a #CdSpectrum instance, possibly an absorption spectrum.</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </parameter>
          <parameter name="resolution" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="720">the step size in nm</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="multiply_scalar"
              c:identifier="cd_spectrum_multiply_scalar"
              version="1.3.5">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="745">Multiplies a spectra with a scalar value.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="752">a #CdSpectrum instance</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="747">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="748">a scalar value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="normalize"
              c:identifier="cd_spectrum_normalize"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="673">Normalizes a spectrum to a specific value at a specific wavelength.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="675">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="wavelength" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="676">the wavelength in nm</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="677">the value to normalize to</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="normalize_max"
              c:identifier="cd_spectrum_normalize_max"
              version="1.2.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="691">Normalizes a spectrum to a specific value at its maximum value.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="693">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="694">the value to normalize to</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="resample"
              c:identifier="cd_spectrum_resample"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="942">Resample a new spectrum with linear index to wavelength coefficients.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="951">a #CdSpectrum instance</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="944">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="945">the new spectrum start</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="946">the new spectrum end</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="resolution" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="947">the resolution to use when resampling</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="resample_to_size"
              c:identifier="cd_spectrum_resample_to_size"
              version="1.3.4">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="975">Resample a new spectrum with the desired number of points.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="982">a #CdSpectrum instance</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="977">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="978">the output spectrum size</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data"
              c:identifier="cd_spectrum_set_data"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="506">Sets the spectrum data.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="508">the destination spectrum</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="509">component value</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_end"
              c:identifier="cd_spectrum_set_end"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="540">Set the end value of the spectal data in nm.

If there is already spectral data, the wavelength calibration will
also be set automatically.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="542">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="543">the end value of the spectral data</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="cd_spectrum_set_id" version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="488">Sets a spectrum id.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="490">the destination spectrum</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="491">component id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_norm"
              c:identifier="cd_spectrum_set_norm"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="569">Set the normalization value of the spectrum.
NOTE: This affects every value in the spectrum.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="571">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="norm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="572">the end value of the spectral data</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start"
              c:identifier="cd_spectrum_set_start"
              version="1.1.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="524">Set the start value of the spectal data in nm.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="526">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="527">the start value of the spectral data</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="cd_spectrum_set_value"
              version="1.2.6">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="150">Overwrites the spectrum data at a specified index.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="152">a #CdSpectrum instance.</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="153">an index into the data</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="154">a data value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wavelength_cal"
              c:identifier="cd_spectrum_set_wavelength_cal"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="890">Sets the calibration coefficients used to map pixel indexes to
wavelengths.

This function will set the 'end' wavelength automatically,
potentially overwriting the value set by cd_spectrum_set_end().</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="892">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="c1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="893">the 1st coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="c2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="894">the 2nd coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="c3" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="895">the 3rd coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="subtract"
              c:identifier="cd_spectrum_subtract"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="765">Subtracts one spectral plot from another. If the spectra have the same start,
end and the same number of data points they are not resampled.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="774">a #CdSpectrum instance</doc>
          <type name="Spectrum" c:type="CdSpectrum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="767">a #CdSpectrum instance, e.g. a sample</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="s2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="768">a #CdSpectrum instance, e.g. a dark calibration</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </parameter>
          <parameter name="resolution" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="769">the resolution to use when resampling</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="cd_spectrum_to_string"
              version="1.3.1">
        <doc xml:space="preserve"
             filename="lib/colord/cd-spectrum.c"
             line="824">Returns a graphical representation of the spectrum.</doc>
        <source-position filename="lib/colord/cd-spectrum.h" line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-spectrum.c"
               line="832">a printable ASCII string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="spectrum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="826">a #CdSpectrum instance</doc>
            <type name="Spectrum" c:type="CdSpectrum*"/>
          </instance-parameter>
          <parameter name="max_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="827">the terminal width</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="max_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-spectrum.c"
                 line="828">the terminal height</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="StandardSpace" c:type="CdStandardSpace">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.h"
           line="247">A standard colorspace</doc>
      <source-position filename="lib/colord/cd-enum.h" line="259"/>
      <member name="unknown"
              value="0"
              c:identifier="CD_STANDARD_SPACE_UNKNOWN">
      </member>
      <member name="srgb" value="1" c:identifier="CD_STANDARD_SPACE_SRGB">
      </member>
      <member name="adobe_rgb"
              value="2"
              c:identifier="CD_STANDARD_SPACE_ADOBE_RGB">
      </member>
      <member name="prophoto_rgb"
              value="3"
              c:identifier="CD_STANDARD_SPACE_PROPHOTO_RGB">
      </member>
    </enumeration>
    <record name="Vec3" c:type="CdVec3">
      <source-position filename="lib/colord/cd-math.h" line="37"/>
      <field name="v0" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="v1" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="v2" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <method name="add" c:identifier="cd_vec3_add">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="102">Adds two vector quantaties
The arguments @src and @dest can be the same value.</doc>
        <source-position filename="lib/colord/cd-math.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="104">the source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </instance-parameter>
          <parameter name="src2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="105">the other source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="106">the destination</doc>
            <type name="Vec3" c:type="CdVec3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="cd_vec3_clear">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="37">Clears a vector, setting all it's values to zero.</doc>
        <source-position filename="lib/colord/cd-math.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="39">the source vector</doc>
            <type name="Vec3" c:type="CdVec3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="cd_vec3_copy">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="87">Copies the vector into another vector.
The arguments @src and @dest cannot be the same value.</doc>
        <source-position filename="lib/colord/cd-math.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="89">the source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="90">the destination</doc>
            <type name="Vec3" c:type="CdVec3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="cd_vec3_get_data">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="153">Gets the raw data for the vector.</doc>
        <source-position filename="lib/colord/cd-math.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="159">the pointer to the data segment.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="155">the vector source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="cd_vec3_init">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="51">Initialises a vector.</doc>
        <source-position filename="lib/colord/cd-math.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="53">the destination vector</doc>
            <type name="Vec3" c:type="CdVec3*"/>
          </instance-parameter>
          <parameter name="v0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="54">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="v1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="55">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="v2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="56">component value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="scalar_multiply" c:identifier="cd_vec3_scalar_multiply">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="70">Multiplies a vector with a scalar.
The arguments @src and @dest can be the same value.</doc>
        <source-position filename="lib/colord/cd-math.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="72">the source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="73">the scalar multiplier</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="74">the destination</doc>
            <type name="Vec3" c:type="CdVec3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="squared_error" c:identifier="cd_vec3_squared_error">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="167">Gets the mean squared error for a pair of vectors</doc>
        <source-position filename="lib/colord/cd-math.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="174">the floating point MSE.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="src1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="169">the vector source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </instance-parameter>
          <parameter name="src2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="170">another vector source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="subtract" c:identifier="cd_vec3_subtract">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="119">Subtracts one vector quantity from another
The arguments @src and @dest can be the same value.</doc>
        <source-position filename="lib/colord/cd-math.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="121">the source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </instance-parameter>
          <parameter name="src2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="122">the other source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="123">the destination</doc>
            <type name="Vec3" c:type="CdVec3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="cd_vec3_to_string">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="136">Obtains a string representaton of a vector.</doc>
        <source-position filename="lib/colord/cd-math.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="142">the string. Free with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/colord/cd-math.c"
                 line="138">the source</doc>
            <type name="Vec3" c:type="const CdVec3*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="bitfield_add"
                    c:identifier="cd_bitfield_add"
                    introspectable="0">
      <source-position filename="lib/colord/cd-enum.h" line="537"/>
      <parameters>
        <parameter name="bitfield">
        </parameter>
        <parameter name="tmp">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="bitfield_contain"
                    c:identifier="cd_bitfield_contain"
                    introspectable="0">
      <source-position filename="lib/colord/cd-enum.h" line="539"/>
      <parameters>
        <parameter name="bitfield">
        </parameter>
        <parameter name="tmp">
        </parameter>
      </parameters>
    </function-macro>
    <function name="bitfield_from_enums"
              c:identifier="cd_bitfield_from_enums"
              version="0.1.26"
              introspectable="0">
      <source-position filename="lib/colord/cd-enum.h" line="542"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="910">The return bitfield, or 0 if invalid</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="908">the values we want to add to the bitfield</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="bitfield_remove"
                    c:identifier="cd_bitfield_remove"
                    introspectable="0">
      <source-position filename="lib/colord/cd-enum.h" line="538"/>
      <parameters>
        <parameter name="bitfield">
        </parameter>
        <parameter name="tmp">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="bitfield_value"
                    c:identifier="cd_bitfield_value"
                    introspectable="0">
      <source-position filename="lib/colord/cd-enum.h" line="540"/>
      <parameters>
        <parameter name="tmp">
        </parameter>
      </parameters>
    </function-macro>
    <docsection name="cd-client">
      <doc xml:space="preserve"
           filename="lib/colord/cd-client.c"
           line="22">A helper GObject to use for accessing colord information, and to be notified
when it is changed.

See also: #CdDevice</doc>
    </docsection>
    <docsection name="cd-client-sync">
      <doc xml:space="preserve"
           filename="lib/colord/cd-client-sync.c"
           line="22">These helper functions provide a simple way to use the async functions
in command line tools.

See also: #CdClient</doc>
    </docsection>
    <docsection name="cd-color">
      <doc xml:space="preserve"
           filename="lib/colord/cd-color.c"
           line="22">Functions to manipulate color values.</doc>
    </docsection>
    <docsection name="cd-device">
      <doc xml:space="preserve"
           filename="lib/colord/cd-device.c"
           line="22">A helper GObject to use for accessing colord devices, and to be notified
when it is changed.

See also: #CdClient</doc>
    </docsection>
    <docsection name="cd-device-sync">
      <doc xml:space="preserve"
           filename="lib/colord/cd-device-sync.c"
           line="22">These helper functions provide a simple way to use the async functions
in command line tools.

See also: #CdDevice</doc>
    </docsection>
    <docsection name="cd-it8">
      <doc xml:space="preserve"
           filename="lib/colord/cd-it8.c"
           line="22">This object represents .ti1 and .ti3 files which can contain raw
or normalized sample data.</doc>
    </docsection>
    <docsection name="cd-math">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="22">A GObject to use for common maths functionality like vectors and matrices.</doc>
    </docsection>
    <docsection name="cd-profile">
      <doc xml:space="preserve"
           filename="lib/colord/cd-profile.c"
           line="22">A helper GObject to use for accessing colord profiles, and to be notified
when it is changed.

See also: #CdClient</doc>
    </docsection>
    <docsection name="cd-profile-sync">
      <doc xml:space="preserve"
           filename="lib/colord/cd-profile-sync.c"
           line="22">These helper functions provide a simple way to use the async functions
in command line tools.

See also: #CdProfile</doc>
    </docsection>
    <docsection name="cd-sensor">
      <doc xml:space="preserve"
           filename="lib/colord/cd-sensor.c"
           line="22">A helper GObject to use for accessing colord sensors, and to be notified
when it is changed.

See also: #CdClient</doc>
    </docsection>
    <docsection name="cd-sensor-sync">
      <doc xml:space="preserve"
           filename="lib/colord/cd-sensor-sync.c"
           line="22">These helper functions provide a simple way to use the async functions
in command line tools.

See also: #CdSensor</doc>
    </docsection>
    <docsection name="cd-spectrum">
      <doc xml:space="preserve"
           filename="lib/colord/cd-spectrum.c"
           line="22">Functions to manipulate spectral values.</doc>
    </docsection>
    <docsection name="cd-types">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.c"
           line="22">These helper functions provide a way to marshal enumerated values to
text and back again.

See also: #CdClient, #CdDevice</doc>
    </docsection>
    <function name="color_get_blackbody_rgb"
              c:identifier="cd_color_get_blackbody_rgb"
              version="0.1.26">
      <doc xml:space="preserve"
           filename="lib/colord/cd-color.c"
           line="1490">Get the blackbody color for a specific temperature. If the temperature
range is outside 1000K to 10000K then the result is clipped.</doc>
      <source-position filename="lib/colord/cd-color.h" line="188"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1498">TRUE if @temp was in range and the result accurate</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="temp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1492">the temperature in Kelvin</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1493">the destination color</doc>
          <type name="ColorRGB" c:type="CdColorRGB*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_get_blackbody_rgb_full"
              c:identifier="cd_color_get_blackbody_rgb_full"
              version="1.3.5">
      <doc xml:space="preserve"
           filename="lib/colord/cd-color.c"
           line="1428">Get the blackbody color for a specific temperature. If the temperature
range is outside 1000K to 10000K then the result is clipped.</doc>
      <source-position filename="lib/colord/cd-color.h" line="190"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1437">TRUE if @temp was in range and the result accurate</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="temp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1430">the temperature in Kelvin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1431">the destination color</doc>
          <type name="ColorRGB" c:type="CdColorRGB*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1432">some #CdColorBlackbodyFlags, e.g. %CD_COLOR_BLACKBODY_FLAG_USE_PLANCKIAN</doc>
          <type name="ColorBlackbodyFlags" c:type="CdColorBlackbodyFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_rgb8_to_rgb"
              c:identifier="cd_color_rgb8_to_rgb"
              version="0.1.27">
      <doc xml:space="preserve"
           filename="lib/colord/cd-color.c"
           line="743">Convert from one color format to another.</doc>
      <source-position filename="lib/colord/cd-color.h" line="171"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="745">the source color</doc>
          <type name="ColorRGB8" c:type="const CdColorRGB8*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="746">the destination color</doc>
          <type name="ColorRGB" c:type="CdColorRGB*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_rgb_array_interpolate"
              c:identifier="cd_color_rgb_array_interpolate"
              moved-to="ColorRGB.array_interpolate"
              version="0.1.31">
      <doc xml:space="preserve"
           filename="lib/colord/cd-color.c"
           line="1339">Interpolate the RGB array to a different size.
This uses the Akima interpolation algorithm unless the array would become
non-monotonic, in which case it falls back to linear interpolation.</doc>
      <source-position filename="lib/colord/cd-color.h" line="206"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1348">An array of size @new_length or %NULL</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="ColorRGB"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1341">Input array</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="ColorRGB"/>
          </array>
        </parameter>
        <parameter name="new_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1342">the target length of the return array</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_rgb_array_is_monotonic"
              c:identifier="cd_color_rgb_array_is_monotonic"
              moved-to="ColorRGB.array_is_monotonic"
              version="0.1.31">
      <doc xml:space="preserve"
           filename="lib/colord/cd-color.c"
           line="1290">Checks the array for monotonicity.</doc>
      <source-position filename="lib/colord/cd-color.h" line="205"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1296">%TRUE if the array is monotonic</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-color.c"
               line="1292">Input array</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="ColorRGB"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="color_rgb_array_new"
              c:identifier="cd_color_rgb_array_new"
              moved-to="ColorRGB.array_new"
              version="0.1.31">
      <doc xml:space="preserve"
           filename="lib/colord/cd-color.c"
           line="1324">Creates a new RGB array.</doc>
      <source-position filename="lib/colord/cd-color.h" line="204"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/colord/cd-color.c"
             line="1329">New array</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="ColorRGB"/>
        </array>
      </return-value>
    </function>
    <function name="colorspace_from_string"
              c:identifier="cd_colorspace_from_string">
      <source-position filename="lib/colord/cd-enum.h" line="552"/>
      <return-value transfer-ownership="none">
        <type name="Colorspace" c:type="CdColorspace"/>
      </return-value>
      <parameters>
        <parameter name="colorspace" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="colorspace_to_string"
              c:identifier="cd_colorspace_to_string">
      <source-position filename="lib/colord/cd-enum.h" line="551"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="colorspace" transfer-ownership="none">
          <type name="Colorspace" c:type="CdColorspace"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_clear" c:identifier="cd_mat33_clear">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="220">Clears a matrix value, setting all it's values to zero.</doc>
      <source-position filename="lib/colord/cd-math.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="222">the source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_copy" c:identifier="cd_mat33_copy">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="442">Copies the matrix.
The arguments @src and @dest cannot be the same value.</doc>
      <source-position filename="lib/colord/cd-math.h" line="89"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="444">the source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="445">the destination</doc>
          <type name="Mat3x3" c:type="CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_determinant" c:identifier="cd_mat33_determinant">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="283">Gets the determinant of the matrix.</doc>
      <source-position filename="lib/colord/cd-math.h" line="85"/>
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="285">the source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_get_data" c:identifier="cd_mat33_get_data">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="254">Gets the raw data for the matrix.</doc>
      <source-position filename="lib/colord/cd-math.h" line="72"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="260">the pointer to the data segment.</doc>
        <type name="gdouble" c:type="gdouble*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="256">the matrix source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_init" c:identifier="cd_mat33_init">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="186">Initialises a matrix.</doc>
      <source-position filename="lib/colord/cd-math.h" line="60"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="188">the destination matrix</doc>
          <type name="Mat3x3" c:type="CdMat3x3*"/>
        </parameter>
        <parameter name="m00" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="189">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="m01" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="190">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="m02" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="191">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="m10" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="192">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="m11" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="193">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="m12" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="194">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="m20" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="195">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="m21" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="196">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="m22" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="197">component value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_is_finite"
              c:identifier="cd_mat33_is_finite"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="457">Determine whether all entries in the specified matrix are finite and not
NaNs.</doc>
      <source-position filename="lib/colord/cd-math.h" line="91"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="465">%TRUE if isfinite() returns %TRUE for all values.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mat" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="459">the matrix to test</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_matrix_multiply"
              c:identifier="cd_mat33_matrix_multiply">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="372">Multiply (convolve) one matrix with another.
The arguments @mat_src1 cannot be the same as @mat_dest, and
@mat_src2 cannot be the same as @mat_dest.</doc>
      <source-position filename="lib/colord/cd-math.h" line="80"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mat_src1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="374">the matrix source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
        <parameter name="mat_src2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="375">the other matrix source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
        <parameter name="mat_dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="376">the destination</doc>
          <type name="Mat3x3" c:type="CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_normalize" c:identifier="cd_mat33_normalize">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="300">Normalizes a matrix

The arguments @src and @dest can be the same value.</doc>
      <source-position filename="lib/colord/cd-math.h" line="87"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="302">the source matrix</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="303">the destination matrix</doc>
          <type name="Mat3x3" c:type="CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_reciprocal" c:identifier="cd_mat33_reciprocal">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="402">Inverts the matrix.
The arguments @src and @dest cannot be the same value.</doc>
      <source-position filename="lib/colord/cd-math.h" line="83"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="410">%FALSE if det is zero (singular).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="404">the source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="405">the destination</doc>
          <type name="Mat3x3" c:type="CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_scalar_multiply"
              c:identifier="cd_mat33_scalar_multiply">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="349">Multiplies a matrix with a scalar.
The arguments @vec_src and @vec_dest can be the same value.</doc>
      <source-position filename="lib/colord/cd-math.h" line="74"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mat_src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="351">the source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="352">the scalar</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="mat_dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="353">the destination</doc>
          <type name="Mat3x3" c:type="CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_set_identity" c:identifier="cd_mat33_set_identity">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="268">Sets the matrix to an identity value.</doc>
      <source-position filename="lib/colord/cd-math.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="270">the source</doc>
          <type name="Mat3x3" c:type="CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_to_string" c:identifier="cd_mat33_to_string">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="235">Obtains a string representaton of a matrix.</doc>
      <source-position filename="lib/colord/cd-math.h" line="71"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/colord/cd-math.c"
             line="241">the string. Free with g_free()</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="237">the source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mat33_vector_multiply"
              c:identifier="cd_mat33_vector_multiply">
      <doc xml:space="preserve"
           filename="lib/colord/cd-math.c"
           line="325">Multiplies a matrix with a vector.
The arguments @vec_src and @vec_dest cannot be the same value.</doc>
      <source-position filename="lib/colord/cd-math.h" line="77"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mat_src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="327">the matrix source</doc>
          <type name="Mat3x3" c:type="const CdMat3x3*"/>
        </parameter>
        <parameter name="vec_src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="328">the vector source</doc>
          <type name="Vec3" c:type="const CdVec3*"/>
        </parameter>
        <parameter name="vec_dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-math.c"
               line="329">the destination vector</doc>
          <type name="Vec3" c:type="CdVec3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_scope_from_string"
              c:identifier="cd_object_scope_from_string">
      <source-position filename="lib/colord/cd-enum.h" line="558"/>
      <return-value transfer-ownership="none">
        <type name="ObjectScope" c:type="CdObjectScope"/>
      </return-value>
      <parameters>
        <parameter name="object_scope" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_scope_to_string"
              c:identifier="cd_object_scope_to_string">
      <source-position filename="lib/colord/cd-enum.h" line="557"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="object_scope" transfer-ownership="none">
          <type name="ObjectScope" c:type="CdObjectScope"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixel_format_from_string"
              c:identifier="cd_pixel_format_from_string">
      <source-position filename="lib/colord/cd-enum.h" line="549"/>
      <return-value transfer-ownership="none">
        <type name="PixelFormat" c:type="CdPixelFormat"/>
      </return-value>
      <parameters>
        <parameter name="pixel_format" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixel_format_to_string"
              c:identifier="cd_pixel_format_to_string">
      <source-position filename="lib/colord/cd-enum.h" line="550"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="pixel_format" transfer-ownership="none">
          <type name="PixelFormat" c:type="CdPixelFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="rendering_intent_from_string"
              c:identifier="cd_rendering_intent_from_string">
      <source-position filename="lib/colord/cd-enum.h" line="547"/>
      <return-value transfer-ownership="none">
        <type name="RenderingIntent" c:type="CdRenderingIntent"/>
      </return-value>
      <parameters>
        <parameter name="rendering_intent" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rendering_intent_to_string"
              c:identifier="cd_rendering_intent_to_string">
      <source-position filename="lib/colord/cd-enum.h" line="548"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="rendering_intent" transfer-ownership="none">
          <type name="RenderingIntent" c:type="CdRenderingIntent"/>
        </parameter>
      </parameters>
    </function>
    <function name="standard_space_from_string"
              c:identifier="cd_standard_space_from_string">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.c"
           line="533">Gets the standard colorspace as a enumerated value.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="566"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="539">a #CdStandardSpace</doc>
        <type name="StandardSpace" c:type="CdStandardSpace"/>
      </return-value>
      <parameters>
        <parameter name="standard_space" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="535">the standard colorspace, e.g. 'srgb'.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="standard_space_to_string"
              c:identifier="cd_standard_space_to_string">
      <doc xml:space="preserve"
           filename="lib/colord/cd-enum.c"
           line="519">Gets the standard colorspace as a string.</doc>
      <source-position filename="lib/colord/cd-enum.h" line="565"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/colord/cd-enum.c"
             line="525">the standard colorspace, e.g. 'srgb'.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="standard_space" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/colord/cd-enum.c"
               line="521">a #CdStandardSpace</doc>
          <type name="StandardSpace" c:type="CdStandardSpace"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
